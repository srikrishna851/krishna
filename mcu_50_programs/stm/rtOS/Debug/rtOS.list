
rtOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d20  08003d20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d28  08003d28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ee4  20000070  08003da0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f54  08003da0  00022f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d33d  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002507  00000000  00000000  0002d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0002f928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a99  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b789  00000000  00000000  00031191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004c9d  00000000  00000000  0003c91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003e9c  00000000  00000000  000415b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000047  00000000  00000000  00045454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003ca8 	.word	0x08003ca8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003ca8 	.word	0x08003ca8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fb23 	bl	8000b5c <HAL_Init>
  		BaseType_t status;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f845 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f8ad 	bl	8000678 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  	  status=xTaskCreate(task1_handler,"Task-1", 200,"Hello world from Task-1" , 2, &task1_handle);
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2302      	movs	r3, #2
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <main+0x80>)
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	4918      	ldr	r1, [pc, #96]	; (8000590 <main+0x84>)
 800052e:	4819      	ldr	r0, [pc, #100]	; (8000594 <main+0x88>)
 8000530:	f001 ff15 	bl	800235e <xTaskCreate>
 8000534:	6178      	str	r0, [r7, #20]
    	  configASSERT(status== pdPASS);
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d00a      	beq.n	8000552 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000540:	f383 8811 	msr	BASEPRI, r3
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	f3bf 8f4f 	dsb	sy
 800054c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800054e:	bf00      	nop
 8000550:	e7fe      	b.n	8000550 <main+0x44>

    	  status=xTaskCreate(task2_handler,"Task-2", 200,"Hello world from Task-2" , 2, &task2_handle);
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <main+0x8c>)
 800055c:	22c8      	movs	r2, #200	; 0xc8
 800055e:	490f      	ldr	r1, [pc, #60]	; (800059c <main+0x90>)
 8000560:	480f      	ldr	r0, [pc, #60]	; (80005a0 <main+0x94>)
 8000562:	f001 fefc 	bl	800235e <xTaskCreate>
 8000566:	6178      	str	r0, [r7, #20]
    	  configASSERT(status== pdPASS);
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d00a      	beq.n	8000584 <main+0x78>
        __asm volatile
 800056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000572:	f383 8811 	msr	BASEPRI, r3
 8000576:	f3bf 8f6f 	isb	sy
 800057a:	f3bf 8f4f 	dsb	sy
 800057e:	60fb      	str	r3, [r7, #12]
    }
 8000580:	bf00      	nop
 8000582:	e7fe      	b.n	8000582 <main+0x76>


    	  vTaskStartScheduler();
 8000584:	f002 f830 	bl	80025e8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x7c>
 800058a:	bf00      	nop
 800058c:	08003cc0 	.word	0x08003cc0
 8000590:	08003cd8 	.word	0x08003cd8
 8000594:	08000775 	.word	0x08000775
 8000598:	08003ce0 	.word	0x08003ce0
 800059c:	08003cf8 	.word	0x08003cf8
 80005a0:	08000785 	.word	0x08000785

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 f8c4 	bl	8003740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000614:	2310      	movs	r3, #16
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000622:	2304      	movs	r3, #4
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8d0 	bl	80017d0 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000636:	f000 f8bf 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd52 	bl	8001100 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f8a9 	bl	80007b8 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_GPIO_Init+0xf0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a34      	ldr	r2, [pc, #208]	; (8000768 <MX_GPIO_Init+0xf0>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a26      	ldr	r2, [pc, #152]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_GPIO_Init+0xf0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	481a      	ldr	r0, [pc, #104]	; (800076c <MX_GPIO_Init+0xf4>)
 8000704:	f000 fce2 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4814      	ldr	r0, [pc, #80]	; (8000770 <MX_GPIO_Init+0xf8>)
 8000720:	f000 fb40 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000724:	230c      	movs	r3, #12
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000734:	2307      	movs	r3, #7
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_GPIO_Init+0xf4>)
 8000740:	f000 fb30 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000744:	2320      	movs	r3, #32
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xf4>)
 800075c:	f000 fb22 	bl	8000da4 <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	40020800 	.word	0x40020800

08000774 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n",(char*)parameters);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f002 feff 	bl	8003580 <puts>
 8000782:	e7fb      	b.n	800077c <task1_handler+0x8>

08000784 <task2_handler>:
	}
}


static void task2_handler(void * parameters)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

	while(1)
		{
		printf("%s\n",(char*)parameters);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f002 fef7 	bl	8003580 <puts>
 8000792:	e7fb      	b.n	800078c <task2_handler+0x8>

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 f9fb 	bl	8000ba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40000c00 	.word	0x40000c00

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <HAL_InitTick+0xe4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a32      	ldr	r2, [pc, #200]	; (80008f8 <HAL_InitTick+0xe4>)
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <HAL_InitTick+0xe4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000840:	f107 0210 	add.w	r2, r7, #16
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fd5e 	bl	800130c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d103      	bne.n	8000862 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800085a:	f000 fd43 	bl	80012e4 <HAL_RCC_GetPCLK1Freq>
 800085e:	6378      	str	r0, [r7, #52]	; 0x34
 8000860:	e004      	b.n	800086c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000862:	f000 fd3f 	bl	80012e4 <HAL_RCC_GetPCLK1Freq>
 8000866:	4603      	mov	r3, r0
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <HAL_InitTick+0xe8>)
 8000870:	fba2 2303 	umull	r2, r3, r2, r3
 8000874:	0c9b      	lsrs	r3, r3, #18
 8000876:	3b01      	subs	r3, #1
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_InitTick+0xec>)
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <HAL_InitTick+0xf0>)
 800087e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <HAL_InitTick+0xec>)
 8000882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000886:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_InitTick+0xec>)
 800088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_InitTick+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <HAL_InitTick+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_InitTick+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80008a0:	4817      	ldr	r0, [pc, #92]	; (8000900 <HAL_InitTick+0xec>)
 80008a2:	f001 fa33 	bl	8001d0c <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d11b      	bne.n	80008ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80008b4:	4812      	ldr	r0, [pc, #72]	; (8000900 <HAL_InitTick+0xec>)
 80008b6:	f001 fa83 	bl	8001dc0 <HAL_TIM_Base_Start_IT>
 80008ba:	4603      	mov	r3, r0
 80008bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d111      	bne.n	80008ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008c8:	201d      	movs	r0, #29
 80008ca:	f000 fa5d 	bl	8000d88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d808      	bhi.n	80008e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	201d      	movs	r0, #29
 80008da:	f000 fa39 	bl	8000d50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_InitTick+0xf4>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	e002      	b.n	80008ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3738      	adds	r7, #56	; 0x38
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	2000008c 	.word	0x2000008c
 8000904:	40000400 	.word	0x40000400
 8000908:	20000004 	.word	0x20000004

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <TIM3_IRQHandler+0x10>)
 800093e:	f001 faaf 	bl	8001ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000008c 	.word	0x2000008c

0800094c <ITM_SendChar>:
#define ITM_TRACE_EN          	*((volatile uint32_t *) 0xE0000E00 )


/* Functions */
void ITM_SendChar(uint8_t ch)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <ITM_SendChar+0x48>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <ITM_SendChar+0x48>)
 800095c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000960:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <ITM_SendChar+0x4c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <ITM_SendChar+0x4c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800096e:	bf00      	nop
 8000970:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f8      	beq.n	8000970 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800097e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	6013      	str	r3, [r2, #0]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000edfc 	.word	0xe000edfc
 8000998:	e0000e00 	.word	0xe0000e00

0800099c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e00a      	b.n	80009c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	4601      	mov	r1, r0
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <_read+0x12>
  }

  return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e009      	b.n	80009fc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffab 	bl	800094c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf1      	blt.n	80009e8 <_write+0x12>
  }
  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_close>:

int _close(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a36:	605a      	str	r2, [r3, #4]
  return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f002 fe98 	bl	80037dc <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20020000 	.word	0x20020000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	200000d4 	.word	0x200000d4
 8000ae0:	20012f58 	.word	0x20012f58

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 fe57 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fce7 	bl	800050c <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b4c:	08003d30 	.word	0x08003d30
  ldr r2, =_sbss
 8000b50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b54:	20012f54 	.word	0x20012f54

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_Init+0x40>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_Init+0x40>)
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x40>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f8d8 	bl	8000d3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f7ff fe42 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fe18 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	200000d8 	.word	0x200000d8

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200000d8 	.word	0x200000d8

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0b      	blt.n	8000c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	4907      	ldr	r1, [pc, #28]	; (8000c7c <__NVIC_EnableIRQ+0x38>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	; (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff4c 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d62:	f7ff ff61 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000d66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	6978      	ldr	r0, [r7, #20]
 8000d6e:	f7ff ffb1 	bl	8000cd4 <NVIC_EncodePriority>
 8000d72:	4602      	mov	r2, r0
 8000d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff80 	bl	8000c80 <__NVIC_SetPriority>
}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff54 	bl	8000c44 <__NVIC_EnableIRQ>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	e165      	b.n	800108c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8154 	bne.w	8001086 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d005      	beq.n	8000df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d130      	bne.n	8000e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	f003 0201 	and.w	r2, r3, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d017      	beq.n	8000e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d123      	bne.n	8000ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	69b9      	ldr	r1, [r7, #24]
 8000ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0203 	and.w	r2, r3, #3
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80ae 	beq.w	8001086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b5d      	ldr	r3, [pc, #372]	; (80010a4 <HAL_GPIO_Init+0x300>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a5c      	ldr	r2, [pc, #368]	; (80010a4 <HAL_GPIO_Init+0x300>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b5a      	ldr	r3, [pc, #360]	; (80010a4 <HAL_GPIO_Init+0x300>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f46:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <HAL_GPIO_Init+0x304>)
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <HAL_GPIO_Init+0x308>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d025      	beq.n	8000fbe <HAL_GPIO_Init+0x21a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4e      	ldr	r2, [pc, #312]	; (80010b0 <HAL_GPIO_Init+0x30c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01f      	beq.n	8000fba <HAL_GPIO_Init+0x216>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4d      	ldr	r2, [pc, #308]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x212>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x314>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x20e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4b      	ldr	r2, [pc, #300]	; (80010bc <HAL_GPIO_Init+0x318>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x20a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <HAL_GPIO_Init+0x31c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x206>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a49      	ldr	r2, [pc, #292]	; (80010c4 <HAL_GPIO_Init+0x320>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x202>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00c      	b.n	8000fc0 <HAL_GPIO_Init+0x21c>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00a      	b.n	8000fc0 <HAL_GPIO_Init+0x21c>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x21c>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x21c>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x21c>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x21c>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x21c>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd0:	4935      	ldr	r1, [pc, #212]	; (80010a8 <HAL_GPIO_Init+0x304>)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x324>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800102c:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <HAL_GPIO_Init+0x324>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_GPIO_Init+0x324>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001080:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	f67f ae96 	bls.w	8000dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40013800 	.word	0x40013800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40021400 	.word	0x40021400
 80010c4:	40021800 	.word	0x40021800
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0cc      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d90c      	bls.n	800113c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b65      	ldr	r3, [pc, #404]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0b8      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001154:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800115e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	494d      	ldr	r1, [pc, #308]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d044      	beq.n	8001220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d119      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e07f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d003      	beq.n	80011be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e06f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e067      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 0203 	bic.w	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4934      	ldr	r1, [pc, #208]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fcea 	bl	8000bc8 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	e00a      	b.n	800120e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f7ff fce6 	bl	8000bc8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	; 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e04f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 020c 	and.w	r2, r3, #12
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	429a      	cmp	r2, r3
 800121e:	d1eb      	bne.n	80011f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20c      	bcs.n	8001248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e032      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4916      	ldr	r1, [pc, #88]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	490e      	ldr	r1, [pc, #56]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001286:	f000 f873 	bl	8001370 <HAL_RCC_GetSysClockFreq>
 800128a:	4602      	mov	r2, r0
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	490a      	ldr	r1, [pc, #40]	; (80012c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	fa22 f303 	lsr.w	r3, r2, r3
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fab4 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00
 80012bc:	40023800 	.word	0x40023800
 80012c0:	08003d08 	.word	0x08003d08
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000

080012e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012e8:	f7ff fff0 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	0a9b      	lsrs	r3, r3, #10
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	4903      	ldr	r1, [pc, #12]	; (8001308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	08003d18 	.word	0x08003d18

0800130c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	220f      	movs	r2, #15
 800131a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_RCC_GetClockConfig+0x60>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 020f 	and.w	r2, r3, #15
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40023c00 	.word	0x40023c00

08001370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001374:	b0ae      	sub	sp, #184	; 0xb8
 8001376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001396:	4bcb      	ldr	r3, [pc, #812]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	f200 8206 	bhi.w	80017b0 <HAL_RCC_GetSysClockFreq+0x440>
 80013a4:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80013a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013aa:	bf00      	nop
 80013ac:	080013e1 	.word	0x080013e1
 80013b0:	080017b1 	.word	0x080017b1
 80013b4:	080017b1 	.word	0x080017b1
 80013b8:	080017b1 	.word	0x080017b1
 80013bc:	080013e9 	.word	0x080013e9
 80013c0:	080017b1 	.word	0x080017b1
 80013c4:	080017b1 	.word	0x080017b1
 80013c8:	080017b1 	.word	0x080017b1
 80013cc:	080013f1 	.word	0x080013f1
 80013d0:	080017b1 	.word	0x080017b1
 80013d4:	080017b1 	.word	0x080017b1
 80013d8:	080017b1 	.word	0x080017b1
 80013dc:	080015e1 	.word	0x080015e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013e0:	4bb9      	ldr	r3, [pc, #740]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80013e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013e6:	e1e7      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013e8:	4bb8      	ldr	r3, [pc, #736]	; (80016cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013ee:	e1e3      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f0:	4bb4      	ldr	r3, [pc, #720]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013fc:	4bb1      	ldr	r3, [pc, #708]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d071      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001408:	4bae      	ldr	r3, [pc, #696]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	2200      	movs	r2, #0
 8001410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001414:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800141c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800142a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800142e:	4622      	mov	r2, r4
 8001430:	462b      	mov	r3, r5
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f04f 0100 	mov.w	r1, #0
 800143a:	0159      	lsls	r1, r3, #5
 800143c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001440:	0150      	lsls	r0, r2, #5
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4621      	mov	r1, r4
 8001448:	1a51      	subs	r1, r2, r1
 800144a:	6439      	str	r1, [r7, #64]	; 0x40
 800144c:	4629      	mov	r1, r5
 800144e:	eb63 0301 	sbc.w	r3, r3, r1
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001460:	4649      	mov	r1, r9
 8001462:	018b      	lsls	r3, r1, #6
 8001464:	4641      	mov	r1, r8
 8001466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800146a:	4641      	mov	r1, r8
 800146c:	018a      	lsls	r2, r1, #6
 800146e:	4641      	mov	r1, r8
 8001470:	1a51      	subs	r1, r2, r1
 8001472:	63b9      	str	r1, [r7, #56]	; 0x38
 8001474:	4649      	mov	r1, r9
 8001476:	eb63 0301 	sbc.w	r3, r3, r1
 800147a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001488:	4649      	mov	r1, r9
 800148a:	00cb      	lsls	r3, r1, #3
 800148c:	4641      	mov	r1, r8
 800148e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001492:	4641      	mov	r1, r8
 8001494:	00ca      	lsls	r2, r1, #3
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	4603      	mov	r3, r0
 800149c:	4622      	mov	r2, r4
 800149e:	189b      	adds	r3, r3, r2
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
 80014a2:	462b      	mov	r3, r5
 80014a4:	460a      	mov	r2, r1
 80014a6:	eb42 0303 	adc.w	r3, r2, r3
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014b8:	4629      	mov	r1, r5
 80014ba:	024b      	lsls	r3, r1, #9
 80014bc:	4621      	mov	r1, r4
 80014be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014c2:	4621      	mov	r1, r4
 80014c4:	024a      	lsls	r2, r1, #9
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014ce:	2200      	movs	r2, #0
 80014d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014dc:	f7fe fe98 	bl	8000210 <__aeabi_uldivmod>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4613      	mov	r3, r2
 80014e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014ea:	e067      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ec:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	2200      	movs	r2, #0
 80014f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014f8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001504:	67bb      	str	r3, [r7, #120]	; 0x78
 8001506:	2300      	movs	r3, #0
 8001508:	67fb      	str	r3, [r7, #124]	; 0x7c
 800150a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800150e:	4622      	mov	r2, r4
 8001510:	462b      	mov	r3, r5
 8001512:	f04f 0000 	mov.w	r0, #0
 8001516:	f04f 0100 	mov.w	r1, #0
 800151a:	0159      	lsls	r1, r3, #5
 800151c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001520:	0150      	lsls	r0, r2, #5
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4621      	mov	r1, r4
 8001528:	1a51      	subs	r1, r2, r1
 800152a:	62b9      	str	r1, [r7, #40]	; 0x28
 800152c:	4629      	mov	r1, r5
 800152e:	eb63 0301 	sbc.w	r3, r3, r1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001540:	4649      	mov	r1, r9
 8001542:	018b      	lsls	r3, r1, #6
 8001544:	4641      	mov	r1, r8
 8001546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800154a:	4641      	mov	r1, r8
 800154c:	018a      	lsls	r2, r1, #6
 800154e:	4641      	mov	r1, r8
 8001550:	ebb2 0a01 	subs.w	sl, r2, r1
 8001554:	4649      	mov	r1, r9
 8001556:	eb63 0b01 	sbc.w	fp, r3, r1
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001566:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800156a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800156e:	4692      	mov	sl, r2
 8001570:	469b      	mov	fp, r3
 8001572:	4623      	mov	r3, r4
 8001574:	eb1a 0303 	adds.w	r3, sl, r3
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	462b      	mov	r3, r5
 800157c:	eb4b 0303 	adc.w	r3, fp, r3
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800158e:	4629      	mov	r1, r5
 8001590:	028b      	lsls	r3, r1, #10
 8001592:	4621      	mov	r1, r4
 8001594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001598:	4621      	mov	r1, r4
 800159a:	028a      	lsls	r2, r1, #10
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015a4:	2200      	movs	r2, #0
 80015a6:	673b      	str	r3, [r7, #112]	; 0x70
 80015a8:	677a      	str	r2, [r7, #116]	; 0x74
 80015aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015ae:	f7fe fe2f 	bl	8000210 <__aeabi_uldivmod>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4613      	mov	r3, r2
 80015b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015bc:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	3301      	adds	r3, #1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015de:	e0eb      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d06b      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	2200      	movs	r2, #0
 8001600:	66bb      	str	r3, [r7, #104]	; 0x68
 8001602:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800160a:	663b      	str	r3, [r7, #96]	; 0x60
 800160c:	2300      	movs	r3, #0
 800160e:	667b      	str	r3, [r7, #100]	; 0x64
 8001610:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001614:	4622      	mov	r2, r4
 8001616:	462b      	mov	r3, r5
 8001618:	f04f 0000 	mov.w	r0, #0
 800161c:	f04f 0100 	mov.w	r1, #0
 8001620:	0159      	lsls	r1, r3, #5
 8001622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001626:	0150      	lsls	r0, r2, #5
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4621      	mov	r1, r4
 800162e:	1a51      	subs	r1, r2, r1
 8001630:	61b9      	str	r1, [r7, #24]
 8001632:	4629      	mov	r1, r5
 8001634:	eb63 0301 	sbc.w	r3, r3, r1
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001646:	4659      	mov	r1, fp
 8001648:	018b      	lsls	r3, r1, #6
 800164a:	4651      	mov	r1, sl
 800164c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001650:	4651      	mov	r1, sl
 8001652:	018a      	lsls	r2, r1, #6
 8001654:	4651      	mov	r1, sl
 8001656:	ebb2 0801 	subs.w	r8, r2, r1
 800165a:	4659      	mov	r1, fp
 800165c:	eb63 0901 	sbc.w	r9, r3, r1
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800166c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001670:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001674:	4690      	mov	r8, r2
 8001676:	4699      	mov	r9, r3
 8001678:	4623      	mov	r3, r4
 800167a:	eb18 0303 	adds.w	r3, r8, r3
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	462b      	mov	r3, r5
 8001682:	eb49 0303 	adc.w	r3, r9, r3
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001694:	4629      	mov	r1, r5
 8001696:	024b      	lsls	r3, r1, #9
 8001698:	4621      	mov	r1, r4
 800169a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800169e:	4621      	mov	r1, r4
 80016a0:	024a      	lsls	r2, r1, #9
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016aa:	2200      	movs	r2, #0
 80016ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80016ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016b4:	f7fe fdac 	bl	8000210 <__aeabi_uldivmod>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4613      	mov	r3, r2
 80016be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016c2:	e065      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x420>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	2200      	movs	r2, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	4611      	mov	r1, r2
 80016dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016e0:	653b      	str	r3, [r7, #80]	; 0x50
 80016e2:	2300      	movs	r3, #0
 80016e4:	657b      	str	r3, [r7, #84]	; 0x54
 80016e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016ea:	4642      	mov	r2, r8
 80016ec:	464b      	mov	r3, r9
 80016ee:	f04f 0000 	mov.w	r0, #0
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	0159      	lsls	r1, r3, #5
 80016f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016fc:	0150      	lsls	r0, r2, #5
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4641      	mov	r1, r8
 8001704:	1a51      	subs	r1, r2, r1
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	4649      	mov	r1, r9
 800170a:	eb63 0301 	sbc.w	r3, r3, r1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800171c:	4659      	mov	r1, fp
 800171e:	018b      	lsls	r3, r1, #6
 8001720:	4651      	mov	r1, sl
 8001722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001726:	4651      	mov	r1, sl
 8001728:	018a      	lsls	r2, r1, #6
 800172a:	4651      	mov	r1, sl
 800172c:	1a54      	subs	r4, r2, r1
 800172e:	4659      	mov	r1, fp
 8001730:	eb63 0501 	sbc.w	r5, r3, r1
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	00eb      	lsls	r3, r5, #3
 800173e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001742:	00e2      	lsls	r2, r4, #3
 8001744:	4614      	mov	r4, r2
 8001746:	461d      	mov	r5, r3
 8001748:	4643      	mov	r3, r8
 800174a:	18e3      	adds	r3, r4, r3
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	464b      	mov	r3, r9
 8001750:	eb45 0303 	adc.w	r3, r5, r3
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001762:	4629      	mov	r1, r5
 8001764:	028b      	lsls	r3, r1, #10
 8001766:	4621      	mov	r1, r4
 8001768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800176c:	4621      	mov	r1, r4
 800176e:	028a      	lsls	r2, r1, #10
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001778:	2200      	movs	r2, #0
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
 800177c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800177e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001782:	f7fe fd45 	bl	8000210 <__aeabi_uldivmod>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4613      	mov	r3, r2
 800178c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	0f1b      	lsrs	r3, r3, #28
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800179e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ae:	e003      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	37b8      	adds	r7, #184	; 0xb8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	00f42400 	.word	0x00f42400

080017d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e28d      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8083 	beq.w	80018f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f0:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d019      	beq.n	8001830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fc:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001804:	2b08      	cmp	r3, #8
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001808:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001814:	d00c      	beq.n	8001830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d112      	bne.n	8001848 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800182e:	d10b      	bne.n	8001848 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d05b      	beq.n	80018f4 <HAL_RCC_OscConfig+0x124>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d157      	bne.n	80018f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e25a      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x90>
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e01d      	b.n	800189c <HAL_RCC_OscConfig+0xcc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0xb4>
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0xcc>
 8001884:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800188a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6b      	ldr	r2, [pc, #428]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f990 	bl	8000bc8 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff f98c 	bl	8000bc8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e21f      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0xdc>
 80018ca:	e014      	b.n	80018f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff f97c 	bl	8000bc8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff f978 	bl	8000bc8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e20b      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x104>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d06f      	beq.n	80019e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001902:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b00      	cmp	r3, #0
 800190c:	d017      	beq.n	800193e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190e:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001916:	2b08      	cmp	r3, #8
 8001918:	d105      	bne.n	8001926 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800191a:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d11c      	bne.n	800196c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d116      	bne.n	800196c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x186>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e1d3      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	e03a      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001974:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff f925 	bl	8000bc8 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff f921 	bl	8000bc8 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1b4      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4925      	ldr	r1, [pc, #148]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f904 	bl	8000bc8 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff f900 	bl	8000bc8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e193      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d036      	beq.n	8001a5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d016      	beq.n	8001a24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_RCC_OscConfig+0x27c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f8e4 	bl	8000bc8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff f8e0 	bl	8000bc8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e173      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x234>
 8001a22:	e01b      	b.n	8001a5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_OscConfig+0x27c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f8cd 	bl	8000bc8 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	e00e      	b.n	8001a50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff f8c9 	bl	8000bc8 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d907      	bls.n	8001a50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e15c      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	42470000 	.word	0x42470000
 8001a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	4b8a      	ldr	r3, [pc, #552]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ea      	bne.n	8001a32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8097 	beq.w	8001b98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b83      	ldr	r3, [pc, #524]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a7e      	ldr	r2, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b79      	ldr	r3, [pc, #484]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b76      	ldr	r3, [pc, #472]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a75      	ldr	r2, [pc, #468]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f889 	bl	8000bc8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff f885 	bl	8000bc8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e118      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b6c      	ldr	r3, [pc, #432]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x31e>
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
 8001aec:	e01c      	b.n	8001b28 <HAL_RCC_OscConfig+0x358>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x340>
 8001af6:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a60      	ldr	r2, [pc, #384]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	4b5e      	ldr	r3, [pc, #376]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a5d      	ldr	r2, [pc, #372]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0x358>
 8001b10:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	f023 0304 	bic.w	r3, r3, #4
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d015      	beq.n	8001b5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f84a 	bl	8000bc8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff f846 	bl	8000bc8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0d7      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0ee      	beq.n	8001b38 <HAL_RCC_OscConfig+0x368>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f834 	bl	8000bc8 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff f830 	bl	8000bc8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0c1      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ee      	bne.n	8001b64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80ad 	beq.w	8001cfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d060      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d145      	bne.n	8001c42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_RCC_OscConfig+0x4b4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f804 	bl	8000bc8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f800 	bl	8000bc8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e093      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	019b      	lsls	r3, r3, #6
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	085b      	lsrs	r3, r3, #1
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	071b      	lsls	r3, r3, #28
 8001c0e:	491b      	ldr	r1, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x4b4>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7fe ffd5 	bl	8000bc8 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c22:	f7fe ffd1 	bl	8000bc8 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e064      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x452>
 8001c40:	e05c      	b.n	8001cfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_OscConfig+0x4b4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7fe ffbe 	bl	8000bc8 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c50:	f7fe ffba 	bl	8000bc8 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e04d      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x480>
 8001c6e:	e045      	b.n	8001cfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e040      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_RCC_OscConfig+0x538>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d030      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d129      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d122      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d119      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e041      	b.n	8001da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f839 	bl	8001daa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f000 f9d8 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d001      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e04e      	b.n	8001e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d022      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e02:	d01d      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d018      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00e      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d009      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d004      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d111      	bne.n	8001e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d010      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e62:	e007      	b.n	8001e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40000c00 	.word	0x40000c00
 8001e94:	40010400 	.word	0x40010400
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	40001800 	.word	0x40001800

08001ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0202 	mvn.w	r2, #2
 8001ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8ee 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8e0 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8f1 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d122      	bne.n	8001f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d11b      	bne.n	8001f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0204 	mvn.w	r2, #4
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8c4 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8b6 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8c7 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d122      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0208 	mvn.w	r2, #8
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f89a 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f88c 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f89d 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0210 	mvn.w	r2, #16
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f870 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f862 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f873 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d107      	bne.n	8002024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0201 	mvn.w	r2, #1
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fbb8 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b80      	cmp	r3, #128	; 0x80
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b80      	cmp	r3, #128	; 0x80
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f902 	bl	8002254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f838 	bl	80020ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b20      	cmp	r3, #32
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0220 	mvn.w	r2, #32
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8cc 	bl	8002240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <TIM_Base_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d00f      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <TIM_Base_SetConfig+0x118>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00b      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3c      	ldr	r2, [pc, #240]	; (800221c <TIM_Base_SetConfig+0x11c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <TIM_Base_SetConfig+0x120>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <TIM_Base_SetConfig+0x124>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <TIM_Base_SetConfig+0x114>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d027      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2c      	ldr	r2, [pc, #176]	; (8002218 <TIM_Base_SetConfig+0x118>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d023      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2b      	ldr	r2, [pc, #172]	; (800221c <TIM_Base_SetConfig+0x11c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <TIM_Base_SetConfig+0x120>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a29      	ldr	r2, [pc, #164]	; (8002224 <TIM_Base_SetConfig+0x124>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <TIM_Base_SetConfig+0x128>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <TIM_Base_SetConfig+0x12c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <TIM_Base_SetConfig+0x130>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <TIM_Base_SetConfig+0x134>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <TIM_Base_SetConfig+0x138>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <TIM_Base_SetConfig+0x13c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <TIM_Base_SetConfig+0x114>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0xf8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <TIM_Base_SetConfig+0x124>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	615a      	str	r2, [r3, #20]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	40000400 	.word	0x40000400
 800221c:	40000800 	.word	0x40000800
 8002220:	40000c00 	.word	0x40000c00
 8002224:	40010400 	.word	0x40010400
 8002228:	40014000 	.word	0x40014000
 800222c:	40014400 	.word	0x40014400
 8002230:	40014800 	.word	0x40014800
 8002234:	40001800 	.word	0x40001800
 8002238:	40001c00 	.word	0x40001c00
 800223c:	40002000 	.word	0x40002000

08002240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f103 0208 	add.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002280:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f103 0208 	add.w	r2, r3, #8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0208 	add.w	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6852      	ldr	r2, [r2, #4]
 800232a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d103      	bne.n	800233e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800235e:	b580      	push	{r7, lr}
 8002360:	b08c      	sub	sp, #48	; 0x30
 8002362:	af04      	add	r7, sp, #16
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fe02 	bl	8002f7c <pvPortMalloc>
 8002378:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002380:	2058      	movs	r0, #88	; 0x58
 8002382:	f000 fdfb 	bl	8002f7c <pvPortMalloc>
 8002386:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	e005      	b.n	80023a2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f000 fed0 	bl	800313c <vPortFree>
 800239c:	e001      	b.n	80023a2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	2300      	movs	r3, #0
 80023ac:	9303      	str	r3, [sp, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f80e 	bl	80023e0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023c4:	69f8      	ldr	r0, [r7, #28]
 80023c6:	f000 f8a1 	bl	800250c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e002      	b.n	80023d6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023d6:	69bb      	ldr	r3, [r7, #24]
    }
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	461a      	mov	r2, r3
 80023f8:	21a5      	movs	r1, #165	; 0xa5
 80023fa:	f001 f9a1 	bl	8003740 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002408:	3b01      	subs	r3, #1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f023 0307 	bic.w	r3, r3, #7
 8002416:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	617b      	str	r3, [r7, #20]
    }
 8002434:	bf00      	nop
 8002436:	e7fe      	b.n	8002436 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01f      	beq.n	800247e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e012      	b.n	800246a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4413      	add	r3, r2
 800244a:	7819      	ldrb	r1, [r3, #0]
 800244c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	4413      	add	r3, r2
 8002452:	3334      	adds	r3, #52	; 0x34
 8002454:	460a      	mov	r2, r1
 8002456:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3301      	adds	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2b09      	cmp	r3, #9
 800246e:	d9e9      	bls.n	8002444 <prvInitialiseNewTask+0x64>
 8002470:	e000      	b.n	8002474 <prvInitialiseNewTask+0x94>
            {
                break;
 8002472:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800247c:	e003      	b.n	8002486 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	2b04      	cmp	r3, #4
 800248a:	d901      	bls.n	8002490 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800248c:	2304      	movs	r3, #4
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	2200      	movs	r2, #0
 80024a0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	3304      	adds	r3, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fefe 	bl	80022a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	3318      	adds	r3, #24
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fef9 	bl	80022a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	f1c3 0205 	rsb	r2, r3, #5
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	3350      	adds	r3, #80	; 0x50
 80024d0:	2204      	movs	r2, #4
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 f933 	bl	8003740 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	3354      	adds	r3, #84	; 0x54
 80024de:	2201      	movs	r2, #1
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 f92c 	bl	8003740 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	68f9      	ldr	r1, [r7, #12]
 80024ec:	69b8      	ldr	r0, [r7, #24]
 80024ee:	f000 fb37 	bl	8002b60 <pxPortInitialiseStack>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002502:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002504:	bf00      	nop
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002514:	f000 fc50 	bl	8002db8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002518:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <prvAddNewTaskToReadyList+0xc0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <prvAddNewTaskToReadyList+0xc0>)
 8002520:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <prvAddNewTaskToReadyList+0xc4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800252a:	4a29      	ldr	r2, [pc, #164]	; (80025d0 <prvAddNewTaskToReadyList+0xc4>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <prvAddNewTaskToReadyList+0xc0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d110      	bne.n	800255a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002538:	f000 fa78 	bl	8002a2c <prvInitialiseTaskLists>
 800253c:	e00d      	b.n	800255a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <prvAddNewTaskToReadyList+0xc8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <prvAddNewTaskToReadyList+0xc4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	429a      	cmp	r2, r3
 8002552:	d802      	bhi.n	800255a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <prvAddNewTaskToReadyList+0xc4>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800255a:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <prvAddNewTaskToReadyList+0xcc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <prvAddNewTaskToReadyList+0xcc>)
 8002562:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <prvAddNewTaskToReadyList+0xcc>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	2201      	movs	r2, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <prvAddNewTaskToReadyList+0xd0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	4a18      	ldr	r2, [pc, #96]	; (80025dc <prvAddNewTaskToReadyList+0xd0>)
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <prvAddNewTaskToReadyList+0xd4>)
 800258c:	441a      	add	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f7ff fe94 	bl	80022c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800259a:	f000 fc3d 	bl	8002e18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <prvAddNewTaskToReadyList+0xc8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00e      	beq.n	80025c4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <prvAddNewTaskToReadyList+0xc4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <prvAddNewTaskToReadyList+0xd8>)
 80025b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200001b4 	.word	0x200001b4
 80025d0:	200000dc 	.word	0x200000dc
 80025d4:	200001c0 	.word	0x200001c0
 80025d8:	200001d0 	.word	0x200001d0
 80025dc:	200001bc 	.word	0x200001bc
 80025e0:	200000e0 	.word	0x200000e0
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <vTaskStartScheduler+0x7c>)
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	2300      	movs	r3, #0
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2300      	movs	r3, #0
 80025f8:	2282      	movs	r2, #130	; 0x82
 80025fa:	491b      	ldr	r1, [pc, #108]	; (8002668 <vTaskStartScheduler+0x80>)
 80025fc:	481b      	ldr	r0, [pc, #108]	; (800266c <vTaskStartScheduler+0x84>)
 80025fe:	f7ff feae 	bl	800235e <xTaskCreate>
 8002602:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d116      	bne.n	8002638 <vTaskStartScheduler+0x50>
        __asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	60bb      	str	r3, [r7, #8]
    }
 800261c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <vTaskStartScheduler+0x88>)
 8002620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002624:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <vTaskStartScheduler+0x8c>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <vTaskStartScheduler+0x90>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002632:	f000 fb1f 	bl	8002c74 <xPortStartScheduler>
 8002636:	e00e      	b.n	8002656 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263e:	d10a      	bne.n	8002656 <vTaskStartScheduler+0x6e>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	607b      	str	r3, [r7, #4]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <vTaskStartScheduler+0x94>)
 8002658:	681b      	ldr	r3, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200001d8 	.word	0x200001d8
 8002668:	08003d00 	.word	0x08003d00
 800266c:	080029fd 	.word	0x080029fd
 8002670:	200001d4 	.word	0x200001d4
 8002674:	200001c0 	.word	0x200001c0
 8002678:	200001b8 	.word	0x200001b8
 800267c:	2000000c 	.word	0x2000000c

08002680 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <vTaskSuspendAll+0x18>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	4a03      	ldr	r2, [pc, #12]	; (8002698 <vTaskSuspendAll+0x18>)
 800268c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	200001dc 	.word	0x200001dc

0800269c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <xTaskResumeAll+0x114>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	603b      	str	r3, [r7, #0]
    }
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026c8:	f000 fb76 	bl	8002db8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <xTaskResumeAll+0x114>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <xTaskResumeAll+0x114>)
 80026d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <xTaskResumeAll+0x114>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d161      	bne.n	80027a2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026de:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <xTaskResumeAll+0x118>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d05d      	beq.n	80027a2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026e6:	e02e      	b.n	8002746 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026e8:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <xTaskResumeAll+0x11c>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3318      	adds	r3, #24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fe08 	bl	800230a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3304      	adds	r3, #4
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fe03 	bl	800230a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2201      	movs	r2, #1
 800270a:	409a      	lsls	r2, r3
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <xTaskResumeAll+0x120>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4313      	orrs	r3, r2
 8002712:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <xTaskResumeAll+0x120>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <xTaskResumeAll+0x124>)
 8002724:	441a      	add	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3304      	adds	r3, #4
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7ff fdc8 	bl	80022c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <xTaskResumeAll+0x128>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	429a      	cmp	r2, r3
 800273e:	d302      	bcc.n	8002746 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <xTaskResumeAll+0x12c>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <xTaskResumeAll+0x11c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1cc      	bne.n	80026e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002754:	f000 f9e8 	bl	8002b28 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <xTaskResumeAll+0x130>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002764:	f000 f836 	bl	80027d4 <xTaskIncrementTick>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <xTaskResumeAll+0x12c>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f1      	bne.n	8002764 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <xTaskResumeAll+0x130>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <xTaskResumeAll+0x12c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800278e:	2301      	movs	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <xTaskResumeAll+0x134>)
 8002794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80027a2:	f000 fb39 	bl	8002e18 <vPortExitCritical>

    return xAlreadyYielded;
 80027a6:	68bb      	ldr	r3, [r7, #8]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200001dc 	.word	0x200001dc
 80027b4:	200001b4 	.word	0x200001b4
 80027b8:	20000174 	.word	0x20000174
 80027bc:	200001bc 	.word	0x200001bc
 80027c0:	200000e0 	.word	0x200000e0
 80027c4:	200000dc 	.word	0x200000dc
 80027c8:	200001c8 	.word	0x200001c8
 80027cc:	200001c4 	.word	0x200001c4
 80027d0:	e000ed04 	.word	0xe000ed04

080027d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027de:	4b4e      	ldr	r3, [pc, #312]	; (8002918 <xTaskIncrementTick+0x144>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 808e 	bne.w	8002904 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027e8:	4b4c      	ldr	r3, [pc, #304]	; (800291c <xTaskIncrementTick+0x148>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027f0:	4a4a      	ldr	r2, [pc, #296]	; (800291c <xTaskIncrementTick+0x148>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d120      	bne.n	800283e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027fc:	4b48      	ldr	r3, [pc, #288]	; (8002920 <xTaskIncrementTick+0x14c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <xTaskIncrementTick+0x48>
        __asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	603b      	str	r3, [r7, #0]
    }
 8002818:	bf00      	nop
 800281a:	e7fe      	b.n	800281a <xTaskIncrementTick+0x46>
 800281c:	4b40      	ldr	r3, [pc, #256]	; (8002920 <xTaskIncrementTick+0x14c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <xTaskIncrementTick+0x150>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a3e      	ldr	r2, [pc, #248]	; (8002920 <xTaskIncrementTick+0x14c>)
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4a3e      	ldr	r2, [pc, #248]	; (8002924 <xTaskIncrementTick+0x150>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <xTaskIncrementTick+0x154>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <xTaskIncrementTick+0x154>)
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	f000 f975 	bl	8002b28 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <xTaskIncrementTick+0x158>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d348      	bcc.n	80028da <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <xTaskIncrementTick+0x14c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <xTaskIncrementTick+0x158>)
 8002854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002858:	601a      	str	r2, [r3, #0]
                    break;
 800285a:	e03e      	b.n	80028da <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <xTaskIncrementTick+0x14c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d203      	bcs.n	800287c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002874:	4a2d      	ldr	r2, [pc, #180]	; (800292c <xTaskIncrementTick+0x158>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800287a:	e02e      	b.n	80028da <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3304      	adds	r3, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fd42 	bl	800230a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3318      	adds	r3, #24
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fd39 	bl	800230a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2201      	movs	r2, #1
 800289e:	409a      	lsls	r2, r3
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <xTaskIncrementTick+0x15c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	4a22      	ldr	r2, [pc, #136]	; (8002930 <xTaskIncrementTick+0x15c>)
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <xTaskIncrementTick+0x160>)
 80028b8:	441a      	add	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3304      	adds	r3, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f7ff fcfe 	bl	80022c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <xTaskIncrementTick+0x164>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3b9      	bcc.n	8002848 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028d8:	e7b6      	b.n	8002848 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <xTaskIncrementTick+0x164>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	4914      	ldr	r1, [pc, #80]	; (8002934 <xTaskIncrementTick+0x160>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d901      	bls.n	80028f6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <xTaskIncrementTick+0x168>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80028fe:	2301      	movs	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e004      	b.n	800290e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <xTaskIncrementTick+0x16c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <xTaskIncrementTick+0x16c>)
 800290c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800290e:	697b      	ldr	r3, [r7, #20]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	200001dc 	.word	0x200001dc
 800291c:	200001b8 	.word	0x200001b8
 8002920:	2000016c 	.word	0x2000016c
 8002924:	20000170 	.word	0x20000170
 8002928:	200001cc 	.word	0x200001cc
 800292c:	200001d4 	.word	0x200001d4
 8002930:	200001bc 	.word	0x200001bc
 8002934:	200000e0 	.word	0x200000e0
 8002938:	200000dc 	.word	0x200000dc
 800293c:	200001c8 	.word	0x200001c8
 8002940:	200001c4 	.word	0x200001c4

08002944 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <vTaskSwitchContext+0xa4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <vTaskSwitchContext+0xa8>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002958:	e03f      	b.n	80029da <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <vTaskSwitchContext+0xa8>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <vTaskSwitchContext+0xac>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800296e:	7afb      	ldrb	r3, [r7, #11]
 8002970:	f1c3 031f 	rsb	r3, r3, #31
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	491f      	ldr	r1, [pc, #124]	; (80029f4 <vTaskSwitchContext+0xb0>)
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <vTaskSwitchContext+0x5c>
        __asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	607b      	str	r3, [r7, #4]
    }
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <vTaskSwitchContext+0x5a>
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <vTaskSwitchContext+0xb0>)
 80029ac:	4413      	add	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	3308      	adds	r3, #8
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d104      	bne.n	80029d0 <vTaskSwitchContext+0x8c>
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <vTaskSwitchContext+0xb4>)
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	200001dc 	.word	0x200001dc
 80029ec:	200001c8 	.word	0x200001c8
 80029f0:	200001bc 	.word	0x200001bc
 80029f4:	200000e0 	.word	0x200000e0
 80029f8:	200000dc 	.word	0x200000dc

080029fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a04:	f000 f852 	bl	8002aac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <prvIdleTask+0x28>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d9f9      	bls.n	8002a04 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <prvIdleTask+0x2c>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a20:	e7f0      	b.n	8002a04 <prvIdleTask+0x8>
 8002a22:	bf00      	nop
 8002a24:	200000e0 	.word	0x200000e0
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	e00c      	b.n	8002a52 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <prvInitialiseTaskLists+0x60>)
 8002a44:	4413      	add	r3, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fc0e 	bl	8002268 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d9ef      	bls.n	8002a38 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a58:	480d      	ldr	r0, [pc, #52]	; (8002a90 <prvInitialiseTaskLists+0x64>)
 8002a5a:	f7ff fc05 	bl	8002268 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a5e:	480d      	ldr	r0, [pc, #52]	; (8002a94 <prvInitialiseTaskLists+0x68>)
 8002a60:	f7ff fc02 	bl	8002268 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <prvInitialiseTaskLists+0x6c>)
 8002a66:	f7ff fbff 	bl	8002268 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a6a:	480c      	ldr	r0, [pc, #48]	; (8002a9c <prvInitialiseTaskLists+0x70>)
 8002a6c:	f7ff fbfc 	bl	8002268 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a70:	480b      	ldr	r0, [pc, #44]	; (8002aa0 <prvInitialiseTaskLists+0x74>)
 8002a72:	f7ff fbf9 	bl	8002268 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <prvInitialiseTaskLists+0x78>)
 8002a78:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <prvInitialiseTaskLists+0x64>)
 8002a7a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <prvInitialiseTaskLists+0x7c>)
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <prvInitialiseTaskLists+0x68>)
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200000e0 	.word	0x200000e0
 8002a90:	20000144 	.word	0x20000144
 8002a94:	20000158 	.word	0x20000158
 8002a98:	20000174 	.word	0x20000174
 8002a9c:	20000188 	.word	0x20000188
 8002aa0:	200001a0 	.word	0x200001a0
 8002aa4:	2000016c 	.word	0x2000016c
 8002aa8:	20000170 	.word	0x20000170

08002aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ab2:	e019      	b.n	8002ae8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ab4:	f000 f980 	bl	8002db8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <prvCheckTasksWaitingTermination+0x50>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fc20 	bl	800230a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <prvCheckTasksWaitingTermination+0x54>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <prvCheckTasksWaitingTermination+0x54>)
 8002ad2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <prvCheckTasksWaitingTermination+0x58>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <prvCheckTasksWaitingTermination+0x58>)
 8002adc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ade:	f000 f99b 	bl	8002e18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f810 	bl	8002b08 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <prvCheckTasksWaitingTermination+0x58>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e1      	bne.n	8002ab4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000188 	.word	0x20000188
 8002b00:	200001b4 	.word	0x200001b4
 8002b04:	2000019c 	.word	0x2000019c

08002b08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb11 	bl	800313c <vPortFree>
                vPortFree( pxTCB );
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fb0e 	bl	800313c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <prvResetNextTaskUnblockTime+0x30>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <prvResetNextTaskUnblockTime+0x34>)
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b3c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b3e:	e005      	b.n	8002b4c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <prvResetNextTaskUnblockTime+0x30>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <prvResetNextTaskUnblockTime+0x34>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	2000016c 	.word	0x2000016c
 8002b5c:	200001d4 	.word	0x200001d4

08002b60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3b04      	subs	r3, #4
 8002b7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3b04      	subs	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <pxPortInitialiseStack+0x64>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3b14      	subs	r3, #20
 8002b9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3b04      	subs	r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f06f 0202 	mvn.w	r2, #2
 8002bae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3b20      	subs	r3, #32
 8002bb4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	08002bc9 	.word	0x08002bc9

08002bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <prvTaskExitError+0x54>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bda:	d00a      	beq.n	8002bf2 <prvTaskExitError+0x2a>
        __asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	60fb      	str	r3, [r7, #12]
    }
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <prvTaskExitError+0x28>
        __asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	60bb      	str	r3, [r7, #8]
    }
 8002c04:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c06:	bf00      	nop
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0fc      	beq.n	8002c08 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	20000010 	.word	0x20000010

08002c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <pxCurrentTCBConst2>)
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	6808      	ldr	r0, [r1, #0]
 8002c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c2a:	f380 8809 	msr	PSP, r0
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f380 8811 	msr	BASEPRI, r0
 8002c3a:	4770      	bx	lr
 8002c3c:	f3af 8000 	nop.w

08002c40 <pxCurrentTCBConst2>:
 8002c40:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop

08002c48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c48:	4808      	ldr	r0, [pc, #32]	; (8002c6c <prvPortStartFirstTask+0x24>)
 8002c4a:	6800      	ldr	r0, [r0, #0]
 8002c4c:	6800      	ldr	r0, [r0, #0]
 8002c4e:	f380 8808 	msr	MSP, r0
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f380 8814 	msr	CONTROL, r0
 8002c5a:	b662      	cpsie	i
 8002c5c:	b661      	cpsie	f
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	df00      	svc	0
 8002c68:	bf00      	nop
 8002c6a:	0000      	.short	0x0000
 8002c6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop

08002c74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c7a:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <xPortStartScheduler+0x120>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a46      	ldr	r2, [pc, #280]	; (8002d98 <xPortStartScheduler+0x124>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10a      	bne.n	8002c9a <xPortStartScheduler+0x26>
        __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	613b      	str	r3, [r7, #16]
    }
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <xPortStartScheduler+0x120>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	; (8002d9c <xPortStartScheduler+0x128>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10a      	bne.n	8002cba <xPortStartScheduler+0x46>
        __asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	60fb      	str	r3, [r7, #12]
    }
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <xPortStartScheduler+0x12c>)
 8002cbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <xPortStartScheduler+0x130>)
 8002ce0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ce2:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <xPortStartScheduler+0x134>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ce8:	e009      	b.n	8002cfe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <xPortStartScheduler+0x134>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <xPortStartScheduler+0x134>)
 8002cf2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d0ef      	beq.n	8002cea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00a      	beq.n	8002d2c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	60bb      	str	r3, [r7, #8]
    }
 8002d28:	bf00      	nop
 8002d2a:	e7fe      	b.n	8002d2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <xPortStartScheduler+0x138>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <xPortStartScheduler+0x138>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <xPortStartScheduler+0x138>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <xPortStartScheduler+0x138>)
 8002d5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d62:	f000 f8db 	bl	8002f1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <xPortStartScheduler+0x13c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d6c:	f000 f8fa 	bl	8002f64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <xPortStartScheduler+0x140>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <xPortStartScheduler+0x140>)
 8002d76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d7c:	f7ff ff64 	bl	8002c48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d80:	f7ff fde0 	bl	8002944 <vTaskSwitchContext>
    prvTaskExitError();
 8002d84:	f7ff ff20 	bl	8002bc8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00
 8002d98:	410fc271 	.word	0x410fc271
 8002d9c:	410fc270 	.word	0x410fc270
 8002da0:	e000e400 	.word	0xe000e400
 8002da4:	200001e0 	.word	0x200001e0
 8002da8:	200001e4 	.word	0x200001e4
 8002dac:	e000ed20 	.word	0xe000ed20
 8002db0:	20000010 	.word	0x20000010
 8002db4:	e000ef34 	.word	0xe000ef34

08002db8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
        __asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	607b      	str	r3, [r7, #4]
    }
 8002dd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <vPortEnterCritical+0x58>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <vPortEnterCritical+0x58>)
 8002dda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <vPortEnterCritical+0x58>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10f      	bne.n	8002e04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <vPortEnterCritical+0x5c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <vPortEnterCritical+0x4c>
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	603b      	str	r3, [r7, #0]
    }
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <vPortEnterCritical+0x4a>
    }
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	20000010 	.word	0x20000010
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <vPortExitCritical+0x50>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <vPortExitCritical+0x24>
        __asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	607b      	str	r3, [r7, #4]
    }
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <vPortExitCritical+0x50>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <vPortExitCritical+0x50>)
 8002e44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <vPortExitCritical+0x50>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <vPortExitCritical+0x42>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000010 	.word	0x20000010
 8002e6c:	00000000 	.word	0x00000000

08002e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e70:	f3ef 8009 	mrs	r0, PSP
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <pxCurrentTCBConst>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	f01e 0f10 	tst.w	lr, #16
 8002e80:	bf08      	it	eq
 8002e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8a:	6010      	str	r0, [r2, #0]
 8002e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e94:	f380 8811 	msr	BASEPRI, r0
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f7ff fd50 	bl	8002944 <vTaskSwitchContext>
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f380 8811 	msr	BASEPRI, r0
 8002eac:	bc09      	pop	{r0, r3}
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	6808      	ldr	r0, [r1, #0]
 8002eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb6:	f01e 0f10 	tst.w	lr, #16
 8002eba:	bf08      	it	eq
 8002ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ec0:	f380 8809 	msr	PSP, r0
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	f3af 8000 	nop.w

08002ed0 <pxCurrentTCBConst>:
 8002ed0:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop

08002ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
        __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	607b      	str	r3, [r7, #4]
    }
 8002ef0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ef2:	f7ff fc6f 	bl	80027d4 <xTaskIncrementTick>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <SysTick_Handler+0x40>)
 8002efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f383 8811 	msr	BASEPRI, r3
    }
 8002f0e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <vPortSetupTimerInterrupt+0x34>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <vPortSetupTimerInterrupt+0x38>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <vPortSetupTimerInterrupt+0x3c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <vPortSetupTimerInterrupt+0x40>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	099b      	lsrs	r3, r3, #6
 8002f38:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <vPortSetupTimerInterrupt+0x44>)
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f3e:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <vPortSetupTimerInterrupt+0x34>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e010 	.word	0xe000e010
 8002f54:	e000e018 	.word	0xe000e018
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	10624dd3 	.word	0x10624dd3
 8002f60:	e000e014 	.word	0xe000e014

08002f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f74 <vPortEnableVFP+0x10>
 8002f68:	6801      	ldr	r1, [r0, #0]
 8002f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f6e:	6001      	str	r1, [r0, #0]
 8002f70:	4770      	bx	lr
 8002f72:	0000      	.short	0x0000
 8002f74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop

08002f7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f88:	f7ff fb7a 	bl	8002680 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f8c:	4b65      	ldr	r3, [pc, #404]	; (8003124 <pvPortMalloc+0x1a8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f94:	f000 f934 	bl	8003200 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f98:	4b63      	ldr	r3, [pc, #396]	; (8003128 <pvPortMalloc+0x1ac>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 80a7 	bne.w	80030f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02d      	beq.n	8003008 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fac:	2208      	movs	r2, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d227      	bcs.n	8003008 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fb8:	2208      	movs	r2, #8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d021      	beq.n	800300e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f023 0307 	bic.w	r3, r3, #7
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d214      	bcs.n	8003002 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	3308      	adds	r3, #8
 8002fe0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <pvPortMalloc+0x92>
        __asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	617b      	str	r3, [r7, #20]
    }
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003006:	e002      	b.n	800300e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	e000      	b.n	8003010 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800300e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06e      	beq.n	80030f4 <pvPortMalloc+0x178>
 8003016:	4b45      	ldr	r3, [pc, #276]	; (800312c <pvPortMalloc+0x1b0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d869      	bhi.n	80030f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <pvPortMalloc+0x1b4>)
 8003022:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003024:	4b42      	ldr	r3, [pc, #264]	; (8003130 <pvPortMalloc+0x1b4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800302a:	e004      	b.n	8003036 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d903      	bls.n	8003048 <pvPortMalloc+0xcc>
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f1      	bne.n	800302c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <pvPortMalloc+0x1a8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	429a      	cmp	r2, r3
 8003050:	d050      	beq.n	80030f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2208      	movs	r2, #8
 8003058:	4413      	add	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	2308      	movs	r3, #8
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	429a      	cmp	r2, r3
 8003072:	d91f      	bls.n	80030b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <pvPortMalloc+0x120>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	613b      	str	r3, [r7, #16]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030ae:	69b8      	ldr	r0, [r7, #24]
 80030b0:	f000 f908 	bl	80032c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <pvPortMalloc+0x1b0>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <pvPortMalloc+0x1b0>)
 80030c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <pvPortMalloc+0x1b0>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <pvPortMalloc+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d203      	bcs.n	80030d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <pvPortMalloc+0x1b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <pvPortMalloc+0x1b8>)
 80030d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <pvPortMalloc+0x1ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	431a      	orrs	r2, r3
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <pvPortMalloc+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <pvPortMalloc+0x1bc>)
 80030f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030f4:	f7ff fad2 	bl	800269c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <pvPortMalloc+0x19c>
        __asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	60fb      	str	r3, [r7, #12]
    }
 8003114:	bf00      	nop
 8003116:	e7fe      	b.n	8003116 <pvPortMalloc+0x19a>
    return pvReturn;
 8003118:	69fb      	ldr	r3, [r7, #28]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20012df0 	.word	0x20012df0
 8003128:	20012e04 	.word	0x20012e04
 800312c:	20012df4 	.word	0x20012df4
 8003130:	20012de8 	.word	0x20012de8
 8003134:	20012df8 	.word	0x20012df8
 8003138:	20012dfc 	.word	0x20012dfc

0800313c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04d      	beq.n	80031ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800314e:	2308      	movs	r3, #8
 8003150:	425b      	negs	r3, r3
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4413      	add	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <vPortFree+0xb8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <vPortFree+0x44>
        __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	60fb      	str	r3, [r7, #12]
    }
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <vPortFree+0x62>
        __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	60bb      	str	r3, [r7, #8]
    }
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <vPortFree+0xb8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01e      	beq.n	80031ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11a      	bne.n	80031ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <vPortFree+0xb8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	43db      	mvns	r3, r3
 80031be:	401a      	ands	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031c4:	f7ff fa5c 	bl	8002680 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <vPortFree+0xbc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <vPortFree+0xbc>)
 80031d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031d6:	6938      	ldr	r0, [r7, #16]
 80031d8:	f000 f874 	bl	80032c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <vPortFree+0xc0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a06      	ldr	r2, [pc, #24]	; (80031fc <vPortFree+0xc0>)
 80031e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031e6:	f7ff fa59 	bl	800269c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20012e04 	.word	0x20012e04
 80031f8:	20012df4 	.word	0x20012df4
 80031fc:	20012e00 	.word	0x20012e00

08003200 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003206:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800320a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <prvHeapInit+0xac>)
 800320e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3307      	adds	r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <prvHeapInit+0xac>)
 8003230:	4413      	add	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003238:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <prvHeapInit+0xb0>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800323e:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <prvHeapInit+0xb0>)
 8003240:	2200      	movs	r2, #0
 8003242:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800324c:	2208      	movs	r2, #8
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0307 	bic.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <prvHeapInit+0xb4>)
 8003260:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <prvHeapInit+0xb4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <prvHeapInit+0xb4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	1ad2      	subs	r2, r2, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <prvHeapInit+0xb4>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <prvHeapInit+0xb8>)
 800328e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a09      	ldr	r2, [pc, #36]	; (80032bc <prvHeapInit+0xbc>)
 8003296:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <prvHeapInit+0xc0>)
 800329a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	200001e8 	.word	0x200001e8
 80032b0:	20012de8 	.word	0x20012de8
 80032b4:	20012df0 	.word	0x20012df0
 80032b8:	20012df8 	.word	0x20012df8
 80032bc:	20012df4 	.word	0x20012df4
 80032c0:	20012e04 	.word	0x20012e04

080032c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032cc:	4b28      	ldr	r3, [pc, #160]	; (8003370 <prvInsertBlockIntoFreeList+0xac>)
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e002      	b.n	80032d8 <prvInsertBlockIntoFreeList+0x14>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d8f7      	bhi.n	80032d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	4413      	add	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d108      	bne.n	8003306 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	441a      	add	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	441a      	add	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d118      	bne.n	800334c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <prvInsertBlockIntoFreeList+0xb0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d00d      	beq.n	8003342 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e008      	b.n	8003354 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <prvInsertBlockIntoFreeList+0xb0>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e003      	b.n	8003354 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d002      	beq.n	8003362 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20012de8 	.word	0x20012de8
 8003374:	20012df0 	.word	0x20012df0

08003378 <std>:
 8003378:	2300      	movs	r3, #0
 800337a:	b510      	push	{r4, lr}
 800337c:	4604      	mov	r4, r0
 800337e:	e9c0 3300 	strd	r3, r3, [r0]
 8003382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003386:	6083      	str	r3, [r0, #8]
 8003388:	8181      	strh	r1, [r0, #12]
 800338a:	6643      	str	r3, [r0, #100]	; 0x64
 800338c:	81c2      	strh	r2, [r0, #14]
 800338e:	6183      	str	r3, [r0, #24]
 8003390:	4619      	mov	r1, r3
 8003392:	2208      	movs	r2, #8
 8003394:	305c      	adds	r0, #92	; 0x5c
 8003396:	f000 f9d3 	bl	8003740 <memset>
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <std+0x38>)
 800339c:	6263      	str	r3, [r4, #36]	; 0x24
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <std+0x3c>)
 80033a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <std+0x40>)
 80033a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <std+0x44>)
 80033a8:	6224      	str	r4, [r4, #32]
 80033aa:	6323      	str	r3, [r4, #48]	; 0x30
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	bf00      	nop
 80033b0:	08003591 	.word	0x08003591
 80033b4:	080035b3 	.word	0x080035b3
 80033b8:	080035eb 	.word	0x080035eb
 80033bc:	0800360f 	.word	0x0800360f

080033c0 <stdio_exit_handler>:
 80033c0:	4a02      	ldr	r2, [pc, #8]	; (80033cc <stdio_exit_handler+0xc>)
 80033c2:	4903      	ldr	r1, [pc, #12]	; (80033d0 <stdio_exit_handler+0x10>)
 80033c4:	4803      	ldr	r0, [pc, #12]	; (80033d4 <stdio_exit_handler+0x14>)
 80033c6:	f000 b869 	b.w	800349c <_fwalk_sglue>
 80033ca:	bf00      	nop
 80033cc:	20000014 	.word	0x20000014
 80033d0:	08003b31 	.word	0x08003b31
 80033d4:	20000020 	.word	0x20000020

080033d8 <cleanup_stdio>:
 80033d8:	6841      	ldr	r1, [r0, #4]
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <cleanup_stdio+0x34>)
 80033dc:	4299      	cmp	r1, r3
 80033de:	b510      	push	{r4, lr}
 80033e0:	4604      	mov	r4, r0
 80033e2:	d001      	beq.n	80033e8 <cleanup_stdio+0x10>
 80033e4:	f000 fba4 	bl	8003b30 <_fflush_r>
 80033e8:	68a1      	ldr	r1, [r4, #8]
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <cleanup_stdio+0x38>)
 80033ec:	4299      	cmp	r1, r3
 80033ee:	d002      	beq.n	80033f6 <cleanup_stdio+0x1e>
 80033f0:	4620      	mov	r0, r4
 80033f2:	f000 fb9d 	bl	8003b30 <_fflush_r>
 80033f6:	68e1      	ldr	r1, [r4, #12]
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <cleanup_stdio+0x3c>)
 80033fa:	4299      	cmp	r1, r3
 80033fc:	d004      	beq.n	8003408 <cleanup_stdio+0x30>
 80033fe:	4620      	mov	r0, r4
 8003400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003404:	f000 bb94 	b.w	8003b30 <_fflush_r>
 8003408:	bd10      	pop	{r4, pc}
 800340a:	bf00      	nop
 800340c:	20012e08 	.word	0x20012e08
 8003410:	20012e70 	.word	0x20012e70
 8003414:	20012ed8 	.word	0x20012ed8

08003418 <global_stdio_init.part.0>:
 8003418:	b510      	push	{r4, lr}
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <global_stdio_init.part.0+0x30>)
 800341c:	4c0b      	ldr	r4, [pc, #44]	; (800344c <global_stdio_init.part.0+0x34>)
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <global_stdio_init.part.0+0x38>)
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	4620      	mov	r0, r4
 8003424:	2200      	movs	r2, #0
 8003426:	2104      	movs	r1, #4
 8003428:	f7ff ffa6 	bl	8003378 <std>
 800342c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003430:	2201      	movs	r2, #1
 8003432:	2109      	movs	r1, #9
 8003434:	f7ff ffa0 	bl	8003378 <std>
 8003438:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800343c:	2202      	movs	r2, #2
 800343e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003442:	2112      	movs	r1, #18
 8003444:	f7ff bf98 	b.w	8003378 <std>
 8003448:	20012f40 	.word	0x20012f40
 800344c:	20012e08 	.word	0x20012e08
 8003450:	080033c1 	.word	0x080033c1

08003454 <__sfp_lock_acquire>:
 8003454:	4801      	ldr	r0, [pc, #4]	; (800345c <__sfp_lock_acquire+0x8>)
 8003456:	f000 b9eb 	b.w	8003830 <__retarget_lock_acquire_recursive>
 800345a:	bf00      	nop
 800345c:	20012f49 	.word	0x20012f49

08003460 <__sfp_lock_release>:
 8003460:	4801      	ldr	r0, [pc, #4]	; (8003468 <__sfp_lock_release+0x8>)
 8003462:	f000 b9e6 	b.w	8003832 <__retarget_lock_release_recursive>
 8003466:	bf00      	nop
 8003468:	20012f49 	.word	0x20012f49

0800346c <__sinit>:
 800346c:	b510      	push	{r4, lr}
 800346e:	4604      	mov	r4, r0
 8003470:	f7ff fff0 	bl	8003454 <__sfp_lock_acquire>
 8003474:	6a23      	ldr	r3, [r4, #32]
 8003476:	b11b      	cbz	r3, 8003480 <__sinit+0x14>
 8003478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800347c:	f7ff bff0 	b.w	8003460 <__sfp_lock_release>
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <__sinit+0x28>)
 8003482:	6223      	str	r3, [r4, #32]
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <__sinit+0x2c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f5      	bne.n	8003478 <__sinit+0xc>
 800348c:	f7ff ffc4 	bl	8003418 <global_stdio_init.part.0>
 8003490:	e7f2      	b.n	8003478 <__sinit+0xc>
 8003492:	bf00      	nop
 8003494:	080033d9 	.word	0x080033d9
 8003498:	20012f40 	.word	0x20012f40

0800349c <_fwalk_sglue>:
 800349c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a0:	4607      	mov	r7, r0
 80034a2:	4688      	mov	r8, r1
 80034a4:	4614      	mov	r4, r2
 80034a6:	2600      	movs	r6, #0
 80034a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034ac:	f1b9 0901 	subs.w	r9, r9, #1
 80034b0:	d505      	bpl.n	80034be <_fwalk_sglue+0x22>
 80034b2:	6824      	ldr	r4, [r4, #0]
 80034b4:	2c00      	cmp	r4, #0
 80034b6:	d1f7      	bne.n	80034a8 <_fwalk_sglue+0xc>
 80034b8:	4630      	mov	r0, r6
 80034ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034be:	89ab      	ldrh	r3, [r5, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d907      	bls.n	80034d4 <_fwalk_sglue+0x38>
 80034c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034c8:	3301      	adds	r3, #1
 80034ca:	d003      	beq.n	80034d4 <_fwalk_sglue+0x38>
 80034cc:	4629      	mov	r1, r5
 80034ce:	4638      	mov	r0, r7
 80034d0:	47c0      	blx	r8
 80034d2:	4306      	orrs	r6, r0
 80034d4:	3568      	adds	r5, #104	; 0x68
 80034d6:	e7e9      	b.n	80034ac <_fwalk_sglue+0x10>

080034d8 <_puts_r>:
 80034d8:	6a03      	ldr	r3, [r0, #32]
 80034da:	b570      	push	{r4, r5, r6, lr}
 80034dc:	6884      	ldr	r4, [r0, #8]
 80034de:	4605      	mov	r5, r0
 80034e0:	460e      	mov	r6, r1
 80034e2:	b90b      	cbnz	r3, 80034e8 <_puts_r+0x10>
 80034e4:	f7ff ffc2 	bl	800346c <__sinit>
 80034e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ea:	07db      	lsls	r3, r3, #31
 80034ec:	d405      	bmi.n	80034fa <_puts_r+0x22>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	0598      	lsls	r0, r3, #22
 80034f2:	d402      	bmi.n	80034fa <_puts_r+0x22>
 80034f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034f6:	f000 f99b 	bl	8003830 <__retarget_lock_acquire_recursive>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	0719      	lsls	r1, r3, #28
 80034fe:	d513      	bpl.n	8003528 <_puts_r+0x50>
 8003500:	6923      	ldr	r3, [r4, #16]
 8003502:	b18b      	cbz	r3, 8003528 <_puts_r+0x50>
 8003504:	3e01      	subs	r6, #1
 8003506:	68a3      	ldr	r3, [r4, #8]
 8003508:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800350c:	3b01      	subs	r3, #1
 800350e:	60a3      	str	r3, [r4, #8]
 8003510:	b9e9      	cbnz	r1, 800354e <_puts_r+0x76>
 8003512:	2b00      	cmp	r3, #0
 8003514:	da2e      	bge.n	8003574 <_puts_r+0x9c>
 8003516:	4622      	mov	r2, r4
 8003518:	210a      	movs	r1, #10
 800351a:	4628      	mov	r0, r5
 800351c:	f000 f87b 	bl	8003616 <__swbuf_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d007      	beq.n	8003534 <_puts_r+0x5c>
 8003524:	250a      	movs	r5, #10
 8003526:	e007      	b.n	8003538 <_puts_r+0x60>
 8003528:	4621      	mov	r1, r4
 800352a:	4628      	mov	r0, r5
 800352c:	f000 f8b0 	bl	8003690 <__swsetup_r>
 8003530:	2800      	cmp	r0, #0
 8003532:	d0e7      	beq.n	8003504 <_puts_r+0x2c>
 8003534:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800353a:	07da      	lsls	r2, r3, #31
 800353c:	d405      	bmi.n	800354a <_puts_r+0x72>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	059b      	lsls	r3, r3, #22
 8003542:	d402      	bmi.n	800354a <_puts_r+0x72>
 8003544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003546:	f000 f974 	bl	8003832 <__retarget_lock_release_recursive>
 800354a:	4628      	mov	r0, r5
 800354c:	bd70      	pop	{r4, r5, r6, pc}
 800354e:	2b00      	cmp	r3, #0
 8003550:	da04      	bge.n	800355c <_puts_r+0x84>
 8003552:	69a2      	ldr	r2, [r4, #24]
 8003554:	429a      	cmp	r2, r3
 8003556:	dc06      	bgt.n	8003566 <_puts_r+0x8e>
 8003558:	290a      	cmp	r1, #10
 800355a:	d004      	beq.n	8003566 <_puts_r+0x8e>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	6022      	str	r2, [r4, #0]
 8003562:	7019      	strb	r1, [r3, #0]
 8003564:	e7cf      	b.n	8003506 <_puts_r+0x2e>
 8003566:	4622      	mov	r2, r4
 8003568:	4628      	mov	r0, r5
 800356a:	f000 f854 	bl	8003616 <__swbuf_r>
 800356e:	3001      	adds	r0, #1
 8003570:	d1c9      	bne.n	8003506 <_puts_r+0x2e>
 8003572:	e7df      	b.n	8003534 <_puts_r+0x5c>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	250a      	movs	r5, #10
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	6022      	str	r2, [r4, #0]
 800357c:	701d      	strb	r5, [r3, #0]
 800357e:	e7db      	b.n	8003538 <_puts_r+0x60>

08003580 <puts>:
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <puts+0xc>)
 8003582:	4601      	mov	r1, r0
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	f7ff bfa7 	b.w	80034d8 <_puts_r>
 800358a:	bf00      	nop
 800358c:	2000006c 	.word	0x2000006c

08003590 <__sread>:
 8003590:	b510      	push	{r4, lr}
 8003592:	460c      	mov	r4, r1
 8003594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003598:	f000 f8fc 	bl	8003794 <_read_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	bfab      	itete	ge
 80035a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035a2:	89a3      	ldrhlt	r3, [r4, #12]
 80035a4:	181b      	addge	r3, r3, r0
 80035a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035aa:	bfac      	ite	ge
 80035ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80035ae:	81a3      	strhlt	r3, [r4, #12]
 80035b0:	bd10      	pop	{r4, pc}

080035b2 <__swrite>:
 80035b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b6:	461f      	mov	r7, r3
 80035b8:	898b      	ldrh	r3, [r1, #12]
 80035ba:	05db      	lsls	r3, r3, #23
 80035bc:	4605      	mov	r5, r0
 80035be:	460c      	mov	r4, r1
 80035c0:	4616      	mov	r6, r2
 80035c2:	d505      	bpl.n	80035d0 <__swrite+0x1e>
 80035c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c8:	2302      	movs	r3, #2
 80035ca:	2200      	movs	r2, #0
 80035cc:	f000 f8d0 	bl	8003770 <_lseek_r>
 80035d0:	89a3      	ldrh	r3, [r4, #12]
 80035d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035da:	81a3      	strh	r3, [r4, #12]
 80035dc:	4632      	mov	r2, r6
 80035de:	463b      	mov	r3, r7
 80035e0:	4628      	mov	r0, r5
 80035e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035e6:	f000 b8e7 	b.w	80037b8 <_write_r>

080035ea <__sseek>:
 80035ea:	b510      	push	{r4, lr}
 80035ec:	460c      	mov	r4, r1
 80035ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f2:	f000 f8bd 	bl	8003770 <_lseek_r>
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	bf15      	itete	ne
 80035fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80035fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003606:	81a3      	strheq	r3, [r4, #12]
 8003608:	bf18      	it	ne
 800360a:	81a3      	strhne	r3, [r4, #12]
 800360c:	bd10      	pop	{r4, pc}

0800360e <__sclose>:
 800360e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003612:	f000 b89d 	b.w	8003750 <_close_r>

08003616 <__swbuf_r>:
 8003616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003618:	460e      	mov	r6, r1
 800361a:	4614      	mov	r4, r2
 800361c:	4605      	mov	r5, r0
 800361e:	b118      	cbz	r0, 8003628 <__swbuf_r+0x12>
 8003620:	6a03      	ldr	r3, [r0, #32]
 8003622:	b90b      	cbnz	r3, 8003628 <__swbuf_r+0x12>
 8003624:	f7ff ff22 	bl	800346c <__sinit>
 8003628:	69a3      	ldr	r3, [r4, #24]
 800362a:	60a3      	str	r3, [r4, #8]
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	071a      	lsls	r2, r3, #28
 8003630:	d525      	bpl.n	800367e <__swbuf_r+0x68>
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	b31b      	cbz	r3, 800367e <__swbuf_r+0x68>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	6922      	ldr	r2, [r4, #16]
 800363a:	1a98      	subs	r0, r3, r2
 800363c:	6963      	ldr	r3, [r4, #20]
 800363e:	b2f6      	uxtb	r6, r6
 8003640:	4283      	cmp	r3, r0
 8003642:	4637      	mov	r7, r6
 8003644:	dc04      	bgt.n	8003650 <__swbuf_r+0x3a>
 8003646:	4621      	mov	r1, r4
 8003648:	4628      	mov	r0, r5
 800364a:	f000 fa71 	bl	8003b30 <_fflush_r>
 800364e:	b9e0      	cbnz	r0, 800368a <__swbuf_r+0x74>
 8003650:	68a3      	ldr	r3, [r4, #8]
 8003652:	3b01      	subs	r3, #1
 8003654:	60a3      	str	r3, [r4, #8]
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	6022      	str	r2, [r4, #0]
 800365c:	701e      	strb	r6, [r3, #0]
 800365e:	6962      	ldr	r2, [r4, #20]
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	429a      	cmp	r2, r3
 8003664:	d004      	beq.n	8003670 <__swbuf_r+0x5a>
 8003666:	89a3      	ldrh	r3, [r4, #12]
 8003668:	07db      	lsls	r3, r3, #31
 800366a:	d506      	bpl.n	800367a <__swbuf_r+0x64>
 800366c:	2e0a      	cmp	r6, #10
 800366e:	d104      	bne.n	800367a <__swbuf_r+0x64>
 8003670:	4621      	mov	r1, r4
 8003672:	4628      	mov	r0, r5
 8003674:	f000 fa5c 	bl	8003b30 <_fflush_r>
 8003678:	b938      	cbnz	r0, 800368a <__swbuf_r+0x74>
 800367a:	4638      	mov	r0, r7
 800367c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800367e:	4621      	mov	r1, r4
 8003680:	4628      	mov	r0, r5
 8003682:	f000 f805 	bl	8003690 <__swsetup_r>
 8003686:	2800      	cmp	r0, #0
 8003688:	d0d5      	beq.n	8003636 <__swbuf_r+0x20>
 800368a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800368e:	e7f4      	b.n	800367a <__swbuf_r+0x64>

08003690 <__swsetup_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <__swsetup_r+0xac>)
 8003694:	4605      	mov	r5, r0
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	460c      	mov	r4, r1
 800369a:	b118      	cbz	r0, 80036a4 <__swsetup_r+0x14>
 800369c:	6a03      	ldr	r3, [r0, #32]
 800369e:	b90b      	cbnz	r3, 80036a4 <__swsetup_r+0x14>
 80036a0:	f7ff fee4 	bl	800346c <__sinit>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036aa:	0718      	lsls	r0, r3, #28
 80036ac:	d422      	bmi.n	80036f4 <__swsetup_r+0x64>
 80036ae:	06d9      	lsls	r1, r3, #27
 80036b0:	d407      	bmi.n	80036c2 <__swsetup_r+0x32>
 80036b2:	2309      	movs	r3, #9
 80036b4:	602b      	str	r3, [r5, #0]
 80036b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c0:	e034      	b.n	800372c <__swsetup_r+0x9c>
 80036c2:	0758      	lsls	r0, r3, #29
 80036c4:	d512      	bpl.n	80036ec <__swsetup_r+0x5c>
 80036c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c8:	b141      	cbz	r1, 80036dc <__swsetup_r+0x4c>
 80036ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036ce:	4299      	cmp	r1, r3
 80036d0:	d002      	beq.n	80036d8 <__swsetup_r+0x48>
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f8ae 	bl	8003834 <_free_r>
 80036d8:	2300      	movs	r3, #0
 80036da:	6363      	str	r3, [r4, #52]	; 0x34
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	2300      	movs	r3, #0
 80036e6:	6063      	str	r3, [r4, #4]
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f043 0308 	orr.w	r3, r3, #8
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	6923      	ldr	r3, [r4, #16]
 80036f6:	b94b      	cbnz	r3, 800370c <__swsetup_r+0x7c>
 80036f8:	89a3      	ldrh	r3, [r4, #12]
 80036fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003702:	d003      	beq.n	800370c <__swsetup_r+0x7c>
 8003704:	4621      	mov	r1, r4
 8003706:	4628      	mov	r0, r5
 8003708:	f000 fa60 	bl	8003bcc <__smakebuf_r>
 800370c:	89a0      	ldrh	r0, [r4, #12]
 800370e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003712:	f010 0301 	ands.w	r3, r0, #1
 8003716:	d00a      	beq.n	800372e <__swsetup_r+0x9e>
 8003718:	2300      	movs	r3, #0
 800371a:	60a3      	str	r3, [r4, #8]
 800371c:	6963      	ldr	r3, [r4, #20]
 800371e:	425b      	negs	r3, r3
 8003720:	61a3      	str	r3, [r4, #24]
 8003722:	6923      	ldr	r3, [r4, #16]
 8003724:	b943      	cbnz	r3, 8003738 <__swsetup_r+0xa8>
 8003726:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800372a:	d1c4      	bne.n	80036b6 <__swsetup_r+0x26>
 800372c:	bd38      	pop	{r3, r4, r5, pc}
 800372e:	0781      	lsls	r1, r0, #30
 8003730:	bf58      	it	pl
 8003732:	6963      	ldrpl	r3, [r4, #20]
 8003734:	60a3      	str	r3, [r4, #8]
 8003736:	e7f4      	b.n	8003722 <__swsetup_r+0x92>
 8003738:	2000      	movs	r0, #0
 800373a:	e7f7      	b.n	800372c <__swsetup_r+0x9c>
 800373c:	2000006c 	.word	0x2000006c

08003740 <memset>:
 8003740:	4402      	add	r2, r0
 8003742:	4603      	mov	r3, r0
 8003744:	4293      	cmp	r3, r2
 8003746:	d100      	bne.n	800374a <memset+0xa>
 8003748:	4770      	bx	lr
 800374a:	f803 1b01 	strb.w	r1, [r3], #1
 800374e:	e7f9      	b.n	8003744 <memset+0x4>

08003750 <_close_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4d06      	ldr	r5, [pc, #24]	; (800376c <_close_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	f7fd f957 	bl	8000a0e <_close>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_close_r+0x1a>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	b103      	cbz	r3, 800376a <_close_r+0x1a>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	20012f44 	.word	0x20012f44

08003770 <_lseek_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4d07      	ldr	r5, [pc, #28]	; (8003790 <_lseek_r+0x20>)
 8003774:	4604      	mov	r4, r0
 8003776:	4608      	mov	r0, r1
 8003778:	4611      	mov	r1, r2
 800377a:	2200      	movs	r2, #0
 800377c:	602a      	str	r2, [r5, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f7fd f96c 	bl	8000a5c <_lseek>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_lseek_r+0x1e>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_lseek_r+0x1e>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	20012f44 	.word	0x20012f44

08003794 <_read_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	4d07      	ldr	r5, [pc, #28]	; (80037b4 <_read_r+0x20>)
 8003798:	4604      	mov	r4, r0
 800379a:	4608      	mov	r0, r1
 800379c:	4611      	mov	r1, r2
 800379e:	2200      	movs	r2, #0
 80037a0:	602a      	str	r2, [r5, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f7fd f8fa 	bl	800099c <_read>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_read_r+0x1e>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_read_r+0x1e>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	20012f44 	.word	0x20012f44

080037b8 <_write_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d07      	ldr	r5, [pc, #28]	; (80037d8 <_write_r+0x20>)
 80037bc:	4604      	mov	r4, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fd f905 	bl	80009d6 <_write>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_write_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_write_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	20012f44 	.word	0x20012f44

080037dc <__errno>:
 80037dc:	4b01      	ldr	r3, [pc, #4]	; (80037e4 <__errno+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	2000006c 	.word	0x2000006c

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4d0d      	ldr	r5, [pc, #52]	; (8003820 <__libc_init_array+0x38>)
 80037ec:	4c0d      	ldr	r4, [pc, #52]	; (8003824 <__libc_init_array+0x3c>)
 80037ee:	1b64      	subs	r4, r4, r5
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	2600      	movs	r6, #0
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	4d0b      	ldr	r5, [pc, #44]	; (8003828 <__libc_init_array+0x40>)
 80037fa:	4c0c      	ldr	r4, [pc, #48]	; (800382c <__libc_init_array+0x44>)
 80037fc:	f000 fa54 	bl	8003ca8 <_init>
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	2600      	movs	r6, #0
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	f855 3b04 	ldr.w	r3, [r5], #4
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	08003d28 	.word	0x08003d28
 8003824:	08003d28 	.word	0x08003d28
 8003828:	08003d28 	.word	0x08003d28
 800382c:	08003d2c 	.word	0x08003d2c

08003830 <__retarget_lock_acquire_recursive>:
 8003830:	4770      	bx	lr

08003832 <__retarget_lock_release_recursive>:
 8003832:	4770      	bx	lr

08003834 <_free_r>:
 8003834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003836:	2900      	cmp	r1, #0
 8003838:	d044      	beq.n	80038c4 <_free_r+0x90>
 800383a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383e:	9001      	str	r0, [sp, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f1a1 0404 	sub.w	r4, r1, #4
 8003846:	bfb8      	it	lt
 8003848:	18e4      	addlt	r4, r4, r3
 800384a:	f000 f8df 	bl	8003a0c <__malloc_lock>
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <_free_r+0x94>)
 8003850:	9801      	ldr	r0, [sp, #4]
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	b933      	cbnz	r3, 8003864 <_free_r+0x30>
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	6014      	str	r4, [r2, #0]
 800385a:	b003      	add	sp, #12
 800385c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003860:	f000 b8da 	b.w	8003a18 <__malloc_unlock>
 8003864:	42a3      	cmp	r3, r4
 8003866:	d908      	bls.n	800387a <_free_r+0x46>
 8003868:	6825      	ldr	r5, [r4, #0]
 800386a:	1961      	adds	r1, r4, r5
 800386c:	428b      	cmp	r3, r1
 800386e:	bf01      	itttt	eq
 8003870:	6819      	ldreq	r1, [r3, #0]
 8003872:	685b      	ldreq	r3, [r3, #4]
 8003874:	1949      	addeq	r1, r1, r5
 8003876:	6021      	streq	r1, [r4, #0]
 8003878:	e7ed      	b.n	8003856 <_free_r+0x22>
 800387a:	461a      	mov	r2, r3
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b10b      	cbz	r3, 8003884 <_free_r+0x50>
 8003880:	42a3      	cmp	r3, r4
 8003882:	d9fa      	bls.n	800387a <_free_r+0x46>
 8003884:	6811      	ldr	r1, [r2, #0]
 8003886:	1855      	adds	r5, r2, r1
 8003888:	42a5      	cmp	r5, r4
 800388a:	d10b      	bne.n	80038a4 <_free_r+0x70>
 800388c:	6824      	ldr	r4, [r4, #0]
 800388e:	4421      	add	r1, r4
 8003890:	1854      	adds	r4, r2, r1
 8003892:	42a3      	cmp	r3, r4
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	d1e0      	bne.n	800385a <_free_r+0x26>
 8003898:	681c      	ldr	r4, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	6053      	str	r3, [r2, #4]
 800389e:	440c      	add	r4, r1
 80038a0:	6014      	str	r4, [r2, #0]
 80038a2:	e7da      	b.n	800385a <_free_r+0x26>
 80038a4:	d902      	bls.n	80038ac <_free_r+0x78>
 80038a6:	230c      	movs	r3, #12
 80038a8:	6003      	str	r3, [r0, #0]
 80038aa:	e7d6      	b.n	800385a <_free_r+0x26>
 80038ac:	6825      	ldr	r5, [r4, #0]
 80038ae:	1961      	adds	r1, r4, r5
 80038b0:	428b      	cmp	r3, r1
 80038b2:	bf04      	itt	eq
 80038b4:	6819      	ldreq	r1, [r3, #0]
 80038b6:	685b      	ldreq	r3, [r3, #4]
 80038b8:	6063      	str	r3, [r4, #4]
 80038ba:	bf04      	itt	eq
 80038bc:	1949      	addeq	r1, r1, r5
 80038be:	6021      	streq	r1, [r4, #0]
 80038c0:	6054      	str	r4, [r2, #4]
 80038c2:	e7ca      	b.n	800385a <_free_r+0x26>
 80038c4:	b003      	add	sp, #12
 80038c6:	bd30      	pop	{r4, r5, pc}
 80038c8:	20012f4c 	.word	0x20012f4c

080038cc <sbrk_aligned>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4e0e      	ldr	r6, [pc, #56]	; (8003908 <sbrk_aligned+0x3c>)
 80038d0:	460c      	mov	r4, r1
 80038d2:	6831      	ldr	r1, [r6, #0]
 80038d4:	4605      	mov	r5, r0
 80038d6:	b911      	cbnz	r1, 80038de <sbrk_aligned+0x12>
 80038d8:	f000 f9d6 	bl	8003c88 <_sbrk_r>
 80038dc:	6030      	str	r0, [r6, #0]
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f9d1 	bl	8003c88 <_sbrk_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	d00a      	beq.n	8003900 <sbrk_aligned+0x34>
 80038ea:	1cc4      	adds	r4, r0, #3
 80038ec:	f024 0403 	bic.w	r4, r4, #3
 80038f0:	42a0      	cmp	r0, r4
 80038f2:	d007      	beq.n	8003904 <sbrk_aligned+0x38>
 80038f4:	1a21      	subs	r1, r4, r0
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 f9c6 	bl	8003c88 <_sbrk_r>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d101      	bne.n	8003904 <sbrk_aligned+0x38>
 8003900:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003904:	4620      	mov	r0, r4
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	20012f50 	.word	0x20012f50

0800390c <_malloc_r>:
 800390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003910:	1ccd      	adds	r5, r1, #3
 8003912:	f025 0503 	bic.w	r5, r5, #3
 8003916:	3508      	adds	r5, #8
 8003918:	2d0c      	cmp	r5, #12
 800391a:	bf38      	it	cc
 800391c:	250c      	movcc	r5, #12
 800391e:	2d00      	cmp	r5, #0
 8003920:	4607      	mov	r7, r0
 8003922:	db01      	blt.n	8003928 <_malloc_r+0x1c>
 8003924:	42a9      	cmp	r1, r5
 8003926:	d905      	bls.n	8003934 <_malloc_r+0x28>
 8003928:	230c      	movs	r3, #12
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	2600      	movs	r6, #0
 800392e:	4630      	mov	r0, r6
 8003930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a08 <_malloc_r+0xfc>
 8003938:	f000 f868 	bl	8003a0c <__malloc_lock>
 800393c:	f8d8 3000 	ldr.w	r3, [r8]
 8003940:	461c      	mov	r4, r3
 8003942:	bb5c      	cbnz	r4, 800399c <_malloc_r+0x90>
 8003944:	4629      	mov	r1, r5
 8003946:	4638      	mov	r0, r7
 8003948:	f7ff ffc0 	bl	80038cc <sbrk_aligned>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	4604      	mov	r4, r0
 8003950:	d155      	bne.n	80039fe <_malloc_r+0xf2>
 8003952:	f8d8 4000 	ldr.w	r4, [r8]
 8003956:	4626      	mov	r6, r4
 8003958:	2e00      	cmp	r6, #0
 800395a:	d145      	bne.n	80039e8 <_malloc_r+0xdc>
 800395c:	2c00      	cmp	r4, #0
 800395e:	d048      	beq.n	80039f2 <_malloc_r+0xe6>
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	4631      	mov	r1, r6
 8003964:	4638      	mov	r0, r7
 8003966:	eb04 0903 	add.w	r9, r4, r3
 800396a:	f000 f98d 	bl	8003c88 <_sbrk_r>
 800396e:	4581      	cmp	r9, r0
 8003970:	d13f      	bne.n	80039f2 <_malloc_r+0xe6>
 8003972:	6821      	ldr	r1, [r4, #0]
 8003974:	1a6d      	subs	r5, r5, r1
 8003976:	4629      	mov	r1, r5
 8003978:	4638      	mov	r0, r7
 800397a:	f7ff ffa7 	bl	80038cc <sbrk_aligned>
 800397e:	3001      	adds	r0, #1
 8003980:	d037      	beq.n	80039f2 <_malloc_r+0xe6>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	442b      	add	r3, r5
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	f8d8 3000 	ldr.w	r3, [r8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d038      	beq.n	8003a02 <_malloc_r+0xf6>
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	42a2      	cmp	r2, r4
 8003994:	d12b      	bne.n	80039ee <_malloc_r+0xe2>
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e00f      	b.n	80039bc <_malloc_r+0xb0>
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	1b52      	subs	r2, r2, r5
 80039a0:	d41f      	bmi.n	80039e2 <_malloc_r+0xd6>
 80039a2:	2a0b      	cmp	r2, #11
 80039a4:	d917      	bls.n	80039d6 <_malloc_r+0xca>
 80039a6:	1961      	adds	r1, r4, r5
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	6025      	str	r5, [r4, #0]
 80039ac:	bf18      	it	ne
 80039ae:	6059      	strne	r1, [r3, #4]
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	bf08      	it	eq
 80039b4:	f8c8 1000 	streq.w	r1, [r8]
 80039b8:	5162      	str	r2, [r4, r5]
 80039ba:	604b      	str	r3, [r1, #4]
 80039bc:	4638      	mov	r0, r7
 80039be:	f104 060b 	add.w	r6, r4, #11
 80039c2:	f000 f829 	bl	8003a18 <__malloc_unlock>
 80039c6:	f026 0607 	bic.w	r6, r6, #7
 80039ca:	1d23      	adds	r3, r4, #4
 80039cc:	1af2      	subs	r2, r6, r3
 80039ce:	d0ae      	beq.n	800392e <_malloc_r+0x22>
 80039d0:	1b9b      	subs	r3, r3, r6
 80039d2:	50a3      	str	r3, [r4, r2]
 80039d4:	e7ab      	b.n	800392e <_malloc_r+0x22>
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	6862      	ldr	r2, [r4, #4]
 80039da:	d1dd      	bne.n	8003998 <_malloc_r+0x8c>
 80039dc:	f8c8 2000 	str.w	r2, [r8]
 80039e0:	e7ec      	b.n	80039bc <_malloc_r+0xb0>
 80039e2:	4623      	mov	r3, r4
 80039e4:	6864      	ldr	r4, [r4, #4]
 80039e6:	e7ac      	b.n	8003942 <_malloc_r+0x36>
 80039e8:	4634      	mov	r4, r6
 80039ea:	6876      	ldr	r6, [r6, #4]
 80039ec:	e7b4      	b.n	8003958 <_malloc_r+0x4c>
 80039ee:	4613      	mov	r3, r2
 80039f0:	e7cc      	b.n	800398c <_malloc_r+0x80>
 80039f2:	230c      	movs	r3, #12
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4638      	mov	r0, r7
 80039f8:	f000 f80e 	bl	8003a18 <__malloc_unlock>
 80039fc:	e797      	b.n	800392e <_malloc_r+0x22>
 80039fe:	6025      	str	r5, [r4, #0]
 8003a00:	e7dc      	b.n	80039bc <_malloc_r+0xb0>
 8003a02:	605b      	str	r3, [r3, #4]
 8003a04:	deff      	udf	#255	; 0xff
 8003a06:	bf00      	nop
 8003a08:	20012f4c 	.word	0x20012f4c

08003a0c <__malloc_lock>:
 8003a0c:	4801      	ldr	r0, [pc, #4]	; (8003a14 <__malloc_lock+0x8>)
 8003a0e:	f7ff bf0f 	b.w	8003830 <__retarget_lock_acquire_recursive>
 8003a12:	bf00      	nop
 8003a14:	20012f48 	.word	0x20012f48

08003a18 <__malloc_unlock>:
 8003a18:	4801      	ldr	r0, [pc, #4]	; (8003a20 <__malloc_unlock+0x8>)
 8003a1a:	f7ff bf0a 	b.w	8003832 <__retarget_lock_release_recursive>
 8003a1e:	bf00      	nop
 8003a20:	20012f48 	.word	0x20012f48

08003a24 <__sflush_r>:
 8003a24:	898a      	ldrh	r2, [r1, #12]
 8003a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	0710      	lsls	r0, r2, #28
 8003a2e:	460c      	mov	r4, r1
 8003a30:	d458      	bmi.n	8003ae4 <__sflush_r+0xc0>
 8003a32:	684b      	ldr	r3, [r1, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	dc05      	bgt.n	8003a44 <__sflush_r+0x20>
 8003a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dc02      	bgt.n	8003a44 <__sflush_r+0x20>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a46:	2e00      	cmp	r6, #0
 8003a48:	d0f9      	beq.n	8003a3e <__sflush_r+0x1a>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a50:	682f      	ldr	r7, [r5, #0]
 8003a52:	6a21      	ldr	r1, [r4, #32]
 8003a54:	602b      	str	r3, [r5, #0]
 8003a56:	d032      	beq.n	8003abe <__sflush_r+0x9a>
 8003a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	075a      	lsls	r2, r3, #29
 8003a5e:	d505      	bpl.n	8003a6c <__sflush_r+0x48>
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	1ac0      	subs	r0, r0, r3
 8003a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a66:	b10b      	cbz	r3, 8003a6c <__sflush_r+0x48>
 8003a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a6a:	1ac0      	subs	r0, r0, r3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a72:	6a21      	ldr	r1, [r4, #32]
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b0      	blx	r6
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	d106      	bne.n	8003a8c <__sflush_r+0x68>
 8003a7e:	6829      	ldr	r1, [r5, #0]
 8003a80:	291d      	cmp	r1, #29
 8003a82:	d82b      	bhi.n	8003adc <__sflush_r+0xb8>
 8003a84:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <__sflush_r+0x108>)
 8003a86:	410a      	asrs	r2, r1
 8003a88:	07d6      	lsls	r6, r2, #31
 8003a8a:	d427      	bmi.n	8003adc <__sflush_r+0xb8>
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	6062      	str	r2, [r4, #4]
 8003a90:	04d9      	lsls	r1, r3, #19
 8003a92:	6922      	ldr	r2, [r4, #16]
 8003a94:	6022      	str	r2, [r4, #0]
 8003a96:	d504      	bpl.n	8003aa2 <__sflush_r+0x7e>
 8003a98:	1c42      	adds	r2, r0, #1
 8003a9a:	d101      	bne.n	8003aa0 <__sflush_r+0x7c>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b903      	cbnz	r3, 8003aa2 <__sflush_r+0x7e>
 8003aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8003aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aa4:	602f      	str	r7, [r5, #0]
 8003aa6:	2900      	cmp	r1, #0
 8003aa8:	d0c9      	beq.n	8003a3e <__sflush_r+0x1a>
 8003aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aae:	4299      	cmp	r1, r3
 8003ab0:	d002      	beq.n	8003ab8 <__sflush_r+0x94>
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f7ff febe 	bl	8003834 <_free_r>
 8003ab8:	2000      	movs	r0, #0
 8003aba:	6360      	str	r0, [r4, #52]	; 0x34
 8003abc:	e7c0      	b.n	8003a40 <__sflush_r+0x1c>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b0      	blx	r6
 8003ac4:	1c41      	adds	r1, r0, #1
 8003ac6:	d1c8      	bne.n	8003a5a <__sflush_r+0x36>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0c5      	beq.n	8003a5a <__sflush_r+0x36>
 8003ace:	2b1d      	cmp	r3, #29
 8003ad0:	d001      	beq.n	8003ad6 <__sflush_r+0xb2>
 8003ad2:	2b16      	cmp	r3, #22
 8003ad4:	d101      	bne.n	8003ada <__sflush_r+0xb6>
 8003ad6:	602f      	str	r7, [r5, #0]
 8003ad8:	e7b1      	b.n	8003a3e <__sflush_r+0x1a>
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	e7ad      	b.n	8003a40 <__sflush_r+0x1c>
 8003ae4:	690f      	ldr	r7, [r1, #16]
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	d0a9      	beq.n	8003a3e <__sflush_r+0x1a>
 8003aea:	0793      	lsls	r3, r2, #30
 8003aec:	680e      	ldr	r6, [r1, #0]
 8003aee:	bf08      	it	eq
 8003af0:	694b      	ldreq	r3, [r1, #20]
 8003af2:	600f      	str	r7, [r1, #0]
 8003af4:	bf18      	it	ne
 8003af6:	2300      	movne	r3, #0
 8003af8:	eba6 0807 	sub.w	r8, r6, r7
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	f1b8 0f00 	cmp.w	r8, #0
 8003b02:	dd9c      	ble.n	8003a3e <__sflush_r+0x1a>
 8003b04:	6a21      	ldr	r1, [r4, #32]
 8003b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b08:	4643      	mov	r3, r8
 8003b0a:	463a      	mov	r2, r7
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	47b0      	blx	r6
 8003b10:	2800      	cmp	r0, #0
 8003b12:	dc06      	bgt.n	8003b22 <__sflush_r+0xfe>
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b20:	e78e      	b.n	8003a40 <__sflush_r+0x1c>
 8003b22:	4407      	add	r7, r0
 8003b24:	eba8 0800 	sub.w	r8, r8, r0
 8003b28:	e7e9      	b.n	8003afe <__sflush_r+0xda>
 8003b2a:	bf00      	nop
 8003b2c:	dfbffffe 	.word	0xdfbffffe

08003b30 <_fflush_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	690b      	ldr	r3, [r1, #16]
 8003b34:	4605      	mov	r5, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	b913      	cbnz	r3, 8003b40 <_fflush_r+0x10>
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	b118      	cbz	r0, 8003b4a <_fflush_r+0x1a>
 8003b42:	6a03      	ldr	r3, [r0, #32]
 8003b44:	b90b      	cbnz	r3, 8003b4a <_fflush_r+0x1a>
 8003b46:	f7ff fc91 	bl	800346c <__sinit>
 8003b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f3      	beq.n	8003b3a <_fflush_r+0xa>
 8003b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b54:	07d0      	lsls	r0, r2, #31
 8003b56:	d404      	bmi.n	8003b62 <_fflush_r+0x32>
 8003b58:	0599      	lsls	r1, r3, #22
 8003b5a:	d402      	bmi.n	8003b62 <_fflush_r+0x32>
 8003b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b5e:	f7ff fe67 	bl	8003830 <__retarget_lock_acquire_recursive>
 8003b62:	4628      	mov	r0, r5
 8003b64:	4621      	mov	r1, r4
 8003b66:	f7ff ff5d 	bl	8003a24 <__sflush_r>
 8003b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b6c:	07da      	lsls	r2, r3, #31
 8003b6e:	4605      	mov	r5, r0
 8003b70:	d4e4      	bmi.n	8003b3c <_fflush_r+0xc>
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	059b      	lsls	r3, r3, #22
 8003b76:	d4e1      	bmi.n	8003b3c <_fflush_r+0xc>
 8003b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b7a:	f7ff fe5a 	bl	8003832 <__retarget_lock_release_recursive>
 8003b7e:	e7dd      	b.n	8003b3c <_fflush_r+0xc>

08003b80 <__swhatbuf_r>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	460c      	mov	r4, r1
 8003b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b88:	2900      	cmp	r1, #0
 8003b8a:	b096      	sub	sp, #88	; 0x58
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	461e      	mov	r6, r3
 8003b90:	da0d      	bge.n	8003bae <__swhatbuf_r+0x2e>
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	bf0c      	ite	eq
 8003b9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003ba2:	2340      	movne	r3, #64	; 0x40
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	6031      	str	r1, [r6, #0]
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	b016      	add	sp, #88	; 0x58
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
 8003bae:	466a      	mov	r2, sp
 8003bb0:	f000 f848 	bl	8003c44 <_fstat_r>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	dbec      	blt.n	8003b92 <__swhatbuf_r+0x12>
 8003bb8:	9901      	ldr	r1, [sp, #4]
 8003bba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003bbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003bc2:	4259      	negs	r1, r3
 8003bc4:	4159      	adcs	r1, r3
 8003bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bca:	e7eb      	b.n	8003ba4 <__swhatbuf_r+0x24>

08003bcc <__smakebuf_r>:
 8003bcc:	898b      	ldrh	r3, [r1, #12]
 8003bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bd0:	079d      	lsls	r5, r3, #30
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	d507      	bpl.n	8003be8 <__smakebuf_r+0x1c>
 8003bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	6123      	str	r3, [r4, #16]
 8003be0:	2301      	movs	r3, #1
 8003be2:	6163      	str	r3, [r4, #20]
 8003be4:	b002      	add	sp, #8
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	ab01      	add	r3, sp, #4
 8003bea:	466a      	mov	r2, sp
 8003bec:	f7ff ffc8 	bl	8003b80 <__swhatbuf_r>
 8003bf0:	9900      	ldr	r1, [sp, #0]
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f7ff fe89 	bl	800390c <_malloc_r>
 8003bfa:	b948      	cbnz	r0, 8003c10 <__smakebuf_r+0x44>
 8003bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c00:	059a      	lsls	r2, r3, #22
 8003c02:	d4ef      	bmi.n	8003be4 <__smakebuf_r+0x18>
 8003c04:	f023 0303 	bic.w	r3, r3, #3
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	81a3      	strh	r3, [r4, #12]
 8003c0e:	e7e3      	b.n	8003bd8 <__smakebuf_r+0xc>
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	6020      	str	r0, [r4, #0]
 8003c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c18:	81a3      	strh	r3, [r4, #12]
 8003c1a:	9b00      	ldr	r3, [sp, #0]
 8003c1c:	6163      	str	r3, [r4, #20]
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	6120      	str	r0, [r4, #16]
 8003c22:	b15b      	cbz	r3, 8003c3c <__smakebuf_r+0x70>
 8003c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f000 f81d 	bl	8003c68 <_isatty_r>
 8003c2e:	b128      	cbz	r0, 8003c3c <__smakebuf_r+0x70>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	431d      	orrs	r5, r3
 8003c40:	81a5      	strh	r5, [r4, #12]
 8003c42:	e7cf      	b.n	8003be4 <__smakebuf_r+0x18>

08003c44 <_fstat_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d07      	ldr	r5, [pc, #28]	; (8003c64 <_fstat_r+0x20>)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	602b      	str	r3, [r5, #0]
 8003c52:	f7fc fee8 	bl	8000a26 <_fstat>
 8003c56:	1c43      	adds	r3, r0, #1
 8003c58:	d102      	bne.n	8003c60 <_fstat_r+0x1c>
 8003c5a:	682b      	ldr	r3, [r5, #0]
 8003c5c:	b103      	cbz	r3, 8003c60 <_fstat_r+0x1c>
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	bd38      	pop	{r3, r4, r5, pc}
 8003c62:	bf00      	nop
 8003c64:	20012f44 	.word	0x20012f44

08003c68 <_isatty_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4d06      	ldr	r5, [pc, #24]	; (8003c84 <_isatty_r+0x1c>)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4608      	mov	r0, r1
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	f7fc fee7 	bl	8000a46 <_isatty>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d102      	bne.n	8003c82 <_isatty_r+0x1a>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	b103      	cbz	r3, 8003c82 <_isatty_r+0x1a>
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	20012f44 	.word	0x20012f44

08003c88 <_sbrk_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4d06      	ldr	r5, [pc, #24]	; (8003ca4 <_sbrk_r+0x1c>)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	f7fc fef0 	bl	8000a78 <_sbrk>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_sbrk_r+0x1a>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_sbrk_r+0x1a>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	20012f44 	.word	0x20012f44

08003ca8 <_init>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_fini>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr
