
multiple_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000020c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003dc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003dc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000145e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000052c  00000000  00000000  000214d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00021be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f81d  00000000  00000000  00021d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002457  00000000  00000000  00041550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2cf6  00000000  00000000  000439a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000558  00000000  00000000  001066a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00106bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003b8 	.word	0x080003b8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080003b8 	.word	0x080003b8

08000204 <GPIO_init>:
#include"stm32f4xx.h"
#include"gpio.h"
void GPIO_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	GPIOA->MODER |=(1<<10);
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <GPIO_init+0x1c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <GPIO_init+0x1c>)
 800020e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000212:	6013      	str	r3, [r2, #0]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40020000 	.word	0x40020000

08000224 <main>:
#include "stm32f4xx.h"
#include"gpio.h"
int main()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=(1<<0);
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <main+0x4c>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a10      	ldr	r2, [pc, #64]	; (8000270 <main+0x4c>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR|=(1<<2);
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <main+0x4c>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <main+0x4c>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_init();
 8000240:	f7ff ffe0 	bl	8000204 <GPIO_init>
	while(1)
	{
		if(GPIOC->IDR &=(1<<13))
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <main+0x50>)
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <main+0x50>)
 800024a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800024e:	6113      	str	r3, [r2, #16]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d006      	beq.n	8000262 <main+0x3e>
			GPIOA->BSRR |=~(1<<5);
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0x54>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <main+0x54>)
 800025a:	f063 0320 	orn	r3, r3, #32
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	e7f0      	b.n	8000244 <main+0x20>
		else
			GPIOA->BSRR |=(1<<5);
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <main+0x54>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a04      	ldr	r2, [pc, #16]	; (8000278 <main+0x54>)
 8000268:	f043 0320 	orr.w	r3, r3, #32
 800026c:	6193      	str	r3, [r2, #24]
		if(GPIOC->IDR &=(1<<13))
 800026e:	e7e9      	b.n	8000244 <main+0x20>
 8000270:	40023800 	.word	0x40023800
 8000274:	40020800 	.word	0x40020800
 8000278:	40020000 	.word	0x40020000

0800027c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <NMI_Handler+0x4>

08000282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000286:	e7fe      	b.n	8000286 <HardFault_Handler+0x4>

08000288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800028c:	e7fe      	b.n	800028c <MemManage_Handler+0x4>

0800028e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000292:	e7fe      	b.n	8000292 <BusFault_Handler+0x4>

08000294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000298:	e7fe      	b.n	8000298 <UsageFault_Handler+0x4>

0800029a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c8:	f000 f83e 	bl	8000348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <SystemInit+0x20>)
 80002d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002da:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <SystemInit+0x20>)
 80002dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800032c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002fa:	490e      	ldr	r1, [pc, #56]	; (8000334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0b      	ldr	r2, [pc, #44]	; (800033c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000310:	4c0b      	ldr	r4, [pc, #44]	; (8000340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800031e:	f7ff ffd7 	bl	80002d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 f825 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000326:	f7ff ff7d 	bl	8000224 <main>
  bx  lr    
 800032a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800032c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000338:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 800033c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000340:	20000024 	.word	0x20000024

08000344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC_IRQHandler>
	...

08000348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_IncTick+0x20>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	461a      	mov	r2, r3
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <HAL_IncTick+0x24>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4413      	add	r3, r2
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <HAL_IncTick+0x24>)
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000
 800036c:	20000020 	.word	0x20000020

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	; (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	; (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	; (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	; (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
