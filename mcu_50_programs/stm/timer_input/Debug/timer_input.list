
timer_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004b8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004bc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004bc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001477  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c3  00000000  00000000  000214ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  000219b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000146  00000000  00000000  00021b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6bb  00000000  00000000  00021cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e85  00000000  00000000  00041389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2dcf  00000000  00000000  0004320e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000568  00000000  00000000  00105fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00106548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000498 	.word	0x08000498

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000498 	.word	0x08000498

08000204 <main>:
#define AFR5_TIM	(1U<<20)
#define SR_CC1IF (1U<<1)
uint32_t timestamp;

int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	tim2_pa5_output_compare();
 8000208:	f000 f812 	bl	8000230 <tim2_pa5_output_compare>
	tim3_pa6_input_capture();
 800020c:	f000 f864 	bl	80002d8 <tim3_pa6_input_capture>
	//unsigned int tmp = TIM2 -> ARR;
	while(1)
	{
		/*ait until edge is captured*/
		while(!(TIM3->SR & SR_CC1IF)){}
 8000210:	bf00      	nop
 8000212:	4b05      	ldr	r3, [pc, #20]	; (8000228 <main+0x24>)
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f003 0302 	and.w	r3, r3, #2
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <main+0xe>

		timestamp =  TIM3->CCR1;
 800021e:	4b02      	ldr	r3, [pc, #8]	; (8000228 <main+0x24>)
 8000220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000222:	4a02      	ldr	r2, [pc, #8]	; (800022c <main+0x28>)
 8000224:	6013      	str	r3, [r2, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 8000226:	e7f3      	b.n	8000210 <main+0xc>
 8000228:	40000400 	.word	0x40000400
 800022c:	20000020 	.word	0x20000020

08000230 <tim2_pa5_output_compare>:

	}
}
void tim2_pa5_output_compare(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0


	RCC->AHB1ENR |= GPIOAEN;
 8000234:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <tim2_pa5_output_compare+0xa0>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <tim2_pa5_output_compare+0xa0>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to alternate function*/
	GPIOA->MODER &= ~(1U << 10);
 8000240:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <tim2_pa5_output_compare+0xa4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a23      	ldr	r2, [pc, #140]	; (80002d4 <tim2_pa5_output_compare+0xa4>)
 8000246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <tim2_pa5_output_compare+0xa4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <tim2_pa5_output_compare+0xa4>)
 8000252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000256:	6013      	str	r3, [r2, #0]

	/*Set PA5 alternate function type to TIM2_CH1 (AF01)*/
	GPIOA->AFR[0] |= AFR5_TIM;
 8000258:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <tim2_pa5_output_compare+0xa4>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <tim2_pa5_output_compare+0xa4>)
 800025e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000262:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim2*/
	RCC->APB1ENR |= TIM2EN;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <tim2_pa5_output_compare+0xa0>)
 8000266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000268:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <tim2_pa5_output_compare+0xa0>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC =  16000 - 1 ;  //  16 000 000 / 1 600 = 10 000
 8000270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000274:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000278:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set auto-reload value*/
	TIM2->ARR =  1000 - 1;  // 10 000 / 10 000 = 1
 800027a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000282:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Set output compare toggle mode ccmr1*/

	TIM2 -> CCMR1 &= ~0xFFFFFFFC;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028e:	f003 0303 	and.w	r3, r3, #3
 8000292:	6193      	str	r3, [r2, #24]
	TIM2 -> CCMR1 |= 0x30;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002a2:	6193      	str	r3, [r2, #24]

	/*Enable tim2 ch1 in compare mode ccer*/

	TIM2 -> CCER |= 1;
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a8:	6a1b      	ldr	r3, [r3, #32]
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6213      	str	r3, [r2, #32]


	/*Clear counter*/
	TIM2->CNT = 0;
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c0:	2201      	movs	r2, #1
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000

080002d8 <tim3_pa6_input_capture>:
#define AFR5_TIM	(1U<<20)
#define AFR6_TIM	(1U<<25)
#define CCER_CC1S       (1U<<0)

void tim3_pa6_input_capture(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

	/*Enable clock access to GPIOA*/

	RCC -> AHB1ENR|=1;
 80002dc:	4b1c      	ldr	r3, [pc, #112]	; (8000350 <tim3_pa6_input_capture+0x78>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e0:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <tim3_pa6_input_capture+0x78>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA6 mode to alternate function*/

	GPIOA -> MODER &= ~(1 << 12);
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <tim3_pa6_input_capture+0x7c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a19      	ldr	r2, [pc, #100]	; (8000354 <tim3_pa6_input_capture+0x7c>)
 80002ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002f2:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (1 << 13);
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <tim3_pa6_input_capture+0x7c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a16      	ldr	r2, [pc, #88]	; (8000354 <tim3_pa6_input_capture+0x7c>)
 80002fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002fe:	6013      	str	r3, [r2, #0]
	/*Set PA6 alternate function type to TIM3_CH1 (AF02)*/

	GPIOA -> AFR[0] |= AFR6_TIM;
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <tim3_pa6_input_capture+0x7c>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <tim3_pa6_input_capture+0x7c>)
 8000306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800030a:	6213      	str	r3, [r2, #32]

    /*Enable clock access to tim3*/

    RCC -> APB1ENR |= TIM3EN;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <tim3_pa6_input_capture+0x78>)
 800030e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000310:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <tim3_pa6_input_capture+0x78>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set Prescaler*/
	TIM3->PSC = 16000 -1; // 16 000 000 /16 000
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <tim3_pa6_input_capture+0x80>)
 800031a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set CH1 to input capture ccmr1*/

	TIM3 -> CCMR1 |= CCER_CC1S;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <tim3_pa6_input_capture+0x80>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <tim3_pa6_input_capture+0x80>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6193      	str	r3, [r2, #24]

	/*Set CH1 to capture at rising edge ccer*/

	TIM3 -> CCER |= CCER_CC1E;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <tim3_pa6_input_capture+0x80>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a09      	ldr	r2, [pc, #36]	; (8000358 <tim3_pa6_input_capture+0x80>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6213      	str	r3, [r2, #32]

	/*Enable TIM3*/

	TIM3 -> CR1 |= CR1_CEN;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <tim3_pa6_input_capture+0x80>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <tim3_pa6_input_capture+0x80>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020000 	.word	0x40020000
 8000358:	40000400 	.word	0x40000400

0800035c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <NMI_Handler+0x4>

08000362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <HardFault_Handler+0x4>

08000368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <MemManage_Handler+0x4>

0800036e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <BusFault_Handler+0x4>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <UsageFault_Handler+0x4>

0800037a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a8:	f000 f83e 	bl	8000428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <SystemInit+0x20>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <SystemInit+0x20>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800040c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003da:	490e      	ldr	r1, [pc, #56]	; (8000414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003f0:	4c0b      	ldr	r4, [pc, #44]	; (8000420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003fe:	f7ff ffd7 	bl	80003b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000402:	f000 f825 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000406:	f7ff fefd 	bl	8000204 <main>
  bx  lr    
 800040a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800040c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000418:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 800041c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000420:	20000028 	.word	0x20000028

08000424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC_IRQHandler>
	...

08000428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_IncTick+0x20>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_IncTick+0x24>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4413      	add	r3, r2
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_IncTick+0x24>)
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000000 	.word	0x20000000
 800044c:	20000024 	.word	0x20000024

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	; (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	; (800048c <__libc_init_array+0x3c>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2600      	movs	r6, #0
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	; (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2600      	movs	r6, #0
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
