
BAll_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800350c  0800350c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003514  08003514  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800351c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000005c  08003578  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003578  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e29  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000158f  00000000  00000000  00027ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00029488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000522  00000000  00000000  00029b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d6b  00000000  00000000  0002a062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d9a  00000000  00000000  0004adcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7a75  00000000  00000000  00053b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f60  00000000  00000000  0011b5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011d53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003380 	.word	0x08003380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003380 	.word	0x08003380

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
void WE10_Init(char *SSID, char *PASSWD);
void MX_USART1_UART_Init(void);
void MX_USART2_UART_Init(void);

int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0a2      	sub	sp, #136	; 0x88
 80005c0:	af02      	add	r7, sp, #8
  // Initialize HAL Library
  HAL_Init();
 80005c2:	f000 fcab 	bl	8000f1c <HAL_Init>

  // Configure the system clock
  SystemClock_Config();
 80005c6:	f000 fad7 	bl	8000b78 <SystemClock_Config>

  // Initialize peripherals (GPIO and UART in this case)
  MX_GPIO_Init();
 80005ca:	f000 fb3f 	bl	8000c4c <MX_GPIO_Init>
  MX_USART1_UART_Init(); // Initialize UART1
 80005ce:	f000 fa7f 	bl	8000ad0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init(); // Initialize UART2
 80005d2:	f000 faa7 	bl	8000b24 <MX_USART2_UART_Init>
  WE10_Init("iPhone 7", "123456789");
 80005d6:	492a      	ldr	r1, [pc, #168]	; (8000680 <main+0xc4>)
 80005d8:	482a      	ldr	r0, [pc, #168]	; (8000684 <main+0xc8>)
 80005da:	f000 f863 	bl	80006a4 <WE10_Init>
  MQTT_Init();
 80005de:	f000 f97b 	bl	80008d8 <MQTT_Init>
  char buffer[128];

  // Main loop
  while (1)
  {
    ballSensorState = HAL_GPIO_ReadPin(BALL_SENSOR_PORT, BALL_SENSOR_PIN);
 80005e2:	2101      	movs	r1, #1
 80005e4:	4828      	ldr	r0, [pc, #160]	; (8000688 <main+0xcc>)
 80005e6:	f000 ffa9 	bl	800153c <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <main+0xd0>)
 80005f0:	701a      	strb	r2, [r3, #0]

    // Check the state of the buzzer pin
    buzzerState = HAL_GPIO_ReadPin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN);
 80005f2:	2120      	movs	r1, #32
 80005f4:	4824      	ldr	r0, [pc, #144]	; (8000688 <main+0xcc>)
 80005f6:	f000 ffa1 	bl	800153c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <main+0xd4>)
 8000600:	701a      	strb	r2, [r3, #0]

    // Check the state of the onboard LED pin
    onboardLEDState = HAL_GPIO_ReadPin(ONBOARD_LED_PORT, ONBOARD_LED_PIN);
 8000602:	2120      	movs	r1, #32
 8000604:	4823      	ldr	r0, [pc, #140]	; (8000694 <main+0xd8>)
 8000606:	f000 ff99 	bl	800153c <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <main+0xdc>)
 8000610:	701a      	strb	r2, [r3, #0]

    sprintf(buffer, "Buzzer: %d, LED: %d, Ball Sensor: %d\r\n", buzzerState, onboardLEDState, ballSensorState);
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <main+0xd4>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <main+0xdc>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <main+0xd0>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4638      	mov	r0, r7
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	460b      	mov	r3, r1
 8000628:	491c      	ldr	r1, [pc, #112]	; (800069c <main+0xe0>)
 800062a:	f002 fa05 	bl	8002a38 <siprintf>
       HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800062e:	463b      	mov	r3, r7
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fded 	bl	8000210 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	4639      	mov	r1, r7
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000640:	4817      	ldr	r0, [pc, #92]	; (80006a0 <main+0xe4>)
 8000642:	f001 fde2 	bl	800220a <HAL_UART_Transmit>



    // Check the state of the BALL switch sensor (replace with your sensor input logic)
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)
 8000646:	2101      	movs	r1, #1
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <main+0xcc>)
 800064a:	f000 ff77 	bl	800153c <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d10a      	bne.n	800066a <main+0xae>
    {
      // BALL switch sensor is activated (tilted)
      // Turn on the buzzer
      HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2120      	movs	r1, #32
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <main+0xcc>)
 800065a:	f000 ff87 	bl	800156c <HAL_GPIO_WritePin>

      // Turn on the onboard LED
      HAL_GPIO_WritePin(ONBOARD_LED_PORT, ONBOARD_LED_PIN, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2120      	movs	r1, #32
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0xd8>)
 8000664:	f000 ff82 	bl	800156c <HAL_GPIO_WritePin>
 8000668:	e7bb      	b.n	80005e2 <main+0x26>
    }
    else
    {
      // BALL switch sensor is not activated (level)
      // Turn off the buzzer
      HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <main+0xcc>)
 8000670:	f000 ff7c 	bl	800156c <HAL_GPIO_WritePin>

      // Turn off the onboard LED
      HAL_GPIO_WritePin(ONBOARD_LED_PORT, ONBOARD_LED_PIN, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2120      	movs	r1, #32
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <main+0xd8>)
 800067a:	f000 ff77 	bl	800156c <HAL_GPIO_WritePin>
  {
 800067e:	e7b0      	b.n	80005e2 <main+0x26>
 8000680:	08003398 	.word	0x08003398
 8000684:	080033a4 	.word	0x080033a4
 8000688:	40020400 	.word	0x40020400
 800068c:	20000078 	.word	0x20000078
 8000690:	20000079 	.word	0x20000079
 8000694:	40020000 	.word	0x40020000
 8000698:	2000007a 	.word	0x2000007a
 800069c:	080033b0 	.word	0x080033b0
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <WE10_Init>:
    }
  }
}

void WE10_Init(char *SSID, char *PASSWD)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0a2      	sub	sp, #136	; 0x88
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  char buffer[128];
  // ... your initialization code for the WE10 module
  sprintf (&buffer[0], "CMD+RESET\r\n");
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	4983      	ldr	r1, [pc, #524]	; (80008c0 <WE10_Init+0x21c>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f9bf 	bl	8002a38 <siprintf>
  	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fda6 	bl	8000210 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	f107 0108 	add.w	r1, r7, #8
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	487c      	ldr	r0, [pc, #496]	; (80008c4 <WE10_Init+0x220>)
 80006d2:	f001 fd9a 	bl	800220a <HAL_UART_Transmit>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fd98 	bl	8000210 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f107 0108 	add.w	r1, r7, #8
 80006e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ec:	4876      	ldr	r0, [pc, #472]	; (80008c8 <WE10_Init+0x224>)
 80006ee:	f001 fd8c 	bl	800220a <HAL_UART_Transmit>

  	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd8a 	bl	8000210 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f107 0108 	add.w	r1, r7, #8
 8000704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000708:	486e      	ldr	r0, [pc, #440]	; (80008c4 <WE10_Init+0x220>)
 800070a:	f001 fe10 	bl	800232e <HAL_UART_Receive>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd7c 	bl	8000210 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	f107 0108 	add.w	r1, r7, #8
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	4868      	ldr	r0, [pc, #416]	; (80008c8 <WE10_Init+0x224>)
 8000726:	f001 fd70 	bl	800220a <HAL_UART_Transmit>


  	/*********  CMD+WIFIMODE=1  **********/
  	//memset(&buffer[0],0x00,strlen(buffer));
  	sprintf (&buffer[0], "CMD+WIFIMODE=1\r\n");
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4967      	ldr	r1, [pc, #412]	; (80008cc <WE10_Init+0x228>)
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f981 	bl	8002a38 <siprintf>
  	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd68 	bl	8000210 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29a      	uxth	r2, r3
 8000744:	f107 0108 	add.w	r1, r7, #8
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	485d      	ldr	r0, [pc, #372]	; (80008c4 <WE10_Init+0x220>)
 800074e:	f001 fd5c 	bl	800220a <HAL_UART_Transmit>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd5a 	bl	8000210 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	b29a      	uxth	r2, r3
 8000760:	f107 0108 	add.w	r1, r7, #8
 8000764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000768:	4857      	ldr	r0, [pc, #348]	; (80008c8 <WE10_Init+0x224>)
 800076a:	f001 fd4e 	bl	800220a <HAL_UART_Transmit>

  	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd4c 	bl	8000210 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	f107 0108 	add.w	r1, r7, #8
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	484f      	ldr	r0, [pc, #316]	; (80008c4 <WE10_Init+0x220>)
 8000786:	f001 fdd2 	bl	800232e <HAL_UART_Receive>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fd3e 	bl	8000210 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b29a      	uxth	r2, r3
 8000798:	f107 0108 	add.w	r1, r7, #8
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	4849      	ldr	r0, [pc, #292]	; (80008c8 <WE10_Init+0x224>)
 80007a2:	f001 fd32 	bl	800220a <HAL_UART_Transmit>


  	/********* CMD+CONTOAP=SSID,PASSWD **********/
  	//memset(&buffer[0],0x00,strlen(buffer));
  	sprintf (&buffer[0], "CMD+CONTOAP=Realme 5.0GHz,12345678\r\n", SSID, PASSWD);
 80007a6:	f107 0008 	add.w	r0, r7, #8
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4948      	ldr	r1, [pc, #288]	; (80008d0 <WE10_Init+0x22c>)
 80007b0:	f002 f942 	bl	8002a38 <siprintf>
  	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd29 	bl	8000210 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f107 0108 	add.w	r1, r7, #8
 80007c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80007ca:	483e      	ldr	r0, [pc, #248]	; (80008c4 <WE10_Init+0x220>)
 80007cc:	f001 fd1d 	bl	800220a <HAL_UART_Transmit>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd1b 	bl	8000210 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	f107 0108 	add.w	r1, r7, #8
 80007e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80007e6:	4838      	ldr	r0, [pc, #224]	; (80008c8 <WE10_Init+0x224>)
 80007e8:	f001 fd0f 	bl	800220a <HAL_UART_Transmit>
  	//memset(&buffer[0],0x00,strlen(buffer));
  	HAL_Delay(2000);
 80007ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f0:	f000 fc06 	bl	8001000 <HAL_Delay>
  	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd09 	bl	8000210 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	f107 0108 	add.w	r1, r7, #8
 8000806:	f242 7310 	movw	r3, #10000	; 0x2710
 800080a:	482e      	ldr	r0, [pc, #184]	; (80008c4 <WE10_Init+0x220>)
 800080c:	f001 fd8f 	bl	800232e <HAL_UART_Receive>
  	HAL_Delay(500);
 8000810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000814:	f000 fbf4 	bl	8001000 <HAL_Delay>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcf7 	bl	8000210 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f107 0108 	add.w	r1, r7, #8
 800082a:	f242 7310 	movw	r3, #10000	; 0x2710
 800082e:	4826      	ldr	r0, [pc, #152]	; (80008c8 <WE10_Init+0x224>)
 8000830:	f001 fceb 	bl	800220a <HAL_UART_Transmit>

  	/********* CMD?WIFI**********/
  	//memset(&buffer[0],0x00,strlen(buffer));
  	sprintf (&buffer[0], "CMD?WIFI\r\n");
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	4926      	ldr	r1, [pc, #152]	; (80008d4 <WE10_Init+0x230>)
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f8fc 	bl	8002a38 <siprintf>
  	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fce3 	bl	8000210 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	f107 0108 	add.w	r1, r7, #8
 8000852:	f242 7310 	movw	r3, #10000	; 0x2710
 8000856:	481b      	ldr	r0, [pc, #108]	; (80008c4 <WE10_Init+0x220>)
 8000858:	f001 fcd7 	bl	800220a <HAL_UART_Transmit>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcd5 	bl	8000210 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	f107 0108 	add.w	r1, r7, #8
 800086e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000872:	4815      	ldr	r0, [pc, #84]	; (80008c8 <WE10_Init+0x224>)
 8000874:	f001 fcc9 	bl	800220a <HAL_UART_Transmit>
  //	memset(&buffer[0],0x00,strlen(buffer));
  //	HAL_Delay(500);
  	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fcc7 	bl	8000210 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f242 7310 	movw	r3, #10000	; 0x2710
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <WE10_Init+0x220>)
 8000890:	f001 fd4d 	bl	800232e <HAL_UART_Receive>
  	HAL_Delay(500);
 8000894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000898:	f000 fbb2 	bl	8001000 <HAL_Delay>
  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fcb5 	bl	8000210 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f107 0108 	add.w	r1, r7, #8
 80008ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <WE10_Init+0x224>)
 80008b4:	f001 fca9 	bl	800220a <HAL_UART_Transmit>

}
 80008b8:	bf00      	nop
 80008ba:	3788      	adds	r7, #136	; 0x88
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	080033d8 	.word	0x080033d8
 80008c4:	2000007c 	.word	0x2000007c
 80008c8:	200000c0 	.word	0x200000c0
 80008cc:	080033e4 	.word	0x080033e4
 80008d0:	080033f8 	.word	0x080033f8
 80008d4:	08003420 	.word	0x08003420

080008d8 <MQTT_Init>:
void MQTT_Init()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a0      	sub	sp, #128	; 0x80
 80008dc:	af00      	add	r7, sp, #0

	char buffer[128];

	/*********CMD+MQTTNETCFG **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
 80008de:	463b      	mov	r3, r7
 80008e0:	4975      	ldr	r1, [pc, #468]	; (8000ab8 <MQTT_Init+0x1e0>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 f8a8 	bl	8002a38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80008e8:	463b      	mov	r3, r7
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fc90 	bl	8000210 <strlen>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4639      	mov	r1, r7
 80008f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80008fa:	4870      	ldr	r0, [pc, #448]	; (8000abc <MQTT_Init+0x1e4>)
 80008fc:	f001 fc85 	bl	800220a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8000900:	463b      	mov	r3, r7
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc84 	bl	8000210 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	4639      	mov	r1, r7
 800090e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000912:	486b      	ldr	r0, [pc, #428]	; (8000ac0 <MQTT_Init+0x1e8>)
 8000914:	f001 fc79 	bl	800220a <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8000918:	463b      	mov	r3, r7
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc78 	bl	8000210 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	4639      	mov	r1, r7
 8000926:	f242 7310 	movw	r3, #10000	; 0x2710
 800092a:	4864      	ldr	r0, [pc, #400]	; (8000abc <MQTT_Init+0x1e4>)
 800092c:	f001 fcff 	bl	800232e <HAL_UART_Receive>
	HAL_Delay(500);
 8000930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000934:	f000 fb64 	bl	8001000 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8000938:	463b      	mov	r3, r7
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc68 	bl	8000210 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	4639      	mov	r1, r7
 8000946:	f242 7310 	movw	r3, #10000	; 0x2710
 800094a:	485d      	ldr	r0, [pc, #372]	; (8000ac0 <MQTT_Init+0x1e8>)
 800094c:	f001 fc5d 	bl	800220a <HAL_UART_Transmit>


	/*********CMD+MQTTCONCFG---->LED **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTCONCFG=3,mqtt-elmanjunath04-8gnaz2,,,,,,,,,\r\n");
 8000950:	463b      	mov	r3, r7
 8000952:	495c      	ldr	r1, [pc, #368]	; (8000ac4 <MQTT_Init+0x1ec>)
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f86f 	bl	8002a38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800095a:	463b      	mov	r3, r7
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc57 	bl	8000210 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	4639      	mov	r1, r7
 8000968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096c:	4853      	ldr	r0, [pc, #332]	; (8000abc <MQTT_Init+0x1e4>)
 800096e:	f001 fc4c 	bl	800220a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8000972:	463b      	mov	r3, r7
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc4b 	bl	8000210 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	4639      	mov	r1, r7
 8000980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000984:	484e      	ldr	r0, [pc, #312]	; (8000ac0 <MQTT_Init+0x1e8>)
 8000986:	f001 fc40 	bl	800220a <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800098a:	463b      	mov	r3, r7
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc3f 	bl	8000210 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	4639      	mov	r1, r7
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	4847      	ldr	r0, [pc, #284]	; (8000abc <MQTT_Init+0x1e4>)
 800099e:	f001 fcc6 	bl	800232e <HAL_UART_Receive>
	HAL_Delay(500);
 80009a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a6:	f000 fb2b 	bl	8001000 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc2f 	bl	8000210 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4639      	mov	r1, r7
 80009b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009bc:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <MQTT_Init+0x1e8>)
 80009be:	f001 fc24 	bl	800220a <HAL_UART_Transmit>


	/*********CMD+MQTTSTART **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSTART=1\r\n");
 80009c2:	463b      	mov	r3, r7
 80009c4:	4940      	ldr	r1, [pc, #256]	; (8000ac8 <MQTT_Init+0x1f0>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 f836 	bl	8002a38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80009cc:	463b      	mov	r3, r7
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fc1e 	bl	8000210 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4639      	mov	r1, r7
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	4837      	ldr	r0, [pc, #220]	; (8000abc <MQTT_Init+0x1e4>)
 80009e0:	f001 fc13 	bl	800220a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80009e4:	463b      	mov	r3, r7
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc12 	bl	8000210 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4639      	mov	r1, r7
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	4832      	ldr	r0, [pc, #200]	; (8000ac0 <MQTT_Init+0x1e8>)
 80009f8:	f001 fc07 	bl	800220a <HAL_UART_Transmit>
//	memset(&buffer[0],0x00,strlen(buffer));
	HAL_Delay(5000);
 80009fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a00:	f000 fafe 	bl	8001000 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8000a04:	463b      	mov	r3, r7
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fc02 	bl	8000210 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4639      	mov	r1, r7
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	4829      	ldr	r0, [pc, #164]	; (8000abc <MQTT_Init+0x1e4>)
 8000a18:	f001 fc89 	bl	800232e <HAL_UART_Receive>
	HAL_Delay(500);
 8000a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a20:	f000 faee 	bl	8001000 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8000a24:	463b      	mov	r3, r7
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbf2 	bl	8000210 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4639      	mov	r1, r7
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	4822      	ldr	r0, [pc, #136]	; (8000ac0 <MQTT_Init+0x1e8>)
 8000a38:	f001 fbe7 	bl	800220a <HAL_UART_Transmit>

	/*********CMD+MQTTSUB *********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSUB=base/relay/led1\r\n");
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4923      	ldr	r1, [pc, #140]	; (8000acc <MQTT_Init+0x1f4>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fff9 	bl	8002a38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8000a46:	463b      	mov	r3, r7
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbe1 	bl	8000210 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4639      	mov	r1, r7
 8000a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <MQTT_Init+0x1e4>)
 8000a5a:	f001 fbd6 	bl	800220a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbd5 	bl	8000210 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4639      	mov	r1, r7
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <MQTT_Init+0x1e8>)
 8000a72:	f001 fbca 	bl	800220a <HAL_UART_Transmit>
	HAL_Delay(500);
 8000a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7a:	f000 fac1 	bl	8001000 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fbc5 	bl	8000210 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4639      	mov	r1, r7
 8000a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <MQTT_Init+0x1e4>)
 8000a92:	f001 fc4c 	bl	800232e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fbb9 	bl	8000210 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4639      	mov	r1, r7
 8000aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MQTT_Init+0x1e8>)
 8000aaa:	f001 fbae 	bl	800220a <HAL_UART_Transmit>

}
 8000aae:	bf00      	nop
 8000ab0:	3780      	adds	r7, #128	; 0x80
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	0800342c 	.word	0x0800342c
 8000abc:	2000007c 	.word	0x2000007c
 8000ac0:	200000c0 	.word	0x200000c0
 8000ac4:	08003454 	.word	0x08003454
 8000ac8:	0800348c 	.word	0x0800348c
 8000acc:	080034a0 	.word	0x080034a0

08000ad0 <MX_USART1_UART_Init>:

// Add your UART initialization code for UART1
void MX_USART1_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	  /* USER CODE END USART1_Init 0 */

	  /* USER CODE BEGIN USART1_Init 1 */

	  /* USER CODE END USART1_Init 1 */
	  huart1.Instance = USART1;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_USART1_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 38400;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000adc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ae0:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000b08:	f001 fb32 	bl	8002170 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x46>
	  {
	    Error_Handler();
 8000b12:	f000 f8f3 	bl	8000cfc <Error_Handler>
	  }
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000007c 	.word	0x2000007c
 8000b20:	40011000 	.word	0x40011000

08000b24 <MX_USART2_UART_Init>:

// Add your UART initialization code for UART2
void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	  /* USER CODE END USART2_Init 0 */

	  /* USER CODE BEGIN USART2_Init 1 */

	  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_USART2_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 38400;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b34:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	f001 fb08 	bl	8002170 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART2_UART_Init+0x46>
	  {
	    Error_Handler();
 8000b66:	f000 f8c9 	bl	8000cfc <Error_Handler>
	  }
	  /* USER CODE BEGIN USART2_Init 2 */

	  /* USER CODE END USART2_Init 2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000c0 	.word	0x200000c0
 8000b74:	40004400 	.word	0x40004400

08000b78 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	; 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 ff76 	bl	8002a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  // ... your clock configuration code
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <SystemClock_Config+0xcc>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <SystemClock_Config+0xcc>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <SystemClock_Config+0xcc>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000be8:	2308      	movs	r3, #8
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 180;
 8000bec:	23b4      	movs	r3, #180	; 0xb4
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 f819 	bl	8001c34 <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x94>
    {
      Error_Handler();
 8000c08:	f000 f878 	bl	8000cfc <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	60bb      	str	r3, [r7, #8]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c10:	2302      	movs	r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c1c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c22:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2105      	movs	r1, #5
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fcb8 	bl	80015a0 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xc2>
    {
      Error_Handler();
 8000c36:	f000 f861 	bl	8000cfc <Error_Handler>
    }
}
 8000c3a:	bf00      	nop
 8000c3c:	3750      	adds	r7, #80	; 0x50
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_GPIO_Init>:

// GPIO Initialization
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
  // ... your GPIO initialization code
	  // GPIO Ports Clock Enable
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_GPIO_Init+0xa4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a25      	ldr	r2, [pc, #148]	; (8000cf0 <MX_GPIO_Init+0xa4>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_GPIO_Init+0xa4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_GPIO_Init+0xa4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <MX_GPIO_Init+0xa4>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0xa4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

	  // Configure the GPIO pin for the buzzer as an output
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = BUZZER_GPIO_PIN;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <MX_GPIO_Init+0xa8>)
 8000cb2:	f000 faaf 	bl	8001214 <HAL_GPIO_Init>

	  // Configure the GPIO pin for the BALL switch sensor as an input (replace with your sensor's configuration)
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <MX_GPIO_Init+0xa8>)
 8000cca:	f000 faa3 	bl	8001214 <HAL_GPIO_Init>

	  // Configure the GPIO pin for the onboard LED (LD2) as an output
	  GPIO_InitStruct.Pin = ONBOARD_LED_PIN;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(ONBOARD_LED_PORT, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_GPIO_Init+0xac>)
 8000ce2:	f000 fa97 	bl	8001214 <HAL_GPIO_Init>
}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40020000 	.word	0x40020000

08000cfc <Error_Handler>:

// Error handler function (customize it for your application)
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x4>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d42:	2007      	movs	r0, #7
 8000d44:	f000 fa32 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12b      	bne.n	8000dce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dae:	230c      	movs	r3, #12
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000dca:	f000 fa23 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f8c6 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f001 fe0e 	bl	8002a88 <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	20000104 	.word	0x20000104
 8000ea0:	20000258 	.word	0x20000258

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd7 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f001 fdcd 	bl	8002a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fb5f 	bl	80005bc <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f0c:	0800351c 	.word	0x0800351c
  ldr r2, =_sbss
 8000f10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f14:	20000254 	.word	0x20000254

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f931 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fed8 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f93b 	bl	80011fa <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f000 f911 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000108 	.word	0x20000108

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000108 	.word	0x20000108

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff47 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff5c 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffb0 	bl	8001168 <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	e165      	b.n	80014fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8154 	bne.w	80014f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	2b02      	cmp	r3, #2
 8001264:	d130      	bne.n	80012c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 0201 	and.w	r2, r3, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d017      	beq.n	8001304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d123      	bne.n	8001358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	69b9      	ldr	r1, [r7, #24]
 8001354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80ae 	beq.w	80014f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b5d      	ldr	r3, [pc, #372]	; (8001514 <HAL_GPIO_Init+0x300>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a5c      	ldr	r2, [pc, #368]	; (8001514 <HAL_GPIO_Init+0x300>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <HAL_GPIO_Init+0x300>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b6:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_GPIO_Init+0x304>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4f      	ldr	r2, [pc, #316]	; (800151c <HAL_GPIO_Init+0x308>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d025      	beq.n	800142e <HAL_GPIO_Init+0x21a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_GPIO_Init+0x30c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01f      	beq.n	800142a <HAL_GPIO_Init+0x216>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4d      	ldr	r2, [pc, #308]	; (8001524 <HAL_GPIO_Init+0x310>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d019      	beq.n	8001426 <HAL_GPIO_Init+0x212>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_GPIO_Init+0x314>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x20e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4b      	ldr	r2, [pc, #300]	; (800152c <HAL_GPIO_Init+0x318>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x20a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x31c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x206>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a49      	ldr	r2, [pc, #292]	; (8001534 <HAL_GPIO_Init+0x320>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x202>
 8001412:	2306      	movs	r3, #6
 8001414:	e00c      	b.n	8001430 <HAL_GPIO_Init+0x21c>
 8001416:	2307      	movs	r3, #7
 8001418:	e00a      	b.n	8001430 <HAL_GPIO_Init+0x21c>
 800141a:	2305      	movs	r3, #5
 800141c:	e008      	b.n	8001430 <HAL_GPIO_Init+0x21c>
 800141e:	2304      	movs	r3, #4
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x21c>
 8001422:	2303      	movs	r3, #3
 8001424:	e004      	b.n	8001430 <HAL_GPIO_Init+0x21c>
 8001426:	2302      	movs	r3, #2
 8001428:	e002      	b.n	8001430 <HAL_GPIO_Init+0x21c>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_GPIO_Init+0x21c>
 800142e:	2300      	movs	r3, #0
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	f002 0203 	and.w	r2, r2, #3
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4093      	lsls	r3, r2
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001440:	4935      	ldr	r1, [pc, #212]	; (8001518 <HAL_GPIO_Init+0x304>)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <HAL_GPIO_Init+0x324>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001472:	4a31      	ldr	r2, [pc, #196]	; (8001538 <HAL_GPIO_Init+0x324>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_GPIO_Init+0x324>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800149c:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_GPIO_Init+0x324>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_GPIO_Init+0x324>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_GPIO_Init+0x324>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_GPIO_Init+0x324>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_GPIO_Init+0x324>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	f67f ae96 	bls.w	8001230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40013800 	.word	0x40013800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40021400 	.word	0x40021400
 8001534:	40021800 	.word	0x40021800
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e001      	b.n	800155e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cc      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d90c      	bls.n	80015dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d044      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d003      	beq.n	800165e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	2b03      	cmp	r3, #3
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e067      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4934      	ldr	r1, [pc, #208]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff fcaa 	bl	8000fe8 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff fca6 	bl	8000fe8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e04f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d20c      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f855 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	490a      	ldr	r1, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	5ccb      	ldrb	r3, [r1, r3]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fc0a 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00
 800175c:	40023800 	.word	0x40023800
 8001760:	080034c0 	.word	0x080034c0
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_RCC_GetHCLKFreq+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001788:	f7ff fff0 	bl	800176c <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	0a9b      	lsrs	r3, r3, #10
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	080034d0 	.word	0x080034d0

080017ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017b0:	f7ff ffdc 	bl	800176c <HAL_RCC_GetHCLKFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	0b5b      	lsrs	r3, r3, #13
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	4903      	ldr	r1, [pc, #12]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	080034d0 	.word	0x080034d0

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d8:	b0ae      	sub	sp, #184	; 0xb8
 80017da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017fa:	4bcb      	ldr	r3, [pc, #812]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b0c      	cmp	r3, #12
 8001804:	f200 8206 	bhi.w	8001c14 <HAL_RCC_GetSysClockFreq+0x440>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <HAL_RCC_GetSysClockFreq+0x3c>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001845 	.word	0x08001845
 8001814:	08001c15 	.word	0x08001c15
 8001818:	08001c15 	.word	0x08001c15
 800181c:	08001c15 	.word	0x08001c15
 8001820:	0800184d 	.word	0x0800184d
 8001824:	08001c15 	.word	0x08001c15
 8001828:	08001c15 	.word	0x08001c15
 800182c:	08001c15 	.word	0x08001c15
 8001830:	08001855 	.word	0x08001855
 8001834:	08001c15 	.word	0x08001c15
 8001838:	08001c15 	.word	0x08001c15
 800183c:	08001c15 	.word	0x08001c15
 8001840:	08001a45 	.word	0x08001a45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4bb9      	ldr	r3, [pc, #740]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x358>)
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800184a:	e1e7      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184c:	4bb8      	ldr	r3, [pc, #736]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800184e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001852:	e1e3      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4bb4      	ldr	r3, [pc, #720]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001860:	4bb1      	ldr	r3, [pc, #708]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d071      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186c:	4bae      	ldr	r3, [pc, #696]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	2200      	movs	r2, #0
 8001874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001878:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800187c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800188e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001892:	4622      	mov	r2, r4
 8001894:	462b      	mov	r3, r5
 8001896:	f04f 0000 	mov.w	r0, #0
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	0159      	lsls	r1, r3, #5
 80018a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a4:	0150      	lsls	r0, r2, #5
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4621      	mov	r1, r4
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	6439      	str	r1, [r7, #64]	; 0x40
 80018b0:	4629      	mov	r1, r5
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018c4:	4649      	mov	r1, r9
 80018c6:	018b      	lsls	r3, r1, #6
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ce:	4641      	mov	r1, r8
 80018d0:	018a      	lsls	r2, r1, #6
 80018d2:	4641      	mov	r1, r8
 80018d4:	1a51      	subs	r1, r2, r1
 80018d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80018d8:	4649      	mov	r1, r9
 80018da:	eb63 0301 	sbc.w	r3, r3, r1
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018ec:	4649      	mov	r1, r9
 80018ee:	00cb      	lsls	r3, r1, #3
 80018f0:	4641      	mov	r1, r8
 80018f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018f6:	4641      	mov	r1, r8
 80018f8:	00ca      	lsls	r2, r1, #3
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	4622      	mov	r2, r4
 8001902:	189b      	adds	r3, r3, r2
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
 8001906:	462b      	mov	r3, r5
 8001908:	460a      	mov	r2, r1
 800190a:	eb42 0303 	adc.w	r3, r2, r3
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800191c:	4629      	mov	r1, r5
 800191e:	024b      	lsls	r3, r1, #9
 8001920:	4621      	mov	r1, r4
 8001922:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001926:	4621      	mov	r1, r4
 8001928:	024a      	lsls	r2, r1, #9
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001932:	2200      	movs	r2, #0
 8001934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800193c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001940:	f7fe fcbe 	bl	80002c0 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800194e:	e067      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001950:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	2200      	movs	r2, #0
 8001958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800195c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001960:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001968:	67bb      	str	r3, [r7, #120]	; 0x78
 800196a:	2300      	movs	r3, #0
 800196c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800196e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001972:	4622      	mov	r2, r4
 8001974:	462b      	mov	r3, r5
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	0159      	lsls	r1, r3, #5
 8001980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001984:	0150      	lsls	r0, r2, #5
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4621      	mov	r1, r4
 800198c:	1a51      	subs	r1, r2, r1
 800198e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001990:	4629      	mov	r1, r5
 8001992:	eb63 0301 	sbc.w	r3, r3, r1
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80019a4:	4649      	mov	r1, r9
 80019a6:	018b      	lsls	r3, r1, #6
 80019a8:	4641      	mov	r1, r8
 80019aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ae:	4641      	mov	r1, r8
 80019b0:	018a      	lsls	r2, r1, #6
 80019b2:	4641      	mov	r1, r8
 80019b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80019b8:	4649      	mov	r1, r9
 80019ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019d2:	4692      	mov	sl, r2
 80019d4:	469b      	mov	fp, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	eb1a 0303 	adds.w	r3, sl, r3
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	462b      	mov	r3, r5
 80019e0:	eb4b 0303 	adc.w	r3, fp, r3
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019f2:	4629      	mov	r1, r5
 80019f4:	028b      	lsls	r3, r1, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019fc:	4621      	mov	r1, r4
 80019fe:	028a      	lsls	r2, r1, #10
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a08:	2200      	movs	r2, #0
 8001a0a:	673b      	str	r3, [r7, #112]	; 0x70
 8001a0c:	677a      	str	r2, [r7, #116]	; 0x74
 8001a0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a12:	f7fe fc55 	bl	80002c0 <__aeabi_uldivmod>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a42:	e0eb      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a44:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a50:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d06b      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	2200      	movs	r2, #0
 8001a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a70:	2300      	movs	r3, #0
 8001a72:	667b      	str	r3, [r7, #100]	; 0x64
 8001a74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a78:	4622      	mov	r2, r4
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	0159      	lsls	r1, r3, #5
 8001a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8a:	0150      	lsls	r0, r2, #5
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4621      	mov	r1, r4
 8001a92:	1a51      	subs	r1, r2, r1
 8001a94:	61b9      	str	r1, [r7, #24]
 8001a96:	4629      	mov	r1, r5
 8001a98:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001aaa:	4659      	mov	r1, fp
 8001aac:	018b      	lsls	r3, r1, #6
 8001aae:	4651      	mov	r1, sl
 8001ab0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab4:	4651      	mov	r1, sl
 8001ab6:	018a      	lsls	r2, r1, #6
 8001ab8:	4651      	mov	r1, sl
 8001aba:	ebb2 0801 	subs.w	r8, r2, r1
 8001abe:	4659      	mov	r1, fp
 8001ac0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad8:	4690      	mov	r8, r2
 8001ada:	4699      	mov	r9, r3
 8001adc:	4623      	mov	r3, r4
 8001ade:	eb18 0303 	adds.w	r3, r8, r3
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	eb49 0303 	adc.w	r3, r9, r3
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001af8:	4629      	mov	r1, r5
 8001afa:	024b      	lsls	r3, r1, #9
 8001afc:	4621      	mov	r1, r4
 8001afe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b02:	4621      	mov	r1, r4
 8001b04:	024a      	lsls	r2, r1, #9
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b0e:	2200      	movs	r2, #0
 8001b10:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b18:	f7fe fbd2 	bl	80002c0 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b26:	e065      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x420>
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	4611      	mov	r1, r2
 8001b40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b44:	653b      	str	r3, [r7, #80]	; 0x50
 8001b46:	2300      	movs	r3, #0
 8001b48:	657b      	str	r3, [r7, #84]	; 0x54
 8001b4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b4e:	4642      	mov	r2, r8
 8001b50:	464b      	mov	r3, r9
 8001b52:	f04f 0000 	mov.w	r0, #0
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	0159      	lsls	r1, r3, #5
 8001b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b60:	0150      	lsls	r0, r2, #5
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4641      	mov	r1, r8
 8001b68:	1a51      	subs	r1, r2, r1
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b80:	4659      	mov	r1, fp
 8001b82:	018b      	lsls	r3, r1, #6
 8001b84:	4651      	mov	r1, sl
 8001b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	018a      	lsls	r2, r1, #6
 8001b8e:	4651      	mov	r1, sl
 8001b90:	1a54      	subs	r4, r2, r1
 8001b92:	4659      	mov	r1, fp
 8001b94:	eb63 0501 	sbc.w	r5, r3, r1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	00eb      	lsls	r3, r5, #3
 8001ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba6:	00e2      	lsls	r2, r4, #3
 8001ba8:	4614      	mov	r4, r2
 8001baa:	461d      	mov	r5, r3
 8001bac:	4643      	mov	r3, r8
 8001bae:	18e3      	adds	r3, r4, r3
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	eb45 0303 	adc.w	r3, r5, r3
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	028b      	lsls	r3, r1, #10
 8001bca:	4621      	mov	r1, r4
 8001bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	028a      	lsls	r2, r1, #10
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bdc:	2200      	movs	r2, #0
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001be2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001be6:	f7fe fb6b 	bl	80002c0 <__aeabi_uldivmod>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4613      	mov	r3, r2
 8001bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0f1b      	lsrs	r3, r3, #28
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c12:	e003      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	37b8      	adds	r7, #184	; 0xb8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	00f42400 	.word	0x00f42400

08001c34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e28d      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8083 	beq.w	8001d5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c60:	4b91      	ldr	r3, [pc, #580]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c6c:	4b8e      	ldr	r3, [pc, #568]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c78:	d00c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d112      	bne.n	8001cac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c92:	d10b      	bne.n	8001cac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	4b84      	ldr	r3, [pc, #528]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d05b      	beq.n	8001d58 <HAL_RCC_OscConfig+0x124>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d157      	bne.n	8001d58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e25a      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x90>
 8001cb6:	4b7c      	ldr	r3, [pc, #496]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7b      	ldr	r2, [pc, #492]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xcc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xb4>
 8001cce:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a75      	ldr	r2, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a72      	ldr	r2, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xcc>
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6b      	ldr	r2, [pc, #428]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f96e 	bl	8000fe8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f96a 	bl	8000fe8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e21f      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xdc>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f95a 	bl	8000fe8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff f956 	bl	8000fe8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e20b      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x104>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d06f      	beq.n	8001e46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d66:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d017      	beq.n	8001da2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d72:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d11c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x186>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1d3      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4937      	ldr	r1, [pc, #220]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	e03a      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_OscConfig+0x278>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f903 	bl	8000fe8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff f8ff 	bl	8000fe8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1b4      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4925      	ldr	r1, [pc, #148]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0x278>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff f8e2 	bl	8000fe8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff f8de 	bl	8000fe8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e193      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d036      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f8c2 	bl	8000fe8 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff f8be 	bl	8000fe8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e173      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x234>
 8001e86:	e01b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f8ab 	bl	8000fe8 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	e00e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff f8a7 	bl	8000fe8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d907      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e15c      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	42470000 	.word	0x42470000
 8001eb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b8a      	ldr	r3, [pc, #552]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ea      	bne.n	8001e96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8097 	beq.w	8001ffc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b83      	ldr	r3, [pc, #524]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b7c      	ldr	r3, [pc, #496]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff f867 	bl	8000fe8 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff f863 	bl	8000fe8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e118      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x31e>
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f50:	e01c      	b.n	8001f8c <HAL_RCC_OscConfig+0x358>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x340>
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a60      	ldr	r2, [pc, #384]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a5d      	ldr	r2, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0x358>
 8001f74:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a59      	ldr	r2, [pc, #356]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f828 	bl	8000fe8 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f824 	bl	8000fe8 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0d7      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ee      	beq.n	8001f9c <HAL_RCC_OscConfig+0x368>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f812 	bl	8000fe8 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f80e 	bl	8000fe8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0c1      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fde:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ee      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80ad 	beq.w	8002160 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002006:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b08      	cmp	r3, #8
 8002010:	d060      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d145      	bne.n	80020a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_RCC_OscConfig+0x4b4>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe ffe2 	bl	8000fe8 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f7fe ffde 	bl	8000fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e093      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	071b      	lsls	r3, r3, #28
 8002072:	491b      	ldr	r1, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x4b4>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe ffb3 	bl	8000fe8 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe ffaf 	bl	8000fe8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e064      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x452>
 80020a4:	e05c      	b.n	8002160 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_RCC_OscConfig+0x4b4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe ff9c 	bl	8000fe8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe ff98 	bl	8000fe8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e04d      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x480>
 80020d2:	e045      	b.n	8002160 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e040      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_RCC_OscConfig+0x538>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d030      	beq.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d129      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d122      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002124:	4293      	cmp	r3, r2
 8002126:	d119      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	3b01      	subs	r3, #1
 8002136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d10f      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800

08002170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e03f      	b.n	8002202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fddc 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f9cb 	bl	8002550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b08a      	sub	sp, #40	; 0x28
 800220e:	af02      	add	r7, sp, #8
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b20      	cmp	r3, #32
 8002228:	d17c      	bne.n	8002324 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_UART_Transmit+0x2c>
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e075      	b.n	8002326 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_UART_Transmit+0x3e>
 8002244:	2302      	movs	r3, #2
 8002246:	e06e      	b.n	8002326 <HAL_UART_Transmit+0x11c>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2221      	movs	r2, #33	; 0x21
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800225e:	f7fe fec3 	bl	8000fe8 <HAL_GetTick>
 8002262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002278:	d108      	bne.n	800228c <HAL_UART_Transmit+0x82>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	e003      	b.n	8002294 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800229c:	e02a      	b.n	80022f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f8e2 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e036      	b.n	8002326 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3302      	adds	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	e007      	b.n	80022e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1cf      	bne.n	800229e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f8b2 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e006      	b.n	8002326 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	; 0x28
 8002332:	af02      	add	r7, sp, #8
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b20      	cmp	r3, #32
 800234c:	f040 808c 	bne.w	8002468 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_UART_Receive+0x2e>
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e084      	b.n	800246a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_UART_Receive+0x40>
 800236a:	2302      	movs	r3, #2
 800236c:	e07d      	b.n	800246a <HAL_UART_Receive+0x13c>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2222      	movs	r2, #34	; 0x22
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7fe fe2d 	bl	8000fe8 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Receive+0x8a>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023c8:	e043      	b.n	8002452 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2120      	movs	r1, #32
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f84c 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e042      	b.n	800246a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	3302      	adds	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e01f      	b.n	8002444 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	d007      	beq.n	800241e <HAL_UART_Receive+0xf0>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_UART_Receive+0xfe>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e008      	b.n	800243e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002438:	b2da      	uxtb	r2, r3
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1b6      	bne.n	80023ca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b090      	sub	sp, #64	; 0x40
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002482:	e050      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800248a:	d04c      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800248c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002492:	f7fe fda9 	bl	8000fe8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800249e:	429a      	cmp	r2, r3
 80024a0:	d241      	bcs.n	8002526 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	330c      	adds	r3, #12
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	e853 3f00 	ldrex	r3, [r3]
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024c2:	637a      	str	r2, [r7, #52]	; 0x34
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ca:	e841 2300 	strex	r3, r2, [r1]
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1e5      	bne.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3314      	adds	r3, #20
 80024dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	613b      	str	r3, [r7, #16]
   return(result);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3314      	adds	r3, #20
 80024f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f6:	623a      	str	r2, [r7, #32]
 80024f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	69f9      	ldr	r1, [r7, #28]
 80024fc:	6a3a      	ldr	r2, [r7, #32]
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	61bb      	str	r3, [r7, #24]
   return(result);
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e5      	bne.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e00f      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	429a      	cmp	r2, r3
 8002542:	d09f      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3740      	adds	r7, #64	; 0x40
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002554:	b0c0      	sub	sp, #256	; 0x100
 8002556:	af00      	add	r7, sp, #0
 8002558:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	68d9      	ldr	r1, [r3, #12]
 800256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	ea40 0301 	orr.w	r3, r0, r1
 8002578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	431a      	orrs	r2, r3
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025a8:	f021 010c 	bic.w	r1, r1, #12
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025b6:	430b      	orrs	r3, r1
 80025b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	6999      	ldr	r1, [r3, #24]
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	ea40 0301 	orr.w	r3, r0, r1
 80025d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b8f      	ldr	r3, [pc, #572]	; (800281c <UART_SetConfig+0x2cc>)
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d005      	beq.n	80025f0 <UART_SetConfig+0xa0>
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b8d      	ldr	r3, [pc, #564]	; (8002820 <UART_SetConfig+0x2d0>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d104      	bne.n	80025fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025f0:	f7ff f8dc 	bl	80017ac <HAL_RCC_GetPCLK2Freq>
 80025f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025f8:	e003      	b.n	8002602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025fa:	f7ff f8c3 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 80025fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800260c:	f040 810c 	bne.w	8002828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800261a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800261e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002622:	4622      	mov	r2, r4
 8002624:	462b      	mov	r3, r5
 8002626:	1891      	adds	r1, r2, r2
 8002628:	65b9      	str	r1, [r7, #88]	; 0x58
 800262a:	415b      	adcs	r3, r3
 800262c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800262e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002632:	4621      	mov	r1, r4
 8002634:	eb12 0801 	adds.w	r8, r2, r1
 8002638:	4629      	mov	r1, r5
 800263a:	eb43 0901 	adc.w	r9, r3, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800264a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002652:	4690      	mov	r8, r2
 8002654:	4699      	mov	r9, r3
 8002656:	4623      	mov	r3, r4
 8002658:	eb18 0303 	adds.w	r3, r8, r3
 800265c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002660:	462b      	mov	r3, r5
 8002662:	eb49 0303 	adc.w	r3, r9, r3
 8002666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002676:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800267a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800267e:	460b      	mov	r3, r1
 8002680:	18db      	adds	r3, r3, r3
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
 8002684:	4613      	mov	r3, r2
 8002686:	eb42 0303 	adc.w	r3, r2, r3
 800268a:	657b      	str	r3, [r7, #84]	; 0x54
 800268c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002694:	f7fd fe14 	bl	80002c0 <__aeabi_uldivmod>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4b61      	ldr	r3, [pc, #388]	; (8002824 <UART_SetConfig+0x2d4>)
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	011c      	lsls	r4, r3, #4
 80026a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	1891      	adds	r1, r2, r2
 80026be:	64b9      	str	r1, [r7, #72]	; 0x48
 80026c0:	415b      	adcs	r3, r3
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026c8:	4641      	mov	r1, r8
 80026ca:	eb12 0a01 	adds.w	sl, r2, r1
 80026ce:	4649      	mov	r1, r9
 80026d0:	eb43 0b01 	adc.w	fp, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e8:	4692      	mov	sl, r2
 80026ea:	469b      	mov	fp, r3
 80026ec:	4643      	mov	r3, r8
 80026ee:	eb1a 0303 	adds.w	r3, sl, r3
 80026f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026f6:	464b      	mov	r3, r9
 80026f8:	eb4b 0303 	adc.w	r3, fp, r3
 80026fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800270c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002714:	460b      	mov	r3, r1
 8002716:	18db      	adds	r3, r3, r3
 8002718:	643b      	str	r3, [r7, #64]	; 0x40
 800271a:	4613      	mov	r3, r2
 800271c:	eb42 0303 	adc.w	r3, r2, r3
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
 8002722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800272a:	f7fd fdc9 	bl	80002c0 <__aeabi_uldivmod>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4611      	mov	r1, r2
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <UART_SetConfig+0x2d4>)
 8002736:	fba3 2301 	umull	r2, r3, r3, r1
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2264      	movs	r2, #100	; 0x64
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	1acb      	subs	r3, r1, r3
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <UART_SetConfig+0x2d4>)
 800274c:	fba3 2302 	umull	r2, r3, r3, r2
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002758:	441c      	add	r4, r3
 800275a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002764:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	1891      	adds	r1, r2, r2
 8002772:	63b9      	str	r1, [r7, #56]	; 0x38
 8002774:	415b      	adcs	r3, r3
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800277c:	4641      	mov	r1, r8
 800277e:	1851      	adds	r1, r2, r1
 8002780:	6339      	str	r1, [r7, #48]	; 0x30
 8002782:	4649      	mov	r1, r9
 8002784:	414b      	adcs	r3, r1
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002794:	4659      	mov	r1, fp
 8002796:	00cb      	lsls	r3, r1, #3
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279e:	4651      	mov	r1, sl
 80027a0:	00ca      	lsls	r2, r1, #3
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	4642      	mov	r2, r8
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027b0:	464b      	mov	r3, r9
 80027b2:	460a      	mov	r2, r1
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027d0:	460b      	mov	r3, r1
 80027d2:	18db      	adds	r3, r3, r3
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d6:	4613      	mov	r3, r2
 80027d8:	eb42 0303 	adc.w	r3, r2, r3
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027e6:	f7fd fd6b 	bl	80002c0 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <UART_SetConfig+0x2d4>)
 80027f0:	fba3 1302 	umull	r1, r3, r3, r2
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	2164      	movs	r1, #100	; 0x64
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	3332      	adds	r3, #50	; 0x32
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <UART_SetConfig+0x2d4>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	f003 0207 	and.w	r2, r3, #7
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4422      	add	r2, r4
 8002816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002818:	e106      	b.n	8002a28 <UART_SetConfig+0x4d8>
 800281a:	bf00      	nop
 800281c:	40011000 	.word	0x40011000
 8002820:	40011400 	.word	0x40011400
 8002824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282c:	2200      	movs	r2, #0
 800282e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002832:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800283a:	4642      	mov	r2, r8
 800283c:	464b      	mov	r3, r9
 800283e:	1891      	adds	r1, r2, r2
 8002840:	6239      	str	r1, [r7, #32]
 8002842:	415b      	adcs	r3, r3
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800284a:	4641      	mov	r1, r8
 800284c:	1854      	adds	r4, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb43 0501 	adc.w	r5, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	00eb      	lsls	r3, r5, #3
 800285e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	18e3      	adds	r3, r4, r3
 800286c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002870:	464b      	mov	r3, r9
 8002872:	eb45 0303 	adc.w	r3, r5, r3
 8002876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800287a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002896:	4629      	mov	r1, r5
 8002898:	008b      	lsls	r3, r1, #2
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a0:	4621      	mov	r1, r4
 80028a2:	008a      	lsls	r2, r1, #2
 80028a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028a8:	f7fd fd0a 	bl	80002c0 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <UART_SetConfig+0x4e4>)
 80028b2:	fba3 2302 	umull	r2, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	011c      	lsls	r4, r3, #4
 80028ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028cc:	4642      	mov	r2, r8
 80028ce:	464b      	mov	r3, r9
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	61b9      	str	r1, [r7, #24]
 80028d4:	415b      	adcs	r3, r3
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028dc:	4641      	mov	r1, r8
 80028de:	1851      	adds	r1, r2, r1
 80028e0:	6139      	str	r1, [r7, #16]
 80028e2:	4649      	mov	r1, r9
 80028e4:	414b      	adcs	r3, r1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f4:	4659      	mov	r1, fp
 80028f6:	00cb      	lsls	r3, r1, #3
 80028f8:	4651      	mov	r1, sl
 80028fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fe:	4651      	mov	r1, sl
 8002900:	00ca      	lsls	r2, r1, #3
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	4642      	mov	r2, r8
 800290a:	189b      	adds	r3, r3, r2
 800290c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002910:	464b      	mov	r3, r9
 8002912:	460a      	mov	r2, r1
 8002914:	eb42 0303 	adc.w	r3, r2, r3
 8002918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	67bb      	str	r3, [r7, #120]	; 0x78
 8002926:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002934:	4649      	mov	r1, r9
 8002936:	008b      	lsls	r3, r1, #2
 8002938:	4641      	mov	r1, r8
 800293a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293e:	4641      	mov	r1, r8
 8002940:	008a      	lsls	r2, r1, #2
 8002942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002946:	f7fd fcbb 	bl	80002c0 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4611      	mov	r1, r2
 8002950:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002952:	fba3 2301 	umull	r2, r3, r3, r1
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2264      	movs	r2, #100	; 0x64
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	1acb      	subs	r3, r1, r3
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a33      	ldr	r2, [pc, #204]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	441c      	add	r4, r3
 8002972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002976:	2200      	movs	r2, #0
 8002978:	673b      	str	r3, [r7, #112]	; 0x70
 800297a:	677a      	str	r2, [r7, #116]	; 0x74
 800297c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	415b      	adcs	r3, r3
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002990:	4641      	mov	r1, r8
 8002992:	1851      	adds	r1, r2, r1
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	4649      	mov	r1, r9
 8002998:	414b      	adcs	r3, r1
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029a8:	4659      	mov	r1, fp
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4651      	mov	r1, sl
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4642      	mov	r2, r8
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029c2:	464b      	mov	r3, r9
 80029c4:	460a      	mov	r2, r1
 80029c6:	eb42 0303 	adc.w	r3, r2, r3
 80029ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	663b      	str	r3, [r7, #96]	; 0x60
 80029d6:	667a      	str	r2, [r7, #100]	; 0x64
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029e4:	4649      	mov	r1, r9
 80029e6:	008b      	lsls	r3, r1, #2
 80029e8:	4641      	mov	r1, r8
 80029ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ee:	4641      	mov	r1, r8
 80029f0:	008a      	lsls	r2, r1, #2
 80029f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029f6:	f7fd fc63 	bl	80002c0 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002a00:	fba3 1302 	umull	r1, r3, r3, r2
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	2164      	movs	r1, #100	; 0x64
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	3332      	adds	r3, #50	; 0x32
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4422      	add	r2, r4
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a34:	51eb851f 	.word	0x51eb851f

08002a38 <siprintf>:
 8002a38:	b40e      	push	{r1, r2, r3}
 8002a3a:	b500      	push	{lr}
 8002a3c:	b09c      	sub	sp, #112	; 0x70
 8002a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8002a40:	9002      	str	r0, [sp, #8]
 8002a42:	9006      	str	r0, [sp, #24]
 8002a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a48:	4809      	ldr	r0, [pc, #36]	; (8002a70 <siprintf+0x38>)
 8002a4a:	9107      	str	r1, [sp, #28]
 8002a4c:	9104      	str	r1, [sp, #16]
 8002a4e:	4909      	ldr	r1, [pc, #36]	; (8002a74 <siprintf+0x3c>)
 8002a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a54:	9105      	str	r1, [sp, #20]
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	a902      	add	r1, sp, #8
 8002a5c:	f000 f992 	bl	8002d84 <_svfiprintf_r>
 8002a60:	9b02      	ldr	r3, [sp, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	b01c      	add	sp, #112	; 0x70
 8002a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a6c:	b003      	add	sp, #12
 8002a6e:	4770      	bx	lr
 8002a70:	20000058 	.word	0x20000058
 8002a74:	ffff0208 	.word	0xffff0208

08002a78 <memset>:
 8002a78:	4402      	add	r2, r0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <__errno>:
 8002a88:	4b01      	ldr	r3, [pc, #4]	; (8002a90 <__errno+0x8>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000058 	.word	0x20000058

08002a94 <__libc_init_array>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4d0d      	ldr	r5, [pc, #52]	; (8002acc <__libc_init_array+0x38>)
 8002a98:	4c0d      	ldr	r4, [pc, #52]	; (8002ad0 <__libc_init_array+0x3c>)
 8002a9a:	1b64      	subs	r4, r4, r5
 8002a9c:	10a4      	asrs	r4, r4, #2
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	42a6      	cmp	r6, r4
 8002aa2:	d109      	bne.n	8002ab8 <__libc_init_array+0x24>
 8002aa4:	4d0b      	ldr	r5, [pc, #44]	; (8002ad4 <__libc_init_array+0x40>)
 8002aa6:	4c0c      	ldr	r4, [pc, #48]	; (8002ad8 <__libc_init_array+0x44>)
 8002aa8:	f000 fc6a 	bl	8003380 <_init>
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	42a6      	cmp	r6, r4
 8002ab4:	d105      	bne.n	8002ac2 <__libc_init_array+0x2e>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abc:	4798      	blx	r3
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7ee      	b.n	8002aa0 <__libc_init_array+0xc>
 8002ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac6:	4798      	blx	r3
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7f2      	b.n	8002ab2 <__libc_init_array+0x1e>
 8002acc:	08003514 	.word	0x08003514
 8002ad0:	08003514 	.word	0x08003514
 8002ad4:	08003514 	.word	0x08003514
 8002ad8:	08003518 	.word	0x08003518

08002adc <__retarget_lock_acquire_recursive>:
 8002adc:	4770      	bx	lr

08002ade <__retarget_lock_release_recursive>:
 8002ade:	4770      	bx	lr

08002ae0 <_free_r>:
 8002ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ae2:	2900      	cmp	r1, #0
 8002ae4:	d044      	beq.n	8002b70 <_free_r+0x90>
 8002ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aea:	9001      	str	r0, [sp, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f1a1 0404 	sub.w	r4, r1, #4
 8002af2:	bfb8      	it	lt
 8002af4:	18e4      	addlt	r4, r4, r3
 8002af6:	f000 f8df 	bl	8002cb8 <__malloc_lock>
 8002afa:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <_free_r+0x94>)
 8002afc:	9801      	ldr	r0, [sp, #4]
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	b933      	cbnz	r3, 8002b10 <_free_r+0x30>
 8002b02:	6063      	str	r3, [r4, #4]
 8002b04:	6014      	str	r4, [r2, #0]
 8002b06:	b003      	add	sp, #12
 8002b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b0c:	f000 b8da 	b.w	8002cc4 <__malloc_unlock>
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d908      	bls.n	8002b26 <_free_r+0x46>
 8002b14:	6825      	ldr	r5, [r4, #0]
 8002b16:	1961      	adds	r1, r4, r5
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	bf01      	itttt	eq
 8002b1c:	6819      	ldreq	r1, [r3, #0]
 8002b1e:	685b      	ldreq	r3, [r3, #4]
 8002b20:	1949      	addeq	r1, r1, r5
 8002b22:	6021      	streq	r1, [r4, #0]
 8002b24:	e7ed      	b.n	8002b02 <_free_r+0x22>
 8002b26:	461a      	mov	r2, r3
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	b10b      	cbz	r3, 8002b30 <_free_r+0x50>
 8002b2c:	42a3      	cmp	r3, r4
 8002b2e:	d9fa      	bls.n	8002b26 <_free_r+0x46>
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	1855      	adds	r5, r2, r1
 8002b34:	42a5      	cmp	r5, r4
 8002b36:	d10b      	bne.n	8002b50 <_free_r+0x70>
 8002b38:	6824      	ldr	r4, [r4, #0]
 8002b3a:	4421      	add	r1, r4
 8002b3c:	1854      	adds	r4, r2, r1
 8002b3e:	42a3      	cmp	r3, r4
 8002b40:	6011      	str	r1, [r2, #0]
 8002b42:	d1e0      	bne.n	8002b06 <_free_r+0x26>
 8002b44:	681c      	ldr	r4, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	6053      	str	r3, [r2, #4]
 8002b4a:	440c      	add	r4, r1
 8002b4c:	6014      	str	r4, [r2, #0]
 8002b4e:	e7da      	b.n	8002b06 <_free_r+0x26>
 8002b50:	d902      	bls.n	8002b58 <_free_r+0x78>
 8002b52:	230c      	movs	r3, #12
 8002b54:	6003      	str	r3, [r0, #0]
 8002b56:	e7d6      	b.n	8002b06 <_free_r+0x26>
 8002b58:	6825      	ldr	r5, [r4, #0]
 8002b5a:	1961      	adds	r1, r4, r5
 8002b5c:	428b      	cmp	r3, r1
 8002b5e:	bf04      	itt	eq
 8002b60:	6819      	ldreq	r1, [r3, #0]
 8002b62:	685b      	ldreq	r3, [r3, #4]
 8002b64:	6063      	str	r3, [r4, #4]
 8002b66:	bf04      	itt	eq
 8002b68:	1949      	addeq	r1, r1, r5
 8002b6a:	6021      	streq	r1, [r4, #0]
 8002b6c:	6054      	str	r4, [r2, #4]
 8002b6e:	e7ca      	b.n	8002b06 <_free_r+0x26>
 8002b70:	b003      	add	sp, #12
 8002b72:	bd30      	pop	{r4, r5, pc}
 8002b74:	2000024c 	.word	0x2000024c

08002b78 <sbrk_aligned>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	4e0e      	ldr	r6, [pc, #56]	; (8002bb4 <sbrk_aligned+0x3c>)
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	6831      	ldr	r1, [r6, #0]
 8002b80:	4605      	mov	r5, r0
 8002b82:	b911      	cbnz	r1, 8002b8a <sbrk_aligned+0x12>
 8002b84:	f000 fba6 	bl	80032d4 <_sbrk_r>
 8002b88:	6030      	str	r0, [r6, #0]
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f000 fba1 	bl	80032d4 <_sbrk_r>
 8002b92:	1c43      	adds	r3, r0, #1
 8002b94:	d00a      	beq.n	8002bac <sbrk_aligned+0x34>
 8002b96:	1cc4      	adds	r4, r0, #3
 8002b98:	f024 0403 	bic.w	r4, r4, #3
 8002b9c:	42a0      	cmp	r0, r4
 8002b9e:	d007      	beq.n	8002bb0 <sbrk_aligned+0x38>
 8002ba0:	1a21      	subs	r1, r4, r0
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f000 fb96 	bl	80032d4 <_sbrk_r>
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d101      	bne.n	8002bb0 <sbrk_aligned+0x38>
 8002bac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	20000250 	.word	0x20000250

08002bb8 <_malloc_r>:
 8002bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bbc:	1ccd      	adds	r5, r1, #3
 8002bbe:	f025 0503 	bic.w	r5, r5, #3
 8002bc2:	3508      	adds	r5, #8
 8002bc4:	2d0c      	cmp	r5, #12
 8002bc6:	bf38      	it	cc
 8002bc8:	250c      	movcc	r5, #12
 8002bca:	2d00      	cmp	r5, #0
 8002bcc:	4607      	mov	r7, r0
 8002bce:	db01      	blt.n	8002bd4 <_malloc_r+0x1c>
 8002bd0:	42a9      	cmp	r1, r5
 8002bd2:	d905      	bls.n	8002be0 <_malloc_r+0x28>
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	2600      	movs	r6, #0
 8002bda:	4630      	mov	r0, r6
 8002bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002be0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cb4 <_malloc_r+0xfc>
 8002be4:	f000 f868 	bl	8002cb8 <__malloc_lock>
 8002be8:	f8d8 3000 	ldr.w	r3, [r8]
 8002bec:	461c      	mov	r4, r3
 8002bee:	bb5c      	cbnz	r4, 8002c48 <_malloc_r+0x90>
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	f7ff ffc0 	bl	8002b78 <sbrk_aligned>
 8002bf8:	1c43      	adds	r3, r0, #1
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	d155      	bne.n	8002caa <_malloc_r+0xf2>
 8002bfe:	f8d8 4000 	ldr.w	r4, [r8]
 8002c02:	4626      	mov	r6, r4
 8002c04:	2e00      	cmp	r6, #0
 8002c06:	d145      	bne.n	8002c94 <_malloc_r+0xdc>
 8002c08:	2c00      	cmp	r4, #0
 8002c0a:	d048      	beq.n	8002c9e <_malloc_r+0xe6>
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	4631      	mov	r1, r6
 8002c10:	4638      	mov	r0, r7
 8002c12:	eb04 0903 	add.w	r9, r4, r3
 8002c16:	f000 fb5d 	bl	80032d4 <_sbrk_r>
 8002c1a:	4581      	cmp	r9, r0
 8002c1c:	d13f      	bne.n	8002c9e <_malloc_r+0xe6>
 8002c1e:	6821      	ldr	r1, [r4, #0]
 8002c20:	1a6d      	subs	r5, r5, r1
 8002c22:	4629      	mov	r1, r5
 8002c24:	4638      	mov	r0, r7
 8002c26:	f7ff ffa7 	bl	8002b78 <sbrk_aligned>
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d037      	beq.n	8002c9e <_malloc_r+0xe6>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	442b      	add	r3, r5
 8002c32:	6023      	str	r3, [r4, #0]
 8002c34:	f8d8 3000 	ldr.w	r3, [r8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d038      	beq.n	8002cae <_malloc_r+0xf6>
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	42a2      	cmp	r2, r4
 8002c40:	d12b      	bne.n	8002c9a <_malloc_r+0xe2>
 8002c42:	2200      	movs	r2, #0
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	e00f      	b.n	8002c68 <_malloc_r+0xb0>
 8002c48:	6822      	ldr	r2, [r4, #0]
 8002c4a:	1b52      	subs	r2, r2, r5
 8002c4c:	d41f      	bmi.n	8002c8e <_malloc_r+0xd6>
 8002c4e:	2a0b      	cmp	r2, #11
 8002c50:	d917      	bls.n	8002c82 <_malloc_r+0xca>
 8002c52:	1961      	adds	r1, r4, r5
 8002c54:	42a3      	cmp	r3, r4
 8002c56:	6025      	str	r5, [r4, #0]
 8002c58:	bf18      	it	ne
 8002c5a:	6059      	strne	r1, [r3, #4]
 8002c5c:	6863      	ldr	r3, [r4, #4]
 8002c5e:	bf08      	it	eq
 8002c60:	f8c8 1000 	streq.w	r1, [r8]
 8002c64:	5162      	str	r2, [r4, r5]
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	4638      	mov	r0, r7
 8002c6a:	f104 060b 	add.w	r6, r4, #11
 8002c6e:	f000 f829 	bl	8002cc4 <__malloc_unlock>
 8002c72:	f026 0607 	bic.w	r6, r6, #7
 8002c76:	1d23      	adds	r3, r4, #4
 8002c78:	1af2      	subs	r2, r6, r3
 8002c7a:	d0ae      	beq.n	8002bda <_malloc_r+0x22>
 8002c7c:	1b9b      	subs	r3, r3, r6
 8002c7e:	50a3      	str	r3, [r4, r2]
 8002c80:	e7ab      	b.n	8002bda <_malloc_r+0x22>
 8002c82:	42a3      	cmp	r3, r4
 8002c84:	6862      	ldr	r2, [r4, #4]
 8002c86:	d1dd      	bne.n	8002c44 <_malloc_r+0x8c>
 8002c88:	f8c8 2000 	str.w	r2, [r8]
 8002c8c:	e7ec      	b.n	8002c68 <_malloc_r+0xb0>
 8002c8e:	4623      	mov	r3, r4
 8002c90:	6864      	ldr	r4, [r4, #4]
 8002c92:	e7ac      	b.n	8002bee <_malloc_r+0x36>
 8002c94:	4634      	mov	r4, r6
 8002c96:	6876      	ldr	r6, [r6, #4]
 8002c98:	e7b4      	b.n	8002c04 <_malloc_r+0x4c>
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	e7cc      	b.n	8002c38 <_malloc_r+0x80>
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	f000 f80e 	bl	8002cc4 <__malloc_unlock>
 8002ca8:	e797      	b.n	8002bda <_malloc_r+0x22>
 8002caa:	6025      	str	r5, [r4, #0]
 8002cac:	e7dc      	b.n	8002c68 <_malloc_r+0xb0>
 8002cae:	605b      	str	r3, [r3, #4]
 8002cb0:	deff      	udf	#255	; 0xff
 8002cb2:	bf00      	nop
 8002cb4:	2000024c 	.word	0x2000024c

08002cb8 <__malloc_lock>:
 8002cb8:	4801      	ldr	r0, [pc, #4]	; (8002cc0 <__malloc_lock+0x8>)
 8002cba:	f7ff bf0f 	b.w	8002adc <__retarget_lock_acquire_recursive>
 8002cbe:	bf00      	nop
 8002cc0:	20000248 	.word	0x20000248

08002cc4 <__malloc_unlock>:
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <__malloc_unlock+0x8>)
 8002cc6:	f7ff bf0a 	b.w	8002ade <__retarget_lock_release_recursive>
 8002cca:	bf00      	nop
 8002ccc:	20000248 	.word	0x20000248

08002cd0 <__ssputs_r>:
 8002cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd4:	688e      	ldr	r6, [r1, #8]
 8002cd6:	461f      	mov	r7, r3
 8002cd8:	42be      	cmp	r6, r7
 8002cda:	680b      	ldr	r3, [r1, #0]
 8002cdc:	4682      	mov	sl, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	4690      	mov	r8, r2
 8002ce2:	d82c      	bhi.n	8002d3e <__ssputs_r+0x6e>
 8002ce4:	898a      	ldrh	r2, [r1, #12]
 8002ce6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cea:	d026      	beq.n	8002d3a <__ssputs_r+0x6a>
 8002cec:	6965      	ldr	r5, [r4, #20]
 8002cee:	6909      	ldr	r1, [r1, #16]
 8002cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cf4:	eba3 0901 	sub.w	r9, r3, r1
 8002cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cfc:	1c7b      	adds	r3, r7, #1
 8002cfe:	444b      	add	r3, r9
 8002d00:	106d      	asrs	r5, r5, #1
 8002d02:	429d      	cmp	r5, r3
 8002d04:	bf38      	it	cc
 8002d06:	461d      	movcc	r5, r3
 8002d08:	0553      	lsls	r3, r2, #21
 8002d0a:	d527      	bpl.n	8002d5c <__ssputs_r+0x8c>
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	f7ff ff53 	bl	8002bb8 <_malloc_r>
 8002d12:	4606      	mov	r6, r0
 8002d14:	b360      	cbz	r0, 8002d70 <__ssputs_r+0xa0>
 8002d16:	6921      	ldr	r1, [r4, #16]
 8002d18:	464a      	mov	r2, r9
 8002d1a:	f000 faeb 	bl	80032f4 <memcpy>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	6126      	str	r6, [r4, #16]
 8002d2c:	6165      	str	r5, [r4, #20]
 8002d2e:	444e      	add	r6, r9
 8002d30:	eba5 0509 	sub.w	r5, r5, r9
 8002d34:	6026      	str	r6, [r4, #0]
 8002d36:	60a5      	str	r5, [r4, #8]
 8002d38:	463e      	mov	r6, r7
 8002d3a:	42be      	cmp	r6, r7
 8002d3c:	d900      	bls.n	8002d40 <__ssputs_r+0x70>
 8002d3e:	463e      	mov	r6, r7
 8002d40:	6820      	ldr	r0, [r4, #0]
 8002d42:	4632      	mov	r2, r6
 8002d44:	4641      	mov	r1, r8
 8002d46:	f000 faab 	bl	80032a0 <memmove>
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	1b9b      	subs	r3, r3, r6
 8002d4e:	60a3      	str	r3, [r4, #8]
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	4433      	add	r3, r6
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	2000      	movs	r0, #0
 8002d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5c:	462a      	mov	r2, r5
 8002d5e:	f000 fad7 	bl	8003310 <_realloc_r>
 8002d62:	4606      	mov	r6, r0
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d1e0      	bne.n	8002d2a <__ssputs_r+0x5a>
 8002d68:	6921      	ldr	r1, [r4, #16]
 8002d6a:	4650      	mov	r0, sl
 8002d6c:	f7ff feb8 	bl	8002ae0 <_free_r>
 8002d70:	230c      	movs	r3, #12
 8002d72:	f8ca 3000 	str.w	r3, [sl]
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7c:	81a3      	strh	r3, [r4, #12]
 8002d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d82:	e7e9      	b.n	8002d58 <__ssputs_r+0x88>

08002d84 <_svfiprintf_r>:
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	4698      	mov	r8, r3
 8002d8a:	898b      	ldrh	r3, [r1, #12]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	b09d      	sub	sp, #116	; 0x74
 8002d90:	4607      	mov	r7, r0
 8002d92:	460d      	mov	r5, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	d50e      	bpl.n	8002db6 <_svfiprintf_r+0x32>
 8002d98:	690b      	ldr	r3, [r1, #16]
 8002d9a:	b963      	cbnz	r3, 8002db6 <_svfiprintf_r+0x32>
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	f7ff ff0b 	bl	8002bb8 <_malloc_r>
 8002da2:	6028      	str	r0, [r5, #0]
 8002da4:	6128      	str	r0, [r5, #16]
 8002da6:	b920      	cbnz	r0, 8002db2 <_svfiprintf_r+0x2e>
 8002da8:	230c      	movs	r3, #12
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db0:	e0d0      	b.n	8002f54 <_svfiprintf_r+0x1d0>
 8002db2:	2340      	movs	r3, #64	; 0x40
 8002db4:	616b      	str	r3, [r5, #20]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dba:	2320      	movs	r3, #32
 8002dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc4:	2330      	movs	r3, #48	; 0x30
 8002dc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f6c <_svfiprintf_r+0x1e8>
 8002dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dce:	f04f 0901 	mov.w	r9, #1
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	469a      	mov	sl, r3
 8002dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dda:	b10a      	cbz	r2, 8002de0 <_svfiprintf_r+0x5c>
 8002ddc:	2a25      	cmp	r2, #37	; 0x25
 8002dde:	d1f9      	bne.n	8002dd4 <_svfiprintf_r+0x50>
 8002de0:	ebba 0b04 	subs.w	fp, sl, r4
 8002de4:	d00b      	beq.n	8002dfe <_svfiprintf_r+0x7a>
 8002de6:	465b      	mov	r3, fp
 8002de8:	4622      	mov	r2, r4
 8002dea:	4629      	mov	r1, r5
 8002dec:	4638      	mov	r0, r7
 8002dee:	f7ff ff6f 	bl	8002cd0 <__ssputs_r>
 8002df2:	3001      	adds	r0, #1
 8002df4:	f000 80a9 	beq.w	8002f4a <_svfiprintf_r+0x1c6>
 8002df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dfa:	445a      	add	r2, fp
 8002dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8002dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a1 	beq.w	8002f4a <_svfiprintf_r+0x1c6>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e12:	f10a 0a01 	add.w	sl, sl, #1
 8002e16:	9304      	str	r3, [sp, #16]
 8002e18:	9307      	str	r3, [sp, #28]
 8002e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8002e20:	4654      	mov	r4, sl
 8002e22:	2205      	movs	r2, #5
 8002e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e28:	4850      	ldr	r0, [pc, #320]	; (8002f6c <_svfiprintf_r+0x1e8>)
 8002e2a:	f7fd f9f9 	bl	8000220 <memchr>
 8002e2e:	9a04      	ldr	r2, [sp, #16]
 8002e30:	b9d8      	cbnz	r0, 8002e6a <_svfiprintf_r+0xe6>
 8002e32:	06d0      	lsls	r0, r2, #27
 8002e34:	bf44      	itt	mi
 8002e36:	2320      	movmi	r3, #32
 8002e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e3c:	0711      	lsls	r1, r2, #28
 8002e3e:	bf44      	itt	mi
 8002e40:	232b      	movmi	r3, #43	; 0x2b
 8002e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e46:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e4c:	d015      	beq.n	8002e7a <_svfiprintf_r+0xf6>
 8002e4e:	9a07      	ldr	r2, [sp, #28]
 8002e50:	4654      	mov	r4, sl
 8002e52:	2000      	movs	r0, #0
 8002e54:	f04f 0c0a 	mov.w	ip, #10
 8002e58:	4621      	mov	r1, r4
 8002e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e5e:	3b30      	subs	r3, #48	; 0x30
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	d94d      	bls.n	8002f00 <_svfiprintf_r+0x17c>
 8002e64:	b1b0      	cbz	r0, 8002e94 <_svfiprintf_r+0x110>
 8002e66:	9207      	str	r2, [sp, #28]
 8002e68:	e014      	b.n	8002e94 <_svfiprintf_r+0x110>
 8002e6a:	eba0 0308 	sub.w	r3, r0, r8
 8002e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	9304      	str	r3, [sp, #16]
 8002e76:	46a2      	mov	sl, r4
 8002e78:	e7d2      	b.n	8002e20 <_svfiprintf_r+0x9c>
 8002e7a:	9b03      	ldr	r3, [sp, #12]
 8002e7c:	1d19      	adds	r1, r3, #4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	9103      	str	r1, [sp, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfbb      	ittet	lt
 8002e86:	425b      	neglt	r3, r3
 8002e88:	f042 0202 	orrlt.w	r2, r2, #2
 8002e8c:	9307      	strge	r3, [sp, #28]
 8002e8e:	9307      	strlt	r3, [sp, #28]
 8002e90:	bfb8      	it	lt
 8002e92:	9204      	strlt	r2, [sp, #16]
 8002e94:	7823      	ldrb	r3, [r4, #0]
 8002e96:	2b2e      	cmp	r3, #46	; 0x2e
 8002e98:	d10c      	bne.n	8002eb4 <_svfiprintf_r+0x130>
 8002e9a:	7863      	ldrb	r3, [r4, #1]
 8002e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9e:	d134      	bne.n	8002f0a <_svfiprintf_r+0x186>
 8002ea0:	9b03      	ldr	r3, [sp, #12]
 8002ea2:	1d1a      	adds	r2, r3, #4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	9203      	str	r2, [sp, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bfb8      	it	lt
 8002eac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002eb0:	3402      	adds	r4, #2
 8002eb2:	9305      	str	r3, [sp, #20]
 8002eb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002f7c <_svfiprintf_r+0x1f8>
 8002eb8:	7821      	ldrb	r1, [r4, #0]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	4650      	mov	r0, sl
 8002ebe:	f7fd f9af 	bl	8000220 <memchr>
 8002ec2:	b138      	cbz	r0, 8002ed4 <_svfiprintf_r+0x150>
 8002ec4:	9b04      	ldr	r3, [sp, #16]
 8002ec6:	eba0 000a 	sub.w	r0, r0, sl
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	4082      	lsls	r2, r0
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	3401      	adds	r4, #1
 8002ed2:	9304      	str	r3, [sp, #16]
 8002ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed8:	4825      	ldr	r0, [pc, #148]	; (8002f70 <_svfiprintf_r+0x1ec>)
 8002eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ede:	2206      	movs	r2, #6
 8002ee0:	f7fd f99e 	bl	8000220 <memchr>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d038      	beq.n	8002f5a <_svfiprintf_r+0x1d6>
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <_svfiprintf_r+0x1f0>)
 8002eea:	bb1b      	cbnz	r3, 8002f34 <_svfiprintf_r+0x1b0>
 8002eec:	9b03      	ldr	r3, [sp, #12]
 8002eee:	3307      	adds	r3, #7
 8002ef0:	f023 0307 	bic.w	r3, r3, #7
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	9303      	str	r3, [sp, #12]
 8002ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efa:	4433      	add	r3, r6
 8002efc:	9309      	str	r3, [sp, #36]	; 0x24
 8002efe:	e768      	b.n	8002dd2 <_svfiprintf_r+0x4e>
 8002f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f04:	460c      	mov	r4, r1
 8002f06:	2001      	movs	r0, #1
 8002f08:	e7a6      	b.n	8002e58 <_svfiprintf_r+0xd4>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	3401      	adds	r4, #1
 8002f0e:	9305      	str	r3, [sp, #20]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f04f 0c0a 	mov.w	ip, #10
 8002f16:	4620      	mov	r0, r4
 8002f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f1c:	3a30      	subs	r2, #48	; 0x30
 8002f1e:	2a09      	cmp	r2, #9
 8002f20:	d903      	bls.n	8002f2a <_svfiprintf_r+0x1a6>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0c6      	beq.n	8002eb4 <_svfiprintf_r+0x130>
 8002f26:	9105      	str	r1, [sp, #20]
 8002f28:	e7c4      	b.n	8002eb4 <_svfiprintf_r+0x130>
 8002f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f2e:	4604      	mov	r4, r0
 8002f30:	2301      	movs	r3, #1
 8002f32:	e7f0      	b.n	8002f16 <_svfiprintf_r+0x192>
 8002f34:	ab03      	add	r3, sp, #12
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	462a      	mov	r2, r5
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <_svfiprintf_r+0x1f4>)
 8002f3c:	a904      	add	r1, sp, #16
 8002f3e:	4638      	mov	r0, r7
 8002f40:	f3af 8000 	nop.w
 8002f44:	1c42      	adds	r2, r0, #1
 8002f46:	4606      	mov	r6, r0
 8002f48:	d1d6      	bne.n	8002ef8 <_svfiprintf_r+0x174>
 8002f4a:	89ab      	ldrh	r3, [r5, #12]
 8002f4c:	065b      	lsls	r3, r3, #25
 8002f4e:	f53f af2d 	bmi.w	8002dac <_svfiprintf_r+0x28>
 8002f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f54:	b01d      	add	sp, #116	; 0x74
 8002f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5a:	ab03      	add	r3, sp, #12
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	462a      	mov	r2, r5
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <_svfiprintf_r+0x1f4>)
 8002f62:	a904      	add	r1, sp, #16
 8002f64:	4638      	mov	r0, r7
 8002f66:	f000 f879 	bl	800305c <_printf_i>
 8002f6a:	e7eb      	b.n	8002f44 <_svfiprintf_r+0x1c0>
 8002f6c:	080034d8 	.word	0x080034d8
 8002f70:	080034e2 	.word	0x080034e2
 8002f74:	00000000 	.word	0x00000000
 8002f78:	08002cd1 	.word	0x08002cd1
 8002f7c:	080034de 	.word	0x080034de

08002f80 <_printf_common>:
 8002f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f84:	4616      	mov	r6, r2
 8002f86:	4699      	mov	r9, r3
 8002f88:	688a      	ldr	r2, [r1, #8]
 8002f8a:	690b      	ldr	r3, [r1, #16]
 8002f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bfb8      	it	lt
 8002f94:	4613      	movlt	r3, r2
 8002f96:	6033      	str	r3, [r6, #0]
 8002f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f9c:	4607      	mov	r7, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	b10a      	cbz	r2, 8002fa6 <_printf_common+0x26>
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	6033      	str	r3, [r6, #0]
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	0699      	lsls	r1, r3, #26
 8002faa:	bf42      	ittt	mi
 8002fac:	6833      	ldrmi	r3, [r6, #0]
 8002fae:	3302      	addmi	r3, #2
 8002fb0:	6033      	strmi	r3, [r6, #0]
 8002fb2:	6825      	ldr	r5, [r4, #0]
 8002fb4:	f015 0506 	ands.w	r5, r5, #6
 8002fb8:	d106      	bne.n	8002fc8 <_printf_common+0x48>
 8002fba:	f104 0a19 	add.w	sl, r4, #25
 8002fbe:	68e3      	ldr	r3, [r4, #12]
 8002fc0:	6832      	ldr	r2, [r6, #0]
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	42ab      	cmp	r3, r5
 8002fc6:	dc26      	bgt.n	8003016 <_printf_common+0x96>
 8002fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fcc:	1e13      	subs	r3, r2, #0
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	bf18      	it	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	0692      	lsls	r2, r2, #26
 8002fd6:	d42b      	bmi.n	8003030 <_printf_common+0xb0>
 8002fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fdc:	4649      	mov	r1, r9
 8002fde:	4638      	mov	r0, r7
 8002fe0:	47c0      	blx	r8
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d01e      	beq.n	8003024 <_printf_common+0xa4>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	6922      	ldr	r2, [r4, #16]
 8002fea:	f003 0306 	and.w	r3, r3, #6
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf02      	ittt	eq
 8002ff2:	68e5      	ldreq	r5, [r4, #12]
 8002ff4:	6833      	ldreq	r3, [r6, #0]
 8002ff6:	1aed      	subeq	r5, r5, r3
 8002ff8:	68a3      	ldr	r3, [r4, #8]
 8002ffa:	bf0c      	ite	eq
 8002ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003000:	2500      	movne	r5, #0
 8003002:	4293      	cmp	r3, r2
 8003004:	bfc4      	itt	gt
 8003006:	1a9b      	subgt	r3, r3, r2
 8003008:	18ed      	addgt	r5, r5, r3
 800300a:	2600      	movs	r6, #0
 800300c:	341a      	adds	r4, #26
 800300e:	42b5      	cmp	r5, r6
 8003010:	d11a      	bne.n	8003048 <_printf_common+0xc8>
 8003012:	2000      	movs	r0, #0
 8003014:	e008      	b.n	8003028 <_printf_common+0xa8>
 8003016:	2301      	movs	r3, #1
 8003018:	4652      	mov	r2, sl
 800301a:	4649      	mov	r1, r9
 800301c:	4638      	mov	r0, r7
 800301e:	47c0      	blx	r8
 8003020:	3001      	adds	r0, #1
 8003022:	d103      	bne.n	800302c <_printf_common+0xac>
 8003024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302c:	3501      	adds	r5, #1
 800302e:	e7c6      	b.n	8002fbe <_printf_common+0x3e>
 8003030:	18e1      	adds	r1, r4, r3
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	2030      	movs	r0, #48	; 0x30
 8003036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800303a:	4422      	add	r2, r4
 800303c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003044:	3302      	adds	r3, #2
 8003046:	e7c7      	b.n	8002fd8 <_printf_common+0x58>
 8003048:	2301      	movs	r3, #1
 800304a:	4622      	mov	r2, r4
 800304c:	4649      	mov	r1, r9
 800304e:	4638      	mov	r0, r7
 8003050:	47c0      	blx	r8
 8003052:	3001      	adds	r0, #1
 8003054:	d0e6      	beq.n	8003024 <_printf_common+0xa4>
 8003056:	3601      	adds	r6, #1
 8003058:	e7d9      	b.n	800300e <_printf_common+0x8e>
	...

0800305c <_printf_i>:
 800305c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003060:	7e0f      	ldrb	r7, [r1, #24]
 8003062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003064:	2f78      	cmp	r7, #120	; 0x78
 8003066:	4691      	mov	r9, r2
 8003068:	4680      	mov	r8, r0
 800306a:	460c      	mov	r4, r1
 800306c:	469a      	mov	sl, r3
 800306e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003072:	d807      	bhi.n	8003084 <_printf_i+0x28>
 8003074:	2f62      	cmp	r7, #98	; 0x62
 8003076:	d80a      	bhi.n	800308e <_printf_i+0x32>
 8003078:	2f00      	cmp	r7, #0
 800307a:	f000 80d4 	beq.w	8003226 <_printf_i+0x1ca>
 800307e:	2f58      	cmp	r7, #88	; 0x58
 8003080:	f000 80c0 	beq.w	8003204 <_printf_i+0x1a8>
 8003084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800308c:	e03a      	b.n	8003104 <_printf_i+0xa8>
 800308e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003092:	2b15      	cmp	r3, #21
 8003094:	d8f6      	bhi.n	8003084 <_printf_i+0x28>
 8003096:	a101      	add	r1, pc, #4	; (adr r1, 800309c <_printf_i+0x40>)
 8003098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800309c:	080030f5 	.word	0x080030f5
 80030a0:	08003109 	.word	0x08003109
 80030a4:	08003085 	.word	0x08003085
 80030a8:	08003085 	.word	0x08003085
 80030ac:	08003085 	.word	0x08003085
 80030b0:	08003085 	.word	0x08003085
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003085 	.word	0x08003085
 80030bc:	08003085 	.word	0x08003085
 80030c0:	08003085 	.word	0x08003085
 80030c4:	08003085 	.word	0x08003085
 80030c8:	0800320d 	.word	0x0800320d
 80030cc:	08003135 	.word	0x08003135
 80030d0:	080031c7 	.word	0x080031c7
 80030d4:	08003085 	.word	0x08003085
 80030d8:	08003085 	.word	0x08003085
 80030dc:	0800322f 	.word	0x0800322f
 80030e0:	08003085 	.word	0x08003085
 80030e4:	08003135 	.word	0x08003135
 80030e8:	08003085 	.word	0x08003085
 80030ec:	08003085 	.word	0x08003085
 80030f0:	080031cf 	.word	0x080031cf
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	602a      	str	r2, [r5, #0]
 80030fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003104:	2301      	movs	r3, #1
 8003106:	e09f      	b.n	8003248 <_printf_i+0x1ec>
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	0607      	lsls	r7, r0, #24
 800310e:	f103 0104 	add.w	r1, r3, #4
 8003112:	6029      	str	r1, [r5, #0]
 8003114:	d501      	bpl.n	800311a <_printf_i+0xbe>
 8003116:	681e      	ldr	r6, [r3, #0]
 8003118:	e003      	b.n	8003122 <_printf_i+0xc6>
 800311a:	0646      	lsls	r6, r0, #25
 800311c:	d5fb      	bpl.n	8003116 <_printf_i+0xba>
 800311e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003122:	2e00      	cmp	r6, #0
 8003124:	da03      	bge.n	800312e <_printf_i+0xd2>
 8003126:	232d      	movs	r3, #45	; 0x2d
 8003128:	4276      	negs	r6, r6
 800312a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800312e:	485a      	ldr	r0, [pc, #360]	; (8003298 <_printf_i+0x23c>)
 8003130:	230a      	movs	r3, #10
 8003132:	e012      	b.n	800315a <_printf_i+0xfe>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	1d19      	adds	r1, r3, #4
 800313a:	6029      	str	r1, [r5, #0]
 800313c:	0605      	lsls	r5, r0, #24
 800313e:	d501      	bpl.n	8003144 <_printf_i+0xe8>
 8003140:	681e      	ldr	r6, [r3, #0]
 8003142:	e002      	b.n	800314a <_printf_i+0xee>
 8003144:	0641      	lsls	r1, r0, #25
 8003146:	d5fb      	bpl.n	8003140 <_printf_i+0xe4>
 8003148:	881e      	ldrh	r6, [r3, #0]
 800314a:	4853      	ldr	r0, [pc, #332]	; (8003298 <_printf_i+0x23c>)
 800314c:	2f6f      	cmp	r7, #111	; 0x6f
 800314e:	bf0c      	ite	eq
 8003150:	2308      	moveq	r3, #8
 8003152:	230a      	movne	r3, #10
 8003154:	2100      	movs	r1, #0
 8003156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800315a:	6865      	ldr	r5, [r4, #4]
 800315c:	60a5      	str	r5, [r4, #8]
 800315e:	2d00      	cmp	r5, #0
 8003160:	bfa2      	ittt	ge
 8003162:	6821      	ldrge	r1, [r4, #0]
 8003164:	f021 0104 	bicge.w	r1, r1, #4
 8003168:	6021      	strge	r1, [r4, #0]
 800316a:	b90e      	cbnz	r6, 8003170 <_printf_i+0x114>
 800316c:	2d00      	cmp	r5, #0
 800316e:	d04b      	beq.n	8003208 <_printf_i+0x1ac>
 8003170:	4615      	mov	r5, r2
 8003172:	fbb6 f1f3 	udiv	r1, r6, r3
 8003176:	fb03 6711 	mls	r7, r3, r1, r6
 800317a:	5dc7      	ldrb	r7, [r0, r7]
 800317c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003180:	4637      	mov	r7, r6
 8003182:	42bb      	cmp	r3, r7
 8003184:	460e      	mov	r6, r1
 8003186:	d9f4      	bls.n	8003172 <_printf_i+0x116>
 8003188:	2b08      	cmp	r3, #8
 800318a:	d10b      	bne.n	80031a4 <_printf_i+0x148>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	07de      	lsls	r6, r3, #31
 8003190:	d508      	bpl.n	80031a4 <_printf_i+0x148>
 8003192:	6923      	ldr	r3, [r4, #16]
 8003194:	6861      	ldr	r1, [r4, #4]
 8003196:	4299      	cmp	r1, r3
 8003198:	bfde      	ittt	le
 800319a:	2330      	movle	r3, #48	; 0x30
 800319c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80031a4:	1b52      	subs	r2, r2, r5
 80031a6:	6122      	str	r2, [r4, #16]
 80031a8:	f8cd a000 	str.w	sl, [sp]
 80031ac:	464b      	mov	r3, r9
 80031ae:	aa03      	add	r2, sp, #12
 80031b0:	4621      	mov	r1, r4
 80031b2:	4640      	mov	r0, r8
 80031b4:	f7ff fee4 	bl	8002f80 <_printf_common>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d14a      	bne.n	8003252 <_printf_i+0x1f6>
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c0:	b004      	add	sp, #16
 80031c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	f043 0320 	orr.w	r3, r3, #32
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	4833      	ldr	r0, [pc, #204]	; (800329c <_printf_i+0x240>)
 80031d0:	2778      	movs	r7, #120	; 0x78
 80031d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	6829      	ldr	r1, [r5, #0]
 80031da:	061f      	lsls	r7, r3, #24
 80031dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80031e0:	d402      	bmi.n	80031e8 <_printf_i+0x18c>
 80031e2:	065f      	lsls	r7, r3, #25
 80031e4:	bf48      	it	mi
 80031e6:	b2b6      	uxthmi	r6, r6
 80031e8:	07df      	lsls	r7, r3, #31
 80031ea:	bf48      	it	mi
 80031ec:	f043 0320 	orrmi.w	r3, r3, #32
 80031f0:	6029      	str	r1, [r5, #0]
 80031f2:	bf48      	it	mi
 80031f4:	6023      	strmi	r3, [r4, #0]
 80031f6:	b91e      	cbnz	r6, 8003200 <_printf_i+0x1a4>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	f023 0320 	bic.w	r3, r3, #32
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	2310      	movs	r3, #16
 8003202:	e7a7      	b.n	8003154 <_printf_i+0xf8>
 8003204:	4824      	ldr	r0, [pc, #144]	; (8003298 <_printf_i+0x23c>)
 8003206:	e7e4      	b.n	80031d2 <_printf_i+0x176>
 8003208:	4615      	mov	r5, r2
 800320a:	e7bd      	b.n	8003188 <_printf_i+0x12c>
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	6826      	ldr	r6, [r4, #0]
 8003210:	6961      	ldr	r1, [r4, #20]
 8003212:	1d18      	adds	r0, r3, #4
 8003214:	6028      	str	r0, [r5, #0]
 8003216:	0635      	lsls	r5, r6, #24
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	d501      	bpl.n	8003220 <_printf_i+0x1c4>
 800321c:	6019      	str	r1, [r3, #0]
 800321e:	e002      	b.n	8003226 <_printf_i+0x1ca>
 8003220:	0670      	lsls	r0, r6, #25
 8003222:	d5fb      	bpl.n	800321c <_printf_i+0x1c0>
 8003224:	8019      	strh	r1, [r3, #0]
 8003226:	2300      	movs	r3, #0
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	4615      	mov	r5, r2
 800322c:	e7bc      	b.n	80031a8 <_printf_i+0x14c>
 800322e:	682b      	ldr	r3, [r5, #0]
 8003230:	1d1a      	adds	r2, r3, #4
 8003232:	602a      	str	r2, [r5, #0]
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	6862      	ldr	r2, [r4, #4]
 8003238:	2100      	movs	r1, #0
 800323a:	4628      	mov	r0, r5
 800323c:	f7fc fff0 	bl	8000220 <memchr>
 8003240:	b108      	cbz	r0, 8003246 <_printf_i+0x1ea>
 8003242:	1b40      	subs	r0, r0, r5
 8003244:	6060      	str	r0, [r4, #4]
 8003246:	6863      	ldr	r3, [r4, #4]
 8003248:	6123      	str	r3, [r4, #16]
 800324a:	2300      	movs	r3, #0
 800324c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003250:	e7aa      	b.n	80031a8 <_printf_i+0x14c>
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	462a      	mov	r2, r5
 8003256:	4649      	mov	r1, r9
 8003258:	4640      	mov	r0, r8
 800325a:	47d0      	blx	sl
 800325c:	3001      	adds	r0, #1
 800325e:	d0ad      	beq.n	80031bc <_printf_i+0x160>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	079b      	lsls	r3, r3, #30
 8003264:	d413      	bmi.n	800328e <_printf_i+0x232>
 8003266:	68e0      	ldr	r0, [r4, #12]
 8003268:	9b03      	ldr	r3, [sp, #12]
 800326a:	4298      	cmp	r0, r3
 800326c:	bfb8      	it	lt
 800326e:	4618      	movlt	r0, r3
 8003270:	e7a6      	b.n	80031c0 <_printf_i+0x164>
 8003272:	2301      	movs	r3, #1
 8003274:	4632      	mov	r2, r6
 8003276:	4649      	mov	r1, r9
 8003278:	4640      	mov	r0, r8
 800327a:	47d0      	blx	sl
 800327c:	3001      	adds	r0, #1
 800327e:	d09d      	beq.n	80031bc <_printf_i+0x160>
 8003280:	3501      	adds	r5, #1
 8003282:	68e3      	ldr	r3, [r4, #12]
 8003284:	9903      	ldr	r1, [sp, #12]
 8003286:	1a5b      	subs	r3, r3, r1
 8003288:	42ab      	cmp	r3, r5
 800328a:	dcf2      	bgt.n	8003272 <_printf_i+0x216>
 800328c:	e7eb      	b.n	8003266 <_printf_i+0x20a>
 800328e:	2500      	movs	r5, #0
 8003290:	f104 0619 	add.w	r6, r4, #25
 8003294:	e7f5      	b.n	8003282 <_printf_i+0x226>
 8003296:	bf00      	nop
 8003298:	080034e9 	.word	0x080034e9
 800329c:	080034fa 	.word	0x080034fa

080032a0 <memmove>:
 80032a0:	4288      	cmp	r0, r1
 80032a2:	b510      	push	{r4, lr}
 80032a4:	eb01 0402 	add.w	r4, r1, r2
 80032a8:	d902      	bls.n	80032b0 <memmove+0x10>
 80032aa:	4284      	cmp	r4, r0
 80032ac:	4623      	mov	r3, r4
 80032ae:	d807      	bhi.n	80032c0 <memmove+0x20>
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	42a1      	cmp	r1, r4
 80032b4:	d008      	beq.n	80032c8 <memmove+0x28>
 80032b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032be:	e7f8      	b.n	80032b2 <memmove+0x12>
 80032c0:	4402      	add	r2, r0
 80032c2:	4601      	mov	r1, r0
 80032c4:	428a      	cmp	r2, r1
 80032c6:	d100      	bne.n	80032ca <memmove+0x2a>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032d2:	e7f7      	b.n	80032c4 <memmove+0x24>

080032d4 <_sbrk_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d06      	ldr	r5, [pc, #24]	; (80032f0 <_sbrk_r+0x1c>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fd fdaa 	bl	8000e38 <_sbrk>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_sbrk_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_sbrk_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	20000244 	.word	0x20000244

080032f4 <memcpy>:
 80032f4:	440a      	add	r2, r1
 80032f6:	4291      	cmp	r1, r2
 80032f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80032fc:	d100      	bne.n	8003300 <memcpy+0xc>
 80032fe:	4770      	bx	lr
 8003300:	b510      	push	{r4, lr}
 8003302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800330a:	4291      	cmp	r1, r2
 800330c:	d1f9      	bne.n	8003302 <memcpy+0xe>
 800330e:	bd10      	pop	{r4, pc}

08003310 <_realloc_r>:
 8003310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003314:	4680      	mov	r8, r0
 8003316:	4614      	mov	r4, r2
 8003318:	460e      	mov	r6, r1
 800331a:	b921      	cbnz	r1, 8003326 <_realloc_r+0x16>
 800331c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003320:	4611      	mov	r1, r2
 8003322:	f7ff bc49 	b.w	8002bb8 <_malloc_r>
 8003326:	b92a      	cbnz	r2, 8003334 <_realloc_r+0x24>
 8003328:	f7ff fbda 	bl	8002ae0 <_free_r>
 800332c:	4625      	mov	r5, r4
 800332e:	4628      	mov	r0, r5
 8003330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003334:	f000 f81b 	bl	800336e <_malloc_usable_size_r>
 8003338:	4284      	cmp	r4, r0
 800333a:	4607      	mov	r7, r0
 800333c:	d802      	bhi.n	8003344 <_realloc_r+0x34>
 800333e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003342:	d812      	bhi.n	800336a <_realloc_r+0x5a>
 8003344:	4621      	mov	r1, r4
 8003346:	4640      	mov	r0, r8
 8003348:	f7ff fc36 	bl	8002bb8 <_malloc_r>
 800334c:	4605      	mov	r5, r0
 800334e:	2800      	cmp	r0, #0
 8003350:	d0ed      	beq.n	800332e <_realloc_r+0x1e>
 8003352:	42bc      	cmp	r4, r7
 8003354:	4622      	mov	r2, r4
 8003356:	4631      	mov	r1, r6
 8003358:	bf28      	it	cs
 800335a:	463a      	movcs	r2, r7
 800335c:	f7ff ffca 	bl	80032f4 <memcpy>
 8003360:	4631      	mov	r1, r6
 8003362:	4640      	mov	r0, r8
 8003364:	f7ff fbbc 	bl	8002ae0 <_free_r>
 8003368:	e7e1      	b.n	800332e <_realloc_r+0x1e>
 800336a:	4635      	mov	r5, r6
 800336c:	e7df      	b.n	800332e <_realloc_r+0x1e>

0800336e <_malloc_usable_size_r>:
 800336e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003372:	1f18      	subs	r0, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	bfbc      	itt	lt
 8003378:	580b      	ldrlt	r3, [r1, r0]
 800337a:	18c0      	addlt	r0, r0, r3
 800337c:	4770      	bx	lr
	...

08003380 <_init>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr

0800338c <_fini>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr
