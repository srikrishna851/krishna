
UART_char.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800049c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001414  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d7  00000000  00000000  0002148b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00021b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f65b  00000000  00000000  00021c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ecd  00000000  00000000  000412e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d0d  00000000  00000000  000431b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000059c  00000000  00000000  00105ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0010645c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000474 	.word	0x08000474

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000474 	.word	0x08000474

08000204 <main>:
void delayMs(int);
/*------------------------------------------------------------------
---------MAIN function*-------------------------------------------------------------------
---------*/
int main (void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
char message[] = "Hello\r\n";
 800020a:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <main+0x40>)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000212:	e883 0003 	stmia.w	r3, {r0, r1}
int i;
UART4_init(); while (1) { for (i = 0; i < 7; i++) {
 8000216:	f000 f817 	bl	8000248 <UART4_init>
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e009      	b.n	8000234 <main+0x30>
UART4_write(message[i]); /* send a char */ } delayMs(10); /* leave a
 8000220:	1d3a      	adds	r2, r7, #4
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	4413      	add	r3, r2
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f851 	bl	80002d0 <UART4_write>
UART4_init(); while (1) { for (i = 0; i < 7; i++) {
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3301      	adds	r3, #1
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2b06      	cmp	r3, #6
 8000238:	ddf2      	ble.n	8000220 <main+0x1c>
UART4_write(message[i]); /* send a char */ } delayMs(10); /* leave a
 800023a:	200a      	movs	r0, #10
 800023c:	f000 f860 	bl	8000300 <delayMs>
UART4_init(); while (1) { for (i = 0; i < 7; i++) {
 8000240:	e7eb      	b.n	800021a <main+0x16>
 8000242:	bf00      	nop
 8000244:	0800048c 	.word	0x0800048c

08000248 <UART4_init>:
gap between messages */ } }
/*------------------------------------------------------------------
---------Initialize UART pins, Baudrate
*-------------------------------------------------------------------
---------*/ void UART4_init (void) {
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
RCC->AHB1ENR |= 1; /* Enable GPIOA clock */
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <UART4_init+0x7c>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a1c      	ldr	r2, [pc, #112]	; (80002c4 <UART4_init+0x7c>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
RCC->APB1ENR |= 0x80000; /* Enable UART4 clock */
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <UART4_init+0x7c>)
 800025a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <UART4_init+0x7c>)
 800025e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000262:	6413      	str	r3, [r2, #64]	; 0x40
/* Configure PA0 for UART4 TX */
GPIOA->AFR[0] &= ~0x000F;
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <UART4_init+0x80>)
 8000266:	6a1b      	ldr	r3, [r3, #32]
 8000268:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <UART4_init+0x80>)
 800026a:	f023 030f 	bic.w	r3, r3, #15
 800026e:	6213      	str	r3, [r2, #32]
GPIOA->AFR[0] |= 0x0008; /* alt8 for UART4 */
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <UART4_init+0x80>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <UART4_init+0x80>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6213      	str	r3, [r2, #32]
GPIOA->MODER &= ~0x0003;
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <UART4_init+0x80>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <UART4_init+0x80>)
 8000282:	f023 0303 	bic.w	r3, r3, #3
 8000286:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= 0x0002; /* enable alternate function for PA0 */
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <UART4_init+0x80>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <UART4_init+0x80>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6013      	str	r3, [r2, #0]
UART4->BRR = 0x0683; /* 9600 baud @ 16 MHz */ UART4->CR1 = 0x0008;
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <UART4_init+0x84>)
 8000296:	f240 6283 	movw	r2, #1667	; 0x683
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <UART4_init+0x84>)
 800029e:	2208      	movs	r2, #8
 80002a0:	60da      	str	r2, [r3, #12]
/* enable Tx, 8-bit data */ UART4->CR2 = 0x0000; /* 1 stop bit */
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <UART4_init+0x84>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	611a      	str	r2, [r3, #16]
UART4->CR3 = 0x0000; /* no flow control */ UART4->CR1 |= 0x2000; /*
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <UART4_init+0x84>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <UART4_init+0x84>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	4a06      	ldr	r2, [pc, #24]	; (80002cc <UART4_init+0x84>)
 80002b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002b8:	60d3      	str	r3, [r2, #12]
enable UART4 */
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000
 80002cc:	40004c00 	.word	0x40004c00

080002d0 <UART4_write>:
/* Write a character to UART4 */
void UART4_write (int ch) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
while (!(UART4->SR & 0x0080)) {} // wait until Tx buffer empty
 80002d8:	bf00      	nop
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <UART4_write+0x2c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <UART4_write+0xa>
UART4->DR = (ch & 0xFF);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <UART4_write+0x2c>)
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	6053      	str	r3, [r2, #4]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40004c00 	.word	0x40004c00

08000300 <delayMs>:
void delayMs(int n) {
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
int i;
for (; n > 0; n--)
 8000308:	e00c      	b.n	8000324 <delayMs+0x24>
for (i = 0; i < 2000; i++) ; }
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	e002      	b.n	8000316 <delayMs+0x16>
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3301      	adds	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800031c:	dbf8      	blt.n	8000310 <delayMs+0x10>
for (; n > 0; n--)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3b01      	subs	r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b00      	cmp	r3, #0
 8000328:	dcef      	bgt.n	800030a <delayMs+0xa>
for (i = 0; i < 2000; i++) ; }
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800033c:	e7fe      	b.n	800033c <NMI_Handler+0x4>

0800033e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>

0800034a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <BusFault_Handler+0x4>

08000350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <UsageFault_Handler+0x4>

08000356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000384:	f000 f83e 	bl	8000404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <SystemInit+0x20>)
 8000392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <SystemInit+0x20>)
 8000398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800039c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003b6:	490e      	ldr	r1, [pc, #56]	; (80003f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003cc:	4c0b      	ldr	r4, [pc, #44]	; (80003fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003da:	f7ff ffd7 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f000 f825 	bl	800042c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f7ff ff0f 	bl	8000204 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f4:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 80003f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003fc:	20000024 	.word	0x20000024

08000400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_IncTick+0x20>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <HAL_IncTick+0x24>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4413      	add	r3, r2
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_IncTick+0x24>)
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	20000000 	.word	0x20000000
 8000428:	20000020 	.word	0x20000020

0800042c <__libc_init_array>:
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	4d0d      	ldr	r5, [pc, #52]	; (8000464 <__libc_init_array+0x38>)
 8000430:	4c0d      	ldr	r4, [pc, #52]	; (8000468 <__libc_init_array+0x3c>)
 8000432:	1b64      	subs	r4, r4, r5
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	2600      	movs	r6, #0
 8000438:	42a6      	cmp	r6, r4
 800043a:	d109      	bne.n	8000450 <__libc_init_array+0x24>
 800043c:	4d0b      	ldr	r5, [pc, #44]	; (800046c <__libc_init_array+0x40>)
 800043e:	4c0c      	ldr	r4, [pc, #48]	; (8000470 <__libc_init_array+0x44>)
 8000440:	f000 f818 	bl	8000474 <_init>
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	10a4      	asrs	r4, r4, #2
 8000448:	2600      	movs	r6, #0
 800044a:	42a6      	cmp	r6, r4
 800044c:	d105      	bne.n	800045a <__libc_init_array+0x2e>
 800044e:	bd70      	pop	{r4, r5, r6, pc}
 8000450:	f855 3b04 	ldr.w	r3, [r5], #4
 8000454:	4798      	blx	r3
 8000456:	3601      	adds	r6, #1
 8000458:	e7ee      	b.n	8000438 <__libc_init_array+0xc>
 800045a:	f855 3b04 	ldr.w	r3, [r5], #4
 800045e:	4798      	blx	r3
 8000460:	3601      	adds	r6, #1
 8000462:	e7f2      	b.n	800044a <__libc_init_array+0x1e>
 8000464:	08000494 	.word	0x08000494
 8000468:	08000494 	.word	0x08000494
 800046c:	08000494 	.word	0x08000494
 8000470:	08000498 	.word	0x08000498

08000474 <_init>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr

08000480 <_fini>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr
