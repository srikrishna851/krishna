
uart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000082c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009f0  080009f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009f0  080009f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080009f0  080009f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009f0  080009f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f0  080009f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009f4  080009f4  000109f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080009f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08000a04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000a04  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c8e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d4c  00000000  00000000  00025d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000508  00000000  00000000  00026a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003dd  00000000  00000000  00026f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbf1  00000000  00000000  00027345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a8a  00000000  00000000  00046f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b6c  00000000  00000000  0004c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000136c  00000000  00000000  0011052c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00111898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009d8 	.word	0x080009d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080009d8 	.word	0x080009d8

08000204 <main>:
#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2; // Change the handle according to your setup

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b08e      	sub	sp, #56	; 0x38
 8000208:	af00      	add	r7, sp, #0
    HAL_Init();
 800020a:	f000 f8a3 	bl	8000354 <HAL_Init>
    // ...

    while (1) {
        // Receive data over UART
        char receivedData[50]; // Assuming the received data won't exceed this size
        HAL_UART_Receive(&huart2, (uint8_t*)receivedData, sizeof(receivedData)-1, HAL_MAX_DELAY);
 800020e:	1d39      	adds	r1, r7, #4
 8000210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000214:	2231      	movs	r2, #49	; 0x31
 8000216:	4807      	ldr	r0, [pc, #28]	; (8000234 <main+0x30>)
 8000218:	f000 faa9 	bl	800076e <HAL_UART_Receive>

        // Process received data (e.g., print it via UART)
        HAL_UART_Transmit(&huart2, (uint8_t*)receivedData, sizeof(receivedData)-1, HAL_MAX_DELAY);
 800021c:	1d39      	adds	r1, r7, #4
 800021e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000222:	2231      	movs	r2, #49	; 0x31
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <main+0x30>)
 8000226:	f000 fa10 	bl	800064a <HAL_UART_Transmit>

        HAL_Delay(100); // Wait before receiving the next message
 800022a:	2064      	movs	r0, #100	; 0x64
 800022c:	f000 f904 	bl	8000438 <HAL_Delay>
    while (1) {
 8000230:	e7ed      	b.n	800020e <main+0xa>
 8000232:	bf00      	nop
 8000234:	20000028 	.word	0x20000028

08000238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <HAL_MspInit+0x4c>)
 8000244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000246:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <HAL_MspInit+0x4c>)
 8000248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800024c:	6453      	str	r3, [r2, #68]	; 0x44
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_MspInit+0x4c>)
 8000250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800025a:	2300      	movs	r3, #0
 800025c:	603b      	str	r3, [r7, #0]
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <HAL_MspInit+0x4c>)
 8000260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000262:	4a08      	ldr	r2, [pc, #32]	; (8000284 <HAL_MspInit+0x4c>)
 8000264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000268:	6413      	str	r3, [r2, #64]	; 0x40
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_MspInit+0x4c>)
 800026c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000276:	2007      	movs	r0, #7
 8000278:	f000 f9b4 	bl	80005e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40023800 	.word	0x40023800

08000288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800028c:	e7fe      	b.n	800028c <NMI_Handler+0x4>

0800028e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000292:	e7fe      	b.n	8000292 <HardFault_Handler+0x4>

08000294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000298:	e7fe      	b.n	8000298 <MemManage_Handler+0x4>

0800029a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029e:	e7fe      	b.n	800029e <BusFault_Handler+0x4>

080002a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <UsageFault_Handler+0x4>

080002a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d4:	f000 f890 	bl	80003f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <SystemInit+0x20>)
 80002e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e6:	4a05      	ldr	r2, [pc, #20]	; (80002fc <SystemInit+0x20>)
 80002e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000338 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000306:	490e      	ldr	r1, [pc, #56]	; (8000340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800031c:	4c0b      	ldr	r4, [pc, #44]	; (800034c <LoopFillZerobss+0x26>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800032a:	f7ff ffd7 	bl	80002dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800032e:	f000 fb2f 	bl	8000990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000332:	f7ff ff67 	bl	8000204 <main>
  bx  lr    
 8000336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000344:	080009f8 	.word	0x080009f8
  ldr r2, =_sbss
 8000348:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800034c:	20000070 	.word	0x20000070

08000350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_IRQHandler>
	...

08000354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <HAL_Init+0x40>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <HAL_Init+0x40>)
 800035e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <HAL_Init+0x40>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <HAL_Init+0x40>)
 800036a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800036e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <HAL_Init+0x40>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a07      	ldr	r2, [pc, #28]	; (8000394 <HAL_Init+0x40>)
 8000376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800037c:	2003      	movs	r0, #3
 800037e:	f000 f931 	bl	80005e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000382:	2000      	movs	r0, #0
 8000384:	f000 f808 	bl	8000398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000388:	f7ff ff56 	bl	8000238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40023c00 	.word	0x40023c00

08000398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_InitTick+0x54>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <HAL_InitTick+0x58>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4619      	mov	r1, r3
 80003aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80003b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f93b 	bl	8000632 <HAL_SYSTICK_Config>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003c2:	2301      	movs	r3, #1
 80003c4:	e00e      	b.n	80003e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2b0f      	cmp	r3, #15
 80003ca:	d80a      	bhi.n	80003e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003cc:	2200      	movs	r2, #0
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003d4:	f000 f911 	bl	80005fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003d8:	4a06      	ldr	r2, [pc, #24]	; (80003f4 <HAL_InitTick+0x5c>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003de:	2300      	movs	r3, #0
 80003e0:	e000      	b.n	80003e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003e2:	2301      	movs	r3, #1
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000008 	.word	0x20000008
 80003f4:	20000004 	.word	0x20000004

080003f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_IncTick+0x20>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_IncTick+0x24>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4413      	add	r3, r2
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_IncTick+0x24>)
 800040a:	6013      	str	r3, [r2, #0]
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000008 	.word	0x20000008
 800041c:	2000006c 	.word	0x2000006c

08000420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  return uwTick;
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <HAL_GetTick+0x14>)
 8000426:	681b      	ldr	r3, [r3, #0]
}
 8000428:	4618      	mov	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	2000006c 	.word	0x2000006c

08000438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000440:	f7ff ffee 	bl	8000420 <HAL_GetTick>
 8000444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000450:	d005      	beq.n	800045e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_Delay+0x44>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4413      	add	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800045e:	bf00      	nop
 8000460:	f7ff ffde 	bl	8000420 <HAL_GetTick>
 8000464:	4602      	mov	r2, r0
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	429a      	cmp	r2, r3
 800046e:	d8f7      	bhi.n	8000460 <HAL_Delay+0x28>
  {
  }
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000008 	.word	0x20000008

08000480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000496:	68ba      	ldr	r2, [r7, #8]
 8000498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800049c:	4013      	ands	r3, r2
 800049e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <__NVIC_SetPriorityGrouping+0x44>)
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	60d3      	str	r3, [r2, #12]
}
 80004b8:	bf00      	nop
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <__NVIC_GetPriorityGrouping+0x18>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	0a1b      	lsrs	r3, r3, #8
 80004d2:	f003 0307 	and.w	r3, r3, #7
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	6039      	str	r1, [r7, #0]
 80004ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	db0a      	blt.n	800050e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	490c      	ldr	r1, [pc, #48]	; (8000530 <__NVIC_SetPriority+0x4c>)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	0112      	lsls	r2, r2, #4
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	440b      	add	r3, r1
 8000508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800050c:	e00a      	b.n	8000524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4908      	ldr	r1, [pc, #32]	; (8000534 <__NVIC_SetPriority+0x50>)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	f003 030f 	and.w	r3, r3, #15
 800051a:	3b04      	subs	r3, #4
 800051c:	0112      	lsls	r2, r2, #4
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	440b      	add	r3, r1
 8000522:	761a      	strb	r2, [r3, #24]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	e000e100 	.word	0xe000e100
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	f1c3 0307 	rsb	r3, r3, #7
 8000552:	2b04      	cmp	r3, #4
 8000554:	bf28      	it	cs
 8000556:	2304      	movcs	r3, #4
 8000558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	3304      	adds	r3, #4
 800055e:	2b06      	cmp	r3, #6
 8000560:	d902      	bls.n	8000568 <NVIC_EncodePriority+0x30>
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	3b03      	subs	r3, #3
 8000566:	e000      	b.n	800056a <NVIC_EncodePriority+0x32>
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	43da      	mvns	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	401a      	ands	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	43d9      	mvns	r1, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000590:	4313      	orrs	r3, r2
         );
}
 8000592:	4618      	mov	r0, r3
 8000594:	3724      	adds	r7, #36	; 0x24
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005b0:	d301      	bcc.n	80005b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005b2:	2301      	movs	r3, #1
 80005b4:	e00f      	b.n	80005d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <SysTick_Config+0x40>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005be:	210f      	movs	r1, #15
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005c4:	f7ff ff8e 	bl	80004e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <SysTick_Config+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <SysTick_Config+0x40>)
 80005d0:	2207      	movs	r2, #7
 80005d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	e000e010 	.word	0xe000e010

080005e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ff47 	bl	8000480 <__NVIC_SetPriorityGrouping>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800060c:	f7ff ff5c 	bl	80004c8 <__NVIC_GetPriorityGrouping>
 8000610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	6978      	ldr	r0, [r7, #20]
 8000618:	f7ff ff8e 	bl	8000538 <NVIC_EncodePriority>
 800061c:	4602      	mov	r2, r0
 800061e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff5d 	bl	80004e4 <__NVIC_SetPriority>
}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ffb0 	bl	80005a0 <SysTick_Config>
 8000640:	4603      	mov	r3, r0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b08a      	sub	sp, #40	; 0x28
 800064e:	af02      	add	r7, sp, #8
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4613      	mov	r3, r2
 8000658:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b20      	cmp	r3, #32
 8000668:	d17c      	bne.n	8000764 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <HAL_UART_Transmit+0x2c>
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e075      	b.n	8000766 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000680:	2b01      	cmp	r3, #1
 8000682:	d101      	bne.n	8000688 <HAL_UART_Transmit+0x3e>
 8000684:	2302      	movs	r3, #2
 8000686:	e06e      	b.n	8000766 <HAL_UART_Transmit+0x11c>
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2201      	movs	r2, #1
 800068c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2200      	movs	r2, #0
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2221      	movs	r2, #33	; 0x21
 800069a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800069e:	f7ff febf 	bl	8000420 <HAL_GetTick>
 80006a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	88fa      	ldrh	r2, [r7, #6]
 80006ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006b8:	d108      	bne.n	80006cc <HAL_UART_Transmit+0x82>
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d104      	bne.n	80006cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	e003      	b.n	80006d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80006dc:	e02a      	b.n	8000734 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2200      	movs	r2, #0
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f000 f8e2 	bl	80008b2 <UART_WaitOnFlagUntilTimeout>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80006f4:	2303      	movs	r3, #3
 80006f6:	e036      	b.n	8000766 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10b      	bne.n	8000716 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800070c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	3302      	adds	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	e007      	b.n	8000726 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	3301      	adds	r3, #1
 8000724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800072a:	b29b      	uxth	r3, r3
 800072c:	3b01      	subs	r3, #1
 800072e:	b29a      	uxth	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000738:	b29b      	uxth	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1cf      	bne.n	80006de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	2200      	movs	r2, #0
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f000 f8b2 	bl	80008b2 <UART_WaitOnFlagUntilTimeout>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000754:	2303      	movs	r3, #3
 8000756:	e006      	b.n	8000766 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2220      	movs	r2, #32
 800075c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	e000      	b.n	8000766 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000764:	2302      	movs	r3, #2
  }
}
 8000766:	4618      	mov	r0, r3
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b08a      	sub	sp, #40	; 0x28
 8000772:	af02      	add	r7, sp, #8
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4613      	mov	r3, r2
 800077c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b20      	cmp	r3, #32
 800078c:	f040 808c 	bne.w	80008a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <HAL_UART_Receive+0x2e>
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e084      	b.n	80008aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d101      	bne.n	80007ae <HAL_UART_Receive+0x40>
 80007aa:	2302      	movs	r3, #2
 80007ac:	e07d      	b.n	80008aa <HAL_UART_Receive+0x13c>
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2201      	movs	r2, #1
 80007b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2222      	movs	r2, #34	; 0x22
 80007c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80007ca:	f7ff fe29 	bl	8000420 <HAL_GetTick>
 80007ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	88fa      	ldrh	r2, [r7, #6]
 80007d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007e4:	d108      	bne.n	80007f8 <HAL_UART_Receive+0x8a>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d104      	bne.n	80007f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	e003      	b.n	8000800 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8000808:	e043      	b.n	8000892 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f000 f84c 	bl	80008b2 <UART_WaitOnFlagUntilTimeout>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8000820:	2303      	movs	r3, #3
 8000822:	e042      	b.n	80008aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10c      	bne.n	8000844 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	b29b      	uxth	r3, r3
 8000832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000836:	b29a      	uxth	r2, r3
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	3302      	adds	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	e01f      	b.n	8000884 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800084c:	d007      	beq.n	800085e <HAL_UART_Receive+0xf0>
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10a      	bne.n	800086c <HAL_UART_Receive+0xfe>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e008      	b.n	800087e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000878:	b2da      	uxtb	r2, r3
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3301      	adds	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000888:	b29b      	uxth	r3, r3
 800088a:	3b01      	subs	r3, #1
 800088c:	b29a      	uxth	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000896:	b29b      	uxth	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1b6      	bne.n	800080a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2220      	movs	r2, #32
 80008a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	e000      	b.n	80008aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80008a8:	2302      	movs	r3, #2
  }
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b090      	sub	sp, #64	; 0x40
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4613      	mov	r3, r2
 80008c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80008c2:	e050      	b.n	8000966 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80008c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008ca:	d04c      	beq.n	8000966 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80008cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d007      	beq.n	80008e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80008d2:	f7ff fda5 	bl	8000420 <HAL_GetTick>
 80008d6:	4602      	mov	r2, r0
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008de:	429a      	cmp	r2, r3
 80008e0:	d241      	bcs.n	8000966 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	330c      	adds	r3, #12
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	e853 3f00 	ldrex	r3, [r3]
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	330c      	adds	r3, #12
 8000900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000902:	637a      	str	r2, [r7, #52]	; 0x34
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800090a:	e841 2300 	strex	r3, r2, [r1]
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1e5      	bne.n	80008e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3314      	adds	r3, #20
 800091c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	e853 3f00 	ldrex	r3, [r3]
 8000924:	613b      	str	r3, [r7, #16]
   return(result);
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	f023 0301 	bic.w	r3, r3, #1
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3314      	adds	r3, #20
 8000934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000936:	623a      	str	r2, [r7, #32]
 8000938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800093a:	69f9      	ldr	r1, [r7, #28]
 800093c:	6a3a      	ldr	r2, [r7, #32]
 800093e:	e841 2300 	strex	r3, r2, [r1]
 8000942:	61bb      	str	r3, [r7, #24]
   return(result);
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1e5      	bne.n	8000916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2220      	movs	r2, #32
 800094e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2220      	movs	r2, #32
 8000956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000962:	2303      	movs	r3, #3
 8000964:	e00f      	b.n	8000986 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4013      	ands	r3, r2
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	429a      	cmp	r2, r3
 8000974:	bf0c      	ite	eq
 8000976:	2301      	moveq	r3, #1
 8000978:	2300      	movne	r3, #0
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	429a      	cmp	r2, r3
 8000982:	d09f      	beq.n	80008c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3740      	adds	r7, #64	; 0x40
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <__libc_init_array>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	4d0d      	ldr	r5, [pc, #52]	; (80009c8 <__libc_init_array+0x38>)
 8000994:	4c0d      	ldr	r4, [pc, #52]	; (80009cc <__libc_init_array+0x3c>)
 8000996:	1b64      	subs	r4, r4, r5
 8000998:	10a4      	asrs	r4, r4, #2
 800099a:	2600      	movs	r6, #0
 800099c:	42a6      	cmp	r6, r4
 800099e:	d109      	bne.n	80009b4 <__libc_init_array+0x24>
 80009a0:	4d0b      	ldr	r5, [pc, #44]	; (80009d0 <__libc_init_array+0x40>)
 80009a2:	4c0c      	ldr	r4, [pc, #48]	; (80009d4 <__libc_init_array+0x44>)
 80009a4:	f000 f818 	bl	80009d8 <_init>
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	10a4      	asrs	r4, r4, #2
 80009ac:	2600      	movs	r6, #0
 80009ae:	42a6      	cmp	r6, r4
 80009b0:	d105      	bne.n	80009be <__libc_init_array+0x2e>
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b8:	4798      	blx	r3
 80009ba:	3601      	adds	r6, #1
 80009bc:	e7ee      	b.n	800099c <__libc_init_array+0xc>
 80009be:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c2:	4798      	blx	r3
 80009c4:	3601      	adds	r6, #1
 80009c6:	e7f2      	b.n	80009ae <__libc_init_array+0x1e>
 80009c8:	080009f0 	.word	0x080009f0
 80009cc:	080009f0 	.word	0x080009f0
 80009d0:	080009f0 	.word	0x080009f0
 80009d4:	080009f4 	.word	0x080009f4

080009d8 <_init>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	bf00      	nop
 80009dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009de:	bc08      	pop	{r3}
 80009e0:	469e      	mov	lr, r3
 80009e2:	4770      	bx	lr

080009e4 <_fini>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	bf00      	nop
 80009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ea:	bc08      	pop	{r3}
 80009ec:	469e      	mov	lr, r3
 80009ee:	4770      	bx	lr
