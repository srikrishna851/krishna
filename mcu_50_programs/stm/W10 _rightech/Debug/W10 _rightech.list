
W10 _rightech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000374  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000538  08000538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000580  08000580  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000580  08000580  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000580  08000580  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000588  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800058c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800058c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000144d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ee  00000000  00000000  000214c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  000219b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014c  00000000  00000000  00021b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f65b  00000000  00000000  00021cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f29  00000000  00000000  00041337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d1a  00000000  00000000  00043260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005a4  00000000  00000000  00105f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00106520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000520 	.word	0x08000520

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000520 	.word	0x08000520

08000204 <delayMs>:
void usart1_init(void);
void USART1_write(int ch);
void delayMs(int n);

void delayMs(int n)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 800020c:	e00d      	b.n	800022a <delayMs+0x26>
	for (i = 0; i < 3195; i++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delayMs+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf7      	ble.n	8000214 <delayMs+0x10>
	for (; n > 0; n--)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dcee      	bgt.n	800020e <delayMs+0xa>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
	...

08000240 <main>:

int main()
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b094      	sub	sp, #80	; 0x50
 8000244:	af00      	add	r7, sp, #0
	usart1_init();
 8000246:	f000 f871 	bl	800032c <usart1_init>

	int i;
	char msg1[] ="CMD+RESET\r\n";
 800024a:	4a35      	ldr	r2, [pc, #212]	; (8000320 <main+0xe0>)
 800024c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000250:	ca07      	ldmia	r2, {r0, r1, r2}
 8000252:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (i = 0; msg1[i] !='\0'; i++)
 8000256:	2300      	movs	r3, #0
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800025a:	e00a      	b.n	8000272 <main+0x32>
		USART1_write(msg1[i]);
 800025c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000262:	4413      	add	r3, r2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f8a4 	bl	80003b4 <USART1_write>
	for (i = 0; msg1[i] !='\0'; i++)
 800026c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800026e:	3301      	adds	r3, #1
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000272:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000278:	4413      	add	r3, r2
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1ed      	bne.n	800025c <main+0x1c>

	delayMs(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f7ff ffbe 	bl	8000204 <delayMs>

	char msg2[] ="CMD+WIFIMODE=1\r\n";
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <main+0xe4>)
 800028a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800028e:	461d      	mov	r5, r3
 8000290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000294:	682b      	ldr	r3, [r5, #0]
 8000296:	7023      	strb	r3, [r4, #0]
	for (i = 0; msg2[i] != '\0'; i++)
 8000298:	2300      	movs	r3, #0
 800029a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800029c:	e00a      	b.n	80002b4 <main+0x74>
		USART1_write(msg2[i]);
 800029e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80002a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80002a4:	4413      	add	r3, r2
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f883 	bl	80003b4 <USART1_write>
	for (i = 0; msg2[i] != '\0'; i++)
 80002ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80002b0:	3301      	adds	r3, #1
 80002b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80002b4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80002b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1ed      	bne.n	800029e <main+0x5e>

	delayMs(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f7ff ff9d 	bl	8000204 <delayMs>

	char msg3[] ="CMD+CONTOAP=SBCS.2.4.GHz,SBCS@1234 ,\r\n";
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <main+0xe8>)
 80002cc:	1d3c      	adds	r4, r7, #4
 80002ce:	461d      	mov	r5, r3
 80002d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002dc:	6020      	str	r0, [r4, #0]
 80002de:	3404      	adds	r4, #4
 80002e0:	8021      	strh	r1, [r4, #0]
 80002e2:	3402      	adds	r4, #2
 80002e4:	0c0b      	lsrs	r3, r1, #16
 80002e6:	7023      	strb	r3, [r4, #0]
	for (i = 0; msg3[i] != '\0'; i++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80002ec:	e009      	b.n	8000302 <main+0xc2>
		USART1_write(msg3[i]);
 80002ee:	1d3a      	adds	r2, r7, #4
 80002f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80002f2:	4413      	add	r3, r2
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f85c 	bl	80003b4 <USART1_write>
	for (i = 0; msg3[i] != '\0'; i++)
 80002fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80002fe:	3301      	adds	r3, #1
 8000300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000302:	1d3a      	adds	r2, r7, #4
 8000304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000306:	4413      	add	r3, r2
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1ef      	bne.n	80002ee <main+0xae>

	delayMs(1000);
 800030e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000312:	f7ff ff77 	bl	8000204 <delayMs>

	return 0;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	3750      	adds	r7, #80	; 0x50
 800031c:	46bd      	mov	sp, r7
 800031e:	bdb0      	pop	{r4, r5, r7, pc}
 8000320:	08000538 	.word	0x08000538
 8000324:	08000544 	.word	0x08000544
 8000328:	08000558 	.word	0x08000558

0800032c <usart1_init>:




void usart1_init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <usart1_init+0x7c>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <usart1_init+0x7c>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= 0x00000010;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <usart1_init+0x7c>)
 800033e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000340:	4a19      	ldr	r2, [pc, #100]	; (80003a8 <usart1_init+0x7c>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER &= ~0x003C0000;
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <usart1_init+0x80>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a17      	ldr	r2, [pc, #92]	; (80003ac <usart1_init+0x80>)
 800034e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000352:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00280000;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <usart1_init+0x80>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a14      	ldr	r2, [pc, #80]	; (80003ac <usart1_init+0x80>)
 800035a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800035e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~0x0FF0;
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <usart1_init+0x80>)
 8000362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000364:	4a11      	ldr	r2, [pc, #68]	; (80003ac <usart1_init+0x80>)
 8000366:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800036a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= 0x0770 ; /* alt8 for UART1 */
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <usart1_init+0x80>)
 800036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000370:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <usart1_init+0x80>)
 8000372:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000376:	6253      	str	r3, [r2, #36]	; 0x24
	USART1->BRR = 0x01A1; /* 9600 baud @ 16 MHz */
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <usart1_init+0x84>)
 800037a:	f240 12a1 	movw	r2, #417	; 0x1a1
 800037e:	609a      	str	r2, [r3, #8]
	USART1->CR1 = 0x000C;/* enable Tx, Rx, 8-bit data */
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <usart1_init+0x84>)
 8000382:	220c      	movs	r2, #12
 8000384:	60da      	str	r2, [r3, #12]
	USART1->CR2 = 0x0000; /* 1 stop bit*/
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <usart1_init+0x84>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
	USART1->CR3 = 0x0000; /* no flow control */
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <usart1_init+0x84>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
	USART1->CR1 |= 0x2000; /*enable UART1 */
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <usart1_init+0x84>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <usart1_init+0x84>)
 8000398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039c:	60d3      	str	r3, [r2, #12]

}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020000 	.word	0x40020000
 80003b0:	40011000 	.word	0x40011000

080003b4 <USART1_write>:



void USART1_write(int ch)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & 0x0080)) {} // wait until Tx buffer empty
 80003bc:	bf00      	nop
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <USART1_write+0x2c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <USART1_write+0xa>
	USART1->DR = (ch & 0xFF);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <USART1_write+0x2c>)
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	6053      	str	r3, [r2, #4]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40011000 	.word	0x40011000

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <NMI_Handler+0x4>

080003ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <HardFault_Handler+0x4>

080003f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <MemManage_Handler+0x4>

080003f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <BusFault_Handler+0x4>

080003fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <UsageFault_Handler+0x4>

08000402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000430:	f000 f83e 	bl	80004b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}

08000438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <SystemInit+0x20>)
 800043e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <SystemInit+0x20>)
 8000444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800045c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000462:	490e      	ldr	r1, [pc, #56]	; (800049c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000478:	4c0b      	ldr	r4, [pc, #44]	; (80004a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000486:	f7ff ffd7 	bl	8000438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f000 f825 	bl	80004d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800048e:	f7ff fed7 	bl	8000240 <main>
  bx  lr    
 8000492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004a0:	08000588 	.word	0x08000588
  ldr r2, =_sbss
 80004a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004a8:	20000024 	.word	0x20000024

080004ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC_IRQHandler>
	...

080004b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_IncTick+0x20>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_IncTick+0x24>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4413      	add	r3, r2
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_IncTick+0x24>)
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000020 	.word	0x20000020

080004d8 <__libc_init_array>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	4d0d      	ldr	r5, [pc, #52]	; (8000510 <__libc_init_array+0x38>)
 80004dc:	4c0d      	ldr	r4, [pc, #52]	; (8000514 <__libc_init_array+0x3c>)
 80004de:	1b64      	subs	r4, r4, r5
 80004e0:	10a4      	asrs	r4, r4, #2
 80004e2:	2600      	movs	r6, #0
 80004e4:	42a6      	cmp	r6, r4
 80004e6:	d109      	bne.n	80004fc <__libc_init_array+0x24>
 80004e8:	4d0b      	ldr	r5, [pc, #44]	; (8000518 <__libc_init_array+0x40>)
 80004ea:	4c0c      	ldr	r4, [pc, #48]	; (800051c <__libc_init_array+0x44>)
 80004ec:	f000 f818 	bl	8000520 <_init>
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	10a4      	asrs	r4, r4, #2
 80004f4:	2600      	movs	r6, #0
 80004f6:	42a6      	cmp	r6, r4
 80004f8:	d105      	bne.n	8000506 <__libc_init_array+0x2e>
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000500:	4798      	blx	r3
 8000502:	3601      	adds	r6, #1
 8000504:	e7ee      	b.n	80004e4 <__libc_init_array+0xc>
 8000506:	f855 3b04 	ldr.w	r3, [r5], #4
 800050a:	4798      	blx	r3
 800050c:	3601      	adds	r6, #1
 800050e:	e7f2      	b.n	80004f6 <__libc_init_array+0x1e>
 8000510:	08000580 	.word	0x08000580
 8000514:	08000580 	.word	0x08000580
 8000518:	08000580 	.word	0x08000580
 800051c:	08000584 	.word	0x08000584

08000520 <_init>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr

0800052c <_fini>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr
