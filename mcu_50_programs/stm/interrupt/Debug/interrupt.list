
interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001488  08001488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014cc  080014cc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080014cc  080014cc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014cc  080014cc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014cc  080014cc  000114cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014d0  080014d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080014d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001534  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001534  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023a7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008a2  00000000  00000000  0002247a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  00022d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e9  00000000  00000000  00022fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021235  00000000  00000000  000231c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000033fb  00000000  00000000  000443fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c867f  00000000  00000000  000477f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001034  00000000  00000000  0010fe78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00110eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001470 	.word	0x08001470

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001470 	.word	0x08001470

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	; (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <pc13_exti_init>:
#include "exti.h"
#include "stm32f4xx.h"
#define LED         (1<<5)

void pc13_exti_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
    /* Disable global interrupts */
    __disable_irq();

    /* Enable clock access for GPIOC */
    RCC->AHB1ENR |= GPIOCEN;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <pc13_exti_init+0x6c>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <pc13_exti_init+0x6c>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30

    /* Set PC13 as input */
    GPIOC->MODER &= ~(1U << 26);
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <pc13_exti_init+0x70>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a15      	ldr	r2, [pc, #84]	; (800035c <pc13_exti_init+0x70>)
 8000306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800030a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1U << 27);
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <pc13_exti_init+0x70>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <pc13_exti_init+0x70>)
 8000312:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000316:	6013      	str	r3, [r2, #0]

    /* Enable clock access to SYSCFG */
    RCC->APB2ENR |= SYSCFGEN;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <pc13_exti_init+0x6c>)
 800031a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <pc13_exti_init+0x6c>)
 800031e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000322:	6453      	str	r3, [r2, #68]	; 0x44

    /* Select PORTC for EXTI13 */
    SYSCFG->EXTICR[3] |= (1U << 5);
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <pc13_exti_init+0x74>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <pc13_exti_init+0x74>)
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	6153      	str	r3, [r2, #20]

    /* Unmask EXTI13 */
    EXTI->IMR |= LINE13;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <pc13_exti_init+0x78>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <pc13_exti_init+0x78>)
 8000336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033a:	6013      	str	r3, [r2, #0]

    /* Select falling edge trigger */
    EXTI->FTSR |= LINE13;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <pc13_exti_init+0x78>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a08      	ldr	r2, [pc, #32]	; (8000364 <pc13_exti_init+0x78>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000346:	60d3      	str	r3, [r2, #12]

    /* Enable EXTI13 line in NVIC */
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000348:	2028      	movs	r0, #40	; 0x28
 800034a:	f7ff ffb1 	bl	80002b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800034e:	b662      	cpsie	i
}
 8000350:	bf00      	nop

    /* Enable global interrupts */
    __enable_irq();
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020800 	.word	0x40020800
 8000360:	40013800 	.word	0x40013800
 8000364:	40013c00 	.word	0x40013c00

08000368 <exti_callback>:

void exti_callback(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    printf("BTN Pressed...\n\r");
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <exti_callback+0x1c>)
 800036e:	f000 fa0b 	bl	8000788 <iprintf>
    GPIOA->ODR ^= LED;
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <exti_callback+0x20>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <exti_callback+0x20>)
 8000378:	f083 0320 	eor.w	r3, r3, #32
 800037c:	6153      	str	r3, [r2, #20]
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	08001488 	.word	0x08001488
 8000388:	40020000 	.word	0x40020000

0800038c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    if ((EXTI->PR & LINE13) != 0)
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <EXTI15_10_IRQHandler+0x24>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d007      	beq.n	80003ac <EXTI15_10_IRQHandler+0x20>
    {
        /* Clear PR flag */
        EXTI->PR |= LINE13;
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <EXTI15_10_IRQHandler+0x24>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <EXTI15_10_IRQHandler+0x24>)
 80003a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003a6:	6153      	str	r3, [r2, #20]

        // Do something...
        exti_callback();
 80003a8:	f7ff ffde 	bl	8000368 <exti_callback>
    }
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40013c00 	.word	0x40013c00

080003b4 <main>:
#define GPIOAEN      (1U << 0)
#define PIN5         (1U << 5)
#define LED          PIN5

int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    /* 1. Enable clock access to GPIOA */
    RCC->AHB1ENR |= GPIOAEN;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <main+0x30>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <main+0x30>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30

    /* 2. Set PA5 as output pin */
    GPIOA->MODER |= (1U << 10);
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <main+0x34>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <main+0x34>)
 80003ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ce:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U << 11);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <main+0x34>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <main+0x34>)
 80003d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003da:	6013      	str	r3, [r2, #0]

    pc13_exti_init();
 80003dc:	f7ff ff86 	bl	80002ec <pc13_exti_init>

    while (1)
 80003e0:	e7fe      	b.n	80003e0 <main+0x2c>
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020000 	.word	0x40020000

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <NMI_Handler+0x4>

080003f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <MemManage_Handler+0x4>

080003fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>

0800040a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000438:	f000 f8e2 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	e00a      	b.n	8000468 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000452:	f3af 8000 	nop.w
 8000456:	4601      	mov	r1, r0
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	60ba      	str	r2, [r7, #8]
 800045e:	b2ca      	uxtb	r2, r1
 8000460:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbf0      	blt.n	8000452 <_read+0x12>
  }

  return len;
 8000470:	687b      	ldr	r3, [r7, #4]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e009      	b.n	80004a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	60ba      	str	r2, [r7, #8]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbf1      	blt.n	800048c <_write+0x12>
  }
  return len;
 80004a8:	687b      	ldr	r3, [r7, #4]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <_close>:

int _close(int file)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004da:	605a      	str	r2, [r3, #4]
  return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <_isatty>:

int _isatty(int file)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <_sbrk+0x5c>)
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <_sbrk+0x60>)
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <_sbrk+0x64>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <_sbrk+0x64>)
 800053a:	4a12      	ldr	r2, [pc, #72]	; (8000584 <_sbrk+0x68>)
 800053c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	429a      	cmp	r2, r3
 800054a:	d207      	bcs.n	800055c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800054c:	f000 f9c0 	bl	80008d0 <__errno>
 8000550:	4603      	mov	r3, r0
 8000552:	220c      	movs	r2, #12
 8000554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800055a:	e009      	b.n	8000570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <_sbrk+0x64>)
 800056c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20020000 	.word	0x20020000
 800057c:	00000400 	.word	0x00000400
 8000580:	2000007c 	.word	0x2000007c
 8000584:	200001d0 	.word	0x200001d0

08000588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <SystemInit+0x20>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <SystemInit+0x20>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005b2:	490e      	ldr	r1, [pc, #56]	; (80005ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005c8:	4c0b      	ldr	r4, [pc, #44]	; (80005f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005d6:	f7ff ffd7 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005da:	f000 f97f 	bl	80008dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005de:	f7ff fee9 	bl	80003b4 <main>
  bx  lr    
 80005e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005f0:	080014d4 	.word	0x080014d4
  ldr r2, =_sbss
 80005f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005f8:	200001d0 	.word	0x200001d0

080005fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>
	...

08000600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x20>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_IncTick+0x24>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000000 	.word	0x20000000
 8000624:	20000080 	.word	0x20000080

08000628 <std>:
 8000628:	2300      	movs	r3, #0
 800062a:	b510      	push	{r4, lr}
 800062c:	4604      	mov	r4, r0
 800062e:	e9c0 3300 	strd	r3, r3, [r0]
 8000632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000636:	6083      	str	r3, [r0, #8]
 8000638:	8181      	strh	r1, [r0, #12]
 800063a:	6643      	str	r3, [r0, #100]	; 0x64
 800063c:	81c2      	strh	r2, [r0, #14]
 800063e:	6183      	str	r3, [r0, #24]
 8000640:	4619      	mov	r1, r3
 8000642:	2208      	movs	r2, #8
 8000644:	305c      	adds	r0, #92	; 0x5c
 8000646:	f000 f8f4 	bl	8000832 <memset>
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <std+0x38>)
 800064c:	6263      	str	r3, [r4, #36]	; 0x24
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <std+0x3c>)
 8000650:	62a3      	str	r3, [r4, #40]	; 0x28
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <std+0x40>)
 8000654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <std+0x44>)
 8000658:	6224      	str	r4, [r4, #32]
 800065a:	6323      	str	r3, [r4, #48]	; 0x30
 800065c:	bd10      	pop	{r4, pc}
 800065e:	bf00      	nop
 8000660:	080007ad 	.word	0x080007ad
 8000664:	080007cf 	.word	0x080007cf
 8000668:	08000807 	.word	0x08000807
 800066c:	0800082b 	.word	0x0800082b

08000670 <stdio_exit_handler>:
 8000670:	4a02      	ldr	r2, [pc, #8]	; (800067c <stdio_exit_handler+0xc>)
 8000672:	4903      	ldr	r1, [pc, #12]	; (8000680 <stdio_exit_handler+0x10>)
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <stdio_exit_handler+0x14>)
 8000676:	f000 b869 	b.w	800074c <_fwalk_sglue>
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	080011cd 	.word	0x080011cd
 8000684:	20000010 	.word	0x20000010

08000688 <cleanup_stdio>:
 8000688:	6841      	ldr	r1, [r0, #4]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <cleanup_stdio+0x34>)
 800068c:	4299      	cmp	r1, r3
 800068e:	b510      	push	{r4, lr}
 8000690:	4604      	mov	r4, r0
 8000692:	d001      	beq.n	8000698 <cleanup_stdio+0x10>
 8000694:	f000 fd9a 	bl	80011cc <_fflush_r>
 8000698:	68a1      	ldr	r1, [r4, #8]
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <cleanup_stdio+0x38>)
 800069c:	4299      	cmp	r1, r3
 800069e:	d002      	beq.n	80006a6 <cleanup_stdio+0x1e>
 80006a0:	4620      	mov	r0, r4
 80006a2:	f000 fd93 	bl	80011cc <_fflush_r>
 80006a6:	68e1      	ldr	r1, [r4, #12]
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <cleanup_stdio+0x3c>)
 80006aa:	4299      	cmp	r1, r3
 80006ac:	d004      	beq.n	80006b8 <cleanup_stdio+0x30>
 80006ae:	4620      	mov	r0, r4
 80006b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b4:	f000 bd8a 	b.w	80011cc <_fflush_r>
 80006b8:	bd10      	pop	{r4, pc}
 80006ba:	bf00      	nop
 80006bc:	20000084 	.word	0x20000084
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	20000154 	.word	0x20000154

080006c8 <global_stdio_init.part.0>:
 80006c8:	b510      	push	{r4, lr}
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <global_stdio_init.part.0+0x30>)
 80006cc:	4c0b      	ldr	r4, [pc, #44]	; (80006fc <global_stdio_init.part.0+0x34>)
 80006ce:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <global_stdio_init.part.0+0x38>)
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4620      	mov	r0, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	2104      	movs	r1, #4
 80006d8:	f7ff ffa6 	bl	8000628 <std>
 80006dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006e0:	2201      	movs	r2, #1
 80006e2:	2109      	movs	r1, #9
 80006e4:	f7ff ffa0 	bl	8000628 <std>
 80006e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006ec:	2202      	movs	r2, #2
 80006ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f2:	2112      	movs	r1, #18
 80006f4:	f7ff bf98 	b.w	8000628 <std>
 80006f8:	200001bc 	.word	0x200001bc
 80006fc:	20000084 	.word	0x20000084
 8000700:	08000671 	.word	0x08000671

08000704 <__sfp_lock_acquire>:
 8000704:	4801      	ldr	r0, [pc, #4]	; (800070c <__sfp_lock_acquire+0x8>)
 8000706:	f000 b90d 	b.w	8000924 <__retarget_lock_acquire_recursive>
 800070a:	bf00      	nop
 800070c:	200001c5 	.word	0x200001c5

08000710 <__sfp_lock_release>:
 8000710:	4801      	ldr	r0, [pc, #4]	; (8000718 <__sfp_lock_release+0x8>)
 8000712:	f000 b908 	b.w	8000926 <__retarget_lock_release_recursive>
 8000716:	bf00      	nop
 8000718:	200001c5 	.word	0x200001c5

0800071c <__sinit>:
 800071c:	b510      	push	{r4, lr}
 800071e:	4604      	mov	r4, r0
 8000720:	f7ff fff0 	bl	8000704 <__sfp_lock_acquire>
 8000724:	6a23      	ldr	r3, [r4, #32]
 8000726:	b11b      	cbz	r3, 8000730 <__sinit+0x14>
 8000728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800072c:	f7ff bff0 	b.w	8000710 <__sfp_lock_release>
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__sinit+0x28>)
 8000732:	6223      	str	r3, [r4, #32]
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__sinit+0x2c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f5      	bne.n	8000728 <__sinit+0xc>
 800073c:	f7ff ffc4 	bl	80006c8 <global_stdio_init.part.0>
 8000740:	e7f2      	b.n	8000728 <__sinit+0xc>
 8000742:	bf00      	nop
 8000744:	08000689 	.word	0x08000689
 8000748:	200001bc 	.word	0x200001bc

0800074c <_fwalk_sglue>:
 800074c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000750:	4607      	mov	r7, r0
 8000752:	4688      	mov	r8, r1
 8000754:	4614      	mov	r4, r2
 8000756:	2600      	movs	r6, #0
 8000758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800075c:	f1b9 0901 	subs.w	r9, r9, #1
 8000760:	d505      	bpl.n	800076e <_fwalk_sglue+0x22>
 8000762:	6824      	ldr	r4, [r4, #0]
 8000764:	2c00      	cmp	r4, #0
 8000766:	d1f7      	bne.n	8000758 <_fwalk_sglue+0xc>
 8000768:	4630      	mov	r0, r6
 800076a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800076e:	89ab      	ldrh	r3, [r5, #12]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d907      	bls.n	8000784 <_fwalk_sglue+0x38>
 8000774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000778:	3301      	adds	r3, #1
 800077a:	d003      	beq.n	8000784 <_fwalk_sglue+0x38>
 800077c:	4629      	mov	r1, r5
 800077e:	4638      	mov	r0, r7
 8000780:	47c0      	blx	r8
 8000782:	4306      	orrs	r6, r0
 8000784:	3568      	adds	r5, #104	; 0x68
 8000786:	e7e9      	b.n	800075c <_fwalk_sglue+0x10>

08000788 <iprintf>:
 8000788:	b40f      	push	{r0, r1, r2, r3}
 800078a:	b507      	push	{r0, r1, r2, lr}
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <iprintf+0x20>)
 800078e:	ab04      	add	r3, sp, #16
 8000790:	6808      	ldr	r0, [r1, #0]
 8000792:	f853 2b04 	ldr.w	r2, [r3], #4
 8000796:	6881      	ldr	r1, [r0, #8]
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	f000 f9e7 	bl	8000b6c <_vfiprintf_r>
 800079e:	b003      	add	sp, #12
 80007a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007a4:	b004      	add	sp, #16
 80007a6:	4770      	bx	lr
 80007a8:	2000005c 	.word	0x2000005c

080007ac <__sread>:
 80007ac:	b510      	push	{r4, lr}
 80007ae:	460c      	mov	r4, r1
 80007b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007b4:	f000 f868 	bl	8000888 <_read_r>
 80007b8:	2800      	cmp	r0, #0
 80007ba:	bfab      	itete	ge
 80007bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007be:	89a3      	ldrhlt	r3, [r4, #12]
 80007c0:	181b      	addge	r3, r3, r0
 80007c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007c6:	bfac      	ite	ge
 80007c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80007ca:	81a3      	strhlt	r3, [r4, #12]
 80007cc:	bd10      	pop	{r4, pc}

080007ce <__swrite>:
 80007ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007d2:	461f      	mov	r7, r3
 80007d4:	898b      	ldrh	r3, [r1, #12]
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	4605      	mov	r5, r0
 80007da:	460c      	mov	r4, r1
 80007dc:	4616      	mov	r6, r2
 80007de:	d505      	bpl.n	80007ec <__swrite+0x1e>
 80007e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007e4:	2302      	movs	r3, #2
 80007e6:	2200      	movs	r2, #0
 80007e8:	f000 f83c 	bl	8000864 <_lseek_r>
 80007ec:	89a3      	ldrh	r3, [r4, #12]
 80007ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007f6:	81a3      	strh	r3, [r4, #12]
 80007f8:	4632      	mov	r2, r6
 80007fa:	463b      	mov	r3, r7
 80007fc:	4628      	mov	r0, r5
 80007fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000802:	f000 b853 	b.w	80008ac <_write_r>

08000806 <__sseek>:
 8000806:	b510      	push	{r4, lr}
 8000808:	460c      	mov	r4, r1
 800080a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800080e:	f000 f829 	bl	8000864 <_lseek_r>
 8000812:	1c43      	adds	r3, r0, #1
 8000814:	89a3      	ldrh	r3, [r4, #12]
 8000816:	bf15      	itete	ne
 8000818:	6560      	strne	r0, [r4, #84]	; 0x54
 800081a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800081e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000822:	81a3      	strheq	r3, [r4, #12]
 8000824:	bf18      	it	ne
 8000826:	81a3      	strhne	r3, [r4, #12]
 8000828:	bd10      	pop	{r4, pc}

0800082a <__sclose>:
 800082a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800082e:	f000 b809 	b.w	8000844 <_close_r>

08000832 <memset>:
 8000832:	4402      	add	r2, r0
 8000834:	4603      	mov	r3, r0
 8000836:	4293      	cmp	r3, r2
 8000838:	d100      	bne.n	800083c <memset+0xa>
 800083a:	4770      	bx	lr
 800083c:	f803 1b01 	strb.w	r1, [r3], #1
 8000840:	e7f9      	b.n	8000836 <memset+0x4>
	...

08000844 <_close_r>:
 8000844:	b538      	push	{r3, r4, r5, lr}
 8000846:	4d06      	ldr	r5, [pc, #24]	; (8000860 <_close_r+0x1c>)
 8000848:	2300      	movs	r3, #0
 800084a:	4604      	mov	r4, r0
 800084c:	4608      	mov	r0, r1
 800084e:	602b      	str	r3, [r5, #0]
 8000850:	f7ff fe2f 	bl	80004b2 <_close>
 8000854:	1c43      	adds	r3, r0, #1
 8000856:	d102      	bne.n	800085e <_close_r+0x1a>
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	b103      	cbz	r3, 800085e <_close_r+0x1a>
 800085c:	6023      	str	r3, [r4, #0]
 800085e:	bd38      	pop	{r3, r4, r5, pc}
 8000860:	200001c0 	.word	0x200001c0

08000864 <_lseek_r>:
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4d07      	ldr	r5, [pc, #28]	; (8000884 <_lseek_r+0x20>)
 8000868:	4604      	mov	r4, r0
 800086a:	4608      	mov	r0, r1
 800086c:	4611      	mov	r1, r2
 800086e:	2200      	movs	r2, #0
 8000870:	602a      	str	r2, [r5, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	f7ff fe44 	bl	8000500 <_lseek>
 8000878:	1c43      	adds	r3, r0, #1
 800087a:	d102      	bne.n	8000882 <_lseek_r+0x1e>
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	b103      	cbz	r3, 8000882 <_lseek_r+0x1e>
 8000880:	6023      	str	r3, [r4, #0]
 8000882:	bd38      	pop	{r3, r4, r5, pc}
 8000884:	200001c0 	.word	0x200001c0

08000888 <_read_r>:
 8000888:	b538      	push	{r3, r4, r5, lr}
 800088a:	4d07      	ldr	r5, [pc, #28]	; (80008a8 <_read_r+0x20>)
 800088c:	4604      	mov	r4, r0
 800088e:	4608      	mov	r0, r1
 8000890:	4611      	mov	r1, r2
 8000892:	2200      	movs	r2, #0
 8000894:	602a      	str	r2, [r5, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	f7ff fdd2 	bl	8000440 <_read>
 800089c:	1c43      	adds	r3, r0, #1
 800089e:	d102      	bne.n	80008a6 <_read_r+0x1e>
 80008a0:	682b      	ldr	r3, [r5, #0]
 80008a2:	b103      	cbz	r3, 80008a6 <_read_r+0x1e>
 80008a4:	6023      	str	r3, [r4, #0]
 80008a6:	bd38      	pop	{r3, r4, r5, pc}
 80008a8:	200001c0 	.word	0x200001c0

080008ac <_write_r>:
 80008ac:	b538      	push	{r3, r4, r5, lr}
 80008ae:	4d07      	ldr	r5, [pc, #28]	; (80008cc <_write_r+0x20>)
 80008b0:	4604      	mov	r4, r0
 80008b2:	4608      	mov	r0, r1
 80008b4:	4611      	mov	r1, r2
 80008b6:	2200      	movs	r2, #0
 80008b8:	602a      	str	r2, [r5, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	f7ff fddd 	bl	800047a <_write>
 80008c0:	1c43      	adds	r3, r0, #1
 80008c2:	d102      	bne.n	80008ca <_write_r+0x1e>
 80008c4:	682b      	ldr	r3, [r5, #0]
 80008c6:	b103      	cbz	r3, 80008ca <_write_r+0x1e>
 80008c8:	6023      	str	r3, [r4, #0]
 80008ca:	bd38      	pop	{r3, r4, r5, pc}
 80008cc:	200001c0 	.word	0x200001c0

080008d0 <__errno>:
 80008d0:	4b01      	ldr	r3, [pc, #4]	; (80008d8 <__errno+0x8>)
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	2000005c 	.word	0x2000005c

080008dc <__libc_init_array>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	4d0d      	ldr	r5, [pc, #52]	; (8000914 <__libc_init_array+0x38>)
 80008e0:	4c0d      	ldr	r4, [pc, #52]	; (8000918 <__libc_init_array+0x3c>)
 80008e2:	1b64      	subs	r4, r4, r5
 80008e4:	10a4      	asrs	r4, r4, #2
 80008e6:	2600      	movs	r6, #0
 80008e8:	42a6      	cmp	r6, r4
 80008ea:	d109      	bne.n	8000900 <__libc_init_array+0x24>
 80008ec:	4d0b      	ldr	r5, [pc, #44]	; (800091c <__libc_init_array+0x40>)
 80008ee:	4c0c      	ldr	r4, [pc, #48]	; (8000920 <__libc_init_array+0x44>)
 80008f0:	f000 fdbe 	bl	8001470 <_init>
 80008f4:	1b64      	subs	r4, r4, r5
 80008f6:	10a4      	asrs	r4, r4, #2
 80008f8:	2600      	movs	r6, #0
 80008fa:	42a6      	cmp	r6, r4
 80008fc:	d105      	bne.n	800090a <__libc_init_array+0x2e>
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f855 3b04 	ldr.w	r3, [r5], #4
 8000904:	4798      	blx	r3
 8000906:	3601      	adds	r6, #1
 8000908:	e7ee      	b.n	80008e8 <__libc_init_array+0xc>
 800090a:	f855 3b04 	ldr.w	r3, [r5], #4
 800090e:	4798      	blx	r3
 8000910:	3601      	adds	r6, #1
 8000912:	e7f2      	b.n	80008fa <__libc_init_array+0x1e>
 8000914:	080014cc 	.word	0x080014cc
 8000918:	080014cc 	.word	0x080014cc
 800091c:	080014cc 	.word	0x080014cc
 8000920:	080014d0 	.word	0x080014d0

08000924 <__retarget_lock_acquire_recursive>:
 8000924:	4770      	bx	lr

08000926 <__retarget_lock_release_recursive>:
 8000926:	4770      	bx	lr

08000928 <_free_r>:
 8000928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800092a:	2900      	cmp	r1, #0
 800092c:	d044      	beq.n	80009b8 <_free_r+0x90>
 800092e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000932:	9001      	str	r0, [sp, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	f1a1 0404 	sub.w	r4, r1, #4
 800093a:	bfb8      	it	lt
 800093c:	18e4      	addlt	r4, r4, r3
 800093e:	f000 f8df 	bl	8000b00 <__malloc_lock>
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <_free_r+0x94>)
 8000944:	9801      	ldr	r0, [sp, #4]
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	b933      	cbnz	r3, 8000958 <_free_r+0x30>
 800094a:	6063      	str	r3, [r4, #4]
 800094c:	6014      	str	r4, [r2, #0]
 800094e:	b003      	add	sp, #12
 8000950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000954:	f000 b8da 	b.w	8000b0c <__malloc_unlock>
 8000958:	42a3      	cmp	r3, r4
 800095a:	d908      	bls.n	800096e <_free_r+0x46>
 800095c:	6825      	ldr	r5, [r4, #0]
 800095e:	1961      	adds	r1, r4, r5
 8000960:	428b      	cmp	r3, r1
 8000962:	bf01      	itttt	eq
 8000964:	6819      	ldreq	r1, [r3, #0]
 8000966:	685b      	ldreq	r3, [r3, #4]
 8000968:	1949      	addeq	r1, r1, r5
 800096a:	6021      	streq	r1, [r4, #0]
 800096c:	e7ed      	b.n	800094a <_free_r+0x22>
 800096e:	461a      	mov	r2, r3
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	b10b      	cbz	r3, 8000978 <_free_r+0x50>
 8000974:	42a3      	cmp	r3, r4
 8000976:	d9fa      	bls.n	800096e <_free_r+0x46>
 8000978:	6811      	ldr	r1, [r2, #0]
 800097a:	1855      	adds	r5, r2, r1
 800097c:	42a5      	cmp	r5, r4
 800097e:	d10b      	bne.n	8000998 <_free_r+0x70>
 8000980:	6824      	ldr	r4, [r4, #0]
 8000982:	4421      	add	r1, r4
 8000984:	1854      	adds	r4, r2, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	6011      	str	r1, [r2, #0]
 800098a:	d1e0      	bne.n	800094e <_free_r+0x26>
 800098c:	681c      	ldr	r4, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	6053      	str	r3, [r2, #4]
 8000992:	440c      	add	r4, r1
 8000994:	6014      	str	r4, [r2, #0]
 8000996:	e7da      	b.n	800094e <_free_r+0x26>
 8000998:	d902      	bls.n	80009a0 <_free_r+0x78>
 800099a:	230c      	movs	r3, #12
 800099c:	6003      	str	r3, [r0, #0]
 800099e:	e7d6      	b.n	800094e <_free_r+0x26>
 80009a0:	6825      	ldr	r5, [r4, #0]
 80009a2:	1961      	adds	r1, r4, r5
 80009a4:	428b      	cmp	r3, r1
 80009a6:	bf04      	itt	eq
 80009a8:	6819      	ldreq	r1, [r3, #0]
 80009aa:	685b      	ldreq	r3, [r3, #4]
 80009ac:	6063      	str	r3, [r4, #4]
 80009ae:	bf04      	itt	eq
 80009b0:	1949      	addeq	r1, r1, r5
 80009b2:	6021      	streq	r1, [r4, #0]
 80009b4:	6054      	str	r4, [r2, #4]
 80009b6:	e7ca      	b.n	800094e <_free_r+0x26>
 80009b8:	b003      	add	sp, #12
 80009ba:	bd30      	pop	{r4, r5, pc}
 80009bc:	200001c8 	.word	0x200001c8

080009c0 <sbrk_aligned>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	4e0e      	ldr	r6, [pc, #56]	; (80009fc <sbrk_aligned+0x3c>)
 80009c4:	460c      	mov	r4, r1
 80009c6:	6831      	ldr	r1, [r6, #0]
 80009c8:	4605      	mov	r5, r0
 80009ca:	b911      	cbnz	r1, 80009d2 <sbrk_aligned+0x12>
 80009cc:	f000 fcbc 	bl	8001348 <_sbrk_r>
 80009d0:	6030      	str	r0, [r6, #0]
 80009d2:	4621      	mov	r1, r4
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 fcb7 	bl	8001348 <_sbrk_r>
 80009da:	1c43      	adds	r3, r0, #1
 80009dc:	d00a      	beq.n	80009f4 <sbrk_aligned+0x34>
 80009de:	1cc4      	adds	r4, r0, #3
 80009e0:	f024 0403 	bic.w	r4, r4, #3
 80009e4:	42a0      	cmp	r0, r4
 80009e6:	d007      	beq.n	80009f8 <sbrk_aligned+0x38>
 80009e8:	1a21      	subs	r1, r4, r0
 80009ea:	4628      	mov	r0, r5
 80009ec:	f000 fcac 	bl	8001348 <_sbrk_r>
 80009f0:	3001      	adds	r0, #1
 80009f2:	d101      	bne.n	80009f8 <sbrk_aligned+0x38>
 80009f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80009f8:	4620      	mov	r0, r4
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	200001cc 	.word	0x200001cc

08000a00 <_malloc_r>:
 8000a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a04:	1ccd      	adds	r5, r1, #3
 8000a06:	f025 0503 	bic.w	r5, r5, #3
 8000a0a:	3508      	adds	r5, #8
 8000a0c:	2d0c      	cmp	r5, #12
 8000a0e:	bf38      	it	cc
 8000a10:	250c      	movcc	r5, #12
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	4607      	mov	r7, r0
 8000a16:	db01      	blt.n	8000a1c <_malloc_r+0x1c>
 8000a18:	42a9      	cmp	r1, r5
 8000a1a:	d905      	bls.n	8000a28 <_malloc_r+0x28>
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	2600      	movs	r6, #0
 8000a22:	4630      	mov	r0, r6
 8000a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000afc <_malloc_r+0xfc>
 8000a2c:	f000 f868 	bl	8000b00 <__malloc_lock>
 8000a30:	f8d8 3000 	ldr.w	r3, [r8]
 8000a34:	461c      	mov	r4, r3
 8000a36:	bb5c      	cbnz	r4, 8000a90 <_malloc_r+0x90>
 8000a38:	4629      	mov	r1, r5
 8000a3a:	4638      	mov	r0, r7
 8000a3c:	f7ff ffc0 	bl	80009c0 <sbrk_aligned>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	4604      	mov	r4, r0
 8000a44:	d155      	bne.n	8000af2 <_malloc_r+0xf2>
 8000a46:	f8d8 4000 	ldr.w	r4, [r8]
 8000a4a:	4626      	mov	r6, r4
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d145      	bne.n	8000adc <_malloc_r+0xdc>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d048      	beq.n	8000ae6 <_malloc_r+0xe6>
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	4631      	mov	r1, r6
 8000a58:	4638      	mov	r0, r7
 8000a5a:	eb04 0903 	add.w	r9, r4, r3
 8000a5e:	f000 fc73 	bl	8001348 <_sbrk_r>
 8000a62:	4581      	cmp	r9, r0
 8000a64:	d13f      	bne.n	8000ae6 <_malloc_r+0xe6>
 8000a66:	6821      	ldr	r1, [r4, #0]
 8000a68:	1a6d      	subs	r5, r5, r1
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	4638      	mov	r0, r7
 8000a6e:	f7ff ffa7 	bl	80009c0 <sbrk_aligned>
 8000a72:	3001      	adds	r0, #1
 8000a74:	d037      	beq.n	8000ae6 <_malloc_r+0xe6>
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	442b      	add	r3, r5
 8000a7a:	6023      	str	r3, [r4, #0]
 8000a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d038      	beq.n	8000af6 <_malloc_r+0xf6>
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	d12b      	bne.n	8000ae2 <_malloc_r+0xe2>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	e00f      	b.n	8000ab0 <_malloc_r+0xb0>
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	1b52      	subs	r2, r2, r5
 8000a94:	d41f      	bmi.n	8000ad6 <_malloc_r+0xd6>
 8000a96:	2a0b      	cmp	r2, #11
 8000a98:	d917      	bls.n	8000aca <_malloc_r+0xca>
 8000a9a:	1961      	adds	r1, r4, r5
 8000a9c:	42a3      	cmp	r3, r4
 8000a9e:	6025      	str	r5, [r4, #0]
 8000aa0:	bf18      	it	ne
 8000aa2:	6059      	strne	r1, [r3, #4]
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	bf08      	it	eq
 8000aa8:	f8c8 1000 	streq.w	r1, [r8]
 8000aac:	5162      	str	r2, [r4, r5]
 8000aae:	604b      	str	r3, [r1, #4]
 8000ab0:	4638      	mov	r0, r7
 8000ab2:	f104 060b 	add.w	r6, r4, #11
 8000ab6:	f000 f829 	bl	8000b0c <__malloc_unlock>
 8000aba:	f026 0607 	bic.w	r6, r6, #7
 8000abe:	1d23      	adds	r3, r4, #4
 8000ac0:	1af2      	subs	r2, r6, r3
 8000ac2:	d0ae      	beq.n	8000a22 <_malloc_r+0x22>
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	50a3      	str	r3, [r4, r2]
 8000ac8:	e7ab      	b.n	8000a22 <_malloc_r+0x22>
 8000aca:	42a3      	cmp	r3, r4
 8000acc:	6862      	ldr	r2, [r4, #4]
 8000ace:	d1dd      	bne.n	8000a8c <_malloc_r+0x8c>
 8000ad0:	f8c8 2000 	str.w	r2, [r8]
 8000ad4:	e7ec      	b.n	8000ab0 <_malloc_r+0xb0>
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	6864      	ldr	r4, [r4, #4]
 8000ada:	e7ac      	b.n	8000a36 <_malloc_r+0x36>
 8000adc:	4634      	mov	r4, r6
 8000ade:	6876      	ldr	r6, [r6, #4]
 8000ae0:	e7b4      	b.n	8000a4c <_malloc_r+0x4c>
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	e7cc      	b.n	8000a80 <_malloc_r+0x80>
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4638      	mov	r0, r7
 8000aec:	f000 f80e 	bl	8000b0c <__malloc_unlock>
 8000af0:	e797      	b.n	8000a22 <_malloc_r+0x22>
 8000af2:	6025      	str	r5, [r4, #0]
 8000af4:	e7dc      	b.n	8000ab0 <_malloc_r+0xb0>
 8000af6:	605b      	str	r3, [r3, #4]
 8000af8:	deff      	udf	#255	; 0xff
 8000afa:	bf00      	nop
 8000afc:	200001c8 	.word	0x200001c8

08000b00 <__malloc_lock>:
 8000b00:	4801      	ldr	r0, [pc, #4]	; (8000b08 <__malloc_lock+0x8>)
 8000b02:	f7ff bf0f 	b.w	8000924 <__retarget_lock_acquire_recursive>
 8000b06:	bf00      	nop
 8000b08:	200001c4 	.word	0x200001c4

08000b0c <__malloc_unlock>:
 8000b0c:	4801      	ldr	r0, [pc, #4]	; (8000b14 <__malloc_unlock+0x8>)
 8000b0e:	f7ff bf0a 	b.w	8000926 <__retarget_lock_release_recursive>
 8000b12:	bf00      	nop
 8000b14:	200001c4 	.word	0x200001c4

08000b18 <__sfputc_r>:
 8000b18:	6893      	ldr	r3, [r2, #8]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	b410      	push	{r4}
 8000b20:	6093      	str	r3, [r2, #8]
 8000b22:	da08      	bge.n	8000b36 <__sfputc_r+0x1e>
 8000b24:	6994      	ldr	r4, [r2, #24]
 8000b26:	42a3      	cmp	r3, r4
 8000b28:	db01      	blt.n	8000b2e <__sfputc_r+0x16>
 8000b2a:	290a      	cmp	r1, #10
 8000b2c:	d103      	bne.n	8000b36 <__sfputc_r+0x1e>
 8000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b32:	f000 bb73 	b.w	800121c <__swbuf_r>
 8000b36:	6813      	ldr	r3, [r2, #0]
 8000b38:	1c58      	adds	r0, r3, #1
 8000b3a:	6010      	str	r0, [r2, #0]
 8000b3c:	7019      	strb	r1, [r3, #0]
 8000b3e:	4608      	mov	r0, r1
 8000b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <__sfputs_r>:
 8000b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b48:	4606      	mov	r6, r0
 8000b4a:	460f      	mov	r7, r1
 8000b4c:	4614      	mov	r4, r2
 8000b4e:	18d5      	adds	r5, r2, r3
 8000b50:	42ac      	cmp	r4, r5
 8000b52:	d101      	bne.n	8000b58 <__sfputs_r+0x12>
 8000b54:	2000      	movs	r0, #0
 8000b56:	e007      	b.n	8000b68 <__sfputs_r+0x22>
 8000b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b5c:	463a      	mov	r2, r7
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f7ff ffda 	bl	8000b18 <__sfputc_r>
 8000b64:	1c43      	adds	r3, r0, #1
 8000b66:	d1f3      	bne.n	8000b50 <__sfputs_r+0xa>
 8000b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b6c <_vfiprintf_r>:
 8000b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b70:	460d      	mov	r5, r1
 8000b72:	b09d      	sub	sp, #116	; 0x74
 8000b74:	4614      	mov	r4, r2
 8000b76:	4698      	mov	r8, r3
 8000b78:	4606      	mov	r6, r0
 8000b7a:	b118      	cbz	r0, 8000b84 <_vfiprintf_r+0x18>
 8000b7c:	6a03      	ldr	r3, [r0, #32]
 8000b7e:	b90b      	cbnz	r3, 8000b84 <_vfiprintf_r+0x18>
 8000b80:	f7ff fdcc 	bl	800071c <__sinit>
 8000b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b86:	07d9      	lsls	r1, r3, #31
 8000b88:	d405      	bmi.n	8000b96 <_vfiprintf_r+0x2a>
 8000b8a:	89ab      	ldrh	r3, [r5, #12]
 8000b8c:	059a      	lsls	r2, r3, #22
 8000b8e:	d402      	bmi.n	8000b96 <_vfiprintf_r+0x2a>
 8000b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b92:	f7ff fec7 	bl	8000924 <__retarget_lock_acquire_recursive>
 8000b96:	89ab      	ldrh	r3, [r5, #12]
 8000b98:	071b      	lsls	r3, r3, #28
 8000b9a:	d501      	bpl.n	8000ba0 <_vfiprintf_r+0x34>
 8000b9c:	692b      	ldr	r3, [r5, #16]
 8000b9e:	b99b      	cbnz	r3, 8000bc8 <_vfiprintf_r+0x5c>
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f000 fb78 	bl	8001298 <__swsetup_r>
 8000ba8:	b170      	cbz	r0, 8000bc8 <_vfiprintf_r+0x5c>
 8000baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bac:	07dc      	lsls	r4, r3, #31
 8000bae:	d504      	bpl.n	8000bba <_vfiprintf_r+0x4e>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	b01d      	add	sp, #116	; 0x74
 8000bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bba:	89ab      	ldrh	r3, [r5, #12]
 8000bbc:	0598      	lsls	r0, r3, #22
 8000bbe:	d4f7      	bmi.n	8000bb0 <_vfiprintf_r+0x44>
 8000bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bc2:	f7ff feb0 	bl	8000926 <__retarget_lock_release_recursive>
 8000bc6:	e7f3      	b.n	8000bb0 <_vfiprintf_r+0x44>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	9309      	str	r3, [sp, #36]	; 0x24
 8000bcc:	2320      	movs	r3, #32
 8000bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bd6:	2330      	movs	r3, #48	; 0x30
 8000bd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000d8c <_vfiprintf_r+0x220>
 8000bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000be0:	f04f 0901 	mov.w	r9, #1
 8000be4:	4623      	mov	r3, r4
 8000be6:	469a      	mov	sl, r3
 8000be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bec:	b10a      	cbz	r2, 8000bf2 <_vfiprintf_r+0x86>
 8000bee:	2a25      	cmp	r2, #37	; 0x25
 8000bf0:	d1f9      	bne.n	8000be6 <_vfiprintf_r+0x7a>
 8000bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8000bf6:	d00b      	beq.n	8000c10 <_vfiprintf_r+0xa4>
 8000bf8:	465b      	mov	r3, fp
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f7ff ffa1 	bl	8000b46 <__sfputs_r>
 8000c04:	3001      	adds	r0, #1
 8000c06:	f000 80a9 	beq.w	8000d5c <_vfiprintf_r+0x1f0>
 8000c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c0c:	445a      	add	r2, fp
 8000c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8000c10:	f89a 3000 	ldrb.w	r3, [sl]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 80a1 	beq.w	8000d5c <_vfiprintf_r+0x1f0>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c24:	f10a 0a01 	add.w	sl, sl, #1
 8000c28:	9304      	str	r3, [sp, #16]
 8000c2a:	9307      	str	r3, [sp, #28]
 8000c2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c30:	931a      	str	r3, [sp, #104]	; 0x68
 8000c32:	4654      	mov	r4, sl
 8000c34:	2205      	movs	r2, #5
 8000c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c3a:	4854      	ldr	r0, [pc, #336]	; (8000d8c <_vfiprintf_r+0x220>)
 8000c3c:	f7ff fae8 	bl	8000210 <memchr>
 8000c40:	9a04      	ldr	r2, [sp, #16]
 8000c42:	b9d8      	cbnz	r0, 8000c7c <_vfiprintf_r+0x110>
 8000c44:	06d1      	lsls	r1, r2, #27
 8000c46:	bf44      	itt	mi
 8000c48:	2320      	movmi	r3, #32
 8000c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c4e:	0713      	lsls	r3, r2, #28
 8000c50:	bf44      	itt	mi
 8000c52:	232b      	movmi	r3, #43	; 0x2b
 8000c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c58:	f89a 3000 	ldrb.w	r3, [sl]
 8000c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8000c5e:	d015      	beq.n	8000c8c <_vfiprintf_r+0x120>
 8000c60:	9a07      	ldr	r2, [sp, #28]
 8000c62:	4654      	mov	r4, sl
 8000c64:	2000      	movs	r0, #0
 8000c66:	f04f 0c0a 	mov.w	ip, #10
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c70:	3b30      	subs	r3, #48	; 0x30
 8000c72:	2b09      	cmp	r3, #9
 8000c74:	d94d      	bls.n	8000d12 <_vfiprintf_r+0x1a6>
 8000c76:	b1b0      	cbz	r0, 8000ca6 <_vfiprintf_r+0x13a>
 8000c78:	9207      	str	r2, [sp, #28]
 8000c7a:	e014      	b.n	8000ca6 <_vfiprintf_r+0x13a>
 8000c7c:	eba0 0308 	sub.w	r3, r0, r8
 8000c80:	fa09 f303 	lsl.w	r3, r9, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	9304      	str	r3, [sp, #16]
 8000c88:	46a2      	mov	sl, r4
 8000c8a:	e7d2      	b.n	8000c32 <_vfiprintf_r+0xc6>
 8000c8c:	9b03      	ldr	r3, [sp, #12]
 8000c8e:	1d19      	adds	r1, r3, #4
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	9103      	str	r1, [sp, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bfbb      	ittet	lt
 8000c98:	425b      	neglt	r3, r3
 8000c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8000c9e:	9307      	strge	r3, [sp, #28]
 8000ca0:	9307      	strlt	r3, [sp, #28]
 8000ca2:	bfb8      	it	lt
 8000ca4:	9204      	strlt	r2, [sp, #16]
 8000ca6:	7823      	ldrb	r3, [r4, #0]
 8000ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8000caa:	d10c      	bne.n	8000cc6 <_vfiprintf_r+0x15a>
 8000cac:	7863      	ldrb	r3, [r4, #1]
 8000cae:	2b2a      	cmp	r3, #42	; 0x2a
 8000cb0:	d134      	bne.n	8000d1c <_vfiprintf_r+0x1b0>
 8000cb2:	9b03      	ldr	r3, [sp, #12]
 8000cb4:	1d1a      	adds	r2, r3, #4
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	9203      	str	r2, [sp, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bfb8      	it	lt
 8000cbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cc2:	3402      	adds	r4, #2
 8000cc4:	9305      	str	r3, [sp, #20]
 8000cc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000d9c <_vfiprintf_r+0x230>
 8000cca:	7821      	ldrb	r1, [r4, #0]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	4650      	mov	r0, sl
 8000cd0:	f7ff fa9e 	bl	8000210 <memchr>
 8000cd4:	b138      	cbz	r0, 8000ce6 <_vfiprintf_r+0x17a>
 8000cd6:	9b04      	ldr	r3, [sp, #16]
 8000cd8:	eba0 000a 	sub.w	r0, r0, sl
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	4082      	lsls	r2, r0
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	3401      	adds	r4, #1
 8000ce4:	9304      	str	r3, [sp, #16]
 8000ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cea:	4829      	ldr	r0, [pc, #164]	; (8000d90 <_vfiprintf_r+0x224>)
 8000cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cf0:	2206      	movs	r2, #6
 8000cf2:	f7ff fa8d 	bl	8000210 <memchr>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d03f      	beq.n	8000d7a <_vfiprintf_r+0x20e>
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <_vfiprintf_r+0x228>)
 8000cfc:	bb1b      	cbnz	r3, 8000d46 <_vfiprintf_r+0x1da>
 8000cfe:	9b03      	ldr	r3, [sp, #12]
 8000d00:	3307      	adds	r3, #7
 8000d02:	f023 0307 	bic.w	r3, r3, #7
 8000d06:	3308      	adds	r3, #8
 8000d08:	9303      	str	r3, [sp, #12]
 8000d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d0c:	443b      	add	r3, r7
 8000d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d10:	e768      	b.n	8000be4 <_vfiprintf_r+0x78>
 8000d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d16:	460c      	mov	r4, r1
 8000d18:	2001      	movs	r0, #1
 8000d1a:	e7a6      	b.n	8000c6a <_vfiprintf_r+0xfe>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	3401      	adds	r4, #1
 8000d20:	9305      	str	r3, [sp, #20]
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 0c0a 	mov.w	ip, #10
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d2e:	3a30      	subs	r2, #48	; 0x30
 8000d30:	2a09      	cmp	r2, #9
 8000d32:	d903      	bls.n	8000d3c <_vfiprintf_r+0x1d0>
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0c6      	beq.n	8000cc6 <_vfiprintf_r+0x15a>
 8000d38:	9105      	str	r1, [sp, #20]
 8000d3a:	e7c4      	b.n	8000cc6 <_vfiprintf_r+0x15a>
 8000d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d40:	4604      	mov	r4, r0
 8000d42:	2301      	movs	r3, #1
 8000d44:	e7f0      	b.n	8000d28 <_vfiprintf_r+0x1bc>
 8000d46:	ab03      	add	r3, sp, #12
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	462a      	mov	r2, r5
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <_vfiprintf_r+0x22c>)
 8000d4e:	a904      	add	r1, sp, #16
 8000d50:	4630      	mov	r0, r6
 8000d52:	f3af 8000 	nop.w
 8000d56:	4607      	mov	r7, r0
 8000d58:	1c78      	adds	r0, r7, #1
 8000d5a:	d1d6      	bne.n	8000d0a <_vfiprintf_r+0x19e>
 8000d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d5e:	07d9      	lsls	r1, r3, #31
 8000d60:	d405      	bmi.n	8000d6e <_vfiprintf_r+0x202>
 8000d62:	89ab      	ldrh	r3, [r5, #12]
 8000d64:	059a      	lsls	r2, r3, #22
 8000d66:	d402      	bmi.n	8000d6e <_vfiprintf_r+0x202>
 8000d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d6a:	f7ff fddc 	bl	8000926 <__retarget_lock_release_recursive>
 8000d6e:	89ab      	ldrh	r3, [r5, #12]
 8000d70:	065b      	lsls	r3, r3, #25
 8000d72:	f53f af1d 	bmi.w	8000bb0 <_vfiprintf_r+0x44>
 8000d76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d78:	e71c      	b.n	8000bb4 <_vfiprintf_r+0x48>
 8000d7a:	ab03      	add	r3, sp, #12
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	462a      	mov	r2, r5
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <_vfiprintf_r+0x22c>)
 8000d82:	a904      	add	r1, sp, #16
 8000d84:	4630      	mov	r0, r6
 8000d86:	f000 f879 	bl	8000e7c <_printf_i>
 8000d8a:	e7e4      	b.n	8000d56 <_vfiprintf_r+0x1ea>
 8000d8c:	08001499 	.word	0x08001499
 8000d90:	080014a3 	.word	0x080014a3
 8000d94:	00000000 	.word	0x00000000
 8000d98:	08000b47 	.word	0x08000b47
 8000d9c:	0800149f 	.word	0x0800149f

08000da0 <_printf_common>:
 8000da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da4:	4616      	mov	r6, r2
 8000da6:	4699      	mov	r9, r3
 8000da8:	688a      	ldr	r2, [r1, #8]
 8000daa:	690b      	ldr	r3, [r1, #16]
 8000dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000db0:	4293      	cmp	r3, r2
 8000db2:	bfb8      	it	lt
 8000db4:	4613      	movlt	r3, r2
 8000db6:	6033      	str	r3, [r6, #0]
 8000db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	b10a      	cbz	r2, 8000dc6 <_printf_common+0x26>
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	6033      	str	r3, [r6, #0]
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	0699      	lsls	r1, r3, #26
 8000dca:	bf42      	ittt	mi
 8000dcc:	6833      	ldrmi	r3, [r6, #0]
 8000dce:	3302      	addmi	r3, #2
 8000dd0:	6033      	strmi	r3, [r6, #0]
 8000dd2:	6825      	ldr	r5, [r4, #0]
 8000dd4:	f015 0506 	ands.w	r5, r5, #6
 8000dd8:	d106      	bne.n	8000de8 <_printf_common+0x48>
 8000dda:	f104 0a19 	add.w	sl, r4, #25
 8000dde:	68e3      	ldr	r3, [r4, #12]
 8000de0:	6832      	ldr	r2, [r6, #0]
 8000de2:	1a9b      	subs	r3, r3, r2
 8000de4:	42ab      	cmp	r3, r5
 8000de6:	dc26      	bgt.n	8000e36 <_printf_common+0x96>
 8000de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000dec:	1e13      	subs	r3, r2, #0
 8000dee:	6822      	ldr	r2, [r4, #0]
 8000df0:	bf18      	it	ne
 8000df2:	2301      	movne	r3, #1
 8000df4:	0692      	lsls	r2, r2, #26
 8000df6:	d42b      	bmi.n	8000e50 <_printf_common+0xb0>
 8000df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dfc:	4649      	mov	r1, r9
 8000dfe:	4638      	mov	r0, r7
 8000e00:	47c0      	blx	r8
 8000e02:	3001      	adds	r0, #1
 8000e04:	d01e      	beq.n	8000e44 <_printf_common+0xa4>
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	6922      	ldr	r2, [r4, #16]
 8000e0a:	f003 0306 	and.w	r3, r3, #6
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf02      	ittt	eq
 8000e12:	68e5      	ldreq	r5, [r4, #12]
 8000e14:	6833      	ldreq	r3, [r6, #0]
 8000e16:	1aed      	subeq	r5, r5, r3
 8000e18:	68a3      	ldr	r3, [r4, #8]
 8000e1a:	bf0c      	ite	eq
 8000e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e20:	2500      	movne	r5, #0
 8000e22:	4293      	cmp	r3, r2
 8000e24:	bfc4      	itt	gt
 8000e26:	1a9b      	subgt	r3, r3, r2
 8000e28:	18ed      	addgt	r5, r5, r3
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	341a      	adds	r4, #26
 8000e2e:	42b5      	cmp	r5, r6
 8000e30:	d11a      	bne.n	8000e68 <_printf_common+0xc8>
 8000e32:	2000      	movs	r0, #0
 8000e34:	e008      	b.n	8000e48 <_printf_common+0xa8>
 8000e36:	2301      	movs	r3, #1
 8000e38:	4652      	mov	r2, sl
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	47c0      	blx	r8
 8000e40:	3001      	adds	r0, #1
 8000e42:	d103      	bne.n	8000e4c <_printf_common+0xac>
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4c:	3501      	adds	r5, #1
 8000e4e:	e7c6      	b.n	8000dde <_printf_common+0x3e>
 8000e50:	18e1      	adds	r1, r4, r3
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	2030      	movs	r0, #48	; 0x30
 8000e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e5a:	4422      	add	r2, r4
 8000e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e64:	3302      	adds	r3, #2
 8000e66:	e7c7      	b.n	8000df8 <_printf_common+0x58>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	4622      	mov	r2, r4
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	4638      	mov	r0, r7
 8000e70:	47c0      	blx	r8
 8000e72:	3001      	adds	r0, #1
 8000e74:	d0e6      	beq.n	8000e44 <_printf_common+0xa4>
 8000e76:	3601      	adds	r6, #1
 8000e78:	e7d9      	b.n	8000e2e <_printf_common+0x8e>
	...

08000e7c <_printf_i>:
 8000e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e80:	7e0f      	ldrb	r7, [r1, #24]
 8000e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e84:	2f78      	cmp	r7, #120	; 0x78
 8000e86:	4691      	mov	r9, r2
 8000e88:	4680      	mov	r8, r0
 8000e8a:	460c      	mov	r4, r1
 8000e8c:	469a      	mov	sl, r3
 8000e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e92:	d807      	bhi.n	8000ea4 <_printf_i+0x28>
 8000e94:	2f62      	cmp	r7, #98	; 0x62
 8000e96:	d80a      	bhi.n	8000eae <_printf_i+0x32>
 8000e98:	2f00      	cmp	r7, #0
 8000e9a:	f000 80d4 	beq.w	8001046 <_printf_i+0x1ca>
 8000e9e:	2f58      	cmp	r7, #88	; 0x58
 8000ea0:	f000 80c0 	beq.w	8001024 <_printf_i+0x1a8>
 8000ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000eac:	e03a      	b.n	8000f24 <_printf_i+0xa8>
 8000eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000eb2:	2b15      	cmp	r3, #21
 8000eb4:	d8f6      	bhi.n	8000ea4 <_printf_i+0x28>
 8000eb6:	a101      	add	r1, pc, #4	; (adr r1, 8000ebc <_printf_i+0x40>)
 8000eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ebc:	08000f15 	.word	0x08000f15
 8000ec0:	08000f29 	.word	0x08000f29
 8000ec4:	08000ea5 	.word	0x08000ea5
 8000ec8:	08000ea5 	.word	0x08000ea5
 8000ecc:	08000ea5 	.word	0x08000ea5
 8000ed0:	08000ea5 	.word	0x08000ea5
 8000ed4:	08000f29 	.word	0x08000f29
 8000ed8:	08000ea5 	.word	0x08000ea5
 8000edc:	08000ea5 	.word	0x08000ea5
 8000ee0:	08000ea5 	.word	0x08000ea5
 8000ee4:	08000ea5 	.word	0x08000ea5
 8000ee8:	0800102d 	.word	0x0800102d
 8000eec:	08000f55 	.word	0x08000f55
 8000ef0:	08000fe7 	.word	0x08000fe7
 8000ef4:	08000ea5 	.word	0x08000ea5
 8000ef8:	08000ea5 	.word	0x08000ea5
 8000efc:	0800104f 	.word	0x0800104f
 8000f00:	08000ea5 	.word	0x08000ea5
 8000f04:	08000f55 	.word	0x08000f55
 8000f08:	08000ea5 	.word	0x08000ea5
 8000f0c:	08000ea5 	.word	0x08000ea5
 8000f10:	08000fef 	.word	0x08000fef
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	602a      	str	r2, [r5, #0]
 8000f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f24:	2301      	movs	r3, #1
 8000f26:	e09f      	b.n	8001068 <_printf_i+0x1ec>
 8000f28:	6820      	ldr	r0, [r4, #0]
 8000f2a:	682b      	ldr	r3, [r5, #0]
 8000f2c:	0607      	lsls	r7, r0, #24
 8000f2e:	f103 0104 	add.w	r1, r3, #4
 8000f32:	6029      	str	r1, [r5, #0]
 8000f34:	d501      	bpl.n	8000f3a <_printf_i+0xbe>
 8000f36:	681e      	ldr	r6, [r3, #0]
 8000f38:	e003      	b.n	8000f42 <_printf_i+0xc6>
 8000f3a:	0646      	lsls	r6, r0, #25
 8000f3c:	d5fb      	bpl.n	8000f36 <_printf_i+0xba>
 8000f3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	da03      	bge.n	8000f4e <_printf_i+0xd2>
 8000f46:	232d      	movs	r3, #45	; 0x2d
 8000f48:	4276      	negs	r6, r6
 8000f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f4e:	485a      	ldr	r0, [pc, #360]	; (80010b8 <_printf_i+0x23c>)
 8000f50:	230a      	movs	r3, #10
 8000f52:	e012      	b.n	8000f7a <_printf_i+0xfe>
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	6820      	ldr	r0, [r4, #0]
 8000f58:	1d19      	adds	r1, r3, #4
 8000f5a:	6029      	str	r1, [r5, #0]
 8000f5c:	0605      	lsls	r5, r0, #24
 8000f5e:	d501      	bpl.n	8000f64 <_printf_i+0xe8>
 8000f60:	681e      	ldr	r6, [r3, #0]
 8000f62:	e002      	b.n	8000f6a <_printf_i+0xee>
 8000f64:	0641      	lsls	r1, r0, #25
 8000f66:	d5fb      	bpl.n	8000f60 <_printf_i+0xe4>
 8000f68:	881e      	ldrh	r6, [r3, #0]
 8000f6a:	4853      	ldr	r0, [pc, #332]	; (80010b8 <_printf_i+0x23c>)
 8000f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8000f6e:	bf0c      	ite	eq
 8000f70:	2308      	moveq	r3, #8
 8000f72:	230a      	movne	r3, #10
 8000f74:	2100      	movs	r1, #0
 8000f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f7a:	6865      	ldr	r5, [r4, #4]
 8000f7c:	60a5      	str	r5, [r4, #8]
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	bfa2      	ittt	ge
 8000f82:	6821      	ldrge	r1, [r4, #0]
 8000f84:	f021 0104 	bicge.w	r1, r1, #4
 8000f88:	6021      	strge	r1, [r4, #0]
 8000f8a:	b90e      	cbnz	r6, 8000f90 <_printf_i+0x114>
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	d04b      	beq.n	8001028 <_printf_i+0x1ac>
 8000f90:	4615      	mov	r5, r2
 8000f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f96:	fb03 6711 	mls	r7, r3, r1, r6
 8000f9a:	5dc7      	ldrb	r7, [r0, r7]
 8000f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	42bb      	cmp	r3, r7
 8000fa4:	460e      	mov	r6, r1
 8000fa6:	d9f4      	bls.n	8000f92 <_printf_i+0x116>
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d10b      	bne.n	8000fc4 <_printf_i+0x148>
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	07de      	lsls	r6, r3, #31
 8000fb0:	d508      	bpl.n	8000fc4 <_printf_i+0x148>
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	6861      	ldr	r1, [r4, #4]
 8000fb6:	4299      	cmp	r1, r3
 8000fb8:	bfde      	ittt	le
 8000fba:	2330      	movle	r3, #48	; 0x30
 8000fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fc0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000fc4:	1b52      	subs	r2, r2, r5
 8000fc6:	6122      	str	r2, [r4, #16]
 8000fc8:	f8cd a000 	str.w	sl, [sp]
 8000fcc:	464b      	mov	r3, r9
 8000fce:	aa03      	add	r2, sp, #12
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	4640      	mov	r0, r8
 8000fd4:	f7ff fee4 	bl	8000da0 <_printf_common>
 8000fd8:	3001      	adds	r0, #1
 8000fda:	d14a      	bne.n	8001072 <_printf_i+0x1f6>
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe0:	b004      	add	sp, #16
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	f043 0320 	orr.w	r3, r3, #32
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	4833      	ldr	r0, [pc, #204]	; (80010bc <_printf_i+0x240>)
 8000ff0:	2778      	movs	r7, #120	; 0x78
 8000ff2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	6829      	ldr	r1, [r5, #0]
 8000ffa:	061f      	lsls	r7, r3, #24
 8000ffc:	f851 6b04 	ldr.w	r6, [r1], #4
 8001000:	d402      	bmi.n	8001008 <_printf_i+0x18c>
 8001002:	065f      	lsls	r7, r3, #25
 8001004:	bf48      	it	mi
 8001006:	b2b6      	uxthmi	r6, r6
 8001008:	07df      	lsls	r7, r3, #31
 800100a:	bf48      	it	mi
 800100c:	f043 0320 	orrmi.w	r3, r3, #32
 8001010:	6029      	str	r1, [r5, #0]
 8001012:	bf48      	it	mi
 8001014:	6023      	strmi	r3, [r4, #0]
 8001016:	b91e      	cbnz	r6, 8001020 <_printf_i+0x1a4>
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	f023 0320 	bic.w	r3, r3, #32
 800101e:	6023      	str	r3, [r4, #0]
 8001020:	2310      	movs	r3, #16
 8001022:	e7a7      	b.n	8000f74 <_printf_i+0xf8>
 8001024:	4824      	ldr	r0, [pc, #144]	; (80010b8 <_printf_i+0x23c>)
 8001026:	e7e4      	b.n	8000ff2 <_printf_i+0x176>
 8001028:	4615      	mov	r5, r2
 800102a:	e7bd      	b.n	8000fa8 <_printf_i+0x12c>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	6826      	ldr	r6, [r4, #0]
 8001030:	6961      	ldr	r1, [r4, #20]
 8001032:	1d18      	adds	r0, r3, #4
 8001034:	6028      	str	r0, [r5, #0]
 8001036:	0635      	lsls	r5, r6, #24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	d501      	bpl.n	8001040 <_printf_i+0x1c4>
 800103c:	6019      	str	r1, [r3, #0]
 800103e:	e002      	b.n	8001046 <_printf_i+0x1ca>
 8001040:	0670      	lsls	r0, r6, #25
 8001042:	d5fb      	bpl.n	800103c <_printf_i+0x1c0>
 8001044:	8019      	strh	r1, [r3, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	6123      	str	r3, [r4, #16]
 800104a:	4615      	mov	r5, r2
 800104c:	e7bc      	b.n	8000fc8 <_printf_i+0x14c>
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	1d1a      	adds	r2, r3, #4
 8001052:	602a      	str	r2, [r5, #0]
 8001054:	681d      	ldr	r5, [r3, #0]
 8001056:	6862      	ldr	r2, [r4, #4]
 8001058:	2100      	movs	r1, #0
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff f8d8 	bl	8000210 <memchr>
 8001060:	b108      	cbz	r0, 8001066 <_printf_i+0x1ea>
 8001062:	1b40      	subs	r0, r0, r5
 8001064:	6060      	str	r0, [r4, #4]
 8001066:	6863      	ldr	r3, [r4, #4]
 8001068:	6123      	str	r3, [r4, #16]
 800106a:	2300      	movs	r3, #0
 800106c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001070:	e7aa      	b.n	8000fc8 <_printf_i+0x14c>
 8001072:	6923      	ldr	r3, [r4, #16]
 8001074:	462a      	mov	r2, r5
 8001076:	4649      	mov	r1, r9
 8001078:	4640      	mov	r0, r8
 800107a:	47d0      	blx	sl
 800107c:	3001      	adds	r0, #1
 800107e:	d0ad      	beq.n	8000fdc <_printf_i+0x160>
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	079b      	lsls	r3, r3, #30
 8001084:	d413      	bmi.n	80010ae <_printf_i+0x232>
 8001086:	68e0      	ldr	r0, [r4, #12]
 8001088:	9b03      	ldr	r3, [sp, #12]
 800108a:	4298      	cmp	r0, r3
 800108c:	bfb8      	it	lt
 800108e:	4618      	movlt	r0, r3
 8001090:	e7a6      	b.n	8000fe0 <_printf_i+0x164>
 8001092:	2301      	movs	r3, #1
 8001094:	4632      	mov	r2, r6
 8001096:	4649      	mov	r1, r9
 8001098:	4640      	mov	r0, r8
 800109a:	47d0      	blx	sl
 800109c:	3001      	adds	r0, #1
 800109e:	d09d      	beq.n	8000fdc <_printf_i+0x160>
 80010a0:	3501      	adds	r5, #1
 80010a2:	68e3      	ldr	r3, [r4, #12]
 80010a4:	9903      	ldr	r1, [sp, #12]
 80010a6:	1a5b      	subs	r3, r3, r1
 80010a8:	42ab      	cmp	r3, r5
 80010aa:	dcf2      	bgt.n	8001092 <_printf_i+0x216>
 80010ac:	e7eb      	b.n	8001086 <_printf_i+0x20a>
 80010ae:	2500      	movs	r5, #0
 80010b0:	f104 0619 	add.w	r6, r4, #25
 80010b4:	e7f5      	b.n	80010a2 <_printf_i+0x226>
 80010b6:	bf00      	nop
 80010b8:	080014aa 	.word	0x080014aa
 80010bc:	080014bb 	.word	0x080014bb

080010c0 <__sflush_r>:
 80010c0:	898a      	ldrh	r2, [r1, #12]
 80010c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c6:	4605      	mov	r5, r0
 80010c8:	0710      	lsls	r0, r2, #28
 80010ca:	460c      	mov	r4, r1
 80010cc:	d458      	bmi.n	8001180 <__sflush_r+0xc0>
 80010ce:	684b      	ldr	r3, [r1, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc05      	bgt.n	80010e0 <__sflush_r+0x20>
 80010d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc02      	bgt.n	80010e0 <__sflush_r+0x20>
 80010da:	2000      	movs	r0, #0
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d0f9      	beq.n	80010da <__sflush_r+0x1a>
 80010e6:	2300      	movs	r3, #0
 80010e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010ec:	682f      	ldr	r7, [r5, #0]
 80010ee:	6a21      	ldr	r1, [r4, #32]
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	d032      	beq.n	800115a <__sflush_r+0x9a>
 80010f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	075a      	lsls	r2, r3, #29
 80010fa:	d505      	bpl.n	8001108 <__sflush_r+0x48>
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	1ac0      	subs	r0, r0, r3
 8001100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001102:	b10b      	cbz	r3, 8001108 <__sflush_r+0x48>
 8001104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	2300      	movs	r3, #0
 800110a:	4602      	mov	r2, r0
 800110c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800110e:	6a21      	ldr	r1, [r4, #32]
 8001110:	4628      	mov	r0, r5
 8001112:	47b0      	blx	r6
 8001114:	1c43      	adds	r3, r0, #1
 8001116:	89a3      	ldrh	r3, [r4, #12]
 8001118:	d106      	bne.n	8001128 <__sflush_r+0x68>
 800111a:	6829      	ldr	r1, [r5, #0]
 800111c:	291d      	cmp	r1, #29
 800111e:	d82b      	bhi.n	8001178 <__sflush_r+0xb8>
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <__sflush_r+0x108>)
 8001122:	410a      	asrs	r2, r1
 8001124:	07d6      	lsls	r6, r2, #31
 8001126:	d427      	bmi.n	8001178 <__sflush_r+0xb8>
 8001128:	2200      	movs	r2, #0
 800112a:	6062      	str	r2, [r4, #4]
 800112c:	04d9      	lsls	r1, r3, #19
 800112e:	6922      	ldr	r2, [r4, #16]
 8001130:	6022      	str	r2, [r4, #0]
 8001132:	d504      	bpl.n	800113e <__sflush_r+0x7e>
 8001134:	1c42      	adds	r2, r0, #1
 8001136:	d101      	bne.n	800113c <__sflush_r+0x7c>
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	b903      	cbnz	r3, 800113e <__sflush_r+0x7e>
 800113c:	6560      	str	r0, [r4, #84]	; 0x54
 800113e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001140:	602f      	str	r7, [r5, #0]
 8001142:	2900      	cmp	r1, #0
 8001144:	d0c9      	beq.n	80010da <__sflush_r+0x1a>
 8001146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800114a:	4299      	cmp	r1, r3
 800114c:	d002      	beq.n	8001154 <__sflush_r+0x94>
 800114e:	4628      	mov	r0, r5
 8001150:	f7ff fbea 	bl	8000928 <_free_r>
 8001154:	2000      	movs	r0, #0
 8001156:	6360      	str	r0, [r4, #52]	; 0x34
 8001158:	e7c0      	b.n	80010dc <__sflush_r+0x1c>
 800115a:	2301      	movs	r3, #1
 800115c:	4628      	mov	r0, r5
 800115e:	47b0      	blx	r6
 8001160:	1c41      	adds	r1, r0, #1
 8001162:	d1c8      	bne.n	80010f6 <__sflush_r+0x36>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0c5      	beq.n	80010f6 <__sflush_r+0x36>
 800116a:	2b1d      	cmp	r3, #29
 800116c:	d001      	beq.n	8001172 <__sflush_r+0xb2>
 800116e:	2b16      	cmp	r3, #22
 8001170:	d101      	bne.n	8001176 <__sflush_r+0xb6>
 8001172:	602f      	str	r7, [r5, #0]
 8001174:	e7b1      	b.n	80010da <__sflush_r+0x1a>
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117c:	81a3      	strh	r3, [r4, #12]
 800117e:	e7ad      	b.n	80010dc <__sflush_r+0x1c>
 8001180:	690f      	ldr	r7, [r1, #16]
 8001182:	2f00      	cmp	r7, #0
 8001184:	d0a9      	beq.n	80010da <__sflush_r+0x1a>
 8001186:	0793      	lsls	r3, r2, #30
 8001188:	680e      	ldr	r6, [r1, #0]
 800118a:	bf08      	it	eq
 800118c:	694b      	ldreq	r3, [r1, #20]
 800118e:	600f      	str	r7, [r1, #0]
 8001190:	bf18      	it	ne
 8001192:	2300      	movne	r3, #0
 8001194:	eba6 0807 	sub.w	r8, r6, r7
 8001198:	608b      	str	r3, [r1, #8]
 800119a:	f1b8 0f00 	cmp.w	r8, #0
 800119e:	dd9c      	ble.n	80010da <__sflush_r+0x1a>
 80011a0:	6a21      	ldr	r1, [r4, #32]
 80011a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011a4:	4643      	mov	r3, r8
 80011a6:	463a      	mov	r2, r7
 80011a8:	4628      	mov	r0, r5
 80011aa:	47b0      	blx	r6
 80011ac:	2800      	cmp	r0, #0
 80011ae:	dc06      	bgt.n	80011be <__sflush_r+0xfe>
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b6:	81a3      	strh	r3, [r4, #12]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011bc:	e78e      	b.n	80010dc <__sflush_r+0x1c>
 80011be:	4407      	add	r7, r0
 80011c0:	eba8 0800 	sub.w	r8, r8, r0
 80011c4:	e7e9      	b.n	800119a <__sflush_r+0xda>
 80011c6:	bf00      	nop
 80011c8:	dfbffffe 	.word	0xdfbffffe

080011cc <_fflush_r>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	690b      	ldr	r3, [r1, #16]
 80011d0:	4605      	mov	r5, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	b913      	cbnz	r3, 80011dc <_fflush_r+0x10>
 80011d6:	2500      	movs	r5, #0
 80011d8:	4628      	mov	r0, r5
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	b118      	cbz	r0, 80011e6 <_fflush_r+0x1a>
 80011de:	6a03      	ldr	r3, [r0, #32]
 80011e0:	b90b      	cbnz	r3, 80011e6 <_fflush_r+0x1a>
 80011e2:	f7ff fa9b 	bl	800071c <__sinit>
 80011e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f3      	beq.n	80011d6 <_fflush_r+0xa>
 80011ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011f0:	07d0      	lsls	r0, r2, #31
 80011f2:	d404      	bmi.n	80011fe <_fflush_r+0x32>
 80011f4:	0599      	lsls	r1, r3, #22
 80011f6:	d402      	bmi.n	80011fe <_fflush_r+0x32>
 80011f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011fa:	f7ff fb93 	bl	8000924 <__retarget_lock_acquire_recursive>
 80011fe:	4628      	mov	r0, r5
 8001200:	4621      	mov	r1, r4
 8001202:	f7ff ff5d 	bl	80010c0 <__sflush_r>
 8001206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001208:	07da      	lsls	r2, r3, #31
 800120a:	4605      	mov	r5, r0
 800120c:	d4e4      	bmi.n	80011d8 <_fflush_r+0xc>
 800120e:	89a3      	ldrh	r3, [r4, #12]
 8001210:	059b      	lsls	r3, r3, #22
 8001212:	d4e1      	bmi.n	80011d8 <_fflush_r+0xc>
 8001214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001216:	f7ff fb86 	bl	8000926 <__retarget_lock_release_recursive>
 800121a:	e7dd      	b.n	80011d8 <_fflush_r+0xc>

0800121c <__swbuf_r>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	460e      	mov	r6, r1
 8001220:	4614      	mov	r4, r2
 8001222:	4605      	mov	r5, r0
 8001224:	b118      	cbz	r0, 800122e <__swbuf_r+0x12>
 8001226:	6a03      	ldr	r3, [r0, #32]
 8001228:	b90b      	cbnz	r3, 800122e <__swbuf_r+0x12>
 800122a:	f7ff fa77 	bl	800071c <__sinit>
 800122e:	69a3      	ldr	r3, [r4, #24]
 8001230:	60a3      	str	r3, [r4, #8]
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	071a      	lsls	r2, r3, #28
 8001236:	d525      	bpl.n	8001284 <__swbuf_r+0x68>
 8001238:	6923      	ldr	r3, [r4, #16]
 800123a:	b31b      	cbz	r3, 8001284 <__swbuf_r+0x68>
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	6922      	ldr	r2, [r4, #16]
 8001240:	1a98      	subs	r0, r3, r2
 8001242:	6963      	ldr	r3, [r4, #20]
 8001244:	b2f6      	uxtb	r6, r6
 8001246:	4283      	cmp	r3, r0
 8001248:	4637      	mov	r7, r6
 800124a:	dc04      	bgt.n	8001256 <__swbuf_r+0x3a>
 800124c:	4621      	mov	r1, r4
 800124e:	4628      	mov	r0, r5
 8001250:	f7ff ffbc 	bl	80011cc <_fflush_r>
 8001254:	b9e0      	cbnz	r0, 8001290 <__swbuf_r+0x74>
 8001256:	68a3      	ldr	r3, [r4, #8]
 8001258:	3b01      	subs	r3, #1
 800125a:	60a3      	str	r3, [r4, #8]
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	6022      	str	r2, [r4, #0]
 8001262:	701e      	strb	r6, [r3, #0]
 8001264:	6962      	ldr	r2, [r4, #20]
 8001266:	1c43      	adds	r3, r0, #1
 8001268:	429a      	cmp	r2, r3
 800126a:	d004      	beq.n	8001276 <__swbuf_r+0x5a>
 800126c:	89a3      	ldrh	r3, [r4, #12]
 800126e:	07db      	lsls	r3, r3, #31
 8001270:	d506      	bpl.n	8001280 <__swbuf_r+0x64>
 8001272:	2e0a      	cmp	r6, #10
 8001274:	d104      	bne.n	8001280 <__swbuf_r+0x64>
 8001276:	4621      	mov	r1, r4
 8001278:	4628      	mov	r0, r5
 800127a:	f7ff ffa7 	bl	80011cc <_fflush_r>
 800127e:	b938      	cbnz	r0, 8001290 <__swbuf_r+0x74>
 8001280:	4638      	mov	r0, r7
 8001282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001284:	4621      	mov	r1, r4
 8001286:	4628      	mov	r0, r5
 8001288:	f000 f806 	bl	8001298 <__swsetup_r>
 800128c:	2800      	cmp	r0, #0
 800128e:	d0d5      	beq.n	800123c <__swbuf_r+0x20>
 8001290:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001294:	e7f4      	b.n	8001280 <__swbuf_r+0x64>
	...

08001298 <__swsetup_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <__swsetup_r+0xac>)
 800129c:	4605      	mov	r5, r0
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	460c      	mov	r4, r1
 80012a2:	b118      	cbz	r0, 80012ac <__swsetup_r+0x14>
 80012a4:	6a03      	ldr	r3, [r0, #32]
 80012a6:	b90b      	cbnz	r3, 80012ac <__swsetup_r+0x14>
 80012a8:	f7ff fa38 	bl	800071c <__sinit>
 80012ac:	89a3      	ldrh	r3, [r4, #12]
 80012ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012b2:	0718      	lsls	r0, r3, #28
 80012b4:	d422      	bmi.n	80012fc <__swsetup_r+0x64>
 80012b6:	06d9      	lsls	r1, r3, #27
 80012b8:	d407      	bmi.n	80012ca <__swsetup_r+0x32>
 80012ba:	2309      	movs	r3, #9
 80012bc:	602b      	str	r3, [r5, #0]
 80012be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012c2:	81a3      	strh	r3, [r4, #12]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c8:	e034      	b.n	8001334 <__swsetup_r+0x9c>
 80012ca:	0758      	lsls	r0, r3, #29
 80012cc:	d512      	bpl.n	80012f4 <__swsetup_r+0x5c>
 80012ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012d0:	b141      	cbz	r1, 80012e4 <__swsetup_r+0x4c>
 80012d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d002      	beq.n	80012e0 <__swsetup_r+0x48>
 80012da:	4628      	mov	r0, r5
 80012dc:	f7ff fb24 	bl	8000928 <_free_r>
 80012e0:	2300      	movs	r3, #0
 80012e2:	6363      	str	r3, [r4, #52]	; 0x34
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012ea:	81a3      	strh	r3, [r4, #12]
 80012ec:	2300      	movs	r3, #0
 80012ee:	6063      	str	r3, [r4, #4]
 80012f0:	6923      	ldr	r3, [r4, #16]
 80012f2:	6023      	str	r3, [r4, #0]
 80012f4:	89a3      	ldrh	r3, [r4, #12]
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	81a3      	strh	r3, [r4, #12]
 80012fc:	6923      	ldr	r3, [r4, #16]
 80012fe:	b94b      	cbnz	r3, 8001314 <__swsetup_r+0x7c>
 8001300:	89a3      	ldrh	r3, [r4, #12]
 8001302:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130a:	d003      	beq.n	8001314 <__swsetup_r+0x7c>
 800130c:	4621      	mov	r1, r4
 800130e:	4628      	mov	r0, r5
 8001310:	f000 f850 	bl	80013b4 <__smakebuf_r>
 8001314:	89a0      	ldrh	r0, [r4, #12]
 8001316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800131a:	f010 0301 	ands.w	r3, r0, #1
 800131e:	d00a      	beq.n	8001336 <__swsetup_r+0x9e>
 8001320:	2300      	movs	r3, #0
 8001322:	60a3      	str	r3, [r4, #8]
 8001324:	6963      	ldr	r3, [r4, #20]
 8001326:	425b      	negs	r3, r3
 8001328:	61a3      	str	r3, [r4, #24]
 800132a:	6923      	ldr	r3, [r4, #16]
 800132c:	b943      	cbnz	r3, 8001340 <__swsetup_r+0xa8>
 800132e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001332:	d1c4      	bne.n	80012be <__swsetup_r+0x26>
 8001334:	bd38      	pop	{r3, r4, r5, pc}
 8001336:	0781      	lsls	r1, r0, #30
 8001338:	bf58      	it	pl
 800133a:	6963      	ldrpl	r3, [r4, #20]
 800133c:	60a3      	str	r3, [r4, #8]
 800133e:	e7f4      	b.n	800132a <__swsetup_r+0x92>
 8001340:	2000      	movs	r0, #0
 8001342:	e7f7      	b.n	8001334 <__swsetup_r+0x9c>
 8001344:	2000005c 	.word	0x2000005c

08001348 <_sbrk_r>:
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4d06      	ldr	r5, [pc, #24]	; (8001364 <_sbrk_r+0x1c>)
 800134c:	2300      	movs	r3, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	602b      	str	r3, [r5, #0]
 8001354:	f7ff f8e2 	bl	800051c <_sbrk>
 8001358:	1c43      	adds	r3, r0, #1
 800135a:	d102      	bne.n	8001362 <_sbrk_r+0x1a>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	b103      	cbz	r3, 8001362 <_sbrk_r+0x1a>
 8001360:	6023      	str	r3, [r4, #0]
 8001362:	bd38      	pop	{r3, r4, r5, pc}
 8001364:	200001c0 	.word	0x200001c0

08001368 <__swhatbuf_r>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	460c      	mov	r4, r1
 800136c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001370:	2900      	cmp	r1, #0
 8001372:	b096      	sub	sp, #88	; 0x58
 8001374:	4615      	mov	r5, r2
 8001376:	461e      	mov	r6, r3
 8001378:	da0d      	bge.n	8001396 <__swhatbuf_r+0x2e>
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001380:	f04f 0100 	mov.w	r1, #0
 8001384:	bf0c      	ite	eq
 8001386:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800138a:	2340      	movne	r3, #64	; 0x40
 800138c:	2000      	movs	r0, #0
 800138e:	6031      	str	r1, [r6, #0]
 8001390:	602b      	str	r3, [r5, #0]
 8001392:	b016      	add	sp, #88	; 0x58
 8001394:	bd70      	pop	{r4, r5, r6, pc}
 8001396:	466a      	mov	r2, sp
 8001398:	f000 f848 	bl	800142c <_fstat_r>
 800139c:	2800      	cmp	r0, #0
 800139e:	dbec      	blt.n	800137a <__swhatbuf_r+0x12>
 80013a0:	9901      	ldr	r1, [sp, #4]
 80013a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80013a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80013aa:	4259      	negs	r1, r3
 80013ac:	4159      	adcs	r1, r3
 80013ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b2:	e7eb      	b.n	800138c <__swhatbuf_r+0x24>

080013b4 <__smakebuf_r>:
 80013b4:	898b      	ldrh	r3, [r1, #12]
 80013b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013b8:	079d      	lsls	r5, r3, #30
 80013ba:	4606      	mov	r6, r0
 80013bc:	460c      	mov	r4, r1
 80013be:	d507      	bpl.n	80013d0 <__smakebuf_r+0x1c>
 80013c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	6123      	str	r3, [r4, #16]
 80013c8:	2301      	movs	r3, #1
 80013ca:	6163      	str	r3, [r4, #20]
 80013cc:	b002      	add	sp, #8
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	ab01      	add	r3, sp, #4
 80013d2:	466a      	mov	r2, sp
 80013d4:	f7ff ffc8 	bl	8001368 <__swhatbuf_r>
 80013d8:	9900      	ldr	r1, [sp, #0]
 80013da:	4605      	mov	r5, r0
 80013dc:	4630      	mov	r0, r6
 80013de:	f7ff fb0f 	bl	8000a00 <_malloc_r>
 80013e2:	b948      	cbnz	r0, 80013f8 <__smakebuf_r+0x44>
 80013e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013e8:	059a      	lsls	r2, r3, #22
 80013ea:	d4ef      	bmi.n	80013cc <__smakebuf_r+0x18>
 80013ec:	f023 0303 	bic.w	r3, r3, #3
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	81a3      	strh	r3, [r4, #12]
 80013f6:	e7e3      	b.n	80013c0 <__smakebuf_r+0xc>
 80013f8:	89a3      	ldrh	r3, [r4, #12]
 80013fa:	6020      	str	r0, [r4, #0]
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	81a3      	strh	r3, [r4, #12]
 8001402:	9b00      	ldr	r3, [sp, #0]
 8001404:	6163      	str	r3, [r4, #20]
 8001406:	9b01      	ldr	r3, [sp, #4]
 8001408:	6120      	str	r0, [r4, #16]
 800140a:	b15b      	cbz	r3, 8001424 <__smakebuf_r+0x70>
 800140c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001410:	4630      	mov	r0, r6
 8001412:	f000 f81d 	bl	8001450 <_isatty_r>
 8001416:	b128      	cbz	r0, 8001424 <__smakebuf_r+0x70>
 8001418:	89a3      	ldrh	r3, [r4, #12]
 800141a:	f023 0303 	bic.w	r3, r3, #3
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	81a3      	strh	r3, [r4, #12]
 8001424:	89a3      	ldrh	r3, [r4, #12]
 8001426:	431d      	orrs	r5, r3
 8001428:	81a5      	strh	r5, [r4, #12]
 800142a:	e7cf      	b.n	80013cc <__smakebuf_r+0x18>

0800142c <_fstat_r>:
 800142c:	b538      	push	{r3, r4, r5, lr}
 800142e:	4d07      	ldr	r5, [pc, #28]	; (800144c <_fstat_r+0x20>)
 8001430:	2300      	movs	r3, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	602b      	str	r3, [r5, #0]
 800143a:	f7ff f846 	bl	80004ca <_fstat>
 800143e:	1c43      	adds	r3, r0, #1
 8001440:	d102      	bne.n	8001448 <_fstat_r+0x1c>
 8001442:	682b      	ldr	r3, [r5, #0]
 8001444:	b103      	cbz	r3, 8001448 <_fstat_r+0x1c>
 8001446:	6023      	str	r3, [r4, #0]
 8001448:	bd38      	pop	{r3, r4, r5, pc}
 800144a:	bf00      	nop
 800144c:	200001c0 	.word	0x200001c0

08001450 <_isatty_r>:
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	4d06      	ldr	r5, [pc, #24]	; (800146c <_isatty_r+0x1c>)
 8001454:	2300      	movs	r3, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	602b      	str	r3, [r5, #0]
 800145c:	f7ff f845 	bl	80004ea <_isatty>
 8001460:	1c43      	adds	r3, r0, #1
 8001462:	d102      	bne.n	800146a <_isatty_r+0x1a>
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	b103      	cbz	r3, 800146a <_isatty_r+0x1a>
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	200001c0 	.word	0x200001c0

08001470 <_init>:
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001472:	bf00      	nop
 8001474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001476:	bc08      	pop	{r3}
 8001478:	469e      	mov	lr, r3
 800147a:	4770      	bx	lr

0800147c <_fini>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	bf00      	nop
 8001480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001482:	bc08      	pop	{r3}
 8001484:	469e      	mov	lr, r3
 8001486:	4770      	bx	lr
