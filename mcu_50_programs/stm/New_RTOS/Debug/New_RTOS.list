
New_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae4  08005ae4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aec  08005aec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001455c  20000070  08005b64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200145cc  08005b64  000245cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132bf  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed9  00000000  00000000  000333a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00036280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3d  00000000  00000000  00037518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252a6  00000000  00000000  00038355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148d6  00000000  00000000  0005d5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df84d  00000000  00000000  00071ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052f4  00000000  00000000  00151720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00156a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005984 	.word	0x08005984

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005984 	.word	0x08005984

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012eac 	.word	0x20012eac

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 faeb 	bl	8000b80 <HAL_Init>
  		BaseType_t status;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f851 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8b9 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //  Enable CYCCNT counter
    	  	  DWT_CTRL |= (1<<0);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <main+0x94>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <main+0x94>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]

    	  	  SEGGER_SYSVIEW_Conf();
 80005be:	f003 f819 	bl	80035f4 <SEGGER_SYSVIEW_Conf>
    	  	  SEGGER_SYSVIEW_Start();
 80005c2:	f003 ffc3 	bl	800454c <SEGGER_SYSVIEW_Start>

  	  	  status=xTaskCreate(task1_handler,"Task-1", 200,"Hello world from Task-1" , 2, &task1_handle);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <main+0x98>)
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	4919      	ldr	r1, [pc, #100]	; (800063c <main+0x9c>)
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <main+0xa0>)
 80005d8:	f001 fed3 	bl	8002382 <xTaskCreate>
 80005dc:	6178      	str	r0, [r7, #20]
    	  configASSERT(status== pdPASS);
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00a      	beq.n	80005fa <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f6:	bf00      	nop
 80005f8:	e7fe      	b.n	80005f8 <main+0x58>

    	  status=xTaskCreate(task2_handler,"Task-2", 200,"Hello world from Task-2" , 2, &task2_handle);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0xa4>)
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xa8>)
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xac>)
 800060a:	f001 feba 	bl	8002382 <xTaskCreate>
 800060e:	6178      	str	r0, [r7, #20]
    	  configASSERT(status== pdPASS);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00a      	beq.n	800062c <main+0x8c>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	60fb      	str	r3, [r7, #12]
    }
 8000628:	bf00      	nop
 800062a:	e7fe      	b.n	800062a <main+0x8a>


    	  vTaskStartScheduler();
 800062c:	f002 f80c 	bl	8002648 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x90>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	0800599c 	.word	0x0800599c
 800063c:	080059b4 	.word	0x080059b4
 8000640:	08000821 	.word	0x08000821
 8000644:	080059bc 	.word	0x080059bc
 8000648:	080059d4 	.word	0x080059d4
 800064c:	08000831 	.word	0x08000831

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fee0 	bl	8005424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f88c 	bl	80017f4 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f8bf 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fd0e 	bl	8001124 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f8a9 	bl	8000864 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a34      	ldr	r2, [pc, #208]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_GPIO_Init+0xf0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <MX_GPIO_Init+0xf0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a26      	ldr	r2, [pc, #152]	; (8000814 <MX_GPIO_Init+0xf0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0xf0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	481a      	ldr	r0, [pc, #104]	; (8000818 <MX_GPIO_Init+0xf4>)
 80007b0:	f000 fc9e 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <MX_GPIO_Init+0xf8>)
 80007cc:	f000 fafc 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d0:	230c      	movs	r3, #12
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e0:	2307      	movs	r3, #7
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xf4>)
 80007ec:	f000 faec 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xf4>)
 8000808:	f000 fade 	bl	8000dc8 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020800 	.word	0x40020800

08000820 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n",(char*)parameters);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f004 fd0b 	bl	8005244 <puts>
 800082e:	e7fb      	b.n	8000828 <task1_handler+0x8>

08000830 <task2_handler>:
	}
}


static void task2_handler(void * parameters)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

	while(1)
		{
		printf("%s\n",(char*)parameters);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f004 fd03 	bl	8005244 <puts>
 800083e:	e7fb      	b.n	8000838 <task2_handler+0x8>

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 f9b7 	bl	8000bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40000c00 	.word	0x40000c00

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80008ae:	f002 faeb 	bl	8002e88 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <HAL_InitTick+0xe4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a32      	ldr	r2, [pc, #200]	; (80009a4 <HAL_InitTick+0xe4>)
 80008da:	f043 0302 	orr.w	r3, r3, #2
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <HAL_InitTick+0xe4>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ec:	f107 0210 	add.w	r2, r7, #16
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fd1a 	bl	8001330 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000902:	2b00      	cmp	r3, #0
 8000904:	d103      	bne.n	800090e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000906:	f000 fcff 	bl	8001308 <HAL_RCC_GetPCLK1Freq>
 800090a:	6378      	str	r0, [r7, #52]	; 0x34
 800090c:	e004      	b.n	8000918 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800090e:	f000 fcfb 	bl	8001308 <HAL_RCC_GetPCLK1Freq>
 8000912:	4603      	mov	r3, r0
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091a:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <HAL_InitTick+0xe8>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	0c9b      	lsrs	r3, r3, #18
 8000922:	3b01      	subs	r3, #1
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <HAL_InitTick+0xec>)
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <HAL_InitTick+0xf0>)
 800092a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <HAL_InitTick+0xec>)
 800092e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000932:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000934:	4a1d      	ldr	r2, [pc, #116]	; (80009ac <HAL_InitTick+0xec>)
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_InitTick+0xec>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <HAL_InitTick+0xec>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_InitTick+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800094c:	4817      	ldr	r0, [pc, #92]	; (80009ac <HAL_InitTick+0xec>)
 800094e:	f001 f9ef 	bl	8001d30 <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000958:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800095c:	2b00      	cmp	r3, #0
 800095e:	d11b      	bne.n	8000998 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000960:	4812      	ldr	r0, [pc, #72]	; (80009ac <HAL_InitTick+0xec>)
 8000962:	f001 fa3f 	bl	8001de4 <HAL_TIM_Base_Start_IT>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800096c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000970:	2b00      	cmp	r3, #0
 8000972:	d111      	bne.n	8000998 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000974:	201d      	movs	r0, #29
 8000976:	f000 fa19 	bl	8000dac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d808      	bhi.n	8000992 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	201d      	movs	r0, #29
 8000986:	f000 f9f5 	bl	8000d74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_InitTick+0xf4>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e002      	b.n	8000998 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800099c:	4618      	mov	r0, r3
 800099e:	3738      	adds	r7, #56	; 0x38
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	431bde83 	.word	0x431bde83
 80009ac:	2000008c 	.word	0x2000008c
 80009b0:	40000400 	.word	0x40000400
 80009b4:	20000004 	.word	0x20000004

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <TIM3_IRQHandler+0x10>)
 80009ea:	f001 fa6b 	bl	8001ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000008c 	.word	0x2000008c

080009f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e00a      	b.n	8000a20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0a:	f3af 8000 	nop.w
 8000a0e:	4601      	mov	r1, r0
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf0      	blt.n	8000a0a <_read+0x12>
  }

  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f004 fce6 	bl	800549c <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20020000 	.word	0x20020000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	200000d4 	.word	0x200000d4
 8000b04:	200145d0 	.word	0x200145d0

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd7 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f004 fca5 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fd1f 	bl	80005a0 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b70:	08005af4 	.word	0x08005af4
  ldr r2, =_sbss
 8000b74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b78:	200145cc 	.word	0x200145cc

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f8d8 	bl	8000d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fe86 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe5c 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	200000d8 	.word	0x200000d8

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200000d8 	.word	0x200000d8

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff4c 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d86:	f7ff ff61 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	6978      	ldr	r0, [r7, #20]
 8000d92:	f7ff ffb1 	bl	8000cf8 <NVIC_EncodePriority>
 8000d96:	4602      	mov	r2, r0
 8000d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff80 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff54 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	e165      	b.n	80010b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8154 	bne.w	80010aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d005      	beq.n	8000e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d130      	bne.n	8000e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	f003 0201 	and.w	r2, r3, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d017      	beq.n	8000eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d123      	bne.n	8000f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	69b9      	ldr	r1, [r7, #24]
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0203 	and.w	r2, r3, #3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80ae 	beq.w	80010aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a5c      	ldr	r2, [pc, #368]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6a:	4a58      	ldr	r2, [pc, #352]	; (80010cc <HAL_GPIO_Init+0x304>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4f      	ldr	r2, [pc, #316]	; (80010d0 <HAL_GPIO_Init+0x308>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d025      	beq.n	8000fe2 <HAL_GPIO_Init+0x21a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x30c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01f      	beq.n	8000fde <HAL_GPIO_Init+0x216>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <HAL_GPIO_Init+0x310>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x212>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_GPIO_Init+0x314>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x20e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4b      	ldr	r2, [pc, #300]	; (80010e0 <HAL_GPIO_Init+0x318>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x20a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4a      	ldr	r2, [pc, #296]	; (80010e4 <HAL_GPIO_Init+0x31c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x206>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a49      	ldr	r2, [pc, #292]	; (80010e8 <HAL_GPIO_Init+0x320>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x202>
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e00c      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e00a      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x304>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <HAL_GPIO_Init+0x324>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001026:	4a31      	ldr	r2, [pc, #196]	; (80010ec <HAL_GPIO_Init+0x324>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x324>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_GPIO_Init+0x324>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <HAL_GPIO_Init+0x324>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_GPIO_Init+0x324>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <HAL_GPIO_Init+0x324>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_GPIO_Init+0x324>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f ae96 	bls.w	8000de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40021400 	.word	0x40021400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0cc      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001138:	4b68      	ldr	r3, [pc, #416]	; (80012dc <HAL_RCC_ClockConfig+0x1b8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d90c      	bls.n	8001160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001146:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <HAL_RCC_ClockConfig+0x1b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d001      	beq.n	8001160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0b8      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d020      	beq.n	80011ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001178:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800119a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800119c:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	494d      	ldr	r1, [pc, #308]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d044      	beq.n	8001244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d119      	bne.n	8001202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e07f      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d003      	beq.n	80011e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d107      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e2:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e06f      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e067      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f023 0203 	bic.w	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4934      	ldr	r1, [pc, #208]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001214:	f7ff fcea 	bl	8000bec <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	e00a      	b.n	8001232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800121c:	f7ff fce6 	bl	8000bec <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	; 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e04f      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 020c 	and.w	r2, r3, #12
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	429a      	cmp	r2, r3
 8001242:	d1eb      	bne.n	800121c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d20c      	bcs.n	800126c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e032      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4916      	ldr	r1, [pc, #88]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d009      	beq.n	80012aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012aa:	f000 f873 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	490a      	ldr	r1, [pc, #40]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	5ccb      	ldrb	r3, [r1, r3]
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_RCC_ClockConfig+0x1c8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff faf8 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00
 80012e0:	40023800 	.word	0x40023800
 80012e4:	08005aa4 	.word	0x08005aa4
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_RCC_GetHCLKFreq+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000

08001308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800130c:	f7ff fff0 	bl	80012f0 <HAL_RCC_GetHCLKFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	0a9b      	lsrs	r3, r3, #10
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <HAL_RCC_GetPCLK1Freq+0x24>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	08005ab4 	.word	0x08005ab4

08001330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	220f      	movs	r2, #15
 800133e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_RCC_GetClockConfig+0x5c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_RCC_GetClockConfig+0x60>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 020f 	and.w	r2, r3, #15
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	601a      	str	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40023c00 	.word	0x40023c00

08001394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001398:	b0ae      	sub	sp, #184	; 0xb8
 800139a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ba:	4bcb      	ldr	r3, [pc, #812]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	f200 8206 	bhi.w	80017d4 <HAL_RCC_GetSysClockFreq+0x440>
 80013c8:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ce:	bf00      	nop
 80013d0:	08001405 	.word	0x08001405
 80013d4:	080017d5 	.word	0x080017d5
 80013d8:	080017d5 	.word	0x080017d5
 80013dc:	080017d5 	.word	0x080017d5
 80013e0:	0800140d 	.word	0x0800140d
 80013e4:	080017d5 	.word	0x080017d5
 80013e8:	080017d5 	.word	0x080017d5
 80013ec:	080017d5 	.word	0x080017d5
 80013f0:	08001415 	.word	0x08001415
 80013f4:	080017d5 	.word	0x080017d5
 80013f8:	080017d5 	.word	0x080017d5
 80013fc:	080017d5 	.word	0x080017d5
 8001400:	08001605 	.word	0x08001605
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001404:	4bb9      	ldr	r3, [pc, #740]	; (80016ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800140a:	e1e7      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800140c:	4bb8      	ldr	r3, [pc, #736]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800140e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001412:	e1e3      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001414:	4bb4      	ldr	r3, [pc, #720]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001420:	4bb1      	ldr	r3, [pc, #708]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d071      	beq.n	8001510 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142c:	4bae      	ldr	r3, [pc, #696]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	099b      	lsrs	r3, r3, #6
 8001432:	2200      	movs	r2, #0
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001438:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800143c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800144e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001452:	4622      	mov	r2, r4
 8001454:	462b      	mov	r3, r5
 8001456:	f04f 0000 	mov.w	r0, #0
 800145a:	f04f 0100 	mov.w	r1, #0
 800145e:	0159      	lsls	r1, r3, #5
 8001460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001464:	0150      	lsls	r0, r2, #5
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4621      	mov	r1, r4
 800146c:	1a51      	subs	r1, r2, r1
 800146e:	6439      	str	r1, [r7, #64]	; 0x40
 8001470:	4629      	mov	r1, r5
 8001472:	eb63 0301 	sbc.w	r3, r3, r1
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001484:	4649      	mov	r1, r9
 8001486:	018b      	lsls	r3, r1, #6
 8001488:	4641      	mov	r1, r8
 800148a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800148e:	4641      	mov	r1, r8
 8001490:	018a      	lsls	r2, r1, #6
 8001492:	4641      	mov	r1, r8
 8001494:	1a51      	subs	r1, r2, r1
 8001496:	63b9      	str	r1, [r7, #56]	; 0x38
 8001498:	4649      	mov	r1, r9
 800149a:	eb63 0301 	sbc.w	r3, r3, r1
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014ac:	4649      	mov	r1, r9
 80014ae:	00cb      	lsls	r3, r1, #3
 80014b0:	4641      	mov	r1, r8
 80014b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014b6:	4641      	mov	r1, r8
 80014b8:	00ca      	lsls	r2, r1, #3
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	4622      	mov	r2, r4
 80014c2:	189b      	adds	r3, r3, r2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
 80014c6:	462b      	mov	r3, r5
 80014c8:	460a      	mov	r2, r1
 80014ca:	eb42 0303 	adc.w	r3, r2, r3
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014dc:	4629      	mov	r1, r5
 80014de:	024b      	lsls	r3, r1, #9
 80014e0:	4621      	mov	r1, r4
 80014e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014e6:	4621      	mov	r1, r4
 80014e8:	024a      	lsls	r2, r1, #9
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014f2:	2200      	movs	r2, #0
 80014f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001500:	f7fe fed0 	bl	80002a4 <__aeabi_uldivmod>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4613      	mov	r3, r2
 800150a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800150e:	e067      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001510:	4b75      	ldr	r3, [pc, #468]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	2200      	movs	r2, #0
 8001518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800151c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001528:	67bb      	str	r3, [r7, #120]	; 0x78
 800152a:	2300      	movs	r3, #0
 800152c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800152e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001532:	4622      	mov	r2, r4
 8001534:	462b      	mov	r3, r5
 8001536:	f04f 0000 	mov.w	r0, #0
 800153a:	f04f 0100 	mov.w	r1, #0
 800153e:	0159      	lsls	r1, r3, #5
 8001540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001544:	0150      	lsls	r0, r2, #5
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4621      	mov	r1, r4
 800154c:	1a51      	subs	r1, r2, r1
 800154e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001550:	4629      	mov	r1, r5
 8001552:	eb63 0301 	sbc.w	r3, r3, r1
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001564:	4649      	mov	r1, r9
 8001566:	018b      	lsls	r3, r1, #6
 8001568:	4641      	mov	r1, r8
 800156a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800156e:	4641      	mov	r1, r8
 8001570:	018a      	lsls	r2, r1, #6
 8001572:	4641      	mov	r1, r8
 8001574:	ebb2 0a01 	subs.w	sl, r2, r1
 8001578:	4649      	mov	r1, r9
 800157a:	eb63 0b01 	sbc.w	fp, r3, r1
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800158a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800158e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001592:	4692      	mov	sl, r2
 8001594:	469b      	mov	fp, r3
 8001596:	4623      	mov	r3, r4
 8001598:	eb1a 0303 	adds.w	r3, sl, r3
 800159c:	623b      	str	r3, [r7, #32]
 800159e:	462b      	mov	r3, r5
 80015a0:	eb4b 0303 	adc.w	r3, fp, r3
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015b2:	4629      	mov	r1, r5
 80015b4:	028b      	lsls	r3, r1, #10
 80015b6:	4621      	mov	r1, r4
 80015b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015bc:	4621      	mov	r1, r4
 80015be:	028a      	lsls	r2, r1, #10
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015c8:	2200      	movs	r2, #0
 80015ca:	673b      	str	r3, [r7, #112]	; 0x70
 80015cc:	677a      	str	r2, [r7, #116]	; 0x74
 80015ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015d2:	f7fe fe67 	bl	80002a4 <__aeabi_uldivmod>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4613      	mov	r3, r2
 80015dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015e0:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	3301      	adds	r3, #1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001602:	e0eb      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d06b      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161c:	4b32      	ldr	r3, [pc, #200]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	2200      	movs	r2, #0
 8001624:	66bb      	str	r3, [r7, #104]	; 0x68
 8001626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800162a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162e:	663b      	str	r3, [r7, #96]	; 0x60
 8001630:	2300      	movs	r3, #0
 8001632:	667b      	str	r3, [r7, #100]	; 0x64
 8001634:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001638:	4622      	mov	r2, r4
 800163a:	462b      	mov	r3, r5
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	0159      	lsls	r1, r3, #5
 8001646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800164a:	0150      	lsls	r0, r2, #5
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4621      	mov	r1, r4
 8001652:	1a51      	subs	r1, r2, r1
 8001654:	61b9      	str	r1, [r7, #24]
 8001656:	4629      	mov	r1, r5
 8001658:	eb63 0301 	sbc.w	r3, r3, r1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800166a:	4659      	mov	r1, fp
 800166c:	018b      	lsls	r3, r1, #6
 800166e:	4651      	mov	r1, sl
 8001670:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001674:	4651      	mov	r1, sl
 8001676:	018a      	lsls	r2, r1, #6
 8001678:	4651      	mov	r1, sl
 800167a:	ebb2 0801 	subs.w	r8, r2, r1
 800167e:	4659      	mov	r1, fp
 8001680:	eb63 0901 	sbc.w	r9, r3, r1
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001690:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001694:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001698:	4690      	mov	r8, r2
 800169a:	4699      	mov	r9, r3
 800169c:	4623      	mov	r3, r4
 800169e:	eb18 0303 	adds.w	r3, r8, r3
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	462b      	mov	r3, r5
 80016a6:	eb49 0303 	adc.w	r3, r9, r3
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016b8:	4629      	mov	r1, r5
 80016ba:	024b      	lsls	r3, r1, #9
 80016bc:	4621      	mov	r1, r4
 80016be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c2:	4621      	mov	r1, r4
 80016c4:	024a      	lsls	r2, r1, #9
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ce:	2200      	movs	r2, #0
 80016d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80016d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016d8:	f7fe fde4 	bl	80002a4 <__aeabi_uldivmod>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4613      	mov	r3, r2
 80016e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016e6:	e065      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x420>
 80016e8:	40023800 	.word	0x40023800
 80016ec:	00f42400 	.word	0x00f42400
 80016f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_GetSysClockFreq+0x458>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	099b      	lsrs	r3, r3, #6
 80016fa:	2200      	movs	r2, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	4611      	mov	r1, r2
 8001700:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001704:	653b      	str	r3, [r7, #80]	; 0x50
 8001706:	2300      	movs	r3, #0
 8001708:	657b      	str	r3, [r7, #84]	; 0x54
 800170a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800170e:	4642      	mov	r2, r8
 8001710:	464b      	mov	r3, r9
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0159      	lsls	r1, r3, #5
 800171c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001720:	0150      	lsls	r0, r2, #5
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4641      	mov	r1, r8
 8001728:	1a51      	subs	r1, r2, r1
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	4649      	mov	r1, r9
 800172e:	eb63 0301 	sbc.w	r3, r3, r1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001740:	4659      	mov	r1, fp
 8001742:	018b      	lsls	r3, r1, #6
 8001744:	4651      	mov	r1, sl
 8001746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174a:	4651      	mov	r1, sl
 800174c:	018a      	lsls	r2, r1, #6
 800174e:	4651      	mov	r1, sl
 8001750:	1a54      	subs	r4, r2, r1
 8001752:	4659      	mov	r1, fp
 8001754:	eb63 0501 	sbc.w	r5, r3, r1
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	00eb      	lsls	r3, r5, #3
 8001762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001766:	00e2      	lsls	r2, r4, #3
 8001768:	4614      	mov	r4, r2
 800176a:	461d      	mov	r5, r3
 800176c:	4643      	mov	r3, r8
 800176e:	18e3      	adds	r3, r4, r3
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	464b      	mov	r3, r9
 8001774:	eb45 0303 	adc.w	r3, r5, r3
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001786:	4629      	mov	r1, r5
 8001788:	028b      	lsls	r3, r1, #10
 800178a:	4621      	mov	r1, r4
 800178c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001790:	4621      	mov	r1, r4
 8001792:	028a      	lsls	r2, r1, #10
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800179c:	2200      	movs	r2, #0
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
 80017a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017a6:	f7fe fd7d 	bl	80002a4 <__aeabi_uldivmod>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4613      	mov	r3, r2
 80017b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_RCC_GetSysClockFreq+0x458>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0f1b      	lsrs	r3, r3, #28
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017d2:	e003      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	37b8      	adds	r7, #184	; 0xb8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	00f42400 	.word	0x00f42400

080017f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e28d      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8083 	beq.w	800191a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001814:	4b94      	ldr	r3, [pc, #592]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d019      	beq.n	8001854 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001820:	4b91      	ldr	r3, [pc, #580]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001828:	2b08      	cmp	r3, #8
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800182c:	4b8e      	ldr	r3, [pc, #568]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183a:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d112      	bne.n	800186c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b84      	ldr	r3, [pc, #528]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d05b      	beq.n	8001918 <HAL_RCC_OscConfig+0x124>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d157      	bne.n	8001918 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e25a      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x90>
 8001876:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7b      	ldr	r2, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xcc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0xb4>
 800188e:	4b76      	ldr	r3, [pc, #472]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a75      	ldr	r2, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b73      	ldr	r3, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a72      	ldr	r2, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xcc>
 80018a8:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6b      	ldr	r2, [pc, #428]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f990 	bl	8000bec <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff f98c 	bl	8000bec <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e21f      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xdc>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff f97c 	bl	8000bec <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff f978 	bl	8000bec <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e20b      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x104>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d06f      	beq.n	8001a06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d017      	beq.n	8001962 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800193a:	2b08      	cmp	r3, #8
 800193c:	d105      	bne.n	800194a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x186>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1d3      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4937      	ldr	r1, [pc, #220]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_RCC_OscConfig+0x278>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff f925 	bl	8000bec <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff f921 	bl	8000bec <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1b4      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4925      	ldr	r1, [pc, #148]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x278>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff f904 	bl	8000bec <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff f900 	bl	8000bec <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e193      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d036      	beq.n	8001a80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d016      	beq.n	8001a48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x27c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff f8e4 	bl	8000bec <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff f8e0 	bl	8000bec <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e173      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x234>
 8001a46:	e01b      	b.n	8001a80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_OscConfig+0x27c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f8cd 	bl	8000bec <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	e00e      	b.n	8001a74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff f8c9 	bl	8000bec <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d907      	bls.n	8001a74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e15c      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	42470000 	.word	0x42470000
 8001a70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b8a      	ldr	r3, [pc, #552]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ea      	bne.n	8001a56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8097 	beq.w	8001bbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b83      	ldr	r3, [pc, #524]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10f      	bne.n	8001abe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a7e      	ldr	r2, [pc, #504]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0x4b0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a75      	ldr	r2, [pc, #468]	; (8001ca4 <HAL_RCC_OscConfig+0x4b0>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f889 	bl	8000bec <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff f885 	bl	8000bec <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e118      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b6c      	ldr	r3, [pc, #432]	; (8001ca4 <HAL_RCC_OscConfig+0x4b0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x31e>
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a65      	ldr	r2, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	e01c      	b.n	8001b4c <HAL_RCC_OscConfig+0x358>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x340>
 8001b1a:	4b61      	ldr	r3, [pc, #388]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	4a60      	ldr	r2, [pc, #384]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6713      	str	r3, [r2, #112]	; 0x70
 8001b26:	4b5e      	ldr	r3, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0x358>
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a59      	ldr	r2, [pc, #356]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f023 0304 	bic.w	r3, r3, #4
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d015      	beq.n	8001b80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff f84a 	bl	8000bec <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f846 	bl	8000bec <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0d7      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0ee      	beq.n	8001b5c <HAL_RCC_OscConfig+0x368>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f834 	bl	8000bec <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff f830 	bl	8000bec <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e0c1      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9e:	4b40      	ldr	r3, [pc, #256]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1ee      	bne.n	8001b88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb0:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	4a3a      	ldr	r2, [pc, #232]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80ad 	beq.w	8001d20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d060      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d145      	bne.n	8001c66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x4b4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f804 	bl	8000bec <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f800 	bl	8000bec <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e093      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	071b      	lsls	r3, r3, #28
 8001c32:	491b      	ldr	r1, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x4b4>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7fe ffd5 	bl	8000bec <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe ffd1 	bl	8000bec <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e064      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x452>
 8001c64:	e05c      	b.n	8001d20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_RCC_OscConfig+0x4b4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7fe ffbe 	bl	8000bec <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7fe ffba 	bl	8000bec <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e04d      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x480>
 8001c92:	e045      	b.n	8001d20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e040      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_RCC_OscConfig+0x538>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d030      	beq.n	8001d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d129      	bne.n	8001d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d122      	bne.n	8001d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d119      	bne.n	8001d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d10f      	bne.n	8001d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e041      	b.n	8001dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f839 	bl	8001dce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 f9d8 	bl	8002124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d001      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e04e      	b.n	8001e9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d022      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e26:	d01d      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x80>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_TIM_Base_Start_IT+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d018      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00e      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d111      	bne.n	8001e88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d010      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	e007      	b.n	8001e98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40000c00 	.word	0x40000c00
 8001eb8:	40010400 	.word	0x40010400
 8001ebc:	40014000 	.word	0x40014000
 8001ec0:	40001800 	.word	0x40001800

08001ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0202 	mvn.w	r2, #2
 8001ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8ee 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8e0 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8f1 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0204 	mvn.w	r2, #4
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8c4 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8b6 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8c7 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0208 	mvn.w	r2, #8
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f89a 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f88c 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f89d 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0210 	mvn.w	r2, #16
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f870 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f862 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f873 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0201 	mvn.w	r2, #1
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fbfc 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f902 	bl	8002278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f838 	bl	8002110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0220 	mvn.w	r2, #32
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8cc 	bl	8002264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a40      	ldr	r2, [pc, #256]	; (8002238 <TIM_Base_SetConfig+0x114>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d00f      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3d      	ldr	r2, [pc, #244]	; (800223c <TIM_Base_SetConfig+0x118>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00b      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3c      	ldr	r2, [pc, #240]	; (8002240 <TIM_Base_SetConfig+0x11c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <TIM_Base_SetConfig+0x120>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <TIM_Base_SetConfig+0x124>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <TIM_Base_SetConfig+0x114>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002184:	d027      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2c      	ldr	r2, [pc, #176]	; (800223c <TIM_Base_SetConfig+0x118>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d023      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <TIM_Base_SetConfig+0x11c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <TIM_Base_SetConfig+0x120>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01b      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a29      	ldr	r2, [pc, #164]	; (8002248 <TIM_Base_SetConfig+0x124>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d017      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <TIM_Base_SetConfig+0x128>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <TIM_Base_SetConfig+0x12c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00f      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a26      	ldr	r2, [pc, #152]	; (8002254 <TIM_Base_SetConfig+0x130>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00b      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a25      	ldr	r2, [pc, #148]	; (8002258 <TIM_Base_SetConfig+0x134>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a24      	ldr	r2, [pc, #144]	; (800225c <TIM_Base_SetConfig+0x138>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <TIM_Base_SetConfig+0x13c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <TIM_Base_SetConfig+0x114>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0xf8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <TIM_Base_SetConfig+0x124>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d103      	bne.n	8002224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	615a      	str	r2, [r3, #20]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40010000 	.word	0x40010000
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40010400 	.word	0x40010400
 800224c:	40014000 	.word	0x40014000
 8002250:	40014400 	.word	0x40014400
 8002254:	40014800 	.word	0x40014800
 8002258:	40001800 	.word	0x40001800
 800225c:	40001c00 	.word	0x40001c00
 8002260:	40002000 	.word	0x40002000

08002264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 0208 	add.w	r2, r3, #8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 0208 	add.w	r2, r3, #8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f103 0208 	add.w	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6892      	ldr	r2, [r2, #8]
 8002344:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6852      	ldr	r2, [r2, #4]
 800234e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	d103      	bne.n	8002362 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002382:	b580      	push	{r7, lr}
 8002384:	b08c      	sub	sp, #48	; 0x30
 8002386:	af04      	add	r7, sp, #16
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 ff20 	bl	80031dc <pvPortMalloc>
 800239c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00e      	beq.n	80023c2 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023a4:	2058      	movs	r0, #88	; 0x58
 80023a6:	f000 ff19 	bl	80031dc <pvPortMalloc>
 80023aa:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
 80023b8:	e005      	b.n	80023c6 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f000 ffee 	bl	800339c <vPortFree>
 80023c0:	e001      	b.n	80023c6 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9303      	str	r3, [sp, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f80e 	bl	8002404 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023e8:	69f8      	ldr	r0, [r7, #28]
 80023ea:	f000 f8a1 	bl	8002530 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e002      	b.n	80023fa <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023fa:	69bb      	ldr	r3, [r7, #24]
    }
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	461a      	mov	r2, r3
 800241c:	21a5      	movs	r1, #165	; 0xa5
 800241e:	f003 f801 	bl	8005424 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800242c:	3b01      	subs	r3, #1
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f023 0307 	bic.w	r3, r3, #7
 800243a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	617b      	str	r3, [r7, #20]
    }
 8002458:	bf00      	nop
 800245a:	e7fe      	b.n	800245a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01f      	beq.n	80024a2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e012      	b.n	800248e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	7819      	ldrb	r1, [r3, #0]
 8002470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	3334      	adds	r3, #52	; 0x34
 8002478:	460a      	mov	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	3301      	adds	r3, #1
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	2b09      	cmp	r3, #9
 8002492:	d9e9      	bls.n	8002468 <prvInitialiseNewTask+0x64>
 8002494:	e000      	b.n	8002498 <prvInitialiseNewTask+0x94>
            {
                break;
 8002496:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024a0:	e003      	b.n	80024aa <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d901      	bls.n	80024b4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024b0:	2304      	movs	r3, #4
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024be:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	2200      	movs	r2, #0
 80024c4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	3304      	adds	r3, #4
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fefe 	bl	80022cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	3318      	adds	r3, #24
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fef9 	bl	80022cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024de:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	f1c3 0205 	rsb	r2, r3, #5
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	3350      	adds	r3, #80	; 0x50
 80024f4:	2204      	movs	r2, #4
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 ff93 	bl	8005424 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	3354      	adds	r3, #84	; 0x54
 8002502:	2201      	movs	r2, #1
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f002 ff8c 	bl	8005424 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	69b8      	ldr	r0, [r7, #24]
 8002512:	f000 fb8d 	bl	8002c30 <pxPortInitialiseStack>
 8002516:	4602      	mov	r2, r0
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002526:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af02      	add	r7, sp, #8
 8002536:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002538:	f000 fd24 	bl	8002f84 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800253c:	4b3b      	ldr	r3, [pc, #236]	; (800262c <prvAddNewTaskToReadyList+0xfc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	4a3a      	ldr	r2, [pc, #232]	; (800262c <prvAddNewTaskToReadyList+0xfc>)
 8002544:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002546:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <prvAddNewTaskToReadyList+0x100>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800254e:	4a38      	ldr	r2, [pc, #224]	; (8002630 <prvAddNewTaskToReadyList+0x100>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <prvAddNewTaskToReadyList+0xfc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d110      	bne.n	800257e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800255c:	f000 face 	bl	8002afc <prvInitialiseTaskLists>
 8002560:	e00d      	b.n	800257e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <prvAddNewTaskToReadyList+0x104>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <prvAddNewTaskToReadyList+0x100>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	429a      	cmp	r2, r3
 8002576:	d802      	bhi.n	800257e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002578:	4a2d      	ldr	r2, [pc, #180]	; (8002630 <prvAddNewTaskToReadyList+0x100>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <prvAddNewTaskToReadyList+0x108>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <prvAddNewTaskToReadyList+0x108>)
 8002586:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <prvAddNewTaskToReadyList+0x108>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <prvAddNewTaskToReadyList+0x94>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f002 fb35 	bl	8004c08 <SEGGER_SYSVIEW_OnTaskCreate>
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	461d      	mov	r5, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461c      	mov	r4, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	1ae3      	subs	r3, r4, r3
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	462b      	mov	r3, r5
 80025c0:	f001 f8ba 	bl	8003738 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 fba2 	bl	8004d10 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <prvAddNewTaskToReadyList+0x10c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <prvAddNewTaskToReadyList+0x10c>)
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <prvAddNewTaskToReadyList+0x110>)
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f7ff fe76 	bl	80022e6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025fa:	f000 fcf3 	bl	8002fe4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <prvAddNewTaskToReadyList+0x104>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <prvAddNewTaskToReadyList+0x100>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	429a      	cmp	r2, r3
 8002612:	d207      	bcs.n	8002624 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <prvAddNewTaskToReadyList+0x114>)
 8002616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	200001b4 	.word	0x200001b4
 8002630:	200000dc 	.word	0x200000dc
 8002634:	200001c0 	.word	0x200001c0
 8002638:	200001d0 	.word	0x200001d0
 800263c:	200001bc 	.word	0x200001bc
 8002640:	200000e0 	.word	0x200000e0
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <vTaskStartScheduler+0x98>)
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2300      	movs	r3, #0
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2300      	movs	r3, #0
 8002658:	2282      	movs	r2, #130	; 0x82
 800265a:	4922      	ldr	r1, [pc, #136]	; (80026e4 <vTaskStartScheduler+0x9c>)
 800265c:	4822      	ldr	r0, [pc, #136]	; (80026e8 <vTaskStartScheduler+0xa0>)
 800265e:	f7ff fe90 	bl	8002382 <xTaskCreate>
 8002662:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d124      	bne.n	80026b4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	60bb      	str	r3, [r7, #8]
    }
 800267c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <vTaskStartScheduler+0xa4>)
 8002680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002684:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <vTaskStartScheduler+0xa8>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <vTaskStartScheduler+0xac>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <vTaskStartScheduler+0xb0>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <vTaskStartScheduler+0x98>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d102      	bne.n	80026a4 <vTaskStartScheduler+0x5c>
 800269e:	f002 fa97 	bl	8004bd0 <SEGGER_SYSVIEW_OnIdle>
 80026a2:	e004      	b.n	80026ae <vTaskStartScheduler+0x66>
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <vTaskStartScheduler+0xb0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 faef 	bl	8004c8c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80026ae:	f000 fb49 	bl	8002d44 <xPortStartScheduler>
 80026b2:	e00e      	b.n	80026d2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ba:	d10a      	bne.n	80026d2 <vTaskStartScheduler+0x8a>
        __asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	607b      	str	r3, [r7, #4]
    }
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <vTaskStartScheduler+0xb4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200001d8 	.word	0x200001d8
 80026e4:	080059dc 	.word	0x080059dc
 80026e8:	08002acd 	.word	0x08002acd
 80026ec:	200001d4 	.word	0x200001d4
 80026f0:	200001c0 	.word	0x200001c0
 80026f4:	200001b8 	.word	0x200001b8
 80026f8:	200000dc 	.word	0x200000dc
 80026fc:	2000000c 	.word	0x2000000c

08002700 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <vTaskSuspendAll+0x18>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	4a03      	ldr	r2, [pc, #12]	; (8002718 <vTaskSuspendAll+0x18>)
 800270c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	200001dc 	.word	0x200001dc

0800271c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <xTaskResumeAll+0x11c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <xTaskResumeAll+0x2c>
        __asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	603b      	str	r3, [r7, #0]
    }
 8002744:	bf00      	nop
 8002746:	e7fe      	b.n	8002746 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002748:	f000 fc1c 	bl	8002f84 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <xTaskResumeAll+0x11c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3b01      	subs	r3, #1
 8002752:	4a39      	ldr	r2, [pc, #228]	; (8002838 <xTaskResumeAll+0x11c>)
 8002754:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <xTaskResumeAll+0x11c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d165      	bne.n	800282a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <xTaskResumeAll+0x120>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d061      	beq.n	800282a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002766:	e032      	b.n	80027ce <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <xTaskResumeAll+0x124>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3318      	adds	r3, #24
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fdda 	bl	800232e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fdd5 	bl	800232e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fac2 	bl	8004d10 <SEGGER_SYSVIEW_OnTaskStartReady>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2201      	movs	r2, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <xTaskResumeAll+0x128>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <xTaskResumeAll+0x128>)
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4a27      	ldr	r2, [pc, #156]	; (8002848 <xTaskResumeAll+0x12c>)
 80027ac:	441a      	add	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3304      	adds	r3, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f7ff fd96 	bl	80022e6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <xTaskResumeAll+0x130>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80027c8:	4b21      	ldr	r3, [pc, #132]	; (8002850 <xTaskResumeAll+0x134>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <xTaskResumeAll+0x124>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1c8      	bne.n	8002768 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80027dc:	f000 fa0c 	bl	8002bf8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <xTaskResumeAll+0x138>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d010      	beq.n	800280e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027ec:	f000 f848 	bl	8002880 <xTaskIncrementTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <xTaskResumeAll+0x134>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f1      	bne.n	80027ec <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <xTaskResumeAll+0x138>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <xTaskResumeAll+0x134>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002816:	2301      	movs	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <xTaskResumeAll+0x13c>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800282a:	f000 fbdb 	bl	8002fe4 <vPortExitCritical>

    return xAlreadyYielded;
 800282e:	68bb      	ldr	r3, [r7, #8]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200001dc 	.word	0x200001dc
 800283c:	200001b4 	.word	0x200001b4
 8002840:	20000174 	.word	0x20000174
 8002844:	200001bc 	.word	0x200001bc
 8002848:	200000e0 	.word	0x200000e0
 800284c:	200000dc 	.word	0x200000dc
 8002850:	200001c8 	.word	0x200001c8
 8002854:	200001c4 	.word	0x200001c4
 8002858:	e000ed04 	.word	0xe000ed04

0800285c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002862:	f000 fc7b 	bl	800315c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <xTaskGetTickCountFromISR+0x20>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002870:	683b      	ldr	r3, [r7, #0]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200001b8 	.word	0x200001b8

08002880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288a:	4b50      	ldr	r3, [pc, #320]	; (80029cc <xTaskIncrementTick+0x14c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8092 	bne.w	80029b8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <xTaskIncrementTick+0x150>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800289c:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <xTaskIncrementTick+0x150>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d120      	bne.n	80028ea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028a8:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <xTaskIncrementTick+0x48>
        __asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	603b      	str	r3, [r7, #0]
    }
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <xTaskIncrementTick+0x46>
 80028c8:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <xTaskIncrementTick+0x158>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4a40      	ldr	r2, [pc, #256]	; (80029d8 <xTaskIncrementTick+0x158>)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <xTaskIncrementTick+0x15c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	4a3e      	ldr	r2, [pc, #248]	; (80029dc <xTaskIncrementTick+0x15c>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	f000 f987 	bl	8002bf8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <xTaskIncrementTick+0x160>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d34c      	bcc.n	800298e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f4:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <xTaskIncrementTick+0x160>)
 8002900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002904:	601a      	str	r2, [r3, #0]
                    break;
 8002906:	e042      	b.n	800298e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002908:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <xTaskIncrementTick+0x154>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d203      	bcs.n	8002928 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002920:	4a2f      	ldr	r2, [pc, #188]	; (80029e0 <xTaskIncrementTick+0x160>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002926:	e032      	b.n	800298e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3304      	adds	r3, #4
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fcfe 	bl	800232e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3318      	adds	r3, #24
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fcf5 	bl	800232e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 f9e2 	bl	8004d10 <SEGGER_SYSVIEW_OnTaskStartReady>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2201      	movs	r2, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <xTaskIncrementTick+0x164>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <xTaskIncrementTick+0x164>)
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <xTaskIncrementTick+0x168>)
 800296c:	441a      	add	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3304      	adds	r3, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f7ff fcb6 	bl	80022e6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <xTaskIncrementTick+0x16c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	429a      	cmp	r2, r3
 8002986:	d3b5      	bcc.n	80028f4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002988:	2301      	movs	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800298c:	e7b2      	b.n	80028f4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <xTaskIncrementTick+0x16c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	4914      	ldr	r1, [pc, #80]	; (80029e8 <xTaskIncrementTick+0x168>)
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d901      	bls.n	80029aa <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <xTaskIncrementTick+0x170>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80029b2:	2301      	movs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e004      	b.n	80029c2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <xTaskIncrementTick+0x174>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <xTaskIncrementTick+0x174>)
 80029c0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029c2:	697b      	ldr	r3, [r7, #20]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200001dc 	.word	0x200001dc
 80029d0:	200001b8 	.word	0x200001b8
 80029d4:	2000016c 	.word	0x2000016c
 80029d8:	20000170 	.word	0x20000170
 80029dc:	200001cc 	.word	0x200001cc
 80029e0:	200001d4 	.word	0x200001d4
 80029e4:	200001bc 	.word	0x200001bc
 80029e8:	200000e0 	.word	0x200000e0
 80029ec:	200000dc 	.word	0x200000dc
 80029f0:	200001c8 	.word	0x200001c8
 80029f4:	200001c4 	.word	0x200001c4

080029f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029fe:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <vTaskSwitchContext+0xbc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <vTaskSwitchContext+0xc0>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a0c:	e04d      	b.n	8002aaa <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <vTaskSwitchContext+0xc0>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <vTaskSwitchContext+0xc4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f1c3 031f 	rsb	r3, r3, #31
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	4925      	ldr	r1, [pc, #148]	; (8002ac0 <vTaskSwitchContext+0xc8>)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	607b      	str	r3, [r7, #4]
    }
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <vTaskSwitchContext+0x5a>
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <vTaskSwitchContext+0xc8>)
 8002a60:	4413      	add	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	3308      	adds	r3, #8
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d104      	bne.n	8002a84 <vTaskSwitchContext+0x8c>
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <vTaskSwitchContext+0xcc>)
 8002a8c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <vTaskSwitchContext+0xcc>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <vTaskSwitchContext+0xd0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d102      	bne.n	8002aa0 <vTaskSwitchContext+0xa8>
 8002a9a:	f002 f899 	bl	8004bd0 <SEGGER_SYSVIEW_OnIdle>
}
 8002a9e:	e004      	b.n	8002aaa <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <vTaskSwitchContext+0xcc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 f8f1 	bl	8004c8c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200001dc 	.word	0x200001dc
 8002ab8:	200001c8 	.word	0x200001c8
 8002abc:	200001bc 	.word	0x200001bc
 8002ac0:	200000e0 	.word	0x200000e0
 8002ac4:	200000dc 	.word	0x200000dc
 8002ac8:	200001d8 	.word	0x200001d8

08002acc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ad4:	f000 f852 	bl	8002b7c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <prvIdleTask+0x28>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d9f9      	bls.n	8002ad4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <prvIdleTask+0x2c>)
 8002ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002af0:	e7f0      	b.n	8002ad4 <prvIdleTask+0x8>
 8002af2:	bf00      	nop
 8002af4:	200000e0 	.word	0x200000e0
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	e00c      	b.n	8002b22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <prvInitialiseTaskLists+0x60>)
 8002b14:	4413      	add	r3, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fbb8 	bl	800228c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d9ef      	bls.n	8002b08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <prvInitialiseTaskLists+0x64>)
 8002b2a:	f7ff fbaf 	bl	800228c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <prvInitialiseTaskLists+0x68>)
 8002b30:	f7ff fbac 	bl	800228c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b34:	480c      	ldr	r0, [pc, #48]	; (8002b68 <prvInitialiseTaskLists+0x6c>)
 8002b36:	f7ff fba9 	bl	800228c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b3a:	480c      	ldr	r0, [pc, #48]	; (8002b6c <prvInitialiseTaskLists+0x70>)
 8002b3c:	f7ff fba6 	bl	800228c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b40:	480b      	ldr	r0, [pc, #44]	; (8002b70 <prvInitialiseTaskLists+0x74>)
 8002b42:	f7ff fba3 	bl	800228c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <prvInitialiseTaskLists+0x78>)
 8002b48:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <prvInitialiseTaskLists+0x64>)
 8002b4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <prvInitialiseTaskLists+0x7c>)
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <prvInitialiseTaskLists+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200000e0 	.word	0x200000e0
 8002b60:	20000144 	.word	0x20000144
 8002b64:	20000158 	.word	0x20000158
 8002b68:	20000174 	.word	0x20000174
 8002b6c:	20000188 	.word	0x20000188
 8002b70:	200001a0 	.word	0x200001a0
 8002b74:	2000016c 	.word	0x2000016c
 8002b78:	20000170 	.word	0x20000170

08002b7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b82:	e019      	b.n	8002bb8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b84:	f000 f9fe 	bl	8002f84 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <prvCheckTasksWaitingTermination+0x50>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fbca 	bl	800232e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <prvCheckTasksWaitingTermination+0x54>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <prvCheckTasksWaitingTermination+0x54>)
 8002ba2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <prvCheckTasksWaitingTermination+0x58>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <prvCheckTasksWaitingTermination+0x58>)
 8002bac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002bae:	f000 fa19 	bl	8002fe4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f810 	bl	8002bd8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <prvCheckTasksWaitingTermination+0x58>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e1      	bne.n	8002b84 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000188 	.word	0x20000188
 8002bd0:	200001b4 	.word	0x200001b4
 8002bd4:	2000019c 	.word	0x2000019c

08002bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fbd9 	bl	800339c <vPortFree>
                vPortFree( pxTCB );
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fbd6 	bl	800339c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <prvResetNextTaskUnblockTime+0x30>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <prvResetNextTaskUnblockTime+0x34>)
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c0e:	e005      	b.n	8002c1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <prvResetNextTaskUnblockTime+0x30>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <prvResetNextTaskUnblockTime+0x34>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000016c 	.word	0x2000016c
 8002c2c:	200001d4 	.word	0x200001d4

08002c30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3b04      	subs	r3, #4
 8002c4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0201 	bic.w	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b04      	subs	r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <pxPortInitialiseStack+0x64>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3b14      	subs	r3, #20
 8002c6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b04      	subs	r3, #4
 8002c76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f06f 0202 	mvn.w	r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b20      	subs	r3, #32
 8002c84:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	08002c99 	.word	0x08002c99

08002c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <prvTaskExitError+0x54>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002caa:	d00a      	beq.n	8002cc2 <prvTaskExitError+0x2a>
        __asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	60fb      	str	r3, [r7, #12]
    }
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <prvTaskExitError+0x28>
        __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	60bb      	str	r3, [r7, #8]
    }
 8002cd4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002cd6:	bf00      	nop
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0fc      	beq.n	8002cd8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20000010 	.word	0x20000010

08002cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <pxCurrentTCBConst2>)
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	6808      	ldr	r0, [r1, #0]
 8002cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfa:	f380 8809 	msr	PSP, r0
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f380 8811 	msr	BASEPRI, r0
 8002d0a:	4770      	bx	lr
 8002d0c:	f3af 8000 	nop.w

08002d10 <pxCurrentTCBConst2>:
 8002d10:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop

08002d18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d18:	4808      	ldr	r0, [pc, #32]	; (8002d3c <prvPortStartFirstTask+0x24>)
 8002d1a:	6800      	ldr	r0, [r0, #0]
 8002d1c:	6800      	ldr	r0, [r0, #0]
 8002d1e:	f380 8808 	msr	MSP, r0
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f380 8814 	msr	CONTROL, r0
 8002d2a:	b662      	cpsie	i
 8002d2c:	b661      	cpsie	f
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	df00      	svc	0
 8002d38:	bf00      	nop
 8002d3a:	0000      	.short	0x0000
 8002d3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop

08002d44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <xPortStartScheduler+0x120>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a46      	ldr	r2, [pc, #280]	; (8002e68 <xPortStartScheduler+0x124>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d10a      	bne.n	8002d6a <xPortStartScheduler+0x26>
        __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	613b      	str	r3, [r7, #16]
    }
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <xPortStartScheduler+0x120>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <xPortStartScheduler+0x128>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10a      	bne.n	8002d8a <xPortStartScheduler+0x46>
        __asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	60fb      	str	r3, [r7, #12]
    }
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d8a:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <xPortStartScheduler+0x12c>)
 8002d8c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <xPortStartScheduler+0x130>)
 8002db0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002db2:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <xPortStartScheduler+0x134>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002db8:	e009      	b.n	8002dce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <xPortStartScheduler+0x134>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <xPortStartScheduler+0x134>)
 8002dc2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b80      	cmp	r3, #128	; 0x80
 8002dd8:	d0ef      	beq.n	8002dba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <xPortStartScheduler+0x134>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d00a      	beq.n	8002dfc <xPortStartScheduler+0xb8>
        __asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	60bb      	str	r3, [r7, #8]
    }
 8002df8:	bf00      	nop
 8002dfa:	e7fe      	b.n	8002dfa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <xPortStartScheduler+0x134>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <xPortStartScheduler+0x134>)
 8002e04:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <xPortStartScheduler+0x134>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <xPortStartScheduler+0x134>)
 8002e10:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e32:	f000 f963 	bl	80030fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <xPortStartScheduler+0x13c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e3c:	f000 f982 	bl	8003144 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <xPortStartScheduler+0x140>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <xPortStartScheduler+0x140>)
 8002e46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e4c:	f7ff ff64 	bl	8002d18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e50:	f7ff fdd2 	bl	80029f8 <vTaskSwitchContext>
    prvTaskExitError();
 8002e54:	f7ff ff20 	bl	8002c98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	410fc271 	.word	0x410fc271
 8002e6c:	410fc270 	.word	0x410fc270
 8002e70:	e000e400 	.word	0xe000e400
 8002e74:	200001e0 	.word	0x200001e0
 8002e78:	200001e4 	.word	0x200001e4
 8002e7c:	e000ed20 	.word	0xe000ed20
 8002e80:	20000010 	.word	0x20000010
 8002e84:	e000ef34 	.word	0xe000ef34

08002e88 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <vInitPrioGroupValue+0xe4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a37      	ldr	r2, [pc, #220]	; (8002f70 <vInitPrioGroupValue+0xe8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10a      	bne.n	8002eae <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	613b      	str	r3, [r7, #16]
    }
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <vInitPrioGroupValue+0xe4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <vInitPrioGroupValue+0xec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10a      	bne.n	8002ece <vInitPrioGroupValue+0x46>
        __asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60fb      	str	r3, [r7, #12]
    }
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ece:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <vInitPrioGroupValue+0xf0>)
 8002ed0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <vInitPrioGroupValue+0xf4>)
 8002ef4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002efc:	e009      	b.n	8002f12 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f06:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d0ef      	beq.n	8002efe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d00a      	beq.n	8002f40 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	60bb      	str	r3, [r7, #8]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f48:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f54:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	410fc271 	.word	0x410fc271
 8002f74:	410fc270 	.word	0x410fc270
 8002f78:	e000e400 	.word	0xe000e400
 8002f7c:	200001e0 	.word	0x200001e0
 8002f80:	200001e4 	.word	0x200001e4

08002f84 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	607b      	str	r3, [r7, #4]
    }
 8002f9c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <vPortEnterCritical+0x58>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <vPortEnterCritical+0x58>)
 8002fa6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <vPortEnterCritical+0x58>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10f      	bne.n	8002fd0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <vPortEnterCritical+0x5c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	603b      	str	r3, [r7, #0]
    }
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <vPortEnterCritical+0x4a>
    }
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	20000010 	.word	0x20000010
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <vPortExitCritical+0x50>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <vPortExitCritical+0x24>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	607b      	str	r3, [r7, #4]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <vPortExitCritical+0x50>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3b01      	subs	r3, #1
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <vPortExitCritical+0x50>)
 8003010:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <vPortExitCritical+0x50>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <vPortExitCritical+0x42>
 800301a:	2300      	movs	r3, #0
 800301c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003024:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000010 	.word	0x20000010
	...

08003040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003040:	f3ef 8009 	mrs	r0, PSP
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <pxCurrentTCBConst>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f01e 0f10 	tst.w	lr, #16
 8003050:	bf08      	it	eq
 8003052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305a:	6010      	str	r0, [r2, #0]
 800305c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003064:	f380 8811 	msr	BASEPRI, r0
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f7ff fcc2 	bl	80029f8 <vTaskSwitchContext>
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f380 8811 	msr	BASEPRI, r0
 800307c:	bc09      	pop	{r0, r3}
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	6808      	ldr	r0, [r1, #0]
 8003082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003086:	f01e 0f10 	tst.w	lr, #16
 800308a:	bf08      	it	eq
 800308c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003090:	f380 8809 	msr	PSP, r0
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	f3af 8000 	nop.w

080030a0 <pxCurrentTCBConst>:
 80030a0:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop

080030a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
        __asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	607b      	str	r3, [r7, #4]
    }
 80030c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80030c2:	f001 fd0b 	bl	8004adc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030c6:	f7ff fbdb 	bl	8002880 <xTaskIncrementTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80030d0:	f001 fd62 	bl	8004b98 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <SysTick_Handler+0x50>)
 80030d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e001      	b.n	80030e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80030de:	f001 fd3f 	bl	8004b60 <SEGGER_SYSVIEW_RecordExitISR>
 80030e2:	2300      	movs	r3, #0
 80030e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f383 8811 	msr	BASEPRI, r3
    }
 80030ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <vPortSetupTimerInterrupt+0x38>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <vPortSetupTimerInterrupt+0x3c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <vPortSetupTimerInterrupt+0x40>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <vPortSetupTimerInterrupt+0x44>)
 800311a:	3b01      	subs	r3, #1
 800311c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010
 8003134:	e000e018 	.word	0xe000e018
 8003138:	20000000 	.word	0x20000000
 800313c:	10624dd3 	.word	0x10624dd3
 8003140:	e000e014 	.word	0xe000e014

08003144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003154 <vPortEnableVFP+0x10>
 8003148:	6801      	ldr	r1, [r0, #0]
 800314a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800314e:	6001      	str	r1, [r0, #0]
 8003150:	4770      	bx	lr
 8003152:	0000      	.short	0x0000
 8003154:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop

0800315c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003162:	f3ef 8305 	mrs	r3, IPSR
 8003166:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d914      	bls.n	8003198 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <vPortValidateInterruptPriority+0x70>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <vPortValidateInterruptPriority+0x74>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	7afa      	ldrb	r2, [r7, #11]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20a      	bcs.n	8003198 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
    }
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <vPortValidateInterruptPriority+0x78>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <vPortValidateInterruptPriority+0x7c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d90a      	bls.n	80031be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	603b      	str	r3, [r7, #0]
    }
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <vPortValidateInterruptPriority+0x60>
    }
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e3f0 	.word	0xe000e3f0
 80031d0:	200001e0 	.word	0x200001e0
 80031d4:	e000ed0c 	.word	0xe000ed0c
 80031d8:	200001e4 	.word	0x200001e4

080031dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031e8:	f7ff fa8a 	bl	8002700 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <pvPortMalloc+0x1a8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031f4:	f000 f934 	bl	8003460 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031f8:	4b63      	ldr	r3, [pc, #396]	; (8003388 <pvPortMalloc+0x1ac>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 80a7 	bne.w	8003354 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02d      	beq.n	8003268 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800320c:	2208      	movs	r2, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d227      	bcs.n	8003268 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003218:	2208      	movs	r2, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	2b00      	cmp	r3, #0
 8003228:	d021      	beq.n	800326e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	3308      	adds	r3, #8
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d214      	bcs.n	8003262 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f023 0307 	bic.w	r3, r3, #7
 800323e:	3308      	adds	r3, #8
 8003240:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <pvPortMalloc+0x92>
        __asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	617b      	str	r3, [r7, #20]
    }
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003266:	e002      	b.n	800326e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	e000      	b.n	8003270 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800326e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06e      	beq.n	8003354 <pvPortMalloc+0x178>
 8003276:	4b45      	ldr	r3, [pc, #276]	; (800338c <pvPortMalloc+0x1b0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d869      	bhi.n	8003354 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003280:	4b43      	ldr	r3, [pc, #268]	; (8003390 <pvPortMalloc+0x1b4>)
 8003282:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <pvPortMalloc+0x1b4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800328a:	e004      	b.n	8003296 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d903      	bls.n	80032a8 <pvPortMalloc+0xcc>
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f1      	bne.n	800328c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <pvPortMalloc+0x1a8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d050      	beq.n	8003354 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2208      	movs	r2, #8
 80032b8:	4413      	add	r3, r2
 80032ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	2308      	movs	r3, #8
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d91f      	bls.n	8003314 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <pvPortMalloc+0x120>
        __asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	613b      	str	r3, [r7, #16]
    }
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad2      	subs	r2, r2, r3
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800330e:	69b8      	ldr	r0, [r7, #24]
 8003310:	f000 f908 	bl	8003524 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <pvPortMalloc+0x1b0>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	4a1b      	ldr	r2, [pc, #108]	; (800338c <pvPortMalloc+0x1b0>)
 8003320:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <pvPortMalloc+0x1b0>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <pvPortMalloc+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d203      	bcs.n	8003336 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <pvPortMalloc+0x1b0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <pvPortMalloc+0x1b8>)
 8003334:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <pvPortMalloc+0x1ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	431a      	orrs	r2, r3
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <pvPortMalloc+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <pvPortMalloc+0x1bc>)
 8003352:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003354:	f7ff f9e2 	bl	800271c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <pvPortMalloc+0x19c>
        __asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	60fb      	str	r3, [r7, #12]
    }
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <pvPortMalloc+0x19a>
    return pvReturn;
 8003378:	69fb      	ldr	r3, [r7, #28]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20012df0 	.word	0x20012df0
 8003388:	20012e04 	.word	0x20012e04
 800338c:	20012df4 	.word	0x20012df4
 8003390:	20012de8 	.word	0x20012de8
 8003394:	20012df8 	.word	0x20012df8
 8003398:	20012dfc 	.word	0x20012dfc

0800339c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d04d      	beq.n	800344a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80033ae:	2308      	movs	r3, #8
 80033b0:	425b      	negs	r3, r3
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4413      	add	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <vPortFree+0xb8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <vPortFree+0x44>
        __asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60fb      	str	r3, [r7, #12]
    }
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <vPortFree+0x62>
        __asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60bb      	str	r3, [r7, #8]
    }
 80033fa:	bf00      	nop
 80033fc:	e7fe      	b.n	80033fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <vPortFree+0xb8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01e      	beq.n	800344a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11a      	bne.n	800344a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <vPortFree+0xb8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003424:	f7ff f96c 	bl	8002700 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <vPortFree+0xbc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4413      	add	r3, r2
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <vPortFree+0xbc>)
 8003434:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003436:	6938      	ldr	r0, [r7, #16]
 8003438:	f000 f874 	bl	8003524 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <vPortFree+0xc0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a06      	ldr	r2, [pc, #24]	; (800345c <vPortFree+0xc0>)
 8003444:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003446:	f7ff f969 	bl	800271c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20012e04 	.word	0x20012e04
 8003458:	20012df4 	.word	0x20012df4
 800345c:	20012e00 	.word	0x20012e00

08003460 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003466:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800346a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <prvHeapInit+0xac>)
 800346e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3307      	adds	r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0307 	bic.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <prvHeapInit+0xac>)
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <prvHeapInit+0xb0>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <prvHeapInit+0xb0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80034ac:	2208      	movs	r2, #8
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a15      	ldr	r2, [pc, #84]	; (8003514 <prvHeapInit+0xb4>)
 80034c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <prvHeapInit+0xb4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <prvHeapInit+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <prvHeapInit+0xb4>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <prvHeapInit+0xb8>)
 80034ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <prvHeapInit+0xbc>)
 80034f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <prvHeapInit+0xc0>)
 80034fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034fe:	601a      	str	r2, [r3, #0]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	200001e8 	.word	0x200001e8
 8003510:	20012de8 	.word	0x20012de8
 8003514:	20012df0 	.word	0x20012df0
 8003518:	20012df8 	.word	0x20012df8
 800351c:	20012df4 	.word	0x20012df4
 8003520:	20012e04 	.word	0x20012e04

08003524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <prvInsertBlockIntoFreeList+0xac>)
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e002      	b.n	8003538 <prvInsertBlockIntoFreeList+0x14>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d8f7      	bhi.n	8003532 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d108      	bne.n	8003566 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	441a      	add	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d118      	bne.n	80035ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d00d      	beq.n	80035a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e008      	b.n	80035b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <prvInsertBlockIntoFreeList+0xb0>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e003      	b.n	80035b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d002      	beq.n	80035c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20012de8 	.word	0x20012de8
 80035d4:	20012df0 	.word	0x20012df0

080035d8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <_cbSendSystemDesc+0x14>)
 80035de:	f001 fa27 	bl	8004a30 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80035e2:	4803      	ldr	r0, [pc, #12]	; (80035f0 <_cbSendSystemDesc+0x18>)
 80035e4:	f001 fa24 	bl	8004a30 <SEGGER_SYSVIEW_SendSysDesc>
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	080059e4 	.word	0x080059e4
 80035f0:	08005a20 	.word	0x08005a20

080035f4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <SEGGER_SYSVIEW_Conf+0x20>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <SEGGER_SYSVIEW_Conf+0x20>)
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <SEGGER_SYSVIEW_Conf+0x24>)
 8003602:	4a06      	ldr	r2, [pc, #24]	; (800361c <SEGGER_SYSVIEW_Conf+0x28>)
 8003604:	f000 fe9a 	bl	800433c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003608:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800360c:	f000 feda 	bl	80043c4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000000 	.word	0x20000000
 8003618:	080035d9 	.word	0x080035d9
 800361c:	08005abc 	.word	0x08005abc

08003620 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003626:	2300      	movs	r3, #0
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	e033      	b.n	8003694 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800362c:	491e      	ldr	r1, [pc, #120]	; (80036a8 <_cbSendTaskList+0x88>)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	491a      	ldr	r1, [pc, #104]	; (80036a8 <_cbSendTaskList+0x88>)
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3304      	adds	r3, #4
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	4c16      	ldr	r4, [pc, #88]	; (80036a8 <_cbSendTaskList+0x88>)
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4423      	add	r3, r4
 800365c:	3308      	adds	r3, #8
 800365e:	681c      	ldr	r4, [r3, #0]
 8003660:	4d11      	ldr	r5, [pc, #68]	; (80036a8 <_cbSendTaskList+0x88>)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	442b      	add	r3, r5
 800366e:	330c      	adds	r3, #12
 8003670:	681d      	ldr	r5, [r3, #0]
 8003672:	4e0d      	ldr	r6, [pc, #52]	; (80036a8 <_cbSendTaskList+0x88>)
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4433      	add	r3, r6
 8003680:	3310      	adds	r3, #16
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	462b      	mov	r3, r5
 8003688:	4622      	mov	r2, r4
 800368a:	f000 f8bd 	bl	8003808 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3301      	adds	r3, #1
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <_cbSendTaskList+0x8c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d3c6      	bcc.n	800362c <_cbSendTaskList+0xc>
  }
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20012e08 	.word	0x20012e08
 80036ac:	20012ea8 	.word	0x20012ea8

080036b0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80036b8:	f7ff f8d0 	bl	800285c <xTaskGetTickCountFromISR>
 80036bc:	4603      	mov	r3, r0
 80036be:	2200      	movs	r2, #0
 80036c0:	469a      	mov	sl, r3
 80036c2:	4693      	mov	fp, r2
 80036c4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80036c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	f04f 0a00 	mov.w	sl, #0
 80036d4:	f04f 0b00 	mov.w	fp, #0
 80036d8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80036dc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80036e0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80036e4:	4652      	mov	r2, sl
 80036e6:	465b      	mov	r3, fp
 80036e8:	1a14      	subs	r4, r2, r0
 80036ea:	eb63 0501 	sbc.w	r5, r3, r1
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	00ab      	lsls	r3, r5, #2
 80036f8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80036fc:	00a2      	lsls	r2, r4, #2
 80036fe:	4614      	mov	r4, r2
 8003700:	461d      	mov	r5, r3
 8003702:	eb14 0800 	adds.w	r8, r4, r0
 8003706:	eb45 0901 	adc.w	r9, r5, r1
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800371e:	4690      	mov	r8, r2
 8003720:	4699      	mov	r9, r3
 8003722:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003726:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003738 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003746:	2205      	movs	r2, #5
 8003748:	492b      	ldr	r1, [pc, #172]	; (80037f8 <SYSVIEW_AddTask+0xc0>)
 800374a:	68b8      	ldr	r0, [r7, #8]
 800374c:	f001 fe5a 	bl	8005404 <memcmp>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04b      	beq.n	80037ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b07      	cmp	r3, #7
 800375c:	d903      	bls.n	8003766 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800375e:	4828      	ldr	r0, [pc, #160]	; (8003800 <SYSVIEW_AddTask+0xc8>)
 8003760:	f001 fbfe 	bl	8004f60 <SEGGER_SYSVIEW_Warn>
    return;
 8003764:	e044      	b.n	80037f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003766:	4b25      	ldr	r3, [pc, #148]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4926      	ldr	r1, [pc, #152]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4921      	ldr	r1, [pc, #132]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3304      	adds	r3, #4
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	491b      	ldr	r1, [pc, #108]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3308      	adds	r3, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4916      	ldr	r1, [pc, #88]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	330c      	adds	r3, #12
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4910      	ldr	r1, [pc, #64]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3310      	adds	r3, #16
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a08      	ldr	r2, [pc, #32]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f80e 	bl	8003808 <SYSVIEW_SendTaskInfo>
 80037ec:	e000      	b.n	80037f0 <SYSVIEW_AddTask+0xb8>
    return;
 80037ee:	bf00      	nop

}
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	08005a30 	.word	0x08005a30
 80037fc:	20012ea8 	.word	0x20012ea8
 8003800:	08005a38 	.word	0x08005a38
 8003804:	20012e08 	.word	0x20012e08

08003808 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	2214      	movs	r2, #20
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fe00 	bl	8005424 <memset>
  TaskInfo.TaskID     = TaskID;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	4618      	mov	r0, r3
 800383e:	f000 ffff 	bl	8004840 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003842:	bf00      	nop
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <_DoInit+0xa0>)
 8003854:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003856:	22a8      	movs	r2, #168	; 0xa8
 8003858:	2100      	movs	r1, #0
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	f001 fde2 	bl	8005424 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2203      	movs	r2, #3
 8003864:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2203      	movs	r2, #3
 800386a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <_DoInit+0xa4>)
 8003870:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <_DoInit+0xa8>)
 8003876:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2200      	movs	r2, #0
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <_DoInit+0xa4>)
 8003896:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <_DoInit+0xac>)
 800389c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2210      	movs	r2, #16
 80038a2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2200      	movs	r2, #0
 80038ae:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80038b6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	e00c      	b.n	80038da <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1c3 030f 	rsb	r3, r3, #15
 80038c6:	4a0d      	ldr	r2, [pc, #52]	; (80038fc <_DoInit+0xb0>)
 80038c8:	5cd1      	ldrb	r1, [r2, r3]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	460a      	mov	r2, r1
 80038d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3301      	adds	r3, #1
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d9ef      	bls.n	80038c0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80038e0:	f3bf 8f5f 	dmb	sy
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20012eac 	.word	0x20012eac
 80038f0:	08005a88 	.word	0x08005a88
 80038f4:	20012f54 	.word	0x20012f54
 80038f8:	20013354 	.word	0x20013354
 80038fc:	08005ac4 	.word	0x08005ac4

08003900 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800390c:	2300      	movs	r3, #0
 800390e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	429a      	cmp	r2, r3
 8003922:	d905      	bls.n	8003930 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	e007      	b.n	8003940 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	1acb      	subs	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3b01      	subs	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	4293      	cmp	r3, r2
 800394c:	bf28      	it	cs
 800394e:	4613      	movcs	r3, r2
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4293      	cmp	r3, r2
 8003958:	bf28      	it	cs
 800395a:	4613      	movcs	r3, r2
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	6978      	ldr	r0, [r7, #20]
 800396e:	f001 fdc1 	bl	80054f4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003972:	6a3a      	ldr	r2, [r7, #32]
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	4413      	add	r3, r2
 8003978:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	4413      	add	r3, r2
 8003980:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	4413      	add	r3, r2
 8003990:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	429a      	cmp	r2, r3
 800399a:	d101      	bne.n	80039a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1b2      	bne.n	8003916 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b088      	sub	sp, #32
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d911      	bls.n	8003a02 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	6938      	ldr	r0, [r7, #16]
 80039ee:	f001 fd81 	bl	80054f4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	441a      	add	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003a00:	e01f      	b.n	8003a42 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	6938      	ldr	r0, [r7, #16]
 8003a16:	f001 fd6d 	bl	80054f4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4619      	mov	r1, r3
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f001 fd5e 	bl	80054f4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a38:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	60da      	str	r2, [r3, #12]
}
 8003a42:	bf00      	nop
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003a4a:	b480      	push	{r7}
 8003a4c:	b087      	sub	sp, #28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d808      	bhi.n	8003a78 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad2      	subs	r2, r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	3b01      	subs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e004      	b.n	8003a82 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003a82:	697b      	ldr	r3, [r7, #20]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08c      	sub	sp, #48	; 0x30
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003a9c:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <SEGGER_RTT_ReadNoLock+0x1e>
 8003aaa:	f7ff fecf 	bl	800384c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	3360      	adds	r3, #96	; 0x60
 8003aba:	4a37      	ldr	r2, [pc, #220]	; (8003b98 <SEGGER_RTT_ReadNoLock+0x108>)
 8003abc:	4413      	add	r3, r2
 8003abe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d92b      	bls.n	8003b34 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4293      	cmp	r3, r2
 8003aec:	bf28      	it	cs
 8003aee:	4613      	movcs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	4413      	add	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	6939      	ldr	r1, [r7, #16]
 8003b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b02:	f001 fcf7 	bl	80054f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4413      	add	r3, r2
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4413      	add	r3, r2
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d101      	bne.n	8003b34 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4293      	cmp	r3, r2
 8003b42:	bf28      	it	cs
 8003b44:	4613      	movcs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d019      	beq.n	8003b82 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	4413      	add	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	6939      	ldr	r1, [r7, #16]
 8003b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b5e:	f001 fcc9 	bl	80054f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4413      	add	r3, r2
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4413      	add	r3, r2
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	4413      	add	r3, r2
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b8c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3730      	adds	r7, #48	; 0x30
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20012eac 	.word	0x20012eac

08003b9c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d029      	beq.n	8003c1a <SEGGER_RTT_WriteNoLock+0x7e>
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d82e      	bhi.n	8003c28 <SEGGER_RTT_WriteNoLock+0x8c>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <SEGGER_RTT_WriteNoLock+0x38>
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d013      	beq.n	8003bfa <SEGGER_RTT_WriteNoLock+0x5e>
 8003bd2:	e029      	b.n	8003c28 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bd4:	6978      	ldr	r0, [r7, #20]
 8003bd6:	f7ff ff38 	bl	8003a4a <_GetAvailWriteSpace>
 8003bda:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d202      	bcs.n	8003bea <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003be8:	e021      	b.n	8003c2e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff fee1 	bl	80039ba <_WriteNoCheck>
    break;
 8003bf8:	e019      	b.n	8003c2e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f7ff ff25 	bl	8003a4a <_GetAvailWriteSpace>
 8003c00:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4293      	cmp	r3, r2
 8003c08:	bf28      	it	cs
 8003c0a:	4613      	movcs	r3, r2
 8003c0c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff fed1 	bl	80039ba <_WriteNoCheck>
    break;
 8003c18:	e009      	b.n	8003c2e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	6978      	ldr	r0, [r7, #20]
 8003c20:	f7ff fe6e 	bl	8003900 <_WriteBlocking>
 8003c24:	61f8      	str	r0, [r7, #28]
    break;
 8003c26:	e002      	b.n	8003c2e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
    break;
 8003c2c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20012eac 	.word	0x20012eac

08003c3c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <SEGGER_RTT_Write+0x48>)
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <SEGGER_RTT_Write+0x1e>
 8003c56:	f7ff fdf9 	bl	800384c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c5e:	f04f 0120 	mov.w	r1, #32
 8003c62:	f381 8811 	msr	BASEPRI, r1
 8003c66:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff ff95 	bl	8003b9c <SEGGER_RTT_WriteNoLock>
 8003c72:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003c7a:	697b      	ldr	r3, [r7, #20]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20012eac 	.word	0x20012eac

08003c88 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c96:	4b3d      	ldr	r3, [pc, #244]	; (8003d8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003ca4:	f7ff fdd2 	bl	800384c <_DoInit>
  SEGGER_RTT_LOCK();
 8003ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8003cac:	f04f 0120 	mov.w	r1, #32
 8003cb0:	f381 8811 	msr	BASEPRI, r1
 8003cb4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cb6:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003cb8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	3304      	adds	r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	dbeb      	blt.n	8003cbe <SEGGER_RTT_AllocUpBuffer+0x36>
 8003ce6:	e000      	b.n	8003cea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003ce8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	da3f      	bge.n	8003d74 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003cf4:	6939      	ldr	r1, [r7, #16]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	440b      	add	r3, r1
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d08:	6939      	ldr	r1, [r7, #16]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	3304      	adds	r3, #4
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d1e:	6939      	ldr	r1, [r7, #16]
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3320      	adds	r3, #32
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003d32:	6939      	ldr	r1, [r7, #16]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	4613      	mov	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	3328      	adds	r3, #40	; 0x28
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d46:	6939      	ldr	r1, [r7, #16]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	3324      	adds	r3, #36	; 0x24
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d5a:	6939      	ldr	r1, [r7, #16]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	332c      	adds	r3, #44	; 0x2c
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d6e:	f3bf 8f5f 	dmb	sy
 8003d72:	e002      	b.n	8003d7a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d78:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003d80:	69fb      	ldr	r3, [r7, #28]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20012eac 	.word	0x20012eac

08003d90 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003dac:	f7ff fd4e 	bl	800384c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003db0:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003db2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d82c      	bhi.n	8003e14 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003dba:	f3ef 8311 	mrs	r3, BASEPRI
 8003dbe:	f04f 0120 	mov.w	r1, #32
 8003dc2:	f381 8811 	msr	BASEPRI, r1
 8003dc6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	3360      	adds	r3, #96	; 0x60
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00e      	beq.n	8003dfe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e02:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e04:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	e002      	b.n	8003e1a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3728      	adds	r7, #40	; 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20012eac 	.word	0x20012eac

08003e28 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	60fa      	str	r2, [r7, #12]
 8003e3e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b80      	cmp	r3, #128	; 0x80
 8003e44:	d90a      	bls.n	8003e5c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003e4a:	e007      	b.n	8003e5c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	1c53      	adds	r3, r2, #1
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1c59      	adds	r1, r3, #1
 8003e56:	60f9      	str	r1, [r7, #12]
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1e5a      	subs	r2, r3, #1
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <_EncodeStr+0x46>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ee      	bne.n	8003e4c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3307      	adds	r3, #7
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <_HandleIncomingPacket+0xd8>)
 8003ea8:	7e1b      	ldrb	r3, [r3, #24]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	1cfb      	adds	r3, r7, #3
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7ff fded 	bl	8003a90 <SEGGER_RTT_ReadNoLock>
 8003eb6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d057      	beq.n	8003f6e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d031      	beq.n	8003f28 <_HandleIncomingPacket+0x88>
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	dc40      	bgt.n	8003f4a <_HandleIncomingPacket+0xaa>
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	dc15      	bgt.n	8003ef8 <_HandleIncomingPacket+0x58>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	dd3c      	ble.n	8003f4a <_HandleIncomingPacket+0xaa>
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d839      	bhi.n	8003f4a <_HandleIncomingPacket+0xaa>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <_HandleIncomingPacket+0x3c>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003eff 	.word	0x08003eff
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f0b 	.word	0x08003f0b
 8003ee8:	08003f11 	.word	0x08003f11
 8003eec:	08003f17 	.word	0x08003f17
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8003efa:	d033      	beq.n	8003f64 <_HandleIncomingPacket+0xc4>
 8003efc:	e025      	b.n	8003f4a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003efe:	f000 fb25 	bl	800454c <SEGGER_SYSVIEW_Start>
      break;
 8003f02:	e034      	b.n	8003f6e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f04:	f000 fbdc 	bl	80046c0 <SEGGER_SYSVIEW_Stop>
      break;
 8003f08:	e031      	b.n	8003f6e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f0a:	f000 fdb5 	bl	8004a78 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f0e:	e02e      	b.n	8003f6e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f10:	f000 fd7a 	bl	8004a08 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f14:	e02b      	b.n	8003f6e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f16:	f000 fbf9 	bl	800470c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f1a:	e028      	b.n	8003f6e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f1c:	f000 ffe2 	bl	8004ee4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003f20:	e025      	b.n	8003f6e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003f22:	f000 ffc1 	bl	8004ea8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003f26:	e022      	b.n	8003f6e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <_HandleIncomingPacket+0xd8>)
 8003f2a:	7e1b      	ldrb	r3, [r3, #24]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	1cfb      	adds	r3, r7, #3
 8003f30:	2201      	movs	r2, #1
 8003f32:	4619      	mov	r1, r3
 8003f34:	f7ff fdac 	bl	8003a90 <SEGGER_RTT_ReadNoLock>
 8003f38:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 ff26 	bl	8004d94 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f48:	e00e      	b.n	8003f68 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da0c      	bge.n	8003f6c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <_HandleIncomingPacket+0xd8>)
 8003f54:	7e1b      	ldrb	r3, [r3, #24]
 8003f56:	4618      	mov	r0, r3
 8003f58:	1cfb      	adds	r3, r7, #3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7ff fd97 	bl	8003a90 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f62:	e003      	b.n	8003f6c <_HandleIncomingPacket+0xcc>
      break;
 8003f64:	bf00      	nop
 8003f66:	e002      	b.n	8003f6e <_HandleIncomingPacket+0xce>
      break;
 8003f68:	bf00      	nop
 8003f6a:	e000      	b.n	8003f6e <_HandleIncomingPacket+0xce>
      break;
 8003f6c:	bf00      	nop
    }
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	2001436c 	.word	0x2001436c

08003f7c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08c      	sub	sp, #48	; 0x30
 8003f80:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f82:	2301      	movs	r3, #1
 8003f84:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	3301      	adds	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f96:	e00b      	b.n	8003fb0 <_TrySendOverflowPacket+0x34>
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	09db      	lsrs	r3, r3, #7
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb4:	d8f0      	bhi.n	8003f98 <_TrySendOverflowPacket+0x1c>
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003fc6:	4b25      	ldr	r3, [pc, #148]	; (800405c <_TrySendOverflowPacket+0xe0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003fcc:	4b22      	ldr	r3, [pc, #136]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	e00b      	b.n	8003ff8 <_TrySendOverflowPacket+0x7c>
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	1c59      	adds	r1, r3, #1
 8003fe8:	6279      	str	r1, [r7, #36]	; 0x24
 8003fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	09db      	lsrs	r3, r3, #7
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8003ffc:	d8f0      	bhi.n	8003fe0 <_TrySendOverflowPacket+0x64>
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	627a      	str	r2, [r7, #36]	; 0x24
 8004004:	6a3a      	ldr	r2, [r7, #32]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	4618      	mov	r0, r3
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	461a      	mov	r2, r3
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	4619      	mov	r1, r3
 8004020:	f7fc f8f6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004024:	4603      	mov	r3, r0
 8004026:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800402e:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	3b01      	subs	r3, #1
 800403a:	b2da      	uxtb	r2, r3
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e004      	b.n	800404c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	4a03      	ldr	r2, [pc, #12]	; (8004058 <_TrySendOverflowPacket+0xdc>)
 800404a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800404c:	693b      	ldr	r3, [r7, #16]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3730      	adds	r7, #48	; 0x30
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	2001436c 	.word	0x2001436c
 800405c:	e0001004 	.word	0xe0001004

08004060 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800406c:	4b98      	ldr	r3, [pc, #608]	; (80042d0 <_SendPacket+0x270>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d010      	beq.n	8004096 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004074:	4b96      	ldr	r3, [pc, #600]	; (80042d0 <_SendPacket+0x270>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 812d 	beq.w	80042d8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800407e:	4b94      	ldr	r3, [pc, #592]	; (80042d0 <_SendPacket+0x270>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d109      	bne.n	800409a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004086:	f7ff ff79 	bl	8003f7c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800408a:	4b91      	ldr	r3, [pc, #580]	; (80042d0 <_SendPacket+0x270>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b01      	cmp	r3, #1
 8004090:	f040 8124 	bne.w	80042dc <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004094:	e001      	b.n	800409a <_SendPacket+0x3a>
    goto Send;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <_SendPacket+0x3c>
Send:
 800409a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b1f      	cmp	r3, #31
 80040a0:	d809      	bhi.n	80040b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80040a2:	4b8b      	ldr	r3, [pc, #556]	; (80042d0 <_SendPacket+0x270>)
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f040 8115 	bne.w	80042e0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b17      	cmp	r3, #23
 80040ba:	d807      	bhi.n	80040cc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b01      	subs	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e0c4      	b.n	8004256 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b7f      	cmp	r3, #127	; 0x7f
 80040d8:	d912      	bls.n	8004100 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	09da      	lsrs	r2, r3, #7
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	3a01      	subs	r2, #1
 80040f2:	60fa      	str	r2, [r7, #12]
 80040f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e006      	b.n	800410e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b7e      	cmp	r3, #126	; 0x7e
 8004112:	d807      	bhi.n	8004124 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3b01      	subs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e098      	b.n	8004256 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412a:	d212      	bcs.n	8004152 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	09da      	lsrs	r2, r3, #7
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3b01      	subs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	3a01      	subs	r2, #1
 8004144:	60fa      	str	r2, [r7, #12]
 8004146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e081      	b.n	8004256 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004158:	d21d      	bcs.n	8004196 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0b9a      	lsrs	r2, r3, #14
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b01      	subs	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	09db      	lsrs	r3, r3, #7
 800416e:	b2db      	uxtb	r3, r3
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	3a01      	subs	r2, #1
 8004174:	60fa      	str	r2, [r7, #12]
 8004176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800417a:	b2da      	uxtb	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	3a01      	subs	r2, #1
 8004188:	60fa      	str	r2, [r7, #12]
 800418a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e05f      	b.n	8004256 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419c:	d228      	bcs.n	80041f0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0d5a      	lsrs	r2, r3, #21
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0b9b      	lsrs	r3, r3, #14
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	3a01      	subs	r2, #1
 80041b8:	60fa      	str	r2, [r7, #12]
 80041ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	09db      	lsrs	r3, r3, #7
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	3a01      	subs	r2, #1
 80041ce:	60fa      	str	r2, [r7, #12]
 80041d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	3a01      	subs	r2, #1
 80041e2:	60fa      	str	r2, [r7, #12]
 80041e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e032      	b.n	8004256 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0f1a      	lsrs	r2, r3, #28
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	0d5b      	lsrs	r3, r3, #21
 8004204:	b2db      	uxtb	r3, r3
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	3a01      	subs	r2, #1
 800420a:	60fa      	str	r2, [r7, #12]
 800420c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0b9b      	lsrs	r3, r3, #14
 800421a:	b2db      	uxtb	r3, r3
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	3a01      	subs	r2, #1
 8004220:	60fa      	str	r2, [r7, #12]
 8004222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	09db      	lsrs	r3, r3, #7
 8004230:	b2db      	uxtb	r3, r3
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	3a01      	subs	r2, #1
 8004236:	60fa      	str	r2, [r7, #12]
 8004238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	3a01      	subs	r2, #1
 800424a:	60fa      	str	r2, [r7, #12]
 800424c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004256:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <_SendPacket+0x274>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <_SendPacket+0x270>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	623b      	str	r3, [r7, #32]
 800426e:	e00b      	b.n	8004288 <_SendPacket+0x228>
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	b2da      	uxtb	r2, r3
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	1c59      	adds	r1, r3, #1
 8004278:	6279      	str	r1, [r7, #36]	; 0x24
 800427a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	09db      	lsrs	r3, r3, #7
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2b7f      	cmp	r3, #127	; 0x7f
 800428c:	d8f0      	bhi.n	8004270 <_SendPacket+0x210>
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	627a      	str	r2, [r7, #36]	; 0x24
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <_SendPacket+0x270>)
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	4618      	mov	r0, r3
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	68f9      	ldr	r1, [r7, #12]
 80042ae:	f7fb ffaf 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042b2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042ba:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <_SendPacket+0x270>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	60d3      	str	r3, [r2, #12]
 80042c0:	e00f      	b.n	80042e2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80042c2:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <_SendPacket+0x270>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4b01      	ldr	r3, [pc, #4]	; (80042d0 <_SendPacket+0x270>)
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e008      	b.n	80042e2 <_SendPacket+0x282>
 80042d0:	2001436c 	.word	0x2001436c
 80042d4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80042d8:	bf00      	nop
 80042da:	e002      	b.n	80042e2 <_SendPacket+0x282>
      goto SendDone;
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <_SendPacket+0x282>
      goto SendDone;
 80042e0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <_SendPacket+0x2d4>)
 80042e4:	7e1b      	ldrb	r3, [r3, #24]
 80042e6:	4619      	mov	r1, r3
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <_SendPacket+0x2d8>)
 80042ea:	460b      	mov	r3, r1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	440b      	add	r3, r1
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	336c      	adds	r3, #108	; 0x6c
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <_SendPacket+0x2d4>)
 80042fa:	7e1b      	ldrb	r3, [r3, #24]
 80042fc:	4618      	mov	r0, r3
 80042fe:	490e      	ldr	r1, [pc, #56]	; (8004338 <_SendPacket+0x2d8>)
 8004300:	4603      	mov	r3, r0
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4403      	add	r3, r0
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	3370      	adds	r3, #112	; 0x70
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d00b      	beq.n	800432a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <_SendPacket+0x2d4>)
 8004314:	789b      	ldrb	r3, [r3, #2]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <_SendPacket+0x2d4>)
 800431c:	2201      	movs	r2, #1
 800431e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004320:	f7ff fdbe 	bl	8003ea0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <_SendPacket+0x2d4>)
 8004326:	2200      	movs	r2, #0
 8004328:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800432a:	bf00      	nop
 800432c:	3728      	adds	r7, #40	; 0x28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	2001436c 	.word	0x2001436c
 8004338:	20012eac 	.word	0x20012eac

0800433c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800434a:	2300      	movs	r3, #0
 800434c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004350:	4917      	ldr	r1, [pc, #92]	; (80043b0 <SEGGER_SYSVIEW_Init+0x74>)
 8004352:	4818      	ldr	r0, [pc, #96]	; (80043b4 <SEGGER_SYSVIEW_Init+0x78>)
 8004354:	f7ff fc98 	bl	8003c88 <SEGGER_RTT_AllocUpBuffer>
 8004358:	4603      	mov	r3, r0
 800435a:	b2da      	uxtb	r2, r3
 800435c:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800435e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004362:	785a      	ldrb	r2, [r3, #1]
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004366:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800436a:	7e1b      	ldrb	r3, [r3, #24]
 800436c:	4618      	mov	r0, r3
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2308      	movs	r3, #8
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <SEGGER_SYSVIEW_Init+0x80>)
 8004376:	490f      	ldr	r1, [pc, #60]	; (80043b4 <SEGGER_SYSVIEW_Init+0x78>)
 8004378:	f7ff fd0a 	bl	8003d90 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <SEGGER_SYSVIEW_Init+0x84>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004388:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800439c:	4a06      	ldr	r2, [pc, #24]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <SEGGER_SYSVIEW_Init+0x7c>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20013364 	.word	0x20013364
 80043b4:	08005a9c 	.word	0x08005a9c
 80043b8:	2001436c 	.word	0x2001436c
 80043bc:	20014364 	.word	0x20014364
 80043c0:	e0001004 	.word	0xe0001004

080043c4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6113      	str	r3, [r2, #16]
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2001436c 	.word	0x2001436c

080043e4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80043ec:	f3ef 8311 	mrs	r3, BASEPRI
 80043f0:	f04f 0120 	mov.w	r1, #32
 80043f4:	f381 8811 	msr	BASEPRI, r1
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	4808      	ldr	r0, [pc, #32]	; (800441c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80043fc:	f7ff fd44 	bl	8003e88 <_PreparePacket>
 8004400:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	68b8      	ldr	r0, [r7, #8]
 8004408:	f7ff fe2a 	bl	8004060 <_SendPacket>
  RECORD_END();
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f383 8811 	msr	BASEPRI, r3
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2001439c 	.word	0x2001439c

08004420 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800442a:	f3ef 8311 	mrs	r3, BASEPRI
 800442e:	f04f 0120 	mov.w	r1, #32
 8004432:	f381 8811 	msr	BASEPRI, r1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	4816      	ldr	r0, [pc, #88]	; (8004494 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800443a:	f7ff fd25 	bl	8003e88 <_PreparePacket>
 800443e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e00b      	b.n	8004466 <SEGGER_SYSVIEW_RecordU32+0x46>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	1c59      	adds	r1, r3, #1
 8004456:	61f9      	str	r1, [r7, #28]
 8004458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	09db      	lsrs	r3, r3, #7
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b7f      	cmp	r3, #127	; 0x7f
 800446a:	d8f0      	bhi.n	800444e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	61fa      	str	r2, [r7, #28]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	6938      	ldr	r0, [r7, #16]
 8004482:	f7ff fded 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f383 8811 	msr	BASEPRI, r3
}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	2001439c 	.word	0x2001439c

08004498 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80044a4:	f3ef 8311 	mrs	r3, BASEPRI
 80044a8:	f04f 0120 	mov.w	r1, #32
 80044ac:	f381 8811 	msr	BASEPRI, r1
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	4825      	ldr	r0, [pc, #148]	; (8004548 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80044b4:	f7ff fce8 	bl	8003e88 <_PreparePacket>
 80044b8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	e00b      	b.n	80044e0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	1c59      	adds	r1, r3, #1
 80044d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	09db      	lsrs	r3, r3, #7
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	2b7f      	cmp	r3, #127	; 0x7f
 80044e4:	d8f0      	bhi.n	80044c8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	623b      	str	r3, [r7, #32]
 80044fe:	e00b      	b.n	8004518 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	1c59      	adds	r1, r3, #1
 8004508:	6279      	str	r1, [r7, #36]	; 0x24
 800450a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	09db      	lsrs	r3, r3, #7
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	2b7f      	cmp	r3, #127	; 0x7f
 800451c:	d8f0      	bhi.n	8004500 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	627a      	str	r2, [r7, #36]	; 0x24
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6979      	ldr	r1, [r7, #20]
 8004532:	69b8      	ldr	r0, [r7, #24]
 8004534:	f7ff fd94 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f383 8811 	msr	BASEPRI, r3
}
 800453e:	bf00      	nop
 8004540:	3730      	adds	r7, #48	; 0x30
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	2001439c 	.word	0x2001439c

0800454c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	; 0x30
 8004550:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004552:	4b58      	ldr	r3, [pc, #352]	; (80046b4 <SEGGER_SYSVIEW_Start+0x168>)
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004558:	f3ef 8311 	mrs	r3, BASEPRI
 800455c:	f04f 0120 	mov.w	r1, #32
 8004560:	f381 8811 	msr	BASEPRI, r1
 8004564:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004566:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <SEGGER_SYSVIEW_Start+0x168>)
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	220a      	movs	r2, #10
 800456c:	4952      	ldr	r1, [pc, #328]	; (80046b8 <SEGGER_SYSVIEW_Start+0x16c>)
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb fe4e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800457a:	200a      	movs	r0, #10
 800457c:	f7ff ff32 	bl	80043e4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004580:	f3ef 8311 	mrs	r3, BASEPRI
 8004584:	f04f 0120 	mov.w	r1, #32
 8004588:	f381 8811 	msr	BASEPRI, r1
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	484b      	ldr	r0, [pc, #300]	; (80046bc <SEGGER_SYSVIEW_Start+0x170>)
 8004590:	f7ff fc7a 	bl	8003e88 <_PreparePacket>
 8004594:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459e:	4b45      	ldr	r3, [pc, #276]	; (80046b4 <SEGGER_SYSVIEW_Start+0x168>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a4:	e00b      	b.n	80045be <SEGGER_SYSVIEW_Start+0x72>
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	1c59      	adds	r1, r3, #1
 80045ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	09db      	lsrs	r3, r3, #7
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	2b7f      	cmp	r3, #127	; 0x7f
 80045c2:	d8f0      	bhi.n	80045a6 <SEGGER_SYSVIEW_Start+0x5a>
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <SEGGER_SYSVIEW_Start+0x168>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	e00b      	b.n	80045f8 <SEGGER_SYSVIEW_Start+0xac>
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	6279      	str	r1, [r7, #36]	; 0x24
 80045ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	09db      	lsrs	r3, r3, #7
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b7f      	cmp	r3, #127	; 0x7f
 80045fc:	d8f0      	bhi.n	80045e0 <SEGGER_SYSVIEW_Start+0x94>
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	627a      	str	r2, [r7, #36]	; 0x24
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <SEGGER_SYSVIEW_Start+0x168>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	e00b      	b.n	8004632 <SEGGER_SYSVIEW_Start+0xe6>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	61f9      	str	r1, [r7, #28]
 8004624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b7f      	cmp	r3, #127	; 0x7f
 8004636:	d8f0      	bhi.n	800461a <SEGGER_SYSVIEW_Start+0xce>
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	61fa      	str	r2, [r7, #28]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	e00b      	b.n	800466a <SEGGER_SYSVIEW_Start+0x11e>
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	1c59      	adds	r1, r3, #1
 800465a:	6179      	str	r1, [r7, #20]
 800465c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	09db      	lsrs	r3, r3, #7
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b7f      	cmp	r3, #127	; 0x7f
 800466e:	d8f0      	bhi.n	8004652 <SEGGER_SYSVIEW_Start+0x106>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	617a      	str	r2, [r7, #20]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004680:	2218      	movs	r2, #24
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff fceb 	bl	8004060 <_SendPacket>
      RECORD_END();
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <SEGGER_SYSVIEW_Start+0x168>)
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <SEGGER_SYSVIEW_Start+0x168>)
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800469e:	f000 f9eb 	bl	8004a78 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80046a2:	f000 f9b1 	bl	8004a08 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80046a6:	f000 fc1d 	bl	8004ee4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80046aa:	bf00      	nop
 80046ac:	3730      	adds	r7, #48	; 0x30
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	2001436c 	.word	0x2001436c
 80046b8:	08005ad8 	.word	0x08005ad8
 80046bc:	2001439c 	.word	0x2001439c

080046c0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046c6:	f3ef 8311 	mrs	r3, BASEPRI
 80046ca:	f04f 0120 	mov.w	r1, #32
 80046ce:	f381 8811 	msr	BASEPRI, r1
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	480b      	ldr	r0, [pc, #44]	; (8004704 <SEGGER_SYSVIEW_Stop+0x44>)
 80046d6:	f7ff fbd7 	bl	8003e88 <_PreparePacket>
 80046da:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <SEGGER_SYSVIEW_Stop+0x48>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80046e4:	220b      	movs	r2, #11
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	6838      	ldr	r0, [r7, #0]
 80046ea:	f7ff fcb9 	bl	8004060 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <SEGGER_SYSVIEW_Stop+0x48>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f383 8811 	msr	BASEPRI, r3
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2001439c 	.word	0x2001439c
 8004708:	2001436c 	.word	0x2001436c

0800470c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004712:	f3ef 8311 	mrs	r3, BASEPRI
 8004716:	f04f 0120 	mov.w	r1, #32
 800471a:	f381 8811 	msr	BASEPRI, r1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	4845      	ldr	r0, [pc, #276]	; (8004838 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004722:	f7ff fbb1 	bl	8003e88 <_PreparePacket>
 8004726:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004730:	4b42      	ldr	r3, [pc, #264]	; (800483c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
 8004736:	e00b      	b.n	8004750 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	09db      	lsrs	r3, r3, #7
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	2b7f      	cmp	r3, #127	; 0x7f
 8004754:	d8f0      	bhi.n	8004738 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800475c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
 800476a:	4b34      	ldr	r3, [pc, #208]	; (800483c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	623b      	str	r3, [r7, #32]
 8004770:	e00b      	b.n	800478a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	1c59      	adds	r1, r3, #1
 800477a:	6279      	str	r1, [r7, #36]	; 0x24
 800477c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	09db      	lsrs	r3, r3, #7
 8004788:	623b      	str	r3, [r7, #32]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2b7f      	cmp	r3, #127	; 0x7f
 800478e:	d8f0      	bhi.n	8004772 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	627a      	str	r2, [r7, #36]	; 0x24
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	4b25      	ldr	r3, [pc, #148]	; (800483c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e00b      	b.n	80047c4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	61f9      	str	r1, [r7, #28]
 80047b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	09db      	lsrs	r3, r3, #7
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b7f      	cmp	r3, #127	; 0x7f
 80047c8:	d8f0      	bhi.n	80047ac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	61fa      	str	r2, [r7, #28]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e00b      	b.n	80047fc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	6179      	str	r1, [r7, #20]
 80047ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004800:	d8f0      	bhi.n	80047e4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	617a      	str	r2, [r7, #20]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004812:	2218      	movs	r2, #24
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	68b8      	ldr	r0, [r7, #8]
 8004818:	f7ff fc22 	bl	8004060 <_SendPacket>
  RECORD_END();
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	4798      	blx	r3
  }
}
 8004830:	bf00      	nop
 8004832:	3730      	adds	r7, #48	; 0x30
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	2001439c 	.word	0x2001439c
 800483c:	2001436c 	.word	0x2001436c

08004840 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b092      	sub	sp, #72	; 0x48
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004848:	f3ef 8311 	mrs	r3, BASEPRI
 800484c:	f04f 0120 	mov.w	r1, #32
 8004850:	f381 8811 	msr	BASEPRI, r1
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	486a      	ldr	r0, [pc, #424]	; (8004a00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004858:	f7ff fb16 	bl	8003e88 <_PreparePacket>
 800485c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	643b      	str	r3, [r7, #64]	; 0x40
 8004872:	e00b      	b.n	800488c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004876:	b2da      	uxtb	r2, r3
 8004878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	6479      	str	r1, [r7, #68]	; 0x44
 800487e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004888:	09db      	lsrs	r3, r3, #7
 800488a:	643b      	str	r3, [r7, #64]	; 0x40
 800488c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488e:	2b7f      	cmp	r3, #127	; 0x7f
 8004890:	d8f0      	bhi.n	8004874 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	647a      	str	r2, [r7, #68]	; 0x44
 8004898:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ac:	e00b      	b.n	80048c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b4:	1c59      	adds	r1, r3, #1
 80048b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80048b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	09db      	lsrs	r3, r3, #7
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ca:	d8f0      	bhi.n	80048ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80048cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	4619      	mov	r1, r3
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fa9f 	bl	8003e28 <_EncodeStr>
 80048ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80048ec:	2209      	movs	r2, #9
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	6938      	ldr	r0, [r7, #16]
 80048f2:	f7ff fbb5 	bl	8004060 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	633b      	str	r3, [r7, #48]	; 0x30
 800490a:	e00b      	b.n	8004924 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	b2da      	uxtb	r2, r3
 8004910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004912:	1c59      	adds	r1, r3, #1
 8004914:	6379      	str	r1, [r7, #52]	; 0x34
 8004916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	09db      	lsrs	r3, r3, #7
 8004922:	633b      	str	r3, [r7, #48]	; 0x30
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	2b7f      	cmp	r3, #127	; 0x7f
 8004928:	d8f0      	bhi.n	800490c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800492a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	637a      	str	r2, [r7, #52]	; 0x34
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
 8004944:	e00b      	b.n	800495e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	b2da      	uxtb	r2, r3
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	1c59      	adds	r1, r3, #1
 800494e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	09db      	lsrs	r3, r3, #7
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	2b7f      	cmp	r3, #127	; 0x7f
 8004962:	d8f0      	bhi.n	8004946 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800496a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	623b      	str	r3, [r7, #32]
 800497e:	e00b      	b.n	8004998 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	6279      	str	r1, [r7, #36]	; 0x24
 800498a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	09db      	lsrs	r3, r3, #7
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	2b7f      	cmp	r3, #127	; 0x7f
 800499c:	d8f0      	bhi.n	8004980 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	627a      	str	r2, [r7, #36]	; 0x24
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e00b      	b.n	80049d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	1c59      	adds	r1, r3, #1
 80049c0:	61f9      	str	r1, [r7, #28]
 80049c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	09db      	lsrs	r3, r3, #7
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b7f      	cmp	r3, #127	; 0x7f
 80049d4:	d8f0      	bhi.n	80049b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	61fa      	str	r2, [r7, #28]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80049e6:	2215      	movs	r2, #21
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	6938      	ldr	r0, [r7, #16]
 80049ec:	f7ff fb38 	bl	8004060 <_SendPacket>
  RECORD_END();
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f383 8811 	msr	BASEPRI, r3
}
 80049f6:	bf00      	nop
 80049f8:	3748      	adds	r7, #72	; 0x48
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2001439c 	.word	0x2001439c
 8004a04:	2001436c 	.word	0x2001436c

08004a08 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004a1e:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4798      	blx	r3
  }
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2001436c 	.word	0x2001436c

08004a30 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a38:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3c:	f04f 0120 	mov.w	r1, #32
 8004a40:	f381 8811 	msr	BASEPRI, r1
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	480b      	ldr	r0, [pc, #44]	; (8004a74 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004a48:	f7ff fa1e 	bl	8003e88 <_PreparePacket>
 8004a4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	6938      	ldr	r0, [r7, #16]
 8004a54:	f7ff f9e8 	bl	8003e28 <_EncodeStr>
 8004a58:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004a5a:	220e      	movs	r2, #14
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	6938      	ldr	r0, [r7, #16]
 8004a60:	f7ff fafe 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f383 8811 	msr	BASEPRI, r3
}
 8004a6a:	bf00      	nop
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2001439c 	.word	0x2001439c

08004a78 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004a78:	b590      	push	{r4, r7, lr}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004a7e:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01a      	beq.n	8004abc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4798      	blx	r3
 8004a98:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a9c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	000a      	movs	r2, r1
 8004aac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004aae:	4613      	mov	r3, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	200d      	movs	r0, #13
 8004ab6:	f7ff fcef 	bl	8004498 <SEGGER_SYSVIEW_RecordU32x2>
 8004aba:	e006      	b.n	8004aca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	200c      	movs	r0, #12
 8004ac4:	f7ff fcac 	bl	8004420 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	2001436c 	.word	0x2001436c
 8004ad8:	e0001004 	.word	0xe0001004

08004adc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae6:	f04f 0120 	mov.w	r1, #32
 8004aea:	f381 8811 	msr	BASEPRI, r1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	4819      	ldr	r0, [pc, #100]	; (8004b58 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004af2:	f7ff f9c9 	bl	8003e88 <_PreparePacket>
 8004af6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004afc:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b04:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e00b      	b.n	8004b28 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	6179      	str	r1, [r7, #20]
 8004b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	09db      	lsrs	r3, r3, #7
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b2c:	d8f0      	bhi.n	8004b10 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	617a      	str	r2, [r7, #20]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004b3e:	2202      	movs	r2, #2
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	68b8      	ldr	r0, [r7, #8]
 8004b44:	f7ff fa8c 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f383 8811 	msr	BASEPRI, r3
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2001439c 	.word	0x2001439c
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b66:	f3ef 8311 	mrs	r3, BASEPRI
 8004b6a:	f04f 0120 	mov.w	r1, #32
 8004b6e:	f381 8811 	msr	BASEPRI, r1
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	4807      	ldr	r0, [pc, #28]	; (8004b94 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004b76:	f7ff f987 	bl	8003e88 <_PreparePacket>
 8004b7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	6838      	ldr	r0, [r7, #0]
 8004b82:	f7ff fa6d 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f383 8811 	msr	BASEPRI, r3
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2001439c 	.word	0x2001439c

08004b98 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba2:	f04f 0120 	mov.w	r1, #32
 8004ba6:	f381 8811 	msr	BASEPRI, r1
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	4807      	ldr	r0, [pc, #28]	; (8004bcc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004bae:	f7ff f96b 	bl	8003e88 <_PreparePacket>
 8004bb2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004bb4:	2212      	movs	r2, #18
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	6838      	ldr	r0, [r7, #0]
 8004bba:	f7ff fa51 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f383 8811 	msr	BASEPRI, r3
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	2001439c 	.word	0x2001439c

08004bd0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bda:	f04f 0120 	mov.w	r1, #32
 8004bde:	f381 8811 	msr	BASEPRI, r1
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	4807      	ldr	r0, [pc, #28]	; (8004c04 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004be6:	f7ff f94f 	bl	8003e88 <_PreparePacket>
 8004bea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004bec:	2211      	movs	r2, #17
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	6838      	ldr	r0, [r7, #0]
 8004bf2:	f7ff fa35 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f383 8811 	msr	BASEPRI, r3
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	2001439c 	.word	0x2001439c

08004c08 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c10:	f3ef 8311 	mrs	r3, BASEPRI
 8004c14:	f04f 0120 	mov.w	r1, #32
 8004c18:	f381 8811 	msr	BASEPRI, r1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	4819      	ldr	r0, [pc, #100]	; (8004c84 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004c20:	f7ff f932 	bl	8003e88 <_PreparePacket>
 8004c24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c2a:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e00b      	b.n	8004c56 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	1c59      	adds	r1, r3, #1
 8004c46:	61f9      	str	r1, [r7, #28]
 8004c48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	09db      	lsrs	r3, r3, #7
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b7f      	cmp	r3, #127	; 0x7f
 8004c5a:	d8f0      	bhi.n	8004c3e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	61fa      	str	r2, [r7, #28]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	6938      	ldr	r0, [r7, #16]
 8004c72:	f7ff f9f5 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f383 8811 	msr	BASEPRI, r3
}
 8004c7c:	bf00      	nop
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	2001439c 	.word	0x2001439c
 8004c88:	2001436c 	.word	0x2001436c

08004c8c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c94:	f3ef 8311 	mrs	r3, BASEPRI
 8004c98:	f04f 0120 	mov.w	r1, #32
 8004c9c:	f381 8811 	msr	BASEPRI, r1
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	4819      	ldr	r0, [pc, #100]	; (8004d08 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ca4:	f7ff f8f0 	bl	8003e88 <_PreparePacket>
 8004ca8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cae:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e00b      	b.n	8004cda <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	1c59      	adds	r1, r3, #1
 8004cca:	61f9      	str	r1, [r7, #28]
 8004ccc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	09db      	lsrs	r3, r3, #7
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8004cde:	d8f0      	bhi.n	8004cc2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	61fa      	str	r2, [r7, #28]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	6938      	ldr	r0, [r7, #16]
 8004cf6:	f7ff f9b3 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f383 8811 	msr	BASEPRI, r3
}
 8004d00:	bf00      	nop
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	2001439c 	.word	0x2001439c
 8004d0c:	2001436c 	.word	0x2001436c

08004d10 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d18:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1c:	f04f 0120 	mov.w	r1, #32
 8004d20:	f381 8811 	msr	BASEPRI, r1
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	4819      	ldr	r0, [pc, #100]	; (8004d8c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004d28:	f7ff f8ae 	bl	8003e88 <_PreparePacket>
 8004d2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d32:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e00b      	b.n	8004d5e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	1c59      	adds	r1, r3, #1
 8004d4e:	61f9      	str	r1, [r7, #28]
 8004d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	09db      	lsrs	r3, r3, #7
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b7f      	cmp	r3, #127	; 0x7f
 8004d62:	d8f0      	bhi.n	8004d46 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	61fa      	str	r2, [r7, #28]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004d74:	2206      	movs	r2, #6
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	6938      	ldr	r0, [r7, #16]
 8004d7a:	f7ff f971 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f383 8811 	msr	BASEPRI, r3
}
 8004d84:	bf00      	nop
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	2001439c 	.word	0x2001439c
 8004d90:	2001436c 	.word	0x2001436c

08004d94 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004d9e:	4b40      	ldr	r3, [pc, #256]	; (8004ea0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d077      	beq.n	8004e96 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db0:	e008      	b.n	8004dc4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d3f2      	bcc.n	8004db2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004dcc:	e000      	b.n	8004dd0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004dce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d055      	beq.n	8004e82 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dda:	f04f 0120 	mov.w	r1, #32
 8004dde:	f381 8811 	msr	BASEPRI, r1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	482f      	ldr	r0, [pc, #188]	; (8004ea4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004de6:	f7ff f84f 	bl	8003e88 <_PreparePacket>
 8004dea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	e00b      	b.n	8004e12 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	6279      	str	r1, [r7, #36]	; 0x24
 8004e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	09db      	lsrs	r3, r3, #7
 8004e10:	623b      	str	r3, [r7, #32]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	2b7f      	cmp	r3, #127	; 0x7f
 8004e16:	d8f0      	bhi.n	8004dfa <SEGGER_SYSVIEW_SendModule+0x66>
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e00b      	b.n	8004e4c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	61f9      	str	r1, [r7, #28]
 8004e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	09db      	lsrs	r3, r3, #7
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e50:	d8f0      	bhi.n	8004e34 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	61fa      	str	r2, [r7, #28]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	4619      	mov	r1, r3
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7fe ffdc 	bl	8003e28 <_EncodeStr>
 8004e70:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004e72:	2216      	movs	r2, #22
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f7ff f8f2 	bl	8004060 <_SendPacket>
      RECORD_END();
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d006      	beq.n	8004e96 <SEGGER_SYSVIEW_SendModule+0x102>
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4798      	blx	r3
    }
  }
}
 8004e96:	bf00      	nop
 8004e98:	3730      	adds	r7, #48	; 0x30
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20014394 	.word	0x20014394
 8004ea4:	2001439c 	.word	0x2001439c

08004ea8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00f      	beq.n	8004ed6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f2      	bne.n	8004ebc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20014394 	.word	0x20014394

08004ee4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004eea:	f3ef 8311 	mrs	r3, BASEPRI
 8004eee:	f04f 0120 	mov.w	r1, #32
 8004ef2:	f381 8811 	msr	BASEPRI, r1
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	4817      	ldr	r0, [pc, #92]	; (8004f58 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004efa:	f7fe ffc5 	bl	8003e88 <_PreparePacket>
 8004efe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e00b      	b.n	8004f28 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	6179      	str	r1, [r7, #20]
 8004f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	617a      	str	r2, [r7, #20]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004f3e:	221b      	movs	r2, #27
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	68b8      	ldr	r0, [r7, #8]
 8004f44:	f7ff f88c 	bl	8004060 <_SendPacket>
  RECORD_END();
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2001439c 	.word	0x2001439c
 8004f5c:	20014398 	.word	0x20014398

08004f60 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f68:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6c:	f04f 0120 	mov.w	r1, #32
 8004f70:	f381 8811 	msr	BASEPRI, r1
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	4827      	ldr	r0, [pc, #156]	; (8005014 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f78:	f7fe ff86 	bl	8003e88 <_PreparePacket>
 8004f7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	6938      	ldr	r0, [r7, #16]
 8004f84:	f7fe ff50 	bl	8003e28 <_EncodeStr>
 8004f88:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8e:	2301      	movs	r3, #1
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	e00b      	b.n	8004fac <SEGGER_SYSVIEW_Warn+0x4c>
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	6279      	str	r1, [r7, #36]	; 0x24
 8004f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	09db      	lsrs	r3, r3, #7
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb0:	d8f0      	bhi.n	8004f94 <SEGGER_SYSVIEW_Warn+0x34>
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	627a      	str	r2, [r7, #36]	; 0x24
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	e00b      	b.n	8004fe4 <SEGGER_SYSVIEW_Warn+0x84>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	61f9      	str	r1, [r7, #28]
 8004fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	09db      	lsrs	r3, r3, #7
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe8:	d8f0      	bhi.n	8004fcc <SEGGER_SYSVIEW_Warn+0x6c>
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	61fa      	str	r2, [r7, #28]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004ffa:	221a      	movs	r2, #26
 8004ffc:	68f9      	ldr	r1, [r7, #12]
 8004ffe:	6938      	ldr	r0, [r7, #16]
 8005000:	f7ff f82e 	bl	8004060 <_SendPacket>
  RECORD_END();
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f383 8811 	msr	BASEPRI, r3
}
 800500a:	bf00      	nop
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2001439c 	.word	0x2001439c

08005018 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	2000      	movs	r0, #0
 800502c:	f7fe fe06 	bl	8003c3c <SEGGER_RTT_Write>
  return len;
 8005030:	683b      	ldr	r3, [r7, #0]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <std>:
 800503c:	2300      	movs	r3, #0
 800503e:	b510      	push	{r4, lr}
 8005040:	4604      	mov	r4, r0
 8005042:	e9c0 3300 	strd	r3, r3, [r0]
 8005046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800504a:	6083      	str	r3, [r0, #8]
 800504c:	8181      	strh	r1, [r0, #12]
 800504e:	6643      	str	r3, [r0, #100]	; 0x64
 8005050:	81c2      	strh	r2, [r0, #14]
 8005052:	6183      	str	r3, [r0, #24]
 8005054:	4619      	mov	r1, r3
 8005056:	2208      	movs	r2, #8
 8005058:	305c      	adds	r0, #92	; 0x5c
 800505a:	f000 f9e3 	bl	8005424 <memset>
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <std+0x38>)
 8005060:	6263      	str	r3, [r4, #36]	; 0x24
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <std+0x3c>)
 8005064:	62a3      	str	r3, [r4, #40]	; 0x28
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <std+0x40>)
 8005068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <std+0x44>)
 800506c:	6224      	str	r4, [r4, #32]
 800506e:	6323      	str	r3, [r4, #48]	; 0x30
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	08005255 	.word	0x08005255
 8005078:	08005277 	.word	0x08005277
 800507c:	080052af 	.word	0x080052af
 8005080:	080052d3 	.word	0x080052d3

08005084 <stdio_exit_handler>:
 8005084:	4a02      	ldr	r2, [pc, #8]	; (8005090 <stdio_exit_handler+0xc>)
 8005086:	4903      	ldr	r1, [pc, #12]	; (8005094 <stdio_exit_handler+0x10>)
 8005088:	4803      	ldr	r0, [pc, #12]	; (8005098 <stdio_exit_handler+0x14>)
 800508a:	f000 b869 	b.w	8005160 <_fwalk_sglue>
 800508e:	bf00      	nop
 8005090:	20000014 	.word	0x20000014
 8005094:	0800580d 	.word	0x0800580d
 8005098:	20000020 	.word	0x20000020

0800509c <cleanup_stdio>:
 800509c:	6841      	ldr	r1, [r0, #4]
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <cleanup_stdio+0x34>)
 80050a0:	4299      	cmp	r1, r3
 80050a2:	b510      	push	{r4, lr}
 80050a4:	4604      	mov	r4, r0
 80050a6:	d001      	beq.n	80050ac <cleanup_stdio+0x10>
 80050a8:	f000 fbb0 	bl	800580c <_fflush_r>
 80050ac:	68a1      	ldr	r1, [r4, #8]
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <cleanup_stdio+0x38>)
 80050b0:	4299      	cmp	r1, r3
 80050b2:	d002      	beq.n	80050ba <cleanup_stdio+0x1e>
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 fba9 	bl	800580c <_fflush_r>
 80050ba:	68e1      	ldr	r1, [r4, #12]
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <cleanup_stdio+0x3c>)
 80050be:	4299      	cmp	r1, r3
 80050c0:	d004      	beq.n	80050cc <cleanup_stdio+0x30>
 80050c2:	4620      	mov	r0, r4
 80050c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c8:	f000 bba0 	b.w	800580c <_fflush_r>
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	bf00      	nop
 80050d0:	20014480 	.word	0x20014480
 80050d4:	200144e8 	.word	0x200144e8
 80050d8:	20014550 	.word	0x20014550

080050dc <global_stdio_init.part.0>:
 80050dc:	b510      	push	{r4, lr}
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <global_stdio_init.part.0+0x30>)
 80050e0:	4c0b      	ldr	r4, [pc, #44]	; (8005110 <global_stdio_init.part.0+0x34>)
 80050e2:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <global_stdio_init.part.0+0x38>)
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	4620      	mov	r0, r4
 80050e8:	2200      	movs	r2, #0
 80050ea:	2104      	movs	r1, #4
 80050ec:	f7ff ffa6 	bl	800503c <std>
 80050f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050f4:	2201      	movs	r2, #1
 80050f6:	2109      	movs	r1, #9
 80050f8:	f7ff ffa0 	bl	800503c <std>
 80050fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005100:	2202      	movs	r2, #2
 8005102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005106:	2112      	movs	r1, #18
 8005108:	f7ff bf98 	b.w	800503c <std>
 800510c:	200145b8 	.word	0x200145b8
 8005110:	20014480 	.word	0x20014480
 8005114:	08005085 	.word	0x08005085

08005118 <__sfp_lock_acquire>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__sfp_lock_acquire+0x8>)
 800511a:	f000 b9e9 	b.w	80054f0 <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	200145c1 	.word	0x200145c1

08005124 <__sfp_lock_release>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__sfp_lock_release+0x8>)
 8005126:	f000 b9e4 	b.w	80054f2 <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	200145c1 	.word	0x200145c1

08005130 <__sinit>:
 8005130:	b510      	push	{r4, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	f7ff fff0 	bl	8005118 <__sfp_lock_acquire>
 8005138:	6a23      	ldr	r3, [r4, #32]
 800513a:	b11b      	cbz	r3, 8005144 <__sinit+0x14>
 800513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005140:	f7ff bff0 	b.w	8005124 <__sfp_lock_release>
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__sinit+0x28>)
 8005146:	6223      	str	r3, [r4, #32]
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <__sinit+0x2c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f5      	bne.n	800513c <__sinit+0xc>
 8005150:	f7ff ffc4 	bl	80050dc <global_stdio_init.part.0>
 8005154:	e7f2      	b.n	800513c <__sinit+0xc>
 8005156:	bf00      	nop
 8005158:	0800509d 	.word	0x0800509d
 800515c:	200145b8 	.word	0x200145b8

08005160 <_fwalk_sglue>:
 8005160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005164:	4607      	mov	r7, r0
 8005166:	4688      	mov	r8, r1
 8005168:	4614      	mov	r4, r2
 800516a:	2600      	movs	r6, #0
 800516c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005170:	f1b9 0901 	subs.w	r9, r9, #1
 8005174:	d505      	bpl.n	8005182 <_fwalk_sglue+0x22>
 8005176:	6824      	ldr	r4, [r4, #0]
 8005178:	2c00      	cmp	r4, #0
 800517a:	d1f7      	bne.n	800516c <_fwalk_sglue+0xc>
 800517c:	4630      	mov	r0, r6
 800517e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d907      	bls.n	8005198 <_fwalk_sglue+0x38>
 8005188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800518c:	3301      	adds	r3, #1
 800518e:	d003      	beq.n	8005198 <_fwalk_sglue+0x38>
 8005190:	4629      	mov	r1, r5
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	4306      	orrs	r6, r0
 8005198:	3568      	adds	r5, #104	; 0x68
 800519a:	e7e9      	b.n	8005170 <_fwalk_sglue+0x10>

0800519c <_puts_r>:
 800519c:	6a03      	ldr	r3, [r0, #32]
 800519e:	b570      	push	{r4, r5, r6, lr}
 80051a0:	6884      	ldr	r4, [r0, #8]
 80051a2:	4605      	mov	r5, r0
 80051a4:	460e      	mov	r6, r1
 80051a6:	b90b      	cbnz	r3, 80051ac <_puts_r+0x10>
 80051a8:	f7ff ffc2 	bl	8005130 <__sinit>
 80051ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ae:	07db      	lsls	r3, r3, #31
 80051b0:	d405      	bmi.n	80051be <_puts_r+0x22>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	0598      	lsls	r0, r3, #22
 80051b6:	d402      	bmi.n	80051be <_puts_r+0x22>
 80051b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ba:	f000 f999 	bl	80054f0 <__retarget_lock_acquire_recursive>
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	0719      	lsls	r1, r3, #28
 80051c2:	d513      	bpl.n	80051ec <_puts_r+0x50>
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	b18b      	cbz	r3, 80051ec <_puts_r+0x50>
 80051c8:	3e01      	subs	r6, #1
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	b9e9      	cbnz	r1, 8005212 <_puts_r+0x76>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da2e      	bge.n	8005238 <_puts_r+0x9c>
 80051da:	4622      	mov	r2, r4
 80051dc:	210a      	movs	r1, #10
 80051de:	4628      	mov	r0, r5
 80051e0:	f000 f87b 	bl	80052da <__swbuf_r>
 80051e4:	3001      	adds	r0, #1
 80051e6:	d007      	beq.n	80051f8 <_puts_r+0x5c>
 80051e8:	250a      	movs	r5, #10
 80051ea:	e007      	b.n	80051fc <_puts_r+0x60>
 80051ec:	4621      	mov	r1, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	f000 f8b0 	bl	8005354 <__swsetup_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d0e7      	beq.n	80051c8 <_puts_r+0x2c>
 80051f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051fe:	07da      	lsls	r2, r3, #31
 8005200:	d405      	bmi.n	800520e <_puts_r+0x72>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	059b      	lsls	r3, r3, #22
 8005206:	d402      	bmi.n	800520e <_puts_r+0x72>
 8005208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800520a:	f000 f972 	bl	80054f2 <__retarget_lock_release_recursive>
 800520e:	4628      	mov	r0, r5
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	2b00      	cmp	r3, #0
 8005214:	da04      	bge.n	8005220 <_puts_r+0x84>
 8005216:	69a2      	ldr	r2, [r4, #24]
 8005218:	429a      	cmp	r2, r3
 800521a:	dc06      	bgt.n	800522a <_puts_r+0x8e>
 800521c:	290a      	cmp	r1, #10
 800521e:	d004      	beq.n	800522a <_puts_r+0x8e>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	6022      	str	r2, [r4, #0]
 8005226:	7019      	strb	r1, [r3, #0]
 8005228:	e7cf      	b.n	80051ca <_puts_r+0x2e>
 800522a:	4622      	mov	r2, r4
 800522c:	4628      	mov	r0, r5
 800522e:	f000 f854 	bl	80052da <__swbuf_r>
 8005232:	3001      	adds	r0, #1
 8005234:	d1c9      	bne.n	80051ca <_puts_r+0x2e>
 8005236:	e7df      	b.n	80051f8 <_puts_r+0x5c>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	250a      	movs	r5, #10
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	6022      	str	r2, [r4, #0]
 8005240:	701d      	strb	r5, [r3, #0]
 8005242:	e7db      	b.n	80051fc <_puts_r+0x60>

08005244 <puts>:
 8005244:	4b02      	ldr	r3, [pc, #8]	; (8005250 <puts+0xc>)
 8005246:	4601      	mov	r1, r0
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f7ff bfa7 	b.w	800519c <_puts_r>
 800524e:	bf00      	nop
 8005250:	2000006c 	.word	0x2000006c

08005254 <__sread>:
 8005254:	b510      	push	{r4, lr}
 8005256:	460c      	mov	r4, r1
 8005258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525c:	f000 f90c 	bl	8005478 <_read_r>
 8005260:	2800      	cmp	r0, #0
 8005262:	bfab      	itete	ge
 8005264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005266:	89a3      	ldrhlt	r3, [r4, #12]
 8005268:	181b      	addge	r3, r3, r0
 800526a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800526e:	bfac      	ite	ge
 8005270:	6563      	strge	r3, [r4, #84]	; 0x54
 8005272:	81a3      	strhlt	r3, [r4, #12]
 8005274:	bd10      	pop	{r4, pc}

08005276 <__swrite>:
 8005276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	461f      	mov	r7, r3
 800527c:	898b      	ldrh	r3, [r1, #12]
 800527e:	05db      	lsls	r3, r3, #23
 8005280:	4605      	mov	r5, r0
 8005282:	460c      	mov	r4, r1
 8005284:	4616      	mov	r6, r2
 8005286:	d505      	bpl.n	8005294 <__swrite+0x1e>
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	2302      	movs	r3, #2
 800528e:	2200      	movs	r2, #0
 8005290:	f000 f8e0 	bl	8005454 <_lseek_r>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800529a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	4632      	mov	r2, r6
 80052a2:	463b      	mov	r3, r7
 80052a4:	4628      	mov	r0, r5
 80052a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	f7ff beb5 	b.w	8005018 <_write_r>

080052ae <__sseek>:
 80052ae:	b510      	push	{r4, lr}
 80052b0:	460c      	mov	r4, r1
 80052b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b6:	f000 f8cd 	bl	8005454 <_lseek_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	bf15      	itete	ne
 80052c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ca:	81a3      	strheq	r3, [r4, #12]
 80052cc:	bf18      	it	ne
 80052ce:	81a3      	strhne	r3, [r4, #12]
 80052d0:	bd10      	pop	{r4, pc}

080052d2 <__sclose>:
 80052d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d6:	f000 b8ad 	b.w	8005434 <_close_r>

080052da <__swbuf_r>:
 80052da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052dc:	460e      	mov	r6, r1
 80052de:	4614      	mov	r4, r2
 80052e0:	4605      	mov	r5, r0
 80052e2:	b118      	cbz	r0, 80052ec <__swbuf_r+0x12>
 80052e4:	6a03      	ldr	r3, [r0, #32]
 80052e6:	b90b      	cbnz	r3, 80052ec <__swbuf_r+0x12>
 80052e8:	f7ff ff22 	bl	8005130 <__sinit>
 80052ec:	69a3      	ldr	r3, [r4, #24]
 80052ee:	60a3      	str	r3, [r4, #8]
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	071a      	lsls	r2, r3, #28
 80052f4:	d525      	bpl.n	8005342 <__swbuf_r+0x68>
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	b31b      	cbz	r3, 8005342 <__swbuf_r+0x68>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	1a98      	subs	r0, r3, r2
 8005300:	6963      	ldr	r3, [r4, #20]
 8005302:	b2f6      	uxtb	r6, r6
 8005304:	4283      	cmp	r3, r0
 8005306:	4637      	mov	r7, r6
 8005308:	dc04      	bgt.n	8005314 <__swbuf_r+0x3a>
 800530a:	4621      	mov	r1, r4
 800530c:	4628      	mov	r0, r5
 800530e:	f000 fa7d 	bl	800580c <_fflush_r>
 8005312:	b9e0      	cbnz	r0, 800534e <__swbuf_r+0x74>
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	3b01      	subs	r3, #1
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	701e      	strb	r6, [r3, #0]
 8005322:	6962      	ldr	r2, [r4, #20]
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	429a      	cmp	r2, r3
 8005328:	d004      	beq.n	8005334 <__swbuf_r+0x5a>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	07db      	lsls	r3, r3, #31
 800532e:	d506      	bpl.n	800533e <__swbuf_r+0x64>
 8005330:	2e0a      	cmp	r6, #10
 8005332:	d104      	bne.n	800533e <__swbuf_r+0x64>
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	f000 fa68 	bl	800580c <_fflush_r>
 800533c:	b938      	cbnz	r0, 800534e <__swbuf_r+0x74>
 800533e:	4638      	mov	r0, r7
 8005340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005342:	4621      	mov	r1, r4
 8005344:	4628      	mov	r0, r5
 8005346:	f000 f805 	bl	8005354 <__swsetup_r>
 800534a:	2800      	cmp	r0, #0
 800534c:	d0d5      	beq.n	80052fa <__swbuf_r+0x20>
 800534e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005352:	e7f4      	b.n	800533e <__swbuf_r+0x64>

08005354 <__swsetup_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <__swsetup_r+0xac>)
 8005358:	4605      	mov	r5, r0
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	460c      	mov	r4, r1
 800535e:	b118      	cbz	r0, 8005368 <__swsetup_r+0x14>
 8005360:	6a03      	ldr	r3, [r0, #32]
 8005362:	b90b      	cbnz	r3, 8005368 <__swsetup_r+0x14>
 8005364:	f7ff fee4 	bl	8005130 <__sinit>
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800536e:	0718      	lsls	r0, r3, #28
 8005370:	d422      	bmi.n	80053b8 <__swsetup_r+0x64>
 8005372:	06d9      	lsls	r1, r3, #27
 8005374:	d407      	bmi.n	8005386 <__swsetup_r+0x32>
 8005376:	2309      	movs	r3, #9
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005384:	e034      	b.n	80053f0 <__swsetup_r+0x9c>
 8005386:	0758      	lsls	r0, r3, #29
 8005388:	d512      	bpl.n	80053b0 <__swsetup_r+0x5c>
 800538a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800538c:	b141      	cbz	r1, 80053a0 <__swsetup_r+0x4c>
 800538e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005392:	4299      	cmp	r1, r3
 8005394:	d002      	beq.n	800539c <__swsetup_r+0x48>
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f8ba 	bl	8005510 <_free_r>
 800539c:	2300      	movs	r3, #0
 800539e:	6363      	str	r3, [r4, #52]	; 0x34
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	2300      	movs	r3, #0
 80053aa:	6063      	str	r3, [r4, #4]
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	6023      	str	r3, [r4, #0]
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	f043 0308 	orr.w	r3, r3, #8
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	b94b      	cbnz	r3, 80053d0 <__swsetup_r+0x7c>
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c6:	d003      	beq.n	80053d0 <__swsetup_r+0x7c>
 80053c8:	4621      	mov	r1, r4
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 fa6c 	bl	80058a8 <__smakebuf_r>
 80053d0:	89a0      	ldrh	r0, [r4, #12]
 80053d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053d6:	f010 0301 	ands.w	r3, r0, #1
 80053da:	d00a      	beq.n	80053f2 <__swsetup_r+0x9e>
 80053dc:	2300      	movs	r3, #0
 80053de:	60a3      	str	r3, [r4, #8]
 80053e0:	6963      	ldr	r3, [r4, #20]
 80053e2:	425b      	negs	r3, r3
 80053e4:	61a3      	str	r3, [r4, #24]
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	b943      	cbnz	r3, 80053fc <__swsetup_r+0xa8>
 80053ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053ee:	d1c4      	bne.n	800537a <__swsetup_r+0x26>
 80053f0:	bd38      	pop	{r3, r4, r5, pc}
 80053f2:	0781      	lsls	r1, r0, #30
 80053f4:	bf58      	it	pl
 80053f6:	6963      	ldrpl	r3, [r4, #20]
 80053f8:	60a3      	str	r3, [r4, #8]
 80053fa:	e7f4      	b.n	80053e6 <__swsetup_r+0x92>
 80053fc:	2000      	movs	r0, #0
 80053fe:	e7f7      	b.n	80053f0 <__swsetup_r+0x9c>
 8005400:	2000006c 	.word	0x2000006c

08005404 <memcmp>:
 8005404:	b510      	push	{r4, lr}
 8005406:	3901      	subs	r1, #1
 8005408:	4402      	add	r2, r0
 800540a:	4290      	cmp	r0, r2
 800540c:	d101      	bne.n	8005412 <memcmp+0xe>
 800540e:	2000      	movs	r0, #0
 8005410:	e005      	b.n	800541e <memcmp+0x1a>
 8005412:	7803      	ldrb	r3, [r0, #0]
 8005414:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005418:	42a3      	cmp	r3, r4
 800541a:	d001      	beq.n	8005420 <memcmp+0x1c>
 800541c:	1b18      	subs	r0, r3, r4
 800541e:	bd10      	pop	{r4, pc}
 8005420:	3001      	adds	r0, #1
 8005422:	e7f2      	b.n	800540a <memcmp+0x6>

08005424 <memset>:
 8005424:	4402      	add	r2, r0
 8005426:	4603      	mov	r3, r0
 8005428:	4293      	cmp	r3, r2
 800542a:	d100      	bne.n	800542e <memset+0xa>
 800542c:	4770      	bx	lr
 800542e:	f803 1b01 	strb.w	r1, [r3], #1
 8005432:	e7f9      	b.n	8005428 <memset+0x4>

08005434 <_close_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d06      	ldr	r5, [pc, #24]	; (8005450 <_close_r+0x1c>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fb faf7 	bl	8000a32 <_close>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_close_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_close_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200145bc 	.word	0x200145bc

08005454 <_lseek_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	; (8005474 <_lseek_r+0x20>)
 8005458:	4604      	mov	r4, r0
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	2200      	movs	r2, #0
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fb fb0c 	bl	8000a80 <_lseek>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_lseek_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_lseek_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200145bc 	.word	0x200145bc

08005478 <_read_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d07      	ldr	r5, [pc, #28]	; (8005498 <_read_r+0x20>)
 800547c:	4604      	mov	r4, r0
 800547e:	4608      	mov	r0, r1
 8005480:	4611      	mov	r1, r2
 8005482:	2200      	movs	r2, #0
 8005484:	602a      	str	r2, [r5, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	f7fb fab6 	bl	80009f8 <_read>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_read_r+0x1e>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_read_r+0x1e>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	200145bc 	.word	0x200145bc

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	; (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000006c 	.word	0x2000006c

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4d0d      	ldr	r5, [pc, #52]	; (80054e0 <__libc_init_array+0x38>)
 80054ac:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054ae:	1b64      	subs	r4, r4, r5
 80054b0:	10a4      	asrs	r4, r4, #2
 80054b2:	2600      	movs	r6, #0
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	4d0b      	ldr	r5, [pc, #44]	; (80054e8 <__libc_init_array+0x40>)
 80054ba:	4c0c      	ldr	r4, [pc, #48]	; (80054ec <__libc_init_array+0x44>)
 80054bc:	f000 fa62 	bl	8005984 <_init>
 80054c0:	1b64      	subs	r4, r4, r5
 80054c2:	10a4      	asrs	r4, r4, #2
 80054c4:	2600      	movs	r6, #0
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08005aec 	.word	0x08005aec
 80054e4:	08005aec 	.word	0x08005aec
 80054e8:	08005aec 	.word	0x08005aec
 80054ec:	08005af0 	.word	0x08005af0

080054f0 <__retarget_lock_acquire_recursive>:
 80054f0:	4770      	bx	lr

080054f2 <__retarget_lock_release_recursive>:
 80054f2:	4770      	bx	lr

080054f4 <memcpy>:
 80054f4:	440a      	add	r2, r1
 80054f6:	4291      	cmp	r1, r2
 80054f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054fc:	d100      	bne.n	8005500 <memcpy+0xc>
 80054fe:	4770      	bx	lr
 8005500:	b510      	push	{r4, lr}
 8005502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800550a:	4291      	cmp	r1, r2
 800550c:	d1f9      	bne.n	8005502 <memcpy+0xe>
 800550e:	bd10      	pop	{r4, pc}

08005510 <_free_r>:
 8005510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005512:	2900      	cmp	r1, #0
 8005514:	d044      	beq.n	80055a0 <_free_r+0x90>
 8005516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800551a:	9001      	str	r0, [sp, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f1a1 0404 	sub.w	r4, r1, #4
 8005522:	bfb8      	it	lt
 8005524:	18e4      	addlt	r4, r4, r3
 8005526:	f000 f8df 	bl	80056e8 <__malloc_lock>
 800552a:	4a1e      	ldr	r2, [pc, #120]	; (80055a4 <_free_r+0x94>)
 800552c:	9801      	ldr	r0, [sp, #4]
 800552e:	6813      	ldr	r3, [r2, #0]
 8005530:	b933      	cbnz	r3, 8005540 <_free_r+0x30>
 8005532:	6063      	str	r3, [r4, #4]
 8005534:	6014      	str	r4, [r2, #0]
 8005536:	b003      	add	sp, #12
 8005538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800553c:	f000 b8da 	b.w	80056f4 <__malloc_unlock>
 8005540:	42a3      	cmp	r3, r4
 8005542:	d908      	bls.n	8005556 <_free_r+0x46>
 8005544:	6825      	ldr	r5, [r4, #0]
 8005546:	1961      	adds	r1, r4, r5
 8005548:	428b      	cmp	r3, r1
 800554a:	bf01      	itttt	eq
 800554c:	6819      	ldreq	r1, [r3, #0]
 800554e:	685b      	ldreq	r3, [r3, #4]
 8005550:	1949      	addeq	r1, r1, r5
 8005552:	6021      	streq	r1, [r4, #0]
 8005554:	e7ed      	b.n	8005532 <_free_r+0x22>
 8005556:	461a      	mov	r2, r3
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	b10b      	cbz	r3, 8005560 <_free_r+0x50>
 800555c:	42a3      	cmp	r3, r4
 800555e:	d9fa      	bls.n	8005556 <_free_r+0x46>
 8005560:	6811      	ldr	r1, [r2, #0]
 8005562:	1855      	adds	r5, r2, r1
 8005564:	42a5      	cmp	r5, r4
 8005566:	d10b      	bne.n	8005580 <_free_r+0x70>
 8005568:	6824      	ldr	r4, [r4, #0]
 800556a:	4421      	add	r1, r4
 800556c:	1854      	adds	r4, r2, r1
 800556e:	42a3      	cmp	r3, r4
 8005570:	6011      	str	r1, [r2, #0]
 8005572:	d1e0      	bne.n	8005536 <_free_r+0x26>
 8005574:	681c      	ldr	r4, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	6053      	str	r3, [r2, #4]
 800557a:	440c      	add	r4, r1
 800557c:	6014      	str	r4, [r2, #0]
 800557e:	e7da      	b.n	8005536 <_free_r+0x26>
 8005580:	d902      	bls.n	8005588 <_free_r+0x78>
 8005582:	230c      	movs	r3, #12
 8005584:	6003      	str	r3, [r0, #0]
 8005586:	e7d6      	b.n	8005536 <_free_r+0x26>
 8005588:	6825      	ldr	r5, [r4, #0]
 800558a:	1961      	adds	r1, r4, r5
 800558c:	428b      	cmp	r3, r1
 800558e:	bf04      	itt	eq
 8005590:	6819      	ldreq	r1, [r3, #0]
 8005592:	685b      	ldreq	r3, [r3, #4]
 8005594:	6063      	str	r3, [r4, #4]
 8005596:	bf04      	itt	eq
 8005598:	1949      	addeq	r1, r1, r5
 800559a:	6021      	streq	r1, [r4, #0]
 800559c:	6054      	str	r4, [r2, #4]
 800559e:	e7ca      	b.n	8005536 <_free_r+0x26>
 80055a0:	b003      	add	sp, #12
 80055a2:	bd30      	pop	{r4, r5, pc}
 80055a4:	200145c4 	.word	0x200145c4

080055a8 <sbrk_aligned>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0e      	ldr	r6, [pc, #56]	; (80055e4 <sbrk_aligned+0x3c>)
 80055ac:	460c      	mov	r4, r1
 80055ae:	6831      	ldr	r1, [r6, #0]
 80055b0:	4605      	mov	r5, r0
 80055b2:	b911      	cbnz	r1, 80055ba <sbrk_aligned+0x12>
 80055b4:	f000 f9d6 	bl	8005964 <_sbrk_r>
 80055b8:	6030      	str	r0, [r6, #0]
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 f9d1 	bl	8005964 <_sbrk_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d00a      	beq.n	80055dc <sbrk_aligned+0x34>
 80055c6:	1cc4      	adds	r4, r0, #3
 80055c8:	f024 0403 	bic.w	r4, r4, #3
 80055cc:	42a0      	cmp	r0, r4
 80055ce:	d007      	beq.n	80055e0 <sbrk_aligned+0x38>
 80055d0:	1a21      	subs	r1, r4, r0
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f9c6 	bl	8005964 <_sbrk_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	d101      	bne.n	80055e0 <sbrk_aligned+0x38>
 80055dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055e0:	4620      	mov	r0, r4
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	200145c8 	.word	0x200145c8

080055e8 <_malloc_r>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	1ccd      	adds	r5, r1, #3
 80055ee:	f025 0503 	bic.w	r5, r5, #3
 80055f2:	3508      	adds	r5, #8
 80055f4:	2d0c      	cmp	r5, #12
 80055f6:	bf38      	it	cc
 80055f8:	250c      	movcc	r5, #12
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	4607      	mov	r7, r0
 80055fe:	db01      	blt.n	8005604 <_malloc_r+0x1c>
 8005600:	42a9      	cmp	r1, r5
 8005602:	d905      	bls.n	8005610 <_malloc_r+0x28>
 8005604:	230c      	movs	r3, #12
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	2600      	movs	r6, #0
 800560a:	4630      	mov	r0, r6
 800560c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005610:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056e4 <_malloc_r+0xfc>
 8005614:	f000 f868 	bl	80056e8 <__malloc_lock>
 8005618:	f8d8 3000 	ldr.w	r3, [r8]
 800561c:	461c      	mov	r4, r3
 800561e:	bb5c      	cbnz	r4, 8005678 <_malloc_r+0x90>
 8005620:	4629      	mov	r1, r5
 8005622:	4638      	mov	r0, r7
 8005624:	f7ff ffc0 	bl	80055a8 <sbrk_aligned>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	4604      	mov	r4, r0
 800562c:	d155      	bne.n	80056da <_malloc_r+0xf2>
 800562e:	f8d8 4000 	ldr.w	r4, [r8]
 8005632:	4626      	mov	r6, r4
 8005634:	2e00      	cmp	r6, #0
 8005636:	d145      	bne.n	80056c4 <_malloc_r+0xdc>
 8005638:	2c00      	cmp	r4, #0
 800563a:	d048      	beq.n	80056ce <_malloc_r+0xe6>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	4631      	mov	r1, r6
 8005640:	4638      	mov	r0, r7
 8005642:	eb04 0903 	add.w	r9, r4, r3
 8005646:	f000 f98d 	bl	8005964 <_sbrk_r>
 800564a:	4581      	cmp	r9, r0
 800564c:	d13f      	bne.n	80056ce <_malloc_r+0xe6>
 800564e:	6821      	ldr	r1, [r4, #0]
 8005650:	1a6d      	subs	r5, r5, r1
 8005652:	4629      	mov	r1, r5
 8005654:	4638      	mov	r0, r7
 8005656:	f7ff ffa7 	bl	80055a8 <sbrk_aligned>
 800565a:	3001      	adds	r0, #1
 800565c:	d037      	beq.n	80056ce <_malloc_r+0xe6>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	442b      	add	r3, r5
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	f8d8 3000 	ldr.w	r3, [r8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d038      	beq.n	80056de <_malloc_r+0xf6>
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	42a2      	cmp	r2, r4
 8005670:	d12b      	bne.n	80056ca <_malloc_r+0xe2>
 8005672:	2200      	movs	r2, #0
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	e00f      	b.n	8005698 <_malloc_r+0xb0>
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	1b52      	subs	r2, r2, r5
 800567c:	d41f      	bmi.n	80056be <_malloc_r+0xd6>
 800567e:	2a0b      	cmp	r2, #11
 8005680:	d917      	bls.n	80056b2 <_malloc_r+0xca>
 8005682:	1961      	adds	r1, r4, r5
 8005684:	42a3      	cmp	r3, r4
 8005686:	6025      	str	r5, [r4, #0]
 8005688:	bf18      	it	ne
 800568a:	6059      	strne	r1, [r3, #4]
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	bf08      	it	eq
 8005690:	f8c8 1000 	streq.w	r1, [r8]
 8005694:	5162      	str	r2, [r4, r5]
 8005696:	604b      	str	r3, [r1, #4]
 8005698:	4638      	mov	r0, r7
 800569a:	f104 060b 	add.w	r6, r4, #11
 800569e:	f000 f829 	bl	80056f4 <__malloc_unlock>
 80056a2:	f026 0607 	bic.w	r6, r6, #7
 80056a6:	1d23      	adds	r3, r4, #4
 80056a8:	1af2      	subs	r2, r6, r3
 80056aa:	d0ae      	beq.n	800560a <_malloc_r+0x22>
 80056ac:	1b9b      	subs	r3, r3, r6
 80056ae:	50a3      	str	r3, [r4, r2]
 80056b0:	e7ab      	b.n	800560a <_malloc_r+0x22>
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	6862      	ldr	r2, [r4, #4]
 80056b6:	d1dd      	bne.n	8005674 <_malloc_r+0x8c>
 80056b8:	f8c8 2000 	str.w	r2, [r8]
 80056bc:	e7ec      	b.n	8005698 <_malloc_r+0xb0>
 80056be:	4623      	mov	r3, r4
 80056c0:	6864      	ldr	r4, [r4, #4]
 80056c2:	e7ac      	b.n	800561e <_malloc_r+0x36>
 80056c4:	4634      	mov	r4, r6
 80056c6:	6876      	ldr	r6, [r6, #4]
 80056c8:	e7b4      	b.n	8005634 <_malloc_r+0x4c>
 80056ca:	4613      	mov	r3, r2
 80056cc:	e7cc      	b.n	8005668 <_malloc_r+0x80>
 80056ce:	230c      	movs	r3, #12
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	4638      	mov	r0, r7
 80056d4:	f000 f80e 	bl	80056f4 <__malloc_unlock>
 80056d8:	e797      	b.n	800560a <_malloc_r+0x22>
 80056da:	6025      	str	r5, [r4, #0]
 80056dc:	e7dc      	b.n	8005698 <_malloc_r+0xb0>
 80056de:	605b      	str	r3, [r3, #4]
 80056e0:	deff      	udf	#255	; 0xff
 80056e2:	bf00      	nop
 80056e4:	200145c4 	.word	0x200145c4

080056e8 <__malloc_lock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__malloc_lock+0x8>)
 80056ea:	f7ff bf01 	b.w	80054f0 <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	200145c0 	.word	0x200145c0

080056f4 <__malloc_unlock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <__malloc_unlock+0x8>)
 80056f6:	f7ff befc 	b.w	80054f2 <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	200145c0 	.word	0x200145c0

08005700 <__sflush_r>:
 8005700:	898a      	ldrh	r2, [r1, #12]
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	0710      	lsls	r0, r2, #28
 800570a:	460c      	mov	r4, r1
 800570c:	d458      	bmi.n	80057c0 <__sflush_r+0xc0>
 800570e:	684b      	ldr	r3, [r1, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc05      	bgt.n	8005720 <__sflush_r+0x20>
 8005714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	dc02      	bgt.n	8005720 <__sflush_r+0x20>
 800571a:	2000      	movs	r0, #0
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005722:	2e00      	cmp	r6, #0
 8005724:	d0f9      	beq.n	800571a <__sflush_r+0x1a>
 8005726:	2300      	movs	r3, #0
 8005728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800572c:	682f      	ldr	r7, [r5, #0]
 800572e:	6a21      	ldr	r1, [r4, #32]
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	d032      	beq.n	800579a <__sflush_r+0x9a>
 8005734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	075a      	lsls	r2, r3, #29
 800573a:	d505      	bpl.n	8005748 <__sflush_r+0x48>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005742:	b10b      	cbz	r3, 8005748 <__sflush_r+0x48>
 8005744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005746:	1ac0      	subs	r0, r0, r3
 8005748:	2300      	movs	r3, #0
 800574a:	4602      	mov	r2, r0
 800574c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574e:	6a21      	ldr	r1, [r4, #32]
 8005750:	4628      	mov	r0, r5
 8005752:	47b0      	blx	r6
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	d106      	bne.n	8005768 <__sflush_r+0x68>
 800575a:	6829      	ldr	r1, [r5, #0]
 800575c:	291d      	cmp	r1, #29
 800575e:	d82b      	bhi.n	80057b8 <__sflush_r+0xb8>
 8005760:	4a29      	ldr	r2, [pc, #164]	; (8005808 <__sflush_r+0x108>)
 8005762:	410a      	asrs	r2, r1
 8005764:	07d6      	lsls	r6, r2, #31
 8005766:	d427      	bmi.n	80057b8 <__sflush_r+0xb8>
 8005768:	2200      	movs	r2, #0
 800576a:	6062      	str	r2, [r4, #4]
 800576c:	04d9      	lsls	r1, r3, #19
 800576e:	6922      	ldr	r2, [r4, #16]
 8005770:	6022      	str	r2, [r4, #0]
 8005772:	d504      	bpl.n	800577e <__sflush_r+0x7e>
 8005774:	1c42      	adds	r2, r0, #1
 8005776:	d101      	bne.n	800577c <__sflush_r+0x7c>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b903      	cbnz	r3, 800577e <__sflush_r+0x7e>
 800577c:	6560      	str	r0, [r4, #84]	; 0x54
 800577e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005780:	602f      	str	r7, [r5, #0]
 8005782:	2900      	cmp	r1, #0
 8005784:	d0c9      	beq.n	800571a <__sflush_r+0x1a>
 8005786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578a:	4299      	cmp	r1, r3
 800578c:	d002      	beq.n	8005794 <__sflush_r+0x94>
 800578e:	4628      	mov	r0, r5
 8005790:	f7ff febe 	bl	8005510 <_free_r>
 8005794:	2000      	movs	r0, #0
 8005796:	6360      	str	r0, [r4, #52]	; 0x34
 8005798:	e7c0      	b.n	800571c <__sflush_r+0x1c>
 800579a:	2301      	movs	r3, #1
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	1c41      	adds	r1, r0, #1
 80057a2:	d1c8      	bne.n	8005736 <__sflush_r+0x36>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c5      	beq.n	8005736 <__sflush_r+0x36>
 80057aa:	2b1d      	cmp	r3, #29
 80057ac:	d001      	beq.n	80057b2 <__sflush_r+0xb2>
 80057ae:	2b16      	cmp	r3, #22
 80057b0:	d101      	bne.n	80057b6 <__sflush_r+0xb6>
 80057b2:	602f      	str	r7, [r5, #0]
 80057b4:	e7b1      	b.n	800571a <__sflush_r+0x1a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	e7ad      	b.n	800571c <__sflush_r+0x1c>
 80057c0:	690f      	ldr	r7, [r1, #16]
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d0a9      	beq.n	800571a <__sflush_r+0x1a>
 80057c6:	0793      	lsls	r3, r2, #30
 80057c8:	680e      	ldr	r6, [r1, #0]
 80057ca:	bf08      	it	eq
 80057cc:	694b      	ldreq	r3, [r1, #20]
 80057ce:	600f      	str	r7, [r1, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2300      	movne	r3, #0
 80057d4:	eba6 0807 	sub.w	r8, r6, r7
 80057d8:	608b      	str	r3, [r1, #8]
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	dd9c      	ble.n	800571a <__sflush_r+0x1a>
 80057e0:	6a21      	ldr	r1, [r4, #32]
 80057e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057e4:	4643      	mov	r3, r8
 80057e6:	463a      	mov	r2, r7
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc06      	bgt.n	80057fe <__sflush_r+0xfe>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057fc:	e78e      	b.n	800571c <__sflush_r+0x1c>
 80057fe:	4407      	add	r7, r0
 8005800:	eba8 0800 	sub.w	r8, r8, r0
 8005804:	e7e9      	b.n	80057da <__sflush_r+0xda>
 8005806:	bf00      	nop
 8005808:	dfbffffe 	.word	0xdfbffffe

0800580c <_fflush_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b913      	cbnz	r3, 800581c <_fflush_r+0x10>
 8005816:	2500      	movs	r5, #0
 8005818:	4628      	mov	r0, r5
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	b118      	cbz	r0, 8005826 <_fflush_r+0x1a>
 800581e:	6a03      	ldr	r3, [r0, #32]
 8005820:	b90b      	cbnz	r3, 8005826 <_fflush_r+0x1a>
 8005822:	f7ff fc85 	bl	8005130 <__sinit>
 8005826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f3      	beq.n	8005816 <_fflush_r+0xa>
 800582e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005830:	07d0      	lsls	r0, r2, #31
 8005832:	d404      	bmi.n	800583e <_fflush_r+0x32>
 8005834:	0599      	lsls	r1, r3, #22
 8005836:	d402      	bmi.n	800583e <_fflush_r+0x32>
 8005838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800583a:	f7ff fe59 	bl	80054f0 <__retarget_lock_acquire_recursive>
 800583e:	4628      	mov	r0, r5
 8005840:	4621      	mov	r1, r4
 8005842:	f7ff ff5d 	bl	8005700 <__sflush_r>
 8005846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005848:	07da      	lsls	r2, r3, #31
 800584a:	4605      	mov	r5, r0
 800584c:	d4e4      	bmi.n	8005818 <_fflush_r+0xc>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	059b      	lsls	r3, r3, #22
 8005852:	d4e1      	bmi.n	8005818 <_fflush_r+0xc>
 8005854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005856:	f7ff fe4c 	bl	80054f2 <__retarget_lock_release_recursive>
 800585a:	e7dd      	b.n	8005818 <_fflush_r+0xc>

0800585c <__swhatbuf_r>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	460c      	mov	r4, r1
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	2900      	cmp	r1, #0
 8005866:	b096      	sub	sp, #88	; 0x58
 8005868:	4615      	mov	r5, r2
 800586a:	461e      	mov	r6, r3
 800586c:	da0d      	bge.n	800588a <__swhatbuf_r+0x2e>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	bf0c      	ite	eq
 800587a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800587e:	2340      	movne	r3, #64	; 0x40
 8005880:	2000      	movs	r0, #0
 8005882:	6031      	str	r1, [r6, #0]
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	b016      	add	sp, #88	; 0x58
 8005888:	bd70      	pop	{r4, r5, r6, pc}
 800588a:	466a      	mov	r2, sp
 800588c:	f000 f848 	bl	8005920 <_fstat_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	dbec      	blt.n	800586e <__swhatbuf_r+0x12>
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800589a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800589e:	4259      	negs	r1, r3
 80058a0:	4159      	adcs	r1, r3
 80058a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a6:	e7eb      	b.n	8005880 <__swhatbuf_r+0x24>

080058a8 <__smakebuf_r>:
 80058a8:	898b      	ldrh	r3, [r1, #12]
 80058aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058ac:	079d      	lsls	r5, r3, #30
 80058ae:	4606      	mov	r6, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	d507      	bpl.n	80058c4 <__smakebuf_r+0x1c>
 80058b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	2301      	movs	r3, #1
 80058be:	6163      	str	r3, [r4, #20]
 80058c0:	b002      	add	sp, #8
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	ab01      	add	r3, sp, #4
 80058c6:	466a      	mov	r2, sp
 80058c8:	f7ff ffc8 	bl	800585c <__swhatbuf_r>
 80058cc:	9900      	ldr	r1, [sp, #0]
 80058ce:	4605      	mov	r5, r0
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7ff fe89 	bl	80055e8 <_malloc_r>
 80058d6:	b948      	cbnz	r0, 80058ec <__smakebuf_r+0x44>
 80058d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058dc:	059a      	lsls	r2, r3, #22
 80058de:	d4ef      	bmi.n	80058c0 <__smakebuf_r+0x18>
 80058e0:	f023 0303 	bic.w	r3, r3, #3
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	e7e3      	b.n	80058b4 <__smakebuf_r+0xc>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	6020      	str	r0, [r4, #0]
 80058f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f4:	81a3      	strh	r3, [r4, #12]
 80058f6:	9b00      	ldr	r3, [sp, #0]
 80058f8:	6163      	str	r3, [r4, #20]
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	6120      	str	r0, [r4, #16]
 80058fe:	b15b      	cbz	r3, 8005918 <__smakebuf_r+0x70>
 8005900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005904:	4630      	mov	r0, r6
 8005906:	f000 f81d 	bl	8005944 <_isatty_r>
 800590a:	b128      	cbz	r0, 8005918 <__smakebuf_r+0x70>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	431d      	orrs	r5, r3
 800591c:	81a5      	strh	r5, [r4, #12]
 800591e:	e7cf      	b.n	80058c0 <__smakebuf_r+0x18>

08005920 <_fstat_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4d07      	ldr	r5, [pc, #28]	; (8005940 <_fstat_r+0x20>)
 8005924:	2300      	movs	r3, #0
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	f7fb f88c 	bl	8000a4a <_fstat>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	d102      	bne.n	800593c <_fstat_r+0x1c>
 8005936:	682b      	ldr	r3, [r5, #0]
 8005938:	b103      	cbz	r3, 800593c <_fstat_r+0x1c>
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	bd38      	pop	{r3, r4, r5, pc}
 800593e:	bf00      	nop
 8005940:	200145bc 	.word	0x200145bc

08005944 <_isatty_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4d06      	ldr	r5, [pc, #24]	; (8005960 <_isatty_r+0x1c>)
 8005948:	2300      	movs	r3, #0
 800594a:	4604      	mov	r4, r0
 800594c:	4608      	mov	r0, r1
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	f7fb f88b 	bl	8000a6a <_isatty>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d102      	bne.n	800595e <_isatty_r+0x1a>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	b103      	cbz	r3, 800595e <_isatty_r+0x1a>
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	200145bc 	.word	0x200145bc

08005964 <_sbrk_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4d06      	ldr	r5, [pc, #24]	; (8005980 <_sbrk_r+0x1c>)
 8005968:	2300      	movs	r3, #0
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f7fb f894 	bl	8000a9c <_sbrk>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_sbrk_r+0x1a>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_sbrk_r+0x1a>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	200145bc 	.word	0x200145bc

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
