
ADC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  0800046c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800046c  0800046c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800046c  0800046c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800046c  0800046c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000474  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000478  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000478  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000147f  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000523  00000000  00000000  000214f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000150  00000000  00000000  00021c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f685  00000000  00000000  00021d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ebb  00000000  00000000  000413d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2dcb  00000000  00000000  00043290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005b0  00000000  00000000  0010605c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0010660c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000454 	.word	0x08000454

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000454 	.word	0x08000454

08000204 <main>:



int main()

{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	pa1_adc_init();
 8000208:	f000 f80e 	bl	8000228 <pa1_adc_init>

	start_conversion();
 800020c:	f000 f83e 	bl	800028c <start_conversion>

	while (1)

    {

        adcValue = adc_read();
 8000210:	f000 f852 	bl	80002b8 <adc_read>
 8000214:	4603      	mov	r3, r0
 8000216:	4a03      	ldr	r2, [pc, #12]	; (8000224 <main+0x20>)
 8000218:	6013      	str	r3, [r2, #0]

        delayMs(500);
 800021a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021e:	f000 f85d 	bl	80002dc <delayMs>
        adcValue = adc_read();
 8000222:	e7f5      	b.n	8000210 <main+0xc>
 8000224:	20000020 	.word	0x20000020

08000228 <pa1_adc_init>:



void pa1_adc_init(void)

{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

    /**Configure the ADC GPIO pin **/

    // Enable clock access to GPIOA

    RCC->AHB1ENR |= GPIOAEN;
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <pa1_adc_init+0x58>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a13      	ldr	r2, [pc, #76]	; (8000280 <pa1_adc_init+0x58>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6313      	str	r3, [r2, #48]	; 0x30

    // Set the mode of PA1 to analog

    GPIOA->MODER |= (1U << 2);
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <pa1_adc_init+0x5c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <pa1_adc_init+0x5c>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U << 3);
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <pa1_adc_init+0x5c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <pa1_adc_init+0x5c>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6013      	str	r3, [r2, #0]

    /**Configure the ADC module**/

    // Enable clock access to ADC

    RCC->APB2ENR |= ADC1EN;
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <pa1_adc_init+0x58>)
 8000252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000254:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <pa1_adc_init+0x58>)
 8000256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025a:	6453      	str	r3, [r2, #68]	; 0x44

    // Set ADC channel 1 for conversion

    ADC1->SQR3 = ADC_CH1;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <pa1_adc_init+0x60>)
 800025e:	2201      	movs	r2, #1
 8000260:	635a      	str	r2, [r3, #52]	; 0x34

    // Set conversion sequence length to 1

    ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <pa1_adc_init+0x60>)
 8000264:	2200      	movs	r2, #0
 8000266:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable ADC

    ADC1->CR2 |= CR2_ADON;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <pa1_adc_init+0x60>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <pa1_adc_init+0x60>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6093      	str	r3, [r2, #8]

}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000
 8000288:	40012000 	.word	0x40012000

0800028c <start_conversion>:



void start_conversion(void)

{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0

	ADC1->CR2 |= 2;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <start_conversion+0x28>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <start_conversion+0x28>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	6093      	str	r3, [r2, #8]

    // Start ADC conversion

    ADC1->CR2 |= CR2_SWSTART;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <start_conversion+0x28>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <start_conversion+0x28>)
 80002a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002a6:	6093      	str	r3, [r2, #8]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40012000 	.word	0x40012000

080002b8 <adc_read>:



uint32_t adc_read(void)

{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

    // Wait for conversion to be complete

    while (!(ADC1->SR & SR_EOC));
 80002bc:	bf00      	nop
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <adc_read+0x20>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <adc_read+0x6>

    // Read converted result

    return (ADC1->DR);
 80002ca:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <adc_read+0x20>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

}
 80002ce:	4618      	mov	r0, r3
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	40012000 	.word	0x40012000

080002dc <delayMs>:



void delayMs(int n)

{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	int i;

	for (;n  > 0; n--)
 80002e4:	e00d      	b.n	8000302 <delayMs+0x26>

	for (i = 0; i < 3195; i++) ;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <delayMs+0x16>
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	f640 427a 	movw	r2, #3194	; 0xc7a
 80002f8:	4293      	cmp	r3, r2
 80002fa:	ddf7      	ble.n	80002ec <delayMs+0x10>
	for (;n  > 0; n--)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b01      	subs	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	dcee      	bgt.n	80002e6 <delayMs+0xa>
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3714      	adds	r7, #20
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800031a:	e7fe      	b.n	800031a <NMI_Handler+0x4>

0800031c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000320:	e7fe      	b.n	8000320 <HardFault_Handler+0x4>

08000322 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000326:	e7fe      	b.n	8000326 <MemManage_Handler+0x4>

08000328 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032c:	e7fe      	b.n	800032c <BusFault_Handler+0x4>

0800032e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000332:	e7fe      	b.n	8000332 <UsageFault_Handler+0x4>

08000334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000362:	f000 f83f 	bl	80003e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <SystemInit+0x20>)
 8000372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000376:	4a05      	ldr	r2, [pc, #20]	; (800038c <SystemInit+0x20>)
 8000378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800037c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000396:	490e      	ldr	r1, [pc, #56]	; (80003d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000398:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003ac:	4c0b      	ldr	r4, [pc, #44]	; (80003dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003ba:	f7ff ffd7 	bl	800036c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f000 f825 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f7ff ff1f 	bl	8000204 <main>
  bx  lr    
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d4:	08000474 	.word	0x08000474
  ldr r2, =_sbss
 80003d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003dc:	20000028 	.word	0x20000028

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_IncTick+0x20>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <HAL_IncTick+0x24>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4413      	add	r3, r2
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_IncTick+0x24>)
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000000 	.word	0x20000000
 8000408:	20000024 	.word	0x20000024

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	; (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	; (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	; (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	; (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
