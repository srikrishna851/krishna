
uart1_rx_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  08000454  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  08000454  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800045c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000460  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000460  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013de  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004db  00000000  00000000  00021455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00021b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f65b  00000000  00000000  00021c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ea5  00000000  00000000  000412ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d0d  00000000  00000000  00043153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000594  00000000  00000000  00105e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001063f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800043c 	.word	0x0800043c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800043c 	.word	0x0800043c

08000204 <main>:
void usart1_init(void);
void usart1_write(int ch);
char usart1_read(void);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	char c;
	usart1_init();
 800020a:	f000 f809 	bl	8000220 <usart1_init>
	while (1) {
	c = usart1_read();
 800020e:	f000 f863 	bl	80002d8 <usart1_read>
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	usart1_write(c);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f845 	bl	80002a8 <usart1_write>
	c = usart1_read();
 800021e:	e7f6      	b.n	800020e <main+0xa>

08000220 <usart1_init>:
	}

}

void usart1_init(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1;
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <usart1_init+0x7c>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a1c      	ldr	r2, [pc, #112]	; (800029c <usart1_init+0x7c>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= 0x00000010;
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <usart1_init+0x7c>)
 8000232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000234:	4a19      	ldr	r2, [pc, #100]	; (800029c <usart1_init+0x7c>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER &= ~0x003C0000;
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <usart1_init+0x80>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <usart1_init+0x80>)
 8000242:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000246:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00280000;
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <usart1_init+0x80>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <usart1_init+0x80>)
 800024e:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000252:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~0x0FF0;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <usart1_init+0x80>)
 8000256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <usart1_init+0x80>)
 800025a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800025e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= 0x0770 ; /* alt8 for UART1 */
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <usart1_init+0x80>)
 8000262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000264:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <usart1_init+0x80>)
 8000266:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 800026a:	6253      	str	r3, [r2, #36]	; 0x24
	USART1->BRR = 0x0683; /* 9600 baud @ 16 MHz */
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <usart1_init+0x84>)
 800026e:	f240 6283 	movw	r2, #1667	; 0x683
 8000272:	609a      	str	r2, [r3, #8]
	USART1->CR1 = 0x000C;/* enable Tx, Rx, 8-bit data */
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <usart1_init+0x84>)
 8000276:	220c      	movs	r2, #12
 8000278:	60da      	str	r2, [r3, #12]
	USART1->CR2 = 0x0000; /* 1 stop bit*/
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <usart1_init+0x84>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
	USART1->CR3 = 0x0000; /* no flow control */
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <usart1_init+0x84>)
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
	USART1->CR1 |= 0x2000; /*enable UART1 */
 8000286:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <usart1_init+0x84>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <usart1_init+0x84>)
 800028c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000290:	60d3      	str	r3, [r2, #12]

}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40011000 	.word	0x40011000

080002a8 <usart1_write>:

void usart1_write(int ch)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
while (!(USART1->SR & 0x0080)) {} // wait until Tx buffer empty
 80002b0:	bf00      	nop
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <usart1_write+0x2c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <usart1_write+0xa>
USART1->DR = (ch & 0xFF);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <usart1_write+0x2c>)
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	6053      	str	r3, [r2, #4]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40011000 	.word	0x40011000

080002d8 <usart1_read>:
/* Read a character from UART4 */
char usart1_read(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
while (!(USART1->SR & 0x0020)) {} // wait until char arrives
 80002dc:	bf00      	nop
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <usart1_read+0x24>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f003 0320 	and.w	r3, r3, #32
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <usart1_read+0x6>
return USART1->DR;
 80002ea:	4b04      	ldr	r3, [pc, #16]	; (80002fc <usart1_read+0x24>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	b2db      	uxtb	r3, r3
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40011000 	.word	0x40011000

08000300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <NMI_Handler+0x4>

08000306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030a:	e7fe      	b.n	800030a <HardFault_Handler+0x4>

0800030c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000310:	e7fe      	b.n	8000310 <MemManage_Handler+0x4>

08000312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000316:	e7fe      	b.n	8000316 <BusFault_Handler+0x4>

08000318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800031c:	e7fe      	b.n	800031c <UsageFault_Handler+0x4>

0800031e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034c:	f000 f83e 	bl	80003cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <SystemInit+0x20>)
 800035a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <SystemInit+0x20>)
 8000360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800037e:	490e      	ldr	r1, [pc, #56]	; (80003b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000394:	4c0b      	ldr	r4, [pc, #44]	; (80003c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003a2:	f7ff ffd7 	bl	8000354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a6:	f000 f825 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003aa:	f7ff ff2b 	bl	8000204 <main>
  bx  lr    
 80003ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003bc:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c4:	20000024 	.word	0x20000024

080003c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <HAL_IncTick+0x20>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_IncTick+0x24>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_IncTick+0x24>)
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4d0d      	ldr	r5, [pc, #52]	; (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	; (8000430 <__libc_init_array+0x3c>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2600      	movs	r6, #0
 8000400:	42a6      	cmp	r6, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4d0b      	ldr	r5, [pc, #44]	; (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	; (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2600      	movs	r6, #0
 8000412:	42a6      	cmp	r6, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f855 3b04 	ldr.w	r3, [r5], #4
 800041c:	4798      	blx	r3
 800041e:	3601      	adds	r6, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f855 3b04 	ldr.w	r3, [r5], #4
 8000426:	4798      	blx	r3
 8000428:	3601      	adds	r6, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
