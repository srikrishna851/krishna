
Project_W10_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08009c78  08009c78  00019c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a20c  0800a20c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a20c  0800a20c  0001a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a214  0800a214  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a214  0800a214  0001a214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004254  200001d8  0800a3f4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000442c  0800a3f4  0002442c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b3a  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ad  00000000  00000000  00036d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c9  00000000  00000000  0003b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024eaf  00000000  00000000  0003c769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ad2  00000000  00000000  00061618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda75  00000000  00000000  0007a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bf8  00000000  00000000  00157b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0015e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c5c 	.word	0x08009c5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009c5c 	.word	0x08009c5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <vApplicationGetIdleTaskMemory+0x30>)
 8000f9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200001f4 	.word	0x200001f4
 8000fb4:	20000248 	.word	0x20000248

08000fb8 <read_sensor_values>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float temperature, humidity;

void read_sensor_values(float *temperature, float *humidity)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t cmd = AHT25_MEASURE_CMD;
 8000fc2:	23ac      	movs	r3, #172	; 0xac
 8000fc4:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c1, AHT25_ADDR,&cmd, 1, HAL_MAX_DELAY);
 8000fc6:	f107 020f 	add.w	r2, r7, #15
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	2170      	movs	r1, #112	; 0x70
 8000fd4:	4836      	ldr	r0, [pc, #216]	; (80010b0 <read_sensor_values+0xf8>)
 8000fd6:	f001 fc05 	bl	80027e4 <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f001 f80a 	bl	8001ff4 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1,0x71, data, 6, HAL_MAX_DELAY);
 8000fe0:	f107 0210 	add.w	r2, r7, #16
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2306      	movs	r3, #6
 8000fec:	2171      	movs	r1, #113	; 0x71
 8000fee:	4830      	ldr	r0, [pc, #192]	; (80010b0 <read_sensor_values+0xf8>)
 8000ff0:	f001 fcf6 	bl	80029e0 <HAL_I2C_Master_Receive>

    *humidity = ((float)((data[1] << 12) | (data[2] << 4) | (data[3] >> 4))) / 1048576.0 * 100.0;
 8000ff4:	7c7b      	ldrb	r3, [r7, #17]
 8000ff6:	031a      	lsls	r2, r3, #12
 8000ff8:	7cbb      	ldrb	r3, [r7, #18]
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	7cfa      	ldrb	r2, [r7, #19]
 8001000:	0912      	lsrs	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	4313      	orrs	r3, r2
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	ee17 0a90 	vmov	r0, s15
 8001012:	f7ff fab9 	bl	8000588 <__aeabi_f2d>
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <read_sensor_values+0xfc>)
 800101c:	f7ff fc36 	bl	800088c <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <read_sensor_values+0x100>)
 800102e:	f7ff fb03 	bl	8000638 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fdd5 	bl	8000be8 <__aeabi_d2f>
 800103e:	4602      	mov	r2, r0
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	601a      	str	r2, [r3, #0]
    *temperature = ((float)(((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5])) / 1048576.0 * 200.0 - 50.0;
 8001044:	7cfb      	ldrb	r3, [r7, #19]
 8001046:	041b      	lsls	r3, r3, #16
 8001048:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4313      	orrs	r3, r2
 8001052:	7d7a      	ldrb	r2, [r7, #21]
 8001054:	4313      	orrs	r3, r2
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fa91 	bl	8000588 <__aeabi_f2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <read_sensor_values+0xfc>)
 800106c:	f7ff fc0e 	bl	800088c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <read_sensor_values+0x104>)
 800107e:	f7ff fadb 	bl	8000638 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <read_sensor_values+0x108>)
 8001090:	f7ff f91a 	bl	80002c8 <__aeabi_dsub>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fda4 	bl	8000be8 <__aeabi_d2f>
 80010a0:	4602      	mov	r2, r0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000448 	.word	0x20000448
 80010b4:	41300000 	.word	0x41300000
 80010b8:	40590000 	.word	0x40590000
 80010bc:	40690000 	.word	0x40690000
 80010c0:	40490000 	.word	0x40490000

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b09a      	sub	sp, #104	; 0x68
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f000 ff51 	bl	8001f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 fa81 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f000 fb6f 	bl	80017b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d6:	f000 fb43 	bl	8001760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010da:	f000 fae9 	bl	80016b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010de:	f000 fb15 	bl	800170c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  WE10_Init("iPhone 7","123456789");
 80010e2:	4927      	ldr	r1, [pc, #156]	; (8001180 <main+0xbc>)
 80010e4:	4827      	ldr	r0, [pc, #156]	; (8001184 <main+0xc0>)
 80010e6:	f000 f85f 	bl	80011a8 <WE10_Init>
    MQTT_Init();
 80010ea:	f000 f977 	bl	80013dc <MQTT_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <main+0xc4>)
 80010f0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80010f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80010fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f003 ff6c 	bl	8004fde <osMessageCreate>
 8001106:	4603      	mov	r3, r0
 8001108:	4a20      	ldr	r2, [pc, #128]	; (800118c <main+0xc8>)
 800110a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <main+0xcc>)
 800110e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001120:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fef9 	bl	8004f1e <osThreadCreate>
 800112c:	4603      	mov	r3, r0
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <main+0xd0>)
 8001130:	6013      	str	r3, [r2, #0]

  /* definition and creation of recive_temp_tas */
  osThreadDef(recive_temp_tas, recive_temp, osPriorityHigh, 0, 128);
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <main+0xd4>)
 8001134:	f107 0420 	add.w	r4, r7, #32
 8001138:	461d      	mov	r5, r3
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recive_temp_tasHandle = osThreadCreate(osThread(recive_temp_tas), NULL);
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f003 fee6 	bl	8004f1e <osThreadCreate>
 8001152:	4603      	mov	r3, r0
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <main+0xd8>)
 8001156:	6013      	str	r3, [r2, #0]

  /* definition and creation of send_temp2 */
  osThreadDef(send_temp2, send_temp, osPriorityLow, 0, 128);
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <main+0xdc>)
 800115a:	1d3c      	adds	r4, r7, #4
 800115c:	461d      	mov	r5, r3
 800115e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001162:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  send_temp2Handle = osThreadCreate(osThread(send_temp2), NULL);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fed5 	bl	8004f1e <osThreadCreate>
 8001174:	4603      	mov	r3, r0
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <main+0xe0>)
 8001178:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800117a:	f003 fec9 	bl	8004f10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800117e:	e7fe      	b.n	800117e <main+0xba>
 8001180:	08009c78 	.word	0x08009c78
 8001184:	08009c84 	.word	0x08009c84
 8001188:	08009c90 	.word	0x08009c90
 800118c:	20000530 	.word	0x20000530
 8001190:	08009cac 	.word	0x08009cac
 8001194:	20000524 	.word	0x20000524
 8001198:	08009cd8 	.word	0x08009cd8
 800119c:	20000528 	.word	0x20000528
 80011a0:	08009d00 	.word	0x08009d00
 80011a4:	2000052c 	.word	0x2000052c

080011a8 <WE10_Init>:
  * @brief System Clock Configuration
  * @retval None
  */

void WE10_Init (char *SSID, char *PASSWD)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0a2      	sub	sp, #136	; 0x88
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	char buffer[128];
	/********* CMD+RESET **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+RESET\r\n");
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4983      	ldr	r1, [pc, #524]	; (80013c4 <WE10_Init+0x21c>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 fbf5 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f874 	bl	80002b0 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f107 0108 	add.w	r1, r7, #8
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	487c      	ldr	r0, [pc, #496]	; (80013c8 <WE10_Init+0x220>)
 80011d6:	f003 fa6c 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f866 	bl	80002b0 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f107 0108 	add.w	r1, r7, #8
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	4876      	ldr	r0, [pc, #472]	; (80013cc <WE10_Init+0x224>)
 80011f2:	f003 fa5e 	bl	80046b2 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f858 	bl	80002b0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f107 0108 	add.w	r1, r7, #8
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	486e      	ldr	r0, [pc, #440]	; (80013c8 <WE10_Init+0x220>)
 800120e:	f003 fae2 	bl	80047d6 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f84a 	bl	80002b0 <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	b29a      	uxth	r2, r3
 8001220:	f107 0108 	add.w	r1, r7, #8
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	4868      	ldr	r0, [pc, #416]	; (80013cc <WE10_Init+0x224>)
 800122a:	f003 fa42 	bl	80046b2 <HAL_UART_Transmit>


	/*********  CMD+WIFIMODE=1  **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+WIFIMODE=1\r\n");
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	4967      	ldr	r1, [pc, #412]	; (80013d0 <WE10_Init+0x228>)
 8001234:	4618      	mov	r0, r3
 8001236:	f006 fbb7 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f836 	bl	80002b0 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	f107 0108 	add.w	r1, r7, #8
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	485d      	ldr	r0, [pc, #372]	; (80013c8 <WE10_Init+0x220>)
 8001252:	f003 fa2e 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f828 	bl	80002b0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	f107 0108 	add.w	r1, r7, #8
 8001268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126c:	4857      	ldr	r0, [pc, #348]	; (80013cc <WE10_Init+0x224>)
 800126e:	f003 fa20 	bl	80046b2 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f81a 	bl	80002b0 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f107 0108 	add.w	r1, r7, #8
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <WE10_Init+0x220>)
 800128a:	f003 faa4 	bl	80047d6 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f80c 	bl	80002b0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	f107 0108 	add.w	r1, r7, #8
 80012a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a4:	4849      	ldr	r0, [pc, #292]	; (80013cc <WE10_Init+0x224>)
 80012a6:	f003 fa04 	bl	80046b2 <HAL_UART_Transmit>


	/********* CMD+CONTOAP=SSID,PASSWD **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+CONTOAP=Realme 5.0GHz,12345678\r\n", SSID, PASSWD);
 80012aa:	f107 0008 	add.w	r0, r7, #8
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4948      	ldr	r1, [pc, #288]	; (80013d4 <WE10_Init+0x22c>)
 80012b4:	f006 fb78 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4618      	mov	r0, r3
 80012be:	f7fe fff7 	bl	80002b0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f107 0108 	add.w	r1, r7, #8
 80012ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80012ce:	483e      	ldr	r0, [pc, #248]	; (80013c8 <WE10_Init+0x220>)
 80012d0:	f003 f9ef 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4618      	mov	r0, r3
 80012da:	f7fe ffe9 	bl	80002b0 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f107 0108 	add.w	r1, r7, #8
 80012e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012ea:	4838      	ldr	r0, [pc, #224]	; (80013cc <WE10_Init+0x224>)
 80012ec:	f003 f9e1 	bl	80046b2 <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	HAL_Delay(2000);
 80012f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012f4:	f000 fe7e 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ffd7 	bl	80002b0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	f242 7310 	movw	r3, #10000	; 0x2710
 800130e:	482e      	ldr	r0, [pc, #184]	; (80013c8 <WE10_Init+0x220>)
 8001310:	f003 fa61 	bl	80047d6 <HAL_UART_Receive>
	HAL_Delay(500);
 8001314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001318:	f000 fe6c 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ffc5 	bl	80002b0 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f107 0108 	add.w	r1, r7, #8
 800132e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001332:	4826      	ldr	r0, [pc, #152]	; (80013cc <WE10_Init+0x224>)
 8001334:	f003 f9bd 	bl	80046b2 <HAL_UART_Transmit>

	/********* CMD?WIFI**********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD?WIFI\r\n");
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4926      	ldr	r1, [pc, #152]	; (80013d8 <WE10_Init+0x230>)
 800133e:	4618      	mov	r0, r3
 8001340:	f006 fb32 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ffb1 	bl	80002b0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	f107 0108 	add.w	r1, r7, #8
 8001356:	f242 7310 	movw	r3, #10000	; 0x2710
 800135a:	481b      	ldr	r0, [pc, #108]	; (80013c8 <WE10_Init+0x220>)
 800135c:	f003 f9a9 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ffa3 	bl	80002b0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 0108 	add.w	r1, r7, #8
 8001372:	f242 7310 	movw	r3, #10000	; 0x2710
 8001376:	4815      	ldr	r0, [pc, #84]	; (80013cc <WE10_Init+0x224>)
 8001378:	f003 f99b 	bl	80046b2 <HAL_UART_Transmit>
//	memset(&buffer[0],0x00,strlen(buffer));
//	HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ff95 	bl	80002b0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f107 0108 	add.w	r1, r7, #8
 800138e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <WE10_Init+0x220>)
 8001394:	f003 fa1f 	bl	80047d6 <HAL_UART_Receive>
	HAL_Delay(500);
 8001398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800139c:	f000 fe2a 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff83 	bl	80002b0 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	f107 0108 	add.w	r1, r7, #8
 80013b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <WE10_Init+0x224>)
 80013b8:	f003 f97b 	bl	80046b2 <HAL_UART_Transmit>


}
 80013bc:	bf00      	nop
 80013be:	3788      	adds	r7, #136	; 0x88
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	08009d1c 	.word	0x08009d1c
 80013c8:	2000049c 	.word	0x2000049c
 80013cc:	200004e0 	.word	0x200004e0
 80013d0:	08009d28 	.word	0x08009d28
 80013d4:	08009d3c 	.word	0x08009d3c
 80013d8:	08009d64 	.word	0x08009d64

080013dc <MQTT_Init>:

void MQTT_Init()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0a0      	sub	sp, #128	; 0x80
 80013e0:	af00      	add	r7, sp, #0

	char buffer[128];

	/*********CMD+MQTTNETCFG **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
 80013e2:	463b      	mov	r3, r7
 80013e4:	4975      	ldr	r1, [pc, #468]	; (80015bc <MQTT_Init+0x1e0>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f006 fade 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80013ec:	463b      	mov	r3, r7
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7fe ff5e 	bl	80002b0 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4639      	mov	r1, r7
 80013fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80013fe:	4870      	ldr	r0, [pc, #448]	; (80015c0 <MQTT_Init+0x1e4>)
 8001400:	f003 f957 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001404:	463b      	mov	r3, r7
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff52 	bl	80002b0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	4639      	mov	r1, r7
 8001412:	f242 7310 	movw	r3, #10000	; 0x2710
 8001416:	486b      	ldr	r0, [pc, #428]	; (80015c4 <MQTT_Init+0x1e8>)
 8001418:	f003 f94b 	bl	80046b2 <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800141c:	463b      	mov	r3, r7
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ff46 	bl	80002b0 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	4639      	mov	r1, r7
 800142a:	f242 7310 	movw	r3, #10000	; 0x2710
 800142e:	4864      	ldr	r0, [pc, #400]	; (80015c0 <MQTT_Init+0x1e4>)
 8001430:	f003 f9d1 	bl	80047d6 <HAL_UART_Receive>
	HAL_Delay(500);
 8001434:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001438:	f000 fddc 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 800143c:	463b      	mov	r3, r7
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ff36 	bl	80002b0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	4639      	mov	r1, r7
 800144a:	f242 7310 	movw	r3, #10000	; 0x2710
 800144e:	485d      	ldr	r0, [pc, #372]	; (80015c4 <MQTT_Init+0x1e8>)
 8001450:	f003 f92f 	bl	80046b2 <HAL_UART_Transmit>


	/*********CMD+MQTTCONCFG---->LED **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTCONCFG=3,mqtt-elmanjunath04-8gnaz2,,,,,,,,,\r\n");
 8001454:	463b      	mov	r3, r7
 8001456:	495c      	ldr	r1, [pc, #368]	; (80015c8 <MQTT_Init+0x1ec>)
 8001458:	4618      	mov	r0, r3
 800145a:	f006 faa5 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800145e:	463b      	mov	r3, r7
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe ff25 	bl	80002b0 <strlen>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	4639      	mov	r1, r7
 800146c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001470:	4853      	ldr	r0, [pc, #332]	; (80015c0 <MQTT_Init+0x1e4>)
 8001472:	f003 f91e 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001476:	463b      	mov	r3, r7
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff19 	bl	80002b0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	4639      	mov	r1, r7
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	484e      	ldr	r0, [pc, #312]	; (80015c4 <MQTT_Init+0x1e8>)
 800148a:	f003 f912 	bl	80046b2 <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800148e:	463b      	mov	r3, r7
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe ff0d 	bl	80002b0 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	4639      	mov	r1, r7
 800149c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a0:	4847      	ldr	r0, [pc, #284]	; (80015c0 <MQTT_Init+0x1e4>)
 80014a2:	f003 f998 	bl	80047d6 <HAL_UART_Receive>
	HAL_Delay(500);
 80014a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014aa:	f000 fda3 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fefd 	bl	80002b0 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4639      	mov	r1, r7
 80014bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c0:	4840      	ldr	r0, [pc, #256]	; (80015c4 <MQTT_Init+0x1e8>)
 80014c2:	f003 f8f6 	bl	80046b2 <HAL_UART_Transmit>


	/*********CMD+MQTTSTART **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSTART=1\r\n");
 80014c6:	463b      	mov	r3, r7
 80014c8:	4940      	ldr	r1, [pc, #256]	; (80015cc <MQTT_Init+0x1f0>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f006 fa6c 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80014d0:	463b      	mov	r3, r7
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe feec 	bl	80002b0 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4639      	mov	r1, r7
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	4837      	ldr	r0, [pc, #220]	; (80015c0 <MQTT_Init+0x1e4>)
 80014e4:	f003 f8e5 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014e8:	463b      	mov	r3, r7
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fee0 	bl	80002b0 <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4639      	mov	r1, r7
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	4832      	ldr	r0, [pc, #200]	; (80015c4 <MQTT_Init+0x1e8>)
 80014fc:	f003 f8d9 	bl	80046b2 <HAL_UART_Transmit>
//	memset(&buffer[0],0x00,strlen(buffer));
	HAL_Delay(5000);
 8001500:	f241 3088 	movw	r0, #5000	; 0x1388
 8001504:	f000 fd76 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001508:	463b      	mov	r3, r7
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fed0 	bl	80002b0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	4639      	mov	r1, r7
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	4829      	ldr	r0, [pc, #164]	; (80015c0 <MQTT_Init+0x1e4>)
 800151c:	f003 f95b 	bl	80047d6 <HAL_UART_Receive>
	HAL_Delay(500);
 8001520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001524:	f000 fd66 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001528:	463b      	mov	r3, r7
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fec0 	bl	80002b0 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	4639      	mov	r1, r7
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	4822      	ldr	r0, [pc, #136]	; (80015c4 <MQTT_Init+0x1e8>)
 800153c:	f003 f8b9 	bl	80046b2 <HAL_UART_Transmit>

	/*********CMD+MQTTSUB *********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSUB=base/relay/led1\r\n");
 8001540:	463b      	mov	r3, r7
 8001542:	4923      	ldr	r1, [pc, #140]	; (80015d0 <MQTT_Init+0x1f4>)
 8001544:	4618      	mov	r0, r3
 8001546:	f006 fa2f 	bl	80079a8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800154a:	463b      	mov	r3, r7
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe feaf 	bl	80002b0 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	b29a      	uxth	r2, r3
 8001556:	4639      	mov	r1, r7
 8001558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155c:	4818      	ldr	r0, [pc, #96]	; (80015c0 <MQTT_Init+0x1e4>)
 800155e:	f003 f8a8 	bl	80046b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001562:	463b      	mov	r3, r7
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fea3 	bl	80002b0 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	4639      	mov	r1, r7
 8001570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001574:	4813      	ldr	r0, [pc, #76]	; (80015c4 <MQTT_Init+0x1e8>)
 8001576:	f003 f89c 	bl	80046b2 <HAL_UART_Transmit>
	HAL_Delay(500);
 800157a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157e:	f000 fd39 	bl	8001ff4 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001582:	463b      	mov	r3, r7
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fe93 	bl	80002b0 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	4639      	mov	r1, r7
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	480a      	ldr	r0, [pc, #40]	; (80015c0 <MQTT_Init+0x1e4>)
 8001596:	f003 f91e 	bl	80047d6 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800159a:	463b      	mov	r3, r7
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe87 	bl	80002b0 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4639      	mov	r1, r7
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MQTT_Init+0x1e8>)
 80015ae:	f003 f880 	bl	80046b2 <HAL_UART_Transmit>

}
 80015b2:	bf00      	nop
 80015b4:	3780      	adds	r7, #128	; 0x80
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	08009d70 	.word	0x08009d70
 80015c0:	2000049c 	.word	0x2000049c
 80015c4:	200004e0 	.word	0x200004e0
 80015c8:	08009d98 	.word	0x08009d98
 80015cc:	08009dd0 	.word	0x08009dd0
 80015d0:	08009de4 	.word	0x08009de4

080015d4 <SystemClock_Config>:
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b094      	sub	sp, #80	; 0x50
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	2234      	movs	r2, #52	; 0x34
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f006 fa43 	bl	8007a6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <SystemClock_Config+0xd4>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <SystemClock_Config+0xd4>)
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <SystemClock_Config+0xd4>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <SystemClock_Config+0xd8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001620:	4a22      	ldr	r2, [pc, #136]	; (80016ac <SystemClock_Config+0xd8>)
 8001622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <SystemClock_Config+0xd8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	2310      	movs	r3, #16
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001640:	2302      	movs	r3, #2
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001648:	2310      	movs	r3, #16
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800164c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001650:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001652:	2304      	movs	r3, #4
 8001654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001656:	2302      	movs	r3, #2
 8001658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800165a:	2302      	movs	r3, #2
 800165c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fa8c 	bl	8003b80 <HAL_RCC_OscConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800166e:	f000 f9f5 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001672:	230f      	movs	r3, #15
 8001674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	2302      	movs	r3, #2
 8001678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2102      	movs	r1, #2
 800168e:	4618      	mov	r0, r3
 8001690:	f001 fefa 	bl	8003488 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800169a:	f000 f9df 	bl	8001a5c <Error_Handler>
  }
}
 800169e:	bf00      	nop
 80016a0:	3750      	adds	r7, #80	; 0x50
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000

080016b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f000 ff35 	bl	800255c <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 f9b0 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000448 	.word	0x20000448
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f002 ff68 	bl	8004618 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 f985 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000049c 	.word	0x2000049c
 800175c:	40011000 	.word	0x40011000

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f002 ff3e 	bl	8004618 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f95b 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200004e0 	.word	0x200004e0
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <MX_GPIO_Init+0xd0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a2c      	ldr	r2, [pc, #176]	; (8001884 <MX_GPIO_Init+0xd0>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_GPIO_Init+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <MX_GPIO_Init+0xd0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a25      	ldr	r2, [pc, #148]	; (8001884 <MX_GPIO_Init+0xd0>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_GPIO_Init+0xd0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <MX_GPIO_Init+0xd0>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_GPIO_Init+0xd0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <MX_GPIO_Init+0xd0>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_GPIO_Init+0xd0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2120      	movs	r1, #32
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_GPIO_Init+0xd4>)
 8001840:	f000 fe72 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_GPIO_Init+0xd8>)
 800185c:	f000 fcd0 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001860:	2320      	movs	r3, #32
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_GPIO_Init+0xd4>)
 8001878:	f000 fcc2 	bl	8002200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020800 	.word	0x40020800

08001890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001898:	2001      	movs	r0, #1
 800189a:	f003 fb8c 	bl	8004fb6 <osDelay>
 800189e:	e7fb      	b.n	8001898 <StartDefaultTask+0x8>

080018a0 <recive_temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recive_temp */
void recive_temp(void const * argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09c      	sub	sp, #112	; 0x70
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	for(;;)
	  {

	    if (xQueueReceive(myQueue01Handle, &temperature, MAX_DELAY) == pdTRUE)
 80018a8:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <recive_temp+0x128>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b0:	4946      	ldr	r1, [pc, #280]	; (80019cc <recive_temp+0x12c>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fea8 	bl	8005608 <xQueueReceive>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d13b      	bne.n	8001936 <recive_temp+0x96>
	    {

	      char buffer[100];

	      sprintf(buffer, "temperature=%.2f\r\n", temperature);
 80018be:	4b43      	ldr	r3, [pc, #268]	; (80019cc <recive_temp+0x12c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe60 	bl	8000588 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	f107 000c 	add.w	r0, r7, #12
 80018d0:	493f      	ldr	r1, [pc, #252]	; (80019d0 <recive_temp+0x130>)
 80018d2:	f006 f869 	bl	80079a8 <siprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer),1000);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fce8 	bl	80002b0 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f107 010c 	add.w	r1, r7, #12
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	4839      	ldr	r0, [pc, #228]	; (80019d4 <recive_temp+0x134>)
 80018ee:	f002 fee0 	bl	80046b2 <HAL_UART_Transmit>
	      HAL_Delay(1000);
 80018f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f6:	f000 fb7d 	bl	8001ff4 <HAL_Delay>

	      		sprintf (&buffer[0], "CMD+MQTTPUB=base/state/temperature,%.2f\r\n",temperature);
 80018fa:	4b34      	ldr	r3, [pc, #208]	; (80019cc <recive_temp+0x12c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe42 	bl	8000588 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	f107 000c 	add.w	r0, r7, #12
 800190c:	4932      	ldr	r1, [pc, #200]	; (80019d8 <recive_temp+0x138>)
 800190e:	f006 f84b 	bl	80079a8 <siprintf>
	      		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer),1000);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fcca 	bl	80002b0 <strlen>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	f107 010c 	add.w	r1, r7, #12
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	482c      	ldr	r0, [pc, #176]	; (80019dc <recive_temp+0x13c>)
 800192a:	f002 fec2 	bl	80046b2 <HAL_UART_Transmit>
	      		HAL_Delay(1000);
 800192e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001932:	f000 fb5f 	bl	8001ff4 <HAL_Delay>

	     // HAL_UART_Transmit_IT(&huart2,(uint8_t*)buffer, strlen(buffer));
	    	}
	    if (xQueueReceive(myQueue01Handle, &humidity, portMAX_DELAY) == pdTRUE)
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <recive_temp+0x128>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800193e:	4928      	ldr	r1, [pc, #160]	; (80019e0 <recive_temp+0x140>)
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fe61 	bl	8005608 <xQueueReceive>
 8001946:	4603      	mov	r3, r0
 8001948:	2b01      	cmp	r3, #1
 800194a:	d1ad      	bne.n	80018a8 <recive_temp+0x8>
	    	    {

	    	      char buffer[100];

	    	      sprintf(buffer, "humidity=%.2f\r\n", humidity);
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <recive_temp+0x140>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe19 	bl	8000588 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	f107 000c 	add.w	r0, r7, #12
 800195e:	4921      	ldr	r1, [pc, #132]	; (80019e4 <recive_temp+0x144>)
 8001960:	f006 f822 	bl	80079a8 <siprintf>
	    	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer),1000);
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fca1 	bl	80002b0 <strlen>
 800196e:	4603      	mov	r3, r0
 8001970:	b29a      	uxth	r2, r3
 8001972:	f107 010c 	add.w	r1, r7, #12
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	4816      	ldr	r0, [pc, #88]	; (80019d4 <recive_temp+0x134>)
 800197c:	f002 fe99 	bl	80046b2 <HAL_UART_Transmit>
	    	      HAL_Delay(1000);
 8001980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001984:	f000 fb36 	bl	8001ff4 <HAL_Delay>

	    	      sprintf (&buffer[0], "CMD+MQTTPUB=base/state/humidity,%.2f\r\n",humidity);
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <recive_temp+0x140>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdfb 	bl	8000588 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	f107 000c 	add.w	r0, r7, #12
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <recive_temp+0x148>)
 800199c:	f006 f804 	bl	80079a8 <siprintf>
	    	      HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer),1000);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fc83 	bl	80002b0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	f107 010c 	add.w	r1, r7, #12
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <recive_temp+0x13c>)
 80019b8:	f002 fe7b 	bl	80046b2 <HAL_UART_Transmit>
	    	      HAL_Delay(1000);
 80019bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c0:	f000 fb18 	bl	8001ff4 <HAL_Delay>
	    if (xQueueReceive(myQueue01Handle, &temperature, MAX_DELAY) == pdTRUE)
 80019c4:	e770      	b.n	80018a8 <recive_temp+0x8>
 80019c6:	bf00      	nop
 80019c8:	20000530 	.word	0x20000530
 80019cc:	20000534 	.word	0x20000534
 80019d0:	08009e04 	.word	0x08009e04
 80019d4:	200004e0 	.word	0x200004e0
 80019d8:	08009e18 	.word	0x08009e18
 80019dc:	2000049c 	.word	0x2000049c
 80019e0:	20000538 	.word	0x20000538
 80019e4:	08009e44 	.word	0x08009e44
 80019e8:	08009e54 	.word	0x08009e54

080019ec <send_temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_temp */
void send_temp(void const * argument)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_temp */
  /* Infinite loop */
  for(;;)
  {
	  read_sensor_values(&temperature, &humidity);
 80019f4:	490d      	ldr	r1, [pc, #52]	; (8001a2c <send_temp+0x40>)
 80019f6:	480e      	ldr	r0, [pc, #56]	; (8001a30 <send_temp+0x44>)
 80019f8:	f7ff fade 	bl	8000fb8 <read_sensor_values>
	     osDelay(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f003 fada 	bl	8004fb6 <osDelay>
	     xQueueSend(myQueue01Handle, &temperature, MAX_DELAY);
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <send_temp+0x48>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	2300      	movs	r3, #0
 8001a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a0c:	4908      	ldr	r1, [pc, #32]	; (8001a30 <send_temp+0x44>)
 8001a0e:	f003 fcfd 	bl	800540c <xQueueGenericSend>

	     xQueueSend(myQueue01Handle, &humidity, MAX_DELAY);
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <send_temp+0x48>)
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	2300      	movs	r3, #0
 8001a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a1c:	4903      	ldr	r1, [pc, #12]	; (8001a2c <send_temp+0x40>)
 8001a1e:	f003 fcf5 	bl	800540c <xQueueGenericSend>


    osDelay(100);
 8001a22:	2064      	movs	r0, #100	; 0x64
 8001a24:	f003 fac7 	bl	8004fb6 <osDelay>
	  read_sensor_values(&temperature, &humidity);
 8001a28:	e7e4      	b.n	80019f4 <send_temp+0x8>
 8001a2a:	bf00      	nop
 8001a2c:	20000538 	.word	0x20000538
 8001a30:	20000534 	.word	0x20000534
 8001a34:	20000530 	.word	0x20000530

08001a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a4a:	f000 fab3 	bl	8001fb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40010000 	.word	0x40010000

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <Error_Handler+0x8>
	...

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_MspInit+0x54>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_MspInit+0x54>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_MspInit+0x54>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_MspInit+0x54>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_MspInit+0x54>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_MspInit+0x54>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	210f      	movs	r1, #15
 8001aaa:	f06f 0001 	mvn.w	r0, #1
 8001aae:	f000 fb7d 	bl	80021ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_I2C_MspInit+0x84>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12b      	bne.n	8001b3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_I2C_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_I2C_MspInit+0x88>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_I2C_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b02:	2312      	movs	r3, #18
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <HAL_I2C_MspInit+0x8c>)
 8001b1a:	f000 fb71 	bl	8002200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_I2C_MspInit+0x88>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_I2C_MspInit+0x88>)
 8001b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_I2C_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40005400 	.word	0x40005400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020400 	.word	0x40020400

08001b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_UART_MspInit+0xe8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12d      	bne.n	8001bce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001baa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	481e      	ldr	r0, [pc, #120]	; (8001c40 <HAL_UART_MspInit+0xf0>)
 8001bc8:	f000 fb1a 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bcc:	e030      	b.n	8001c30 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_UART_MspInit+0xf4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d12b      	bne.n	8001c30 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be6:	6413      	str	r3, [r2, #64]	; 0x40
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6313      	str	r3, [r2, #48]	; 0x30
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_UART_MspInit+0xec>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c10:	230c      	movs	r3, #12
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c20:	2307      	movs	r3, #7
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <HAL_UART_MspInit+0xf0>)
 8001c2c:	f000 fae8 	bl	8002200 <HAL_GPIO_Init>
}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40004400 	.word	0x40004400

08001c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_InitTick+0xd0>)
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <HAL_InitTick+0xd0>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6453      	str	r3, [r2, #68]	; 0x44
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_InitTick+0xd0>)
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 fd1c 	bl	80036bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c84:	f001 fd06 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 8001c88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_InitTick+0xd4>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9b      	lsrs	r3, r3, #18
 8001c94:	3b01      	subs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_InitTick+0xd8>)
 8001c9a:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <HAL_InitTick+0xdc>)
 8001c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_InitTick+0xd8>)
 8001ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_InitTick+0xd8>)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cbe:	4818      	ldr	r0, [pc, #96]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cc0:	f002 f9fc 	bl	80040bc <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11b      	bne.n	8001d0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cd2:	4813      	ldr	r0, [pc, #76]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cd4:	f002 fa4c 	bl	8004170 <HAL_TIM_Base_Start_IT>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d111      	bne.n	8001d0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ce6:	2019      	movs	r0, #25
 8001ce8:	f000 fa7c 	bl	80021e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	d808      	bhi.n	8001d04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	2019      	movs	r0, #25
 8001cf8:	f000 fa58 	bl	80021ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_InitTick+0xe0>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e002      	b.n	8001d0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3730      	adds	r7, #48	; 0x30
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	431bde83 	.word	0x431bde83
 8001d20:	2000053c 	.word	0x2000053c
 8001d24:	40010000 	.word	0x40010000
 8001d28:	20000004 	.word	0x20000004

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d5e:	f002 fa77 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000053c 	.word	0x2000053c

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_kill>:

int _kill(int pid, int sig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d86:	f005 fec5 	bl	8007b14 <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2216      	movs	r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffe7 	bl	8001d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dae:	e7fe      	b.n	8001dae <_exit+0x12>

08001db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e00a      	b.n	8001dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dc2:	f3af 8000 	nop.w
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	60ba      	str	r2, [r7, #8]
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbf0      	blt.n	8001dc2 <_read+0x12>
  }

  return len;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e009      	b.n	8001e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf1      	blt.n	8001dfc <_write+0x12>
  }
  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_close>:

int _close(int file)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_isatty>:

int _isatty(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f005 fe2a 	bl	8007b14 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000584 	.word	0x20000584
 8001ef4:	20004430 	.word	0x20004430

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f38:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f46:	f7ff ffd7 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f005 fde9 	bl	8007b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4e:	f7ff f8b9 	bl	80010c4 <main>
  bx  lr    
 8001f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f60:	0800a21c 	.word	0x0800a21c
  ldr r2, =_sbss
 8001f64:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f68:	2000442c 	.word	0x2000442c

08001f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <HAL_Init+0x40>)
 8001f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_Init+0x40>)
 8001f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_Init+0x40>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 f8fc 	bl	8002196 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f7ff fe52 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fd60 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000588 	.word	0x20000588

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000588 	.word	0x20000588

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffde 	bl	8001fdc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000008 	.word	0x20000008

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ff4c 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021be:	f7ff ff61 	bl	8002084 <__NVIC_GetPriorityGrouping>
 80021c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	6978      	ldr	r0, [r7, #20]
 80021ca:	f7ff ffb1 	bl	8002130 <NVIC_EncodePriority>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff80 	bl	80020dc <__NVIC_SetPriority>
}
 80021dc:	bf00      	nop
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff54 	bl	80020a0 <__NVIC_EnableIRQ>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	e165      	b.n	80024e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	429a      	cmp	r2, r3
 8002236:	f040 8154 	bne.w	80024e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d005      	beq.n	8002252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	2b02      	cmp	r3, #2
 8002250:	d130      	bne.n	80022b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 0201 	and.w	r2, r3, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d017      	beq.n	80022f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d123      	bne.n	8002344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	08da      	lsrs	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3208      	adds	r2, #8
 8002304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0203 	and.w	r2, r3, #3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80ae 	beq.w	80024e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_GPIO_Init+0x300>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <HAL_GPIO_Init+0x300>)
 8002390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <HAL_GPIO_Init+0x300>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a2:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_GPIO_Init+0x304>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4f      	ldr	r2, [pc, #316]	; (8002508 <HAL_GPIO_Init+0x308>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x21a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_GPIO_Init+0x30c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x216>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_GPIO_Init+0x310>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x212>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_GPIO_Init+0x314>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x20e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <HAL_GPIO_Init+0x318>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x20a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4a      	ldr	r2, [pc, #296]	; (800251c <HAL_GPIO_Init+0x31c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x206>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a49      	ldr	r2, [pc, #292]	; (8002520 <HAL_GPIO_Init+0x320>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x202>
 80023fe:	2306      	movs	r3, #6
 8002400:	e00c      	b.n	800241c <HAL_GPIO_Init+0x21c>
 8002402:	2307      	movs	r3, #7
 8002404:	e00a      	b.n	800241c <HAL_GPIO_Init+0x21c>
 8002406:	2305      	movs	r3, #5
 8002408:	e008      	b.n	800241c <HAL_GPIO_Init+0x21c>
 800240a:	2304      	movs	r3, #4
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x21c>
 800240e:	2303      	movs	r3, #3
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x21c>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x21c>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x21c>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_GPIO_Init+0x304>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_GPIO_Init+0x324>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_GPIO_Init+0x324>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_GPIO_Init+0x324>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_GPIO_Init+0x324>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248e:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_GPIO_Init+0x324>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f ae96 	bls.w	800221c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e12b      	b.n	80027c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fa9c 	bl	8001ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c0:	f001 f854 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 80025c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a81      	ldr	r2, [pc, #516]	; (80027d0 <HAL_I2C_Init+0x274>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d807      	bhi.n	80025e0 <HAL_I2C_Init+0x84>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a80      	ldr	r2, [pc, #512]	; (80027d4 <HAL_I2C_Init+0x278>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e006      	b.n	80025ee <HAL_I2C_Init+0x92>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a7d      	ldr	r2, [pc, #500]	; (80027d8 <HAL_I2C_Init+0x27c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bf94      	ite	ls
 80025e8:	2301      	movls	r3, #1
 80025ea:	2300      	movhi	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0e7      	b.n	80027c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a78      	ldr	r2, [pc, #480]	; (80027dc <HAL_I2C_Init+0x280>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9b      	lsrs	r3, r3, #18
 8002600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a6a      	ldr	r2, [pc, #424]	; (80027d0 <HAL_I2C_Init+0x274>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d802      	bhi.n	8002630 <HAL_I2C_Init+0xd4>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3301      	adds	r3, #1
 800262e:	e009      	b.n	8002644 <HAL_I2C_Init+0xe8>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_I2C_Init+0x284>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	3301      	adds	r3, #1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	495c      	ldr	r1, [pc, #368]	; (80027d0 <HAL_I2C_Init+0x274>)
 8002660:	428b      	cmp	r3, r1
 8002662:	d819      	bhi.n	8002698 <HAL_I2C_Init+0x13c>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e59      	subs	r1, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002672:	1c59      	adds	r1, r3, #1
 8002674:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002678:	400b      	ands	r3, r1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_I2C_Init+0x138>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e59      	subs	r1, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fbb1 f3f3 	udiv	r3, r1, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002692:	e051      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 8002694:	2304      	movs	r3, #4
 8002696:	e04f      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <HAL_I2C_Init+0x168>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	440b      	add	r3, r1
 80026ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e012      	b.n	80026ea <HAL_I2C_Init+0x18e>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	0099      	lsls	r1, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Init+0x196>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e022      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10e      	bne.n	8002718 <HAL_I2C_Init+0x1bc>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1e58      	subs	r0, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	440b      	add	r3, r1
 8002708:	fbb0 f3f3 	udiv	r3, r0, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002716:	e00f      	b.n	8002738 <HAL_I2C_Init+0x1dc>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	0099      	lsls	r1, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	fbb0 f3f3 	udiv	r3, r0, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	6809      	ldr	r1, [r1, #0]
 800273c:	4313      	orrs	r3, r2
 800273e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6911      	ldr	r1, [r2, #16]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68d2      	ldr	r2, [r2, #12]
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	000186a0 	.word	0x000186a0
 80027d4:	001e847f 	.word	0x001e847f
 80027d8:	003d08ff 	.word	0x003d08ff
 80027dc:	431bde83 	.word	0x431bde83
 80027e0:	10624dd3 	.word	0x10624dd3

080027e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	461a      	mov	r2, r3
 80027f0:	460b      	mov	r3, r1
 80027f2:	817b      	strh	r3, [r7, #10]
 80027f4:	4613      	mov	r3, r2
 80027f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff fbf0 	bl	8001fdc <HAL_GetTick>
 80027fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	f040 80e0 	bne.w	80029cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2319      	movs	r3, #25
 8002812:	2201      	movs	r2, #1
 8002814:	4970      	ldr	r1, [pc, #448]	; (80029d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fc58 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
 8002824:	e0d3      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_I2C_Master_Transmit+0x50>
 8002830:	2302      	movs	r3, #2
 8002832:	e0cc      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ea>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d007      	beq.n	800285a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002868:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2221      	movs	r2, #33	; 0x21
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2210      	movs	r2, #16
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	893a      	ldrh	r2, [r7, #8]
 800288a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a50      	ldr	r2, [pc, #320]	; (80029dc <HAL_I2C_Master_Transmit+0x1f8>)
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800289c:	8979      	ldrh	r1, [r7, #10]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fac2 	bl	8002e2c <I2C_MasterRequestWrite>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e08d      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028c8:	e066      	b.n	8002998 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fcd2 	bl	8003278 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d107      	bne.n	80028f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06b      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_I2C_Master_Transmit+0x188>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d017      	beq.n	800296c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fcc2 	bl	80032fa <I2C_WaitOnBTFFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002992:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e01a      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	d194      	bne.n	80028ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	00100002 	.word	0x00100002
 80029dc:	ffff0000 	.word	0xffff0000

080029e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	461a      	mov	r2, r3
 80029ec:	460b      	mov	r3, r1
 80029ee:	817b      	strh	r3, [r7, #10]
 80029f0:	4613      	mov	r3, r2
 80029f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff faf2 	bl	8001fdc <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	f040 820b 	bne.w	8002e1e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2319      	movs	r3, #25
 8002a0e:	2201      	movs	r2, #1
 8002a10:	497c      	ldr	r1, [pc, #496]	; (8002c04 <HAL_I2C_Master_Receive+0x224>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fb5a 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e1fe      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_I2C_Master_Receive+0x50>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e1f7      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d007      	beq.n	8002a56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2222      	movs	r2, #34	; 0x22
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2210      	movs	r2, #16
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	893a      	ldrh	r2, [r7, #8]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a5c      	ldr	r2, [pc, #368]	; (8002c08 <HAL_I2C_Master_Receive+0x228>)
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa46 	bl	8002f30 <I2C_MasterRequestRead>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1b8      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	623b      	str	r3, [r7, #32]
 8002aca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e18c      	b.n	8002df8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d11b      	bne.n	8002b1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e16c      	b.n	8002df8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d11b      	bne.n	8002b5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	e14c      	b.n	8002df8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b84:	e138      	b.n	8002df8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	f200 80f1 	bhi.w	8002d72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d123      	bne.n	8002be0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fbed 	bl	800337c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e139      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bde:	e10b      	b.n	8002df8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d14e      	bne.n	8002c86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4906      	ldr	r1, [pc, #24]	; (8002c0c <HAL_I2C_Master_Receive+0x22c>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fa6a 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e10e      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
 8002c02:	bf00      	nop
 8002c04:	00100002 	.word	0x00100002
 8002c08:	ffff0000 	.word	0xffff0000
 8002c0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c84:	e0b8      	b.n	8002df8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4966      	ldr	r1, [pc, #408]	; (8002e28 <HAL_I2C_Master_Receive+0x448>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fa1b 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0bf      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	2200      	movs	r2, #0
 8002cea:	494f      	ldr	r1, [pc, #316]	; (8002e28 <HAL_I2C_Master_Receive+0x448>)
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f9ed 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e091      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d70:	e042      	b.n	8002df8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fb00 	bl	800337c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e04c      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d118      	bne.n	8002df8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f47f aec2 	bne.w	8002b86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	00010004 	.word	0x00010004

08002e2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d006      	beq.n	8002e56 <I2C_MasterRequestWrite+0x2a>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d003      	beq.n	8002e56 <I2C_MasterRequestWrite+0x2a>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e54:	d108      	bne.n	8002e68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e00b      	b.n	8002e80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	2b12      	cmp	r3, #18
 8002e6e:	d107      	bne.n	8002e80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f91d 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00d      	beq.n	8002eb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea6:	d103      	bne.n	8002eb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e035      	b.n	8002f20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ebc:	d108      	bne.n	8002ed0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ecc:	611a      	str	r2, [r3, #16]
 8002ece:	e01b      	b.n	8002f08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ed0:	897b      	ldrh	r3, [r7, #10]
 8002ed2:	11db      	asrs	r3, r3, #7
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 0306 	and.w	r3, r3, #6
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f063 030f 	orn	r3, r3, #15
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <I2C_MasterRequestWrite+0xfc>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f943 	bl	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e010      	b.n	8002f20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <I2C_MasterRequestWrite+0x100>)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f933 	bl	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	00010008 	.word	0x00010008
 8002f2c:	00010002 	.word	0x00010002

08002f30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d006      	beq.n	8002f6a <I2C_MasterRequestRead+0x3a>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d003      	beq.n	8002f6a <I2C_MasterRequestRead+0x3a>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e00b      	b.n	8002f94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	2b11      	cmp	r3, #17
 8002f82:	d107      	bne.n	8002f94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f893 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d103      	bne.n	8002fc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e079      	b.n	80030bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd0:	d108      	bne.n	8002fe4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]
 8002fe2:	e05f      	b.n	80030a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fe4:	897b      	ldrh	r3, [r7, #10]
 8002fe6:	11db      	asrs	r3, r3, #7
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 0306 	and.w	r3, r3, #6
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f063 030f 	orn	r3, r3, #15
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4930      	ldr	r1, [pc, #192]	; (80030c4 <I2C_MasterRequestRead+0x194>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8b9 	bl	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e054      	b.n	80030bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4929      	ldr	r1, [pc, #164]	; (80030c8 <I2C_MasterRequestRead+0x198>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f8a9 	bl	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e044      	b.n	80030bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003056:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f831 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307e:	d103      	bne.n	8003088 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e017      	b.n	80030bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800308c:	897b      	ldrh	r3, [r7, #10]
 800308e:	11db      	asrs	r3, r3, #7
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 0306 	and.w	r3, r3, #6
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f063 030e 	orn	r3, r3, #14
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <I2C_MasterRequestRead+0x198>)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f865 	bl	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	00010008 	.word	0x00010008
 80030c8:	00010002 	.word	0x00010002

080030cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030dc:	e025      	b.n	800312a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e4:	d021      	beq.n	800312a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe ff79 	bl	8001fdc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e023      	b.n	8003172 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10d      	bne.n	8003150 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	43da      	mvns	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	e00c      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	43da      	mvns	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4013      	ands	r3, r2
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	429a      	cmp	r2, r3
 800316e:	d0b6      	beq.n	80030de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003188:	e051      	b.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003198:	d123      	bne.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f043 0204 	orr.w	r2, r3, #4
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e046      	b.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e8:	d021      	beq.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fe fef7 	bl	8001fdc <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d116      	bne.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e020      	b.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10c      	bne.n	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e00b      	b.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	43da      	mvns	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d18d      	bne.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003284:	e02d      	b.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f8ce 	bl	8003428 <I2C_IsAcknowledgeFailed>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e02d      	b.n	80032f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800329c:	d021      	beq.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7fe fe9d 	bl	8001fdc <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d116      	bne.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e007      	b.n	80032f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d1ca      	bne.n	8003286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003306:	e02d      	b.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f88d 	bl	8003428 <I2C_IsAcknowledgeFailed>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e02d      	b.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331e:	d021      	beq.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003320:	f7fe fe5c 	bl	8001fdc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d302      	bcc.n	8003336 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e007      	b.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d1ca      	bne.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003388:	e042      	b.n	8003410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b10      	cmp	r3, #16
 8003396:	d119      	bne.n	80033cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0210 	mvn.w	r2, #16
 80033a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e029      	b.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033cc:	f7fe fe06 	bl	8001fdc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d1b5      	bne.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d11b      	bne.n	8003478 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003448:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f043 0204 	orr.w	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0cc      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d90c      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0b8      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034dc:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4a58      	ldr	r2, [pc, #352]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	494d      	ldr	r1, [pc, #308]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d044      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d119      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e07f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d003      	beq.n	8003546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	2b03      	cmp	r3, #3
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e067      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b37      	ldr	r3, [pc, #220]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4934      	ldr	r1, [pc, #208]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe fd30 	bl	8001fdc <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe fd2c 	bl	8001fdc <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e04f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d20c      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e032      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4916      	ldr	r1, [pc, #88]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	490e      	ldr	r1, [pc, #56]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360e:	f000 f887 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8003612:	4602      	mov	r2, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	490a      	ldr	r1, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	5ccb      	ldrb	r3, [r1, r3]
 8003622:	fa22 f303 	lsr.w	r3, r2, r3
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fb0a 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023c00 	.word	0x40023c00
 8003644:	40023800 	.word	0x40023800
 8003648:	08009e84 	.word	0x08009e84
 800364c:	20000000 	.word	0x20000000
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_GetHCLKFreq+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003670:	f7ff fff0 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0a9b      	lsrs	r3, r3, #10
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	08009e94 	.word	0x08009e94

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003698:	f7ff ffdc 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0b5b      	lsrs	r3, r3, #13
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08009e94 	.word	0x08009e94

080036bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	220f      	movs	r2, #15
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_RCC_GetClockConfig+0x60>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40023c00 	.word	0x40023c00

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b0ae      	sub	sp, #184	; 0xb8
 8003726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003746:	4bcb      	ldr	r3, [pc, #812]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b0c      	cmp	r3, #12
 8003750:	f200 8206 	bhi.w	8003b60 <HAL_RCC_GetSysClockFreq+0x440>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003791 	.word	0x08003791
 8003760:	08003b61 	.word	0x08003b61
 8003764:	08003b61 	.word	0x08003b61
 8003768:	08003b61 	.word	0x08003b61
 800376c:	08003799 	.word	0x08003799
 8003770:	08003b61 	.word	0x08003b61
 8003774:	08003b61 	.word	0x08003b61
 8003778:	08003b61 	.word	0x08003b61
 800377c:	080037a1 	.word	0x080037a1
 8003780:	08003b61 	.word	0x08003b61
 8003784:	08003b61 	.word	0x08003b61
 8003788:	08003b61 	.word	0x08003b61
 800378c:	08003991 	.word	0x08003991
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4bb9      	ldr	r3, [pc, #740]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003796:	e1e7      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003798:	4bb8      	ldr	r3, [pc, #736]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x35c>)
 800379a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800379e:	e1e3      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4bb4      	ldr	r3, [pc, #720]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ac:	4bb1      	ldr	r3, [pc, #708]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d071      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b8:	4bae      	ldr	r3, [pc, #696]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80037c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f0:	0150      	lsls	r0, r2, #5
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4621      	mov	r1, r4
 80037f8:	1a51      	subs	r1, r2, r1
 80037fa:	6439      	str	r1, [r7, #64]	; 0x40
 80037fc:	4629      	mov	r1, r5
 80037fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003802:	647b      	str	r3, [r7, #68]	; 0x44
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003810:	4649      	mov	r1, r9
 8003812:	018b      	lsls	r3, r1, #6
 8003814:	4641      	mov	r1, r8
 8003816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381a:	4641      	mov	r1, r8
 800381c:	018a      	lsls	r2, r1, #6
 800381e:	4641      	mov	r1, r8
 8003820:	1a51      	subs	r1, r2, r1
 8003822:	63b9      	str	r1, [r7, #56]	; 0x38
 8003824:	4649      	mov	r1, r9
 8003826:	eb63 0301 	sbc.w	r3, r3, r1
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003838:	4649      	mov	r1, r9
 800383a:	00cb      	lsls	r3, r1, #3
 800383c:	4641      	mov	r1, r8
 800383e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003842:	4641      	mov	r1, r8
 8003844:	00ca      	lsls	r2, r1, #3
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	4603      	mov	r3, r0
 800384c:	4622      	mov	r2, r4
 800384e:	189b      	adds	r3, r3, r2
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
 8003852:	462b      	mov	r3, r5
 8003854:	460a      	mov	r2, r1
 8003856:	eb42 0303 	adc.w	r3, r2, r3
 800385a:	637b      	str	r3, [r7, #52]	; 0x34
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003868:	4629      	mov	r1, r5
 800386a:	024b      	lsls	r3, r1, #9
 800386c:	4621      	mov	r1, r4
 800386e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003872:	4621      	mov	r1, r4
 8003874:	024a      	lsls	r2, r1, #9
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003888:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800388c:	f7fd f9fc 	bl	8000c88 <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4613      	mov	r3, r2
 8003896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800389a:	e067      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389c:	4b75      	ldr	r3, [pc, #468]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80038ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038b6:	2300      	movs	r3, #0
 80038b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	0159      	lsls	r1, r3, #5
 80038cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d0:	0150      	lsls	r0, r2, #5
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4621      	mov	r1, r4
 80038d8:	1a51      	subs	r1, r2, r1
 80038da:	62b9      	str	r1, [r7, #40]	; 0x28
 80038dc:	4629      	mov	r1, r5
 80038de:	eb63 0301 	sbc.w	r3, r3, r1
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80038f0:	4649      	mov	r1, r9
 80038f2:	018b      	lsls	r3, r1, #6
 80038f4:	4641      	mov	r1, r8
 80038f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fa:	4641      	mov	r1, r8
 80038fc:	018a      	lsls	r2, r1, #6
 80038fe:	4641      	mov	r1, r8
 8003900:	ebb2 0a01 	subs.w	sl, r2, r1
 8003904:	4649      	mov	r1, r9
 8003906:	eb63 0b01 	sbc.w	fp, r3, r1
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003916:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800391a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800391e:	4692      	mov	sl, r2
 8003920:	469b      	mov	fp, r3
 8003922:	4623      	mov	r3, r4
 8003924:	eb1a 0303 	adds.w	r3, sl, r3
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	462b      	mov	r3, r5
 800392c:	eb4b 0303 	adc.w	r3, fp, r3
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800393e:	4629      	mov	r1, r5
 8003940:	028b      	lsls	r3, r1, #10
 8003942:	4621      	mov	r1, r4
 8003944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003948:	4621      	mov	r1, r4
 800394a:	028a      	lsls	r2, r1, #10
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003954:	2200      	movs	r2, #0
 8003956:	673b      	str	r3, [r7, #112]	; 0x70
 8003958:	677a      	str	r2, [r7, #116]	; 0x74
 800395a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800395e:	f7fd f993 	bl	8000c88 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4613      	mov	r3, r2
 8003968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800396c:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	3301      	adds	r3, #1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800397e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800398e:	e0eb      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003990:	4b38      	ldr	r3, [pc, #224]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399c:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d06b      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a8:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	099b      	lsrs	r3, r3, #6
 80039ae:	2200      	movs	r2, #0
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	663b      	str	r3, [r7, #96]	; 0x60
 80039bc:	2300      	movs	r3, #0
 80039be:	667b      	str	r3, [r7, #100]	; 0x64
 80039c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80039c4:	4622      	mov	r2, r4
 80039c6:	462b      	mov	r3, r5
 80039c8:	f04f 0000 	mov.w	r0, #0
 80039cc:	f04f 0100 	mov.w	r1, #0
 80039d0:	0159      	lsls	r1, r3, #5
 80039d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d6:	0150      	lsls	r0, r2, #5
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4621      	mov	r1, r4
 80039de:	1a51      	subs	r1, r2, r1
 80039e0:	61b9      	str	r1, [r7, #24]
 80039e2:	4629      	mov	r1, r5
 80039e4:	eb63 0301 	sbc.w	r3, r3, r1
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039f6:	4659      	mov	r1, fp
 80039f8:	018b      	lsls	r3, r1, #6
 80039fa:	4651      	mov	r1, sl
 80039fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a00:	4651      	mov	r1, sl
 8003a02:	018a      	lsls	r2, r1, #6
 8003a04:	4651      	mov	r1, sl
 8003a06:	ebb2 0801 	subs.w	r8, r2, r1
 8003a0a:	4659      	mov	r1, fp
 8003a0c:	eb63 0901 	sbc.w	r9, r3, r1
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a24:	4690      	mov	r8, r2
 8003a26:	4699      	mov	r9, r3
 8003a28:	4623      	mov	r3, r4
 8003a2a:	eb18 0303 	adds.w	r3, r8, r3
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	462b      	mov	r3, r5
 8003a32:	eb49 0303 	adc.w	r3, r9, r3
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a44:	4629      	mov	r1, r5
 8003a46:	024b      	lsls	r3, r1, #9
 8003a48:	4621      	mov	r1, r4
 8003a4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a4e:	4621      	mov	r1, r4
 8003a50:	024a      	lsls	r2, r1, #9
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a64:	f7fd f910 	bl	8000c88 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a72:	e065      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x420>
 8003a74:	40023800 	.word	0x40023800
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a80:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	2200      	movs	r2, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a90:	653b      	str	r3, [r7, #80]	; 0x50
 8003a92:	2300      	movs	r3, #0
 8003a94:	657b      	str	r3, [r7, #84]	; 0x54
 8003a96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a9a:	4642      	mov	r2, r8
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	f04f 0000 	mov.w	r0, #0
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	0159      	lsls	r1, r3, #5
 8003aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aac:	0150      	lsls	r0, r2, #5
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	1a51      	subs	r1, r2, r1
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	4649      	mov	r1, r9
 8003aba:	eb63 0301 	sbc.w	r3, r3, r1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003acc:	4659      	mov	r1, fp
 8003ace:	018b      	lsls	r3, r1, #6
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	018a      	lsls	r2, r1, #6
 8003ada:	4651      	mov	r1, sl
 8003adc:	1a54      	subs	r4, r2, r1
 8003ade:	4659      	mov	r1, fp
 8003ae0:	eb63 0501 	sbc.w	r5, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	464b      	mov	r3, r9
 8003b00:	eb45 0303 	adc.w	r3, r5, r3
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b12:	4629      	mov	r1, r5
 8003b14:	028b      	lsls	r3, r1, #10
 8003b16:	4621      	mov	r1, r4
 8003b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	028a      	lsls	r2, r1, #10
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b28:	2200      	movs	r2, #0
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b32:	f7fd f8a9 	bl	8000c88 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	0f1b      	lsrs	r3, r3, #28
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b5e:	e003      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	37b8      	adds	r7, #184	; 0xb8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400

08003b80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e28d      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8083 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ba0:	4b94      	ldr	r3, [pc, #592]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d019      	beq.n	8003be0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bac:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bb8:	4b8e      	ldr	r3, [pc, #568]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc4:	d00c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d112      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bde:	d10b      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	4b84      	ldr	r3, [pc, #528]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05b      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x124>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d157      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e25a      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x90>
 8003c02:	4b7c      	ldr	r3, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7b      	ldr	r2, [pc, #492]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e01d      	b.n	8003c4c <HAL_RCC_OscConfig+0xcc>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0xb4>
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a75      	ldr	r2, [pc, #468]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b73      	ldr	r3, [pc, #460]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a72      	ldr	r2, [pc, #456]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0xcc>
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6b      	ldr	r2, [pc, #428]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe f9c2 	bl	8001fdc <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe f9be 	bl	8001fdc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e21f      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0xdc>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f9ae 	bl	8001fdc <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe f9aa 	bl	8001fdc <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e20b      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x104>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d06f      	beq.n	8003d92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cb2:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d017      	beq.n	8003cee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cca:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d11c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce2:	4b44      	ldr	r3, [pc, #272]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x186>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1d3      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4937      	ldr	r1, [pc, #220]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	e03a      	b.n	8003d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d24:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCC_OscConfig+0x278>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fe f957 	bl	8001fdc <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fe f953 	bl	8001fdc <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1b4      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4925      	ldr	r1, [pc, #148]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
 8003d64:	e015      	b.n	8003d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCC_OscConfig+0x278>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe f936 	bl	8001fdc <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fe f932 	bl	8001fdc <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e193      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCC_OscConfig+0x27c>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fe f916 	bl	8001fdc <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fe f912 	bl	8001fdc <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e173      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x234>
 8003dd2:	e01b      	b.n	8003e0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dda:	f7fe f8ff 	bl	8001fdc <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	e00e      	b.n	8003e00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fe f8fb 	bl	8001fdc <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d907      	bls.n	8003e00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e15c      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	42470000 	.word	0x42470000
 8003dfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	4b8a      	ldr	r3, [pc, #552]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ea      	bne.n	8003de2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8097 	beq.w	8003f48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1e:	4b83      	ldr	r3, [pc, #524]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	4b7f      	ldr	r3, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	4a7e      	ldr	r2, [pc, #504]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e38:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3a:	4b7c      	ldr	r3, [pc, #496]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b79      	ldr	r3, [pc, #484]	; (8004030 <HAL_RCC_OscConfig+0x4b0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e56:	4b76      	ldr	r3, [pc, #472]	; (8004030 <HAL_RCC_OscConfig+0x4b0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a75      	ldr	r2, [pc, #468]	; (8004030 <HAL_RCC_OscConfig+0x4b0>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fe f8bb 	bl	8001fdc <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7fe f8b7 	bl	8001fdc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e118      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	4b6c      	ldr	r3, [pc, #432]	; (8004030 <HAL_RCC_OscConfig+0x4b0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x31e>
 8003e90:	4b66      	ldr	r3, [pc, #408]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a65      	ldr	r2, [pc, #404]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	e01c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x358>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x340>
 8003ea6:	4b61      	ldr	r3, [pc, #388]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a60      	ldr	r2, [pc, #384]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b5e      	ldr	r3, [pc, #376]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a5d      	ldr	r2, [pc, #372]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0x358>
 8003ec0:	4b5a      	ldr	r3, [pc, #360]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4a59      	ldr	r2, [pc, #356]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ecc:	4b57      	ldr	r3, [pc, #348]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a56      	ldr	r2, [pc, #344]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003ed2:	f023 0304 	bic.w	r3, r3, #4
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d015      	beq.n	8003f0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe f87c 	bl	8001fdc <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fe f878 	bl	8001fdc <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0d7      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ee      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x368>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe f866 	bl	8001fdc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fe f862 	bl	8001fdc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0c1      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2a:	4b40      	ldr	r3, [pc, #256]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ee      	bne.n	8003f14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4a3a      	ldr	r2, [pc, #232]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80ad 	beq.w	80040ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f52:	4b36      	ldr	r3, [pc, #216]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d060      	beq.n	8004020 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d145      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b33      	ldr	r3, [pc, #204]	; (8004034 <HAL_RCC_OscConfig+0x4b4>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe f836 	bl	8001fdc <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fe f832 	bl	8001fdc <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e093      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	071b      	lsls	r3, r3, #28
 8003fbe:	491b      	ldr	r1, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <HAL_RCC_OscConfig+0x4b4>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe f807 	bl	8001fdc <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe f803 	bl	8001fdc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e064      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	4b11      	ldr	r3, [pc, #68]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x452>
 8003ff0:	e05c      	b.n	80040ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_RCC_OscConfig+0x4b4>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fff0 	bl	8001fdc <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd ffec 	bl	8001fdc <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e04d      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_OscConfig+0x4ac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x480>
 800401e:	e045      	b.n	80040ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e040      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
 800402c:	40023800 	.word	0x40023800
 8004030:	40007000 	.word	0x40007000
 8004034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004038:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <HAL_RCC_OscConfig+0x538>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d030      	beq.n	80040a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d129      	bne.n	80040a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d122      	bne.n	80040a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800406e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004070:	4293      	cmp	r3, r2
 8004072:	d119      	bne.n	80040a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	3b01      	subs	r3, #1
 8004082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d10f      	bne.n	80040a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800

080040bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e041      	b.n	8004152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f839 	bl	800415a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f000 f9d8 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e04e      	b.n	8004226 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a23      	ldr	r2, [pc, #140]	; (8004234 <HAL_TIM_Base_Start_IT+0xc4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d01d      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_TIM_Base_Start_IT+0xc8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <HAL_TIM_Base_Start_IT+0xcc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <HAL_TIM_Base_Start_IT+0xd4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_TIM_Base_Start_IT+0xd8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_TIM_Base_Start_IT+0xdc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d111      	bne.n	8004214 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d010      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	e007      	b.n	8004224 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40010400 	.word	0x40010400
 8004248:	40014000 	.word	0x40014000
 800424c:	40001800 	.word	0x40001800

08004250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0202 	mvn.w	r2, #2
 800427c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8ee 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8e0 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8f1 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d122      	bne.n	8004300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0204 	mvn.w	r2, #4
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8c4 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f8b6 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8c7 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b08      	cmp	r3, #8
 800430c:	d122      	bne.n	8004354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b08      	cmp	r3, #8
 800431a:	d11b      	bne.n	8004354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0208 	mvn.w	r2, #8
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f89a 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f88c 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f89d 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b10      	cmp	r3, #16
 8004360:	d122      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d11b      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0210 	mvn.w	r2, #16
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2208      	movs	r2, #8
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f870 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f862 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f873 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10e      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0201 	mvn.w	r2, #1
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd fb32 	bl	8001a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b80      	cmp	r3, #128	; 0x80
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f902 	bl	8004604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f838 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b20      	cmp	r3, #32
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0220 	mvn.w	r2, #32
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f8cc 	bl	80045f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3d      	ldr	r2, [pc, #244]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <TIM_Base_SetConfig+0x128>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <TIM_Base_SetConfig+0x12c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0x134>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <TIM_Base_SetConfig+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <TIM_Base_SetConfig+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0xf8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800
 80045e4:	40001800 	.word	0x40001800
 80045e8:	40001c00 	.word	0x40001c00
 80045ec:	40002000 	.word	0x40002000

080045f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e03f      	b.n	80046aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd fa86 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f9cb 	bl	80049f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b08a      	sub	sp, #40	; 0x28
 80046b6:	af02      	add	r7, sp, #8
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d17c      	bne.n	80047cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_UART_Transmit+0x2c>
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e075      	b.n	80047ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Transmit+0x3e>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e06e      	b.n	80047ce <HAL_UART_Transmit+0x11c>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2221      	movs	r2, #33	; 0x21
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004706:	f7fd fc69 	bl	8001fdc <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	d108      	bne.n	8004734 <HAL_UART_Transmit+0x82>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e003      	b.n	800473c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004744:	e02a      	b.n	800479c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2200      	movs	r2, #0
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f8e2 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e036      	b.n	80047ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	3302      	adds	r3, #2
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e007      	b.n	800478e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3301      	adds	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1cf      	bne.n	8004746 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2140      	movs	r1, #64	; 0x40
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f8b2 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e006      	b.n	80047ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08a      	sub	sp, #40	; 0x28
 80047da:	af02      	add	r7, sp, #8
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	f040 808c 	bne.w	8004910 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_UART_Receive+0x2e>
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e084      	b.n	8004912 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_UART_Receive+0x40>
 8004812:	2302      	movs	r3, #2
 8004814:	e07d      	b.n	8004912 <HAL_UART_Receive+0x13c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2222      	movs	r2, #34	; 0x22
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004832:	f7fd fbd3 	bl	8001fdc <HAL_GetTick>
 8004836:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	88fa      	ldrh	r2, [r7, #6]
 800483c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	88fa      	ldrh	r2, [r7, #6]
 8004842:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484c:	d108      	bne.n	8004860 <HAL_UART_Receive+0x8a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	e003      	b.n	8004868 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004864:	2300      	movs	r3, #0
 8004866:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004870:	e043      	b.n	80048fa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2120      	movs	r1, #32
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f84c 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e042      	b.n	8004912 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	b29a      	uxth	r2, r3
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	3302      	adds	r3, #2
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e01f      	b.n	80048ec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b4:	d007      	beq.n	80048c6 <HAL_UART_Receive+0xf0>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <HAL_UART_Receive+0xfe>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e008      	b.n	80048e6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3301      	adds	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1b6      	bne.n	8004872 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b090      	sub	sp, #64	; 0x40
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4613      	mov	r3, r2
 8004928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492a:	e050      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004932:	d04c      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0x30>
 800493a:	f7fd fb4f 	bl	8001fdc <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004946:	429a      	cmp	r2, r3
 8004948:	d241      	bcs.n	80049ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800496a:	637a      	str	r2, [r7, #52]	; 0x34
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3314      	adds	r3, #20
 8004984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3314      	adds	r3, #20
 800499c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800499e:	623a      	str	r2, [r7, #32]
 80049a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	69f9      	ldr	r1, [r7, #28]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e00f      	b.n	80049ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d09f      	beq.n	800492c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3740      	adds	r7, #64	; 0x40
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b0c0      	sub	sp, #256	; 0x100
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	ea40 0301 	orr.w	r3, r0, r1
 8004a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a50:	f021 010c 	bic.w	r1, r1, #12
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	6999      	ldr	r1, [r3, #24]
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	ea40 0301 	orr.w	r3, r0, r1
 8004a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <UART_SetConfig+0x2cc>)
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d005      	beq.n	8004a98 <UART_SetConfig+0xa0>
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b8d      	ldr	r3, [pc, #564]	; (8004cc8 <UART_SetConfig+0x2d0>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d104      	bne.n	8004aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe fdfc 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004aa0:	e003      	b.n	8004aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fe fde3 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8004aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab4:	f040 810c 	bne.w	8004cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ada:	4621      	mov	r1, r4
 8004adc:	eb12 0801 	adds.w	r8, r2, r1
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	eb43 0901 	adc.w	r9, r3, r1
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afa:	4690      	mov	r8, r2
 8004afc:	4699      	mov	r9, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	eb18 0303 	adds.w	r3, r8, r3
 8004b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b08:	462b      	mov	r3, r5
 8004b0a:	eb49 0303 	adc.w	r3, r9, r3
 8004b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b26:	460b      	mov	r3, r1
 8004b28:	18db      	adds	r3, r3, r3
 8004b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	657b      	str	r3, [r7, #84]	; 0x54
 8004b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b3c:	f7fc f8a4 	bl	8000c88 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004b46:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	011c      	lsls	r4, r3, #4
 8004b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b70:	4641      	mov	r1, r8
 8004b72:	eb12 0a01 	adds.w	sl, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb43 0b01 	adc.w	fp, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b90:	4692      	mov	sl, r2
 8004b92:	469b      	mov	fp, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	eb1a 0303 	adds.w	r3, sl, r3
 8004b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	18db      	adds	r3, r3, r3
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bd2:	f7fc f859 	bl	8000c88 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004bde:	fba3 2301 	umull	r2, r3, r3, r1
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c00:	441c      	add	r4, r3
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c24:	4641      	mov	r1, r8
 8004c26:	1851      	adds	r1, r2, r1
 8004c28:	6339      	str	r1, [r7, #48]	; 0x30
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	414b      	adcs	r3, r1
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	00cb      	lsls	r3, r1, #3
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c46:	4651      	mov	r1, sl
 8004c48:	00ca      	lsls	r2, r1, #3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4642      	mov	r2, r8
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c58:	464b      	mov	r3, r9
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c78:	460b      	mov	r3, r1
 8004c7a:	18db      	adds	r3, r3, r3
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7e:	4613      	mov	r3, r2
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c8e:	f7fb fffb 	bl	8000c88 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	; 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	3332      	adds	r3, #50	; 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 0207 	and.w	r2, r3, #7
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc0:	e106      	b.n	8004ed0 <UART_SetConfig+0x4d8>
 8004cc2:	bf00      	nop
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	40011400 	.word	0x40011400
 8004ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	6239      	str	r1, [r7, #32]
 8004cea:	415b      	adcs	r3, r3
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	1854      	adds	r4, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb43 0501 	adc.w	r5, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d18:	464b      	mov	r3, r9
 8004d1a:	eb45 0303 	adc.w	r3, r5, r3
 8004d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d3e:	4629      	mov	r1, r5
 8004d40:	008b      	lsls	r3, r1, #2
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d48:	4621      	mov	r1, r4
 8004d4a:	008a      	lsls	r2, r1, #2
 8004d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d50:	f7fb ff9a 	bl	8000c88 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4b60      	ldr	r3, [pc, #384]	; (8004edc <UART_SetConfig+0x4e4>)
 8004d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	011c      	lsls	r4, r3, #4
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	61b9      	str	r1, [r7, #24]
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6139      	str	r1, [r7, #16]
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ddc:	4649      	mov	r1, r9
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	4641      	mov	r1, r8
 8004de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de6:	4641      	mov	r1, r8
 8004de8:	008a      	lsls	r2, r1, #2
 8004dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dee:	f7fb ff4b 	bl	8000c88 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	4b38      	ldr	r3, [pc, #224]	; (8004edc <UART_SetConfig+0x4e4>)
 8004dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	2264      	movs	r2, #100	; 0x64
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	1acb      	subs	r3, r1, r3
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	3332      	adds	r3, #50	; 0x32
 8004e0c:	4a33      	ldr	r2, [pc, #204]	; (8004edc <UART_SetConfig+0x4e4>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e18:	441c      	add	r4, r3
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	673b      	str	r3, [r7, #112]	; 0x70
 8004e22:	677a      	str	r2, [r7, #116]	; 0x74
 8004e24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	415b      	adcs	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e38:	4641      	mov	r1, r8
 8004e3a:	1851      	adds	r1, r2, r1
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	4649      	mov	r1, r9
 8004e40:	414b      	adcs	r3, r1
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e50:	4659      	mov	r1, fp
 8004e52:	00cb      	lsls	r3, r1, #3
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	00ca      	lsls	r2, r1, #3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	4642      	mov	r2, r8
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	460a      	mov	r2, r1
 8004e6e:	eb42 0303 	adc.w	r3, r2, r3
 8004e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e7e:	667a      	str	r2, [r7, #100]	; 0x64
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	008b      	lsls	r3, r1, #2
 8004e90:	4641      	mov	r1, r8
 8004e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e96:	4641      	mov	r1, r8
 8004e98:	008a      	lsls	r2, r1, #2
 8004e9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e9e:	f7fb fef3 	bl	8000c88 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <UART_SetConfig+0x4e4>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	4a08      	ldr	r2, [pc, #32]	; (8004edc <UART_SetConfig+0x4e4>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4422      	add	r2, r4
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004edc:	51eb851f 	.word	0x51eb851f

08004ee0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef2:	2b84      	cmp	r3, #132	; 0x84
 8004ef4:	d005      	beq.n	8004f02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ef6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	3303      	adds	r3, #3
 8004f00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f14:	f000 ff30 	bl	8005d78 <vTaskStartScheduler>
  
  return osOK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f20:	b089      	sub	sp, #36	; 0x24
 8004f22:	af04      	add	r7, sp, #16
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d020      	beq.n	8004f72 <osThreadCreate+0x54>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01c      	beq.n	8004f72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685c      	ldr	r4, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691e      	ldr	r6, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ffc8 	bl	8004ee0 <makeFreeRtosPriority>
 8004f50:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f5a:	9202      	str	r2, [sp, #8]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	9100      	str	r1, [sp, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4632      	mov	r2, r6
 8004f64:	4629      	mov	r1, r5
 8004f66:	4620      	mov	r0, r4
 8004f68:	f000 fd3e 	bl	80059e8 <xTaskCreateStatic>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e01c      	b.n	8004fac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685c      	ldr	r4, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f7e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff ffaa 	bl	8004ee0 <makeFreeRtosPriority>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	9200      	str	r2, [sp, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	4632      	mov	r2, r6
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 fd80 	bl	8005aa2 <xTaskCreate>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fac:	68fb      	ldr	r3, [r7, #12]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <osDelay+0x16>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	e000      	b.n	8004fce <osDelay+0x18>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fe9e 	bl	8005d10 <vTaskDelay>
  
  return osOK;
 8004fd4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004fde:	b590      	push	{r4, r7, lr}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af02      	add	r7, sp, #8
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d011      	beq.n	8005014 <osMessageCreate+0x36>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6818      	ldr	r0, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6859      	ldr	r1, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2400      	movs	r4, #0
 800500a:	9400      	str	r4, [sp, #0]
 800500c:	f000 f92c 	bl	8005268 <xQueueGenericCreateStatic>
 8005010:	4603      	mov	r3, r0
 8005012:	e008      	b.n	8005026 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	4619      	mov	r1, r3
 8005020:	f000 f99a 	bl	8005358 <xQueueGenericCreate>
 8005024:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}

0800502e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f103 0208 	add.w	r2, r3, #8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005046:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f103 0208 	add.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f103 0208 	add.w	r2, r3, #8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e6:	d103      	bne.n	80050f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e00c      	b.n	800510a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3308      	adds	r3, #8
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e002      	b.n	80050fe <vListInsert+0x2e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d2f6      	bcs.n	80050f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6892      	ldr	r2, [r2, #8]
 8005158:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6852      	ldr	r2, [r2, #4]
 8005162:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d103      	bne.n	8005176 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	1e5a      	subs	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051c2:	f001 fc0f 	bl	80069e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	3b01      	subs	r3, #1
 80051f4:	68f9      	ldr	r1, [r7, #12]
 80051f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	441a      	add	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	; 0xff
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	22ff      	movs	r2, #255	; 0xff
 800520e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d114      	bne.n	8005242 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3310      	adds	r3, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ffe9 	bl	80061fc <xTaskRemoveFromEventList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <xQueueGenericReset+0xcc>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	e009      	b.n	8005256 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3310      	adds	r3, #16
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fef1 	bl	800502e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3324      	adds	r3, #36	; 0x24
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff feec 	bl	800502e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005256:	f001 fbf5 	bl	8006a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800525a:	2301      	movs	r3, #1
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08e      	sub	sp, #56	; 0x38
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <xQueueGenericCreateStatic+0x52>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <xQueueGenericCreateStatic+0x56>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericCreateStatic+0x58>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	623b      	str	r3, [r7, #32]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <xQueueGenericCreateStatic+0x7e>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <xQueueGenericCreateStatic+0x82>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueGenericCreateStatic+0x84>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61fb      	str	r3, [r7, #28]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005306:	2348      	movs	r3, #72	; 0x48
 8005308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b48      	cmp	r3, #72	; 0x48
 800530e:	d00a      	beq.n	8005326 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	61bb      	str	r3, [r7, #24]
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005326:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800533a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f83f 	bl	80053cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005350:	4618      	mov	r0, r3
 8005352:	3730      	adds	r7, #48	; 0x30
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <xQueueGenericCreate+0x2a>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	613b      	str	r3, [r7, #16]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	3348      	adds	r3, #72	; 0x48
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fc09 	bl	8006ba8 <pvPortMalloc>
 8005396:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d011      	beq.n	80053c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3348      	adds	r3, #72	; 0x48
 80053a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053b0:	79fa      	ldrb	r2, [r7, #7]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	4613      	mov	r3, r2
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f805 	bl	80053cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053c2:	69bb      	ldr	r3, [r7, #24]
	}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e002      	b.n	80053ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053fa:	2101      	movs	r1, #1
 80053fc:	69b8      	ldr	r0, [r7, #24]
 80053fe:	f7ff fecb 	bl	8005198 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800541a:	2300      	movs	r3, #0
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueGenericSend+0x32>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d103      	bne.n	800544c <xQueueGenericSend+0x40>
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <xQueueGenericSend+0x44>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <xQueueGenericSend+0x46>
 8005450:	2300      	movs	r3, #0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <xQueueGenericSend+0x60>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d103      	bne.n	800547a <xQueueGenericSend+0x6e>
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <xQueueGenericSend+0x72>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <xQueueGenericSend+0x74>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericSend+0x8e>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	623b      	str	r3, [r7, #32]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800549a:	f001 f86b 	bl	8006574 <xTaskGetSchedulerState>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <xQueueGenericSend+0x9e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <xQueueGenericSend+0xa2>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <xQueueGenericSend+0xa4>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <xQueueGenericSend+0xbe>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	61fb      	str	r3, [r7, #28]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ca:	f001 fa8b 	bl	80069e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d302      	bcc.n	80054e0 <xQueueGenericSend+0xd4>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d129      	bne.n	8005534 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e6:	f000 f96f 	bl	80057c8 <prvCopyDataToQueue>
 80054ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d010      	beq.n	8005516 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	3324      	adds	r3, #36	; 0x24
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fe7f 	bl	80061fc <xTaskRemoveFromEventList>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005504:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <xQueueGenericSend+0x1f8>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	e00a      	b.n	800552c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800551c:	4b39      	ldr	r3, [pc, #228]	; (8005604 <xQueueGenericSend+0x1f8>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800552c:	f001 fa8a 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 8005530:	2301      	movs	r3, #1
 8005532:	e063      	b.n	80055fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800553a:	f001 fa83 	bl	8006a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800553e:	2300      	movs	r3, #0
 8005540:	e05c      	b.n	80055fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005548:	f107 0314 	add.w	r3, r7, #20
 800554c:	4618      	mov	r0, r3
 800554e:	f000 feb7 	bl	80062c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005556:	f001 fa75 	bl	8006a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800555a:	f000 fc6d 	bl	8005e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800555e:	f001 fa41 	bl	80069e4 <vPortEnterCritical>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005568:	b25b      	sxtb	r3, r3
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800556e:	d103      	bne.n	8005578 <xQueueGenericSend+0x16c>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800557e:	b25b      	sxtb	r3, r3
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005584:	d103      	bne.n	800558e <xQueueGenericSend+0x182>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800558e:	f001 fa59 	bl	8006a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005592:	1d3a      	adds	r2, r7, #4
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fea6 	bl	80062ec <xTaskCheckForTimeOut>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d124      	bne.n	80055f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a8:	f000 fa06 	bl	80059b8 <prvIsQueueFull>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d018      	beq.n	80055e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	3310      	adds	r3, #16
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4611      	mov	r1, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fdfa 	bl	80061b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c2:	f000 f991 	bl	80058e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055c6:	f000 fc45 	bl	8005e54 <xTaskResumeAll>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f af7c 	bne.w	80054ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <xQueueGenericSend+0x1f8>)
 80055d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	e772      	b.n	80054ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e6:	f000 f97f 	bl	80058e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055ea:	f000 fc33 	bl	8005e54 <xTaskResumeAll>
 80055ee:	e76c      	b.n	80054ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055f2:	f000 f979 	bl	80058e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055f6:	f000 fc2d 	bl	8005e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3738      	adds	r7, #56	; 0x38
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <xQueueReceive+0x30>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	623b      	str	r3, [r7, #32]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <xQueueReceive+0x3e>
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <xQueueReceive+0x42>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <xQueueReceive+0x44>
 800564a:	2300      	movs	r3, #0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <xQueueReceive+0x5e>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	61fb      	str	r3, [r7, #28]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005666:	f000 ff85 	bl	8006574 <xTaskGetSchedulerState>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <xQueueReceive+0x6e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <xQueueReceive+0x72>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <xQueueReceive+0x74>
 800567a:	2300      	movs	r3, #0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xQueueReceive+0x8e>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	61bb      	str	r3, [r7, #24]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005696:	f001 f9a5 	bl	80069e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01f      	beq.n	80056e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056aa:	f000 f8f7 	bl	800589c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	1e5a      	subs	r2, r3, #1
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00f      	beq.n	80056de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	3310      	adds	r3, #16
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fd9a 	bl	80061fc <xTaskRemoveFromEventList>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056ce:	4b3d      	ldr	r3, [pc, #244]	; (80057c4 <xQueueReceive+0x1bc>)
 80056d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056de:	f001 f9b1 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e069      	b.n	80057ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056ec:	f001 f9aa 	bl	8006a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056f0:	2300      	movs	r3, #0
 80056f2:	e062      	b.n	80057ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056fa:	f107 0310 	add.w	r3, r7, #16
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fdde 	bl	80062c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005708:	f001 f99c 	bl	8006a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800570c:	f000 fb94 	bl	8005e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005710:	f001 f968 	bl	80069e4 <vPortEnterCritical>
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800571a:	b25b      	sxtb	r3, r3
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005720:	d103      	bne.n	800572a <xQueueReceive+0x122>
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005730:	b25b      	sxtb	r3, r3
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005736:	d103      	bne.n	8005740 <xQueueReceive+0x138>
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005740:	f001 f980 	bl	8006a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005744:	1d3a      	adds	r2, r7, #4
 8005746:	f107 0310 	add.w	r3, r7, #16
 800574a:	4611      	mov	r1, r2
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fdcd 	bl	80062ec <xTaskCheckForTimeOut>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d123      	bne.n	80057a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575a:	f000 f917 	bl	800598c <prvIsQueueEmpty>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	3324      	adds	r3, #36	; 0x24
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	4611      	mov	r1, r2
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fd21 	bl	80061b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005774:	f000 f8b8 	bl	80058e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005778:	f000 fb6c 	bl	8005e54 <xTaskResumeAll>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d189      	bne.n	8005696 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <xQueueReceive+0x1bc>)
 8005784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	e780      	b.n	8005696 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005796:	f000 f8a7 	bl	80058e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800579a:	f000 fb5b 	bl	8005e54 <xTaskResumeAll>
 800579e:	e77a      	b.n	8005696 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a2:	f000 f8a1 	bl	80058e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057a6:	f000 fb55 	bl	8005e54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ac:	f000 f8ee 	bl	800598c <prvIsQueueEmpty>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f43f af6f 	beq.w	8005696 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3730      	adds	r7, #48	; 0x30
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000ed04 	.word	0xe000ed04

080057c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10d      	bne.n	8005802 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d14d      	bne.n	800588a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fedc 	bl	80065b0 <xTaskPriorityDisinherit>
 80057f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	e043      	b.n	800588a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d119      	bne.n	800583c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6858      	ldr	r0, [r3, #4]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	461a      	mov	r2, r3
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	f002 f9aa 	bl	8007b6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	429a      	cmp	r2, r3
 8005830:	d32b      	bcc.n	800588a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	e026      	b.n	800588a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68d8      	ldr	r0, [r3, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	461a      	mov	r2, r3
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	f002 f990 	bl	8007b6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	425b      	negs	r3, r3
 8005856:	441a      	add	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d207      	bcs.n	8005878 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	425b      	negs	r3, r3
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d105      	bne.n	800588a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	3b01      	subs	r3, #1
 8005888:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005892:	697b      	ldr	r3, [r7, #20]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	441a      	add	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d303      	bcc.n	80058d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68d9      	ldr	r1, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	461a      	mov	r2, r3
 80058da:	6838      	ldr	r0, [r7, #0]
 80058dc:	f002 f946 	bl	8007b6c <memcpy>
	}
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058f0:	f001 f878 	bl	80069e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058fc:	e011      	b.n	8005922 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d012      	beq.n	800592c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3324      	adds	r3, #36	; 0x24
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fc76 	bl	80061fc <xTaskRemoveFromEventList>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005916:	f000 fd4b 	bl	80063b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	3b01      	subs	r3, #1
 800591e:	b2db      	uxtb	r3, r3
 8005920:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	dce9      	bgt.n	80058fe <prvUnlockQueue+0x16>
 800592a:	e000      	b.n	800592e <prvUnlockQueue+0x46>
					break;
 800592c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	22ff      	movs	r2, #255	; 0xff
 8005932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005936:	f001 f885 	bl	8006a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800593a:	f001 f853 	bl	80069e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005944:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005946:	e011      	b.n	800596c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d012      	beq.n	8005976 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3310      	adds	r3, #16
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fc51 	bl	80061fc <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005960:	f000 fd26 	bl	80063b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	3b01      	subs	r3, #1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800596c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005970:	2b00      	cmp	r3, #0
 8005972:	dce9      	bgt.n	8005948 <prvUnlockQueue+0x60>
 8005974:	e000      	b.n	8005978 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005976:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	22ff      	movs	r2, #255	; 0xff
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005980:	f001 f860 	bl	8006a44 <vPortExitCritical>
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005994:	f001 f826 	bl	80069e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e001      	b.n	80059aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059aa:	f001 f84b 	bl	8006a44 <vPortExitCritical>

	return xReturn;
 80059ae:	68fb      	ldr	r3, [r7, #12]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059c0:	f001 f810 	bl	80069e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d102      	bne.n	80059d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059d0:	2301      	movs	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e001      	b.n	80059da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059da:	f001 f833 	bl	8006a44 <vPortExitCritical>

	return xReturn;
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	; 0x38
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xTaskCreateStatic+0x2a>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	623b      	str	r3, [r7, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xTaskCreateStatic+0x46>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61fb      	str	r3, [r7, #28]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a2e:	2354      	movs	r3, #84	; 0x54
 8005a30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b54      	cmp	r3, #84	; 0x54
 8005a36:	d00a      	beq.n	8005a4e <xTaskCreateStatic+0x66>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	61bb      	str	r3, [r7, #24]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01e      	beq.n	8005a94 <xTaskCreateStatic+0xac>
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01b      	beq.n	8005a94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a6e:	2300      	movs	r3, #0
 8005a70:	9303      	str	r3, [sp, #12]
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	9302      	str	r3, [sp, #8]
 8005a76:	f107 0314 	add.w	r3, r7, #20
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f850 	bl	8005b2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a8e:	f000 f8d5 	bl	8005c3c <prvAddNewTaskToReadyList>
 8005a92:	e001      	b.n	8005a98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a98:	697b      	ldr	r3, [r7, #20]
	}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3728      	adds	r7, #40	; 0x28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b08c      	sub	sp, #48	; 0x30
 8005aa6:	af04      	add	r7, sp, #16
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 f876 	bl	8006ba8 <pvPortMalloc>
 8005abc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ac4:	2054      	movs	r0, #84	; 0x54
 8005ac6:	f001 f86f 	bl	8006ba8 <pvPortMalloc>
 8005aca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ad8:	e005      	b.n	8005ae6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ada:	6978      	ldr	r0, [r7, #20]
 8005adc:	f001 f930 	bl	8006d40 <vPortFree>
 8005ae0:	e001      	b.n	8005ae6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d017      	beq.n	8005b1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005af4:	88fa      	ldrh	r2, [r7, #6]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9303      	str	r3, [sp, #12]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	9302      	str	r3, [sp, #8]
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f80e 	bl	8005b2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b10:	69f8      	ldr	r0, [r7, #28]
 8005b12:	f000 f893 	bl	8005c3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b16:	2301      	movs	r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e002      	b.n	8005b22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b22:	69bb      	ldr	r3, [r7, #24]
	}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b44:	3b01      	subs	r3, #1
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	617b      	str	r3, [r7, #20]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01f      	beq.n	8005bba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e012      	b.n	8005ba6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	7819      	ldrb	r1, [r3, #0]
 8005b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3334      	adds	r3, #52	; 0x34
 8005b90:	460a      	mov	r2, r1
 8005b92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b0f      	cmp	r3, #15
 8005baa:	d9e9      	bls.n	8005b80 <prvInitialiseNewTask+0x54>
 8005bac:	e000      	b.n	8005bb0 <prvInitialiseNewTask+0x84>
			{
				break;
 8005bae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bb8:	e003      	b.n	8005bc2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	2b06      	cmp	r3, #6
 8005bc6:	d901      	bls.n	8005bcc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bc8:	2306      	movs	r3, #6
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	2200      	movs	r2, #0
 8005bdc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	3304      	adds	r3, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fa43 	bl	800506e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	3318      	adds	r3, #24
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fa3e 	bl	800506e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	f1c3 0207 	rsb	r2, r3, #7
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	69b8      	ldr	r0, [r7, #24]
 8005c1c:	f000 fdb4 	bl	8006788 <pxPortInitialiseStack>
 8005c20:	4602      	mov	r2, r0
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c32:	bf00      	nop
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c44:	f000 fece 	bl	80069e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c48:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <prvAddNewTaskToReadyList+0xb8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <prvAddNewTaskToReadyList+0xb8>)
 8005c50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <prvAddNewTaskToReadyList+0xbc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c5a:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <prvAddNewTaskToReadyList+0xbc>)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c60:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <prvAddNewTaskToReadyList+0xb8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d110      	bne.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c68:	f000 fbc6 	bl	80063f8 <prvInitialiseTaskLists>
 8005c6c:	e00d      	b.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c6e:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <prvAddNewTaskToReadyList+0xc0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c76:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <prvAddNewTaskToReadyList+0xbc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d802      	bhi.n	8005c8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c84:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <prvAddNewTaskToReadyList+0xbc>)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <prvAddNewTaskToReadyList+0xc4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <prvAddNewTaskToReadyList+0xc4>)
 8005c92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	2201      	movs	r2, #1
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <prvAddNewTaskToReadyList+0xc8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <prvAddNewTaskToReadyList+0xc8>)
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <prvAddNewTaskToReadyList+0xcc>)
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f7ff f9e3 	bl	8005088 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cc2:	f000 febf 	bl	8006a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <prvAddNewTaskToReadyList+0xc0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00e      	beq.n	8005cec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cce:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <prvAddNewTaskToReadyList+0xbc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d207      	bcs.n	8005cec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <prvAddNewTaskToReadyList+0xd0>)
 8005cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	2000068c 	.word	0x2000068c
 8005cf8:	2000058c 	.word	0x2000058c
 8005cfc:	20000698 	.word	0x20000698
 8005d00:	200006a8 	.word	0x200006a8
 8005d04:	20000694 	.word	0x20000694
 8005d08:	20000590 	.word	0x20000590
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d017      	beq.n	8005d52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d22:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <vTaskDelay+0x60>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <vTaskDelay+0x30>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60bb      	str	r3, [r7, #8]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d40:	f000 f87a 	bl	8005e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d44:	2100      	movs	r1, #0
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fcb8 	bl	80066bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d4c:	f000 f882 	bl	8005e54 <xTaskResumeAll>
 8005d50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d107      	bne.n	8005d68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <vTaskDelay+0x64>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	200006b4 	.word	0x200006b4
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d86:	463a      	mov	r2, r7
 8005d88:	1d39      	adds	r1, r7, #4
 8005d8a:	f107 0308 	add.w	r3, r7, #8
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fb f8f8 	bl	8000f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	9202      	str	r2, [sp, #8]
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	460a      	mov	r2, r1
 8005da6:	491e      	ldr	r1, [pc, #120]	; (8005e20 <vTaskStartScheduler+0xa8>)
 8005da8:	481e      	ldr	r0, [pc, #120]	; (8005e24 <vTaskStartScheduler+0xac>)
 8005daa:	f7ff fe1d 	bl	80059e8 <xTaskCreateStatic>
 8005dae:	4603      	mov	r3, r0
 8005db0:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <vTaskStartScheduler+0xb0>)
 8005db2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005db4:	4b1c      	ldr	r3, [pc, #112]	; (8005e28 <vTaskStartScheduler+0xb0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e001      	b.n	8005dc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d116      	bne.n	8005dfa <vTaskStartScheduler+0x82>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	613b      	str	r3, [r7, #16]
}
 8005dde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <vTaskStartScheduler+0xb4>)
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005de6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <vTaskStartScheduler+0xb8>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <vTaskStartScheduler+0xbc>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005df4:	f000 fd54 	bl	80068a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005df8:	e00e      	b.n	8005e18 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e00:	d10a      	bne.n	8005e18 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60fb      	str	r3, [r7, #12]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <vTaskStartScheduler+0x9e>
}
 8005e18:	bf00      	nop
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	08009e7c 	.word	0x08009e7c
 8005e24:	080063c9 	.word	0x080063c9
 8005e28:	200006b0 	.word	0x200006b0
 8005e2c:	200006ac 	.word	0x200006ac
 8005e30:	20000698 	.word	0x20000698
 8005e34:	20000690 	.word	0x20000690

08005e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e3c:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <vTaskSuspendAll+0x18>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3301      	adds	r3, #1
 8005e42:	4a03      	ldr	r2, [pc, #12]	; (8005e50 <vTaskSuspendAll+0x18>)
 8005e44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	200006b4 	.word	0x200006b4

08005e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e62:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <xTaskResumeAll+0x114>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	603b      	str	r3, [r7, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e80:	f000 fdb0 	bl	80069e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e84:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <xTaskResumeAll+0x114>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	4a37      	ldr	r2, [pc, #220]	; (8005f68 <xTaskResumeAll+0x114>)
 8005e8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e8e:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <xTaskResumeAll+0x114>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d161      	bne.n	8005f5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e96:	4b35      	ldr	r3, [pc, #212]	; (8005f6c <xTaskResumeAll+0x118>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d05d      	beq.n	8005f5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e9e:	e02e      	b.n	8005efe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea0:	4b33      	ldr	r3, [pc, #204]	; (8005f70 <xTaskResumeAll+0x11c>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3318      	adds	r3, #24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff f948 	bl	8005142 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff f943 	bl	8005142 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <xTaskResumeAll+0x120>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	4a2a      	ldr	r2, [pc, #168]	; (8005f74 <xTaskResumeAll+0x120>)
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4a27      	ldr	r2, [pc, #156]	; (8005f78 <xTaskResumeAll+0x124>)
 8005edc:	441a      	add	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f7ff f8cf 	bl	8005088 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eee:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <xTaskResumeAll+0x128>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d302      	bcc.n	8005efe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ef8:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <xTaskResumeAll+0x12c>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005efe:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <xTaskResumeAll+0x11c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1cc      	bne.n	8005ea0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f0c:	f000 fb12 	bl	8006534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f10:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <xTaskResumeAll+0x130>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d010      	beq.n	8005f3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f1c:	f000 f836 	bl	8005f8c <xTaskIncrementTick>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <xTaskResumeAll+0x12c>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f1      	bne.n	8005f1c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005f38:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <xTaskResumeAll+0x130>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f3e:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <xTaskResumeAll+0x12c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <xTaskResumeAll+0x134>)
 8005f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f5a:	f000 fd73 	bl	8006a44 <vPortExitCritical>

	return xAlreadyYielded;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	200006b4 	.word	0x200006b4
 8005f6c:	2000068c 	.word	0x2000068c
 8005f70:	2000064c 	.word	0x2000064c
 8005f74:	20000694 	.word	0x20000694
 8005f78:	20000590 	.word	0x20000590
 8005f7c:	2000058c 	.word	0x2000058c
 8005f80:	200006a0 	.word	0x200006a0
 8005f84:	2000069c 	.word	0x2000069c
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f96:	4b4e      	ldr	r3, [pc, #312]	; (80060d0 <xTaskIncrementTick+0x144>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f040 808e 	bne.w	80060bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fa0:	4b4c      	ldr	r3, [pc, #304]	; (80060d4 <xTaskIncrementTick+0x148>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fa8:	4a4a      	ldr	r2, [pc, #296]	; (80060d4 <xTaskIncrementTick+0x148>)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d120      	bne.n	8005ff6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fb4:	4b48      	ldr	r3, [pc, #288]	; (80060d8 <xTaskIncrementTick+0x14c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	603b      	str	r3, [r7, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <xTaskIncrementTick+0x46>
 8005fd4:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <xTaskIncrementTick+0x14c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	4b40      	ldr	r3, [pc, #256]	; (80060dc <xTaskIncrementTick+0x150>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a3e      	ldr	r2, [pc, #248]	; (80060d8 <xTaskIncrementTick+0x14c>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4a3e      	ldr	r2, [pc, #248]	; (80060dc <xTaskIncrementTick+0x150>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b3d      	ldr	r3, [pc, #244]	; (80060e0 <xTaskIncrementTick+0x154>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	4a3c      	ldr	r2, [pc, #240]	; (80060e0 <xTaskIncrementTick+0x154>)
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	f000 fa9f 	bl	8006534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ff6:	4b3b      	ldr	r3, [pc, #236]	; (80060e4 <xTaskIncrementTick+0x158>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d348      	bcc.n	8006092 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006000:	4b35      	ldr	r3, [pc, #212]	; (80060d8 <xTaskIncrementTick+0x14c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600a:	4b36      	ldr	r3, [pc, #216]	; (80060e4 <xTaskIncrementTick+0x158>)
 800600c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006010:	601a      	str	r2, [r3, #0]
					break;
 8006012:	e03e      	b.n	8006092 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006014:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <xTaskIncrementTick+0x14c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d203      	bcs.n	8006034 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800602c:	4a2d      	ldr	r2, [pc, #180]	; (80060e4 <xTaskIncrementTick+0x158>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006032:	e02e      	b.n	8006092 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	3304      	adds	r3, #4
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff f882 	bl	8005142 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d004      	beq.n	8006050 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3318      	adds	r3, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff f879 	bl	8005142 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	2201      	movs	r2, #1
 8006056:	409a      	lsls	r2, r3
 8006058:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <xTaskIncrementTick+0x15c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4313      	orrs	r3, r2
 800605e:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <xTaskIncrementTick+0x15c>)
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <xTaskIncrementTick+0x160>)
 8006070:	441a      	add	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7ff f805 	bl	8005088 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <xTaskIncrementTick+0x164>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	429a      	cmp	r2, r3
 800608a:	d3b9      	bcc.n	8006000 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006090:	e7b6      	b.n	8006000 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006092:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <xTaskIncrementTick+0x164>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006098:	4914      	ldr	r1, [pc, #80]	; (80060ec <xTaskIncrementTick+0x160>)
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d901      	bls.n	80060ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <xTaskIncrementTick+0x168>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	e004      	b.n	80060c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060bc:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <xTaskIncrementTick+0x16c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3301      	adds	r3, #1
 80060c2:	4a0d      	ldr	r2, [pc, #52]	; (80060f8 <xTaskIncrementTick+0x16c>)
 80060c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060c6:	697b      	ldr	r3, [r7, #20]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	200006b4 	.word	0x200006b4
 80060d4:	20000690 	.word	0x20000690
 80060d8:	20000644 	.word	0x20000644
 80060dc:	20000648 	.word	0x20000648
 80060e0:	200006a4 	.word	0x200006a4
 80060e4:	200006ac 	.word	0x200006ac
 80060e8:	20000694 	.word	0x20000694
 80060ec:	20000590 	.word	0x20000590
 80060f0:	2000058c 	.word	0x2000058c
 80060f4:	200006a0 	.word	0x200006a0
 80060f8:	2000069c 	.word	0x2000069c

080060fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006102:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <vTaskSwitchContext+0xa4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <vTaskSwitchContext+0xa8>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006110:	e03f      	b.n	8006192 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006112:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <vTaskSwitchContext+0xa8>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <vTaskSwitchContext+0xac>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	fab3 f383 	clz	r3, r3
 8006124:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	f1c3 031f 	rsb	r3, r3, #31
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	491f      	ldr	r1, [pc, #124]	; (80061ac <vTaskSwitchContext+0xb0>)
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	607b      	str	r3, [r7, #4]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <vTaskSwitchContext+0x5a>
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4a12      	ldr	r2, [pc, #72]	; (80061ac <vTaskSwitchContext+0xb0>)
 8006164:	4413      	add	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	3308      	adds	r3, #8
 800617a:	429a      	cmp	r2, r3
 800617c:	d104      	bne.n	8006188 <vTaskSwitchContext+0x8c>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	4a08      	ldr	r2, [pc, #32]	; (80061b0 <vTaskSwitchContext+0xb4>)
 8006190:	6013      	str	r3, [r2, #0]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	200006b4 	.word	0x200006b4
 80061a4:	200006a0 	.word	0x200006a0
 80061a8:	20000694 	.word	0x20000694
 80061ac:	20000590 	.word	0x20000590
 80061b0:	2000058c 	.word	0x2000058c

080061b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	60fb      	str	r3, [r7, #12]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <vTaskPlaceOnEventList+0x44>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3318      	adds	r3, #24
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fe ff74 	bl	80050d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061e8:	2101      	movs	r1, #1
 80061ea:	6838      	ldr	r0, [r7, #0]
 80061ec:	f000 fa66 	bl	80066bc <prvAddCurrentTaskToDelayedList>
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	2000058c 	.word	0x2000058c

080061fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	60fb      	str	r3, [r7, #12]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	3318      	adds	r3, #24
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe ff88 	bl	8005142 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006232:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <xTaskRemoveFromEventList+0xac>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d11c      	bne.n	8006274 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe ff7f 	bl	8005142 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	2201      	movs	r2, #1
 800624a:	409a      	lsls	r2, r3
 800624c:	4b17      	ldr	r3, [pc, #92]	; (80062ac <xTaskRemoveFromEventList+0xb0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4313      	orrs	r3, r2
 8006252:	4a16      	ldr	r2, [pc, #88]	; (80062ac <xTaskRemoveFromEventList+0xb0>)
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a13      	ldr	r2, [pc, #76]	; (80062b0 <xTaskRemoveFromEventList+0xb4>)
 8006264:	441a      	add	r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fe ff0b 	bl	8005088 <vListInsertEnd>
 8006272:	e005      	b.n	8006280 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	3318      	adds	r3, #24
 8006278:	4619      	mov	r1, r3
 800627a:	480e      	ldr	r0, [pc, #56]	; (80062b4 <xTaskRemoveFromEventList+0xb8>)
 800627c:	f7fe ff04 	bl	8005088 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <xTaskRemoveFromEventList+0xbc>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	429a      	cmp	r2, r3
 800628c:	d905      	bls.n	800629a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <xTaskRemoveFromEventList+0xc0>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e001      	b.n	800629e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800629e:	697b      	ldr	r3, [r7, #20]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	200006b4 	.word	0x200006b4
 80062ac:	20000694 	.word	0x20000694
 80062b0:	20000590 	.word	0x20000590
 80062b4:	2000064c 	.word	0x2000064c
 80062b8:	2000058c 	.word	0x2000058c
 80062bc:	200006a0 	.word	0x200006a0

080062c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <vTaskInternalSetTimeOutState+0x24>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <vTaskInternalSetTimeOutState+0x28>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	605a      	str	r2, [r3, #4]
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	200006a4 	.word	0x200006a4
 80062e8:	20000690 	.word	0x20000690

080062ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	613b      	str	r3, [r7, #16]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800632e:	f000 fb59 	bl	80069e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006332:	4b1d      	ldr	r3, [pc, #116]	; (80063a8 <xTaskCheckForTimeOut+0xbc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634a:	d102      	bne.n	8006352 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e023      	b.n	800639a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b15      	ldr	r3, [pc, #84]	; (80063ac <xTaskCheckForTimeOut+0xc0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d007      	beq.n	800636e <xTaskCheckForTimeOut+0x82>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006368:	2301      	movs	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e015      	b.n	800639a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	429a      	cmp	r2, r3
 8006376:	d20b      	bcs.n	8006390 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ff9b 	bl	80062c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	e004      	b.n	800639a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006396:	2301      	movs	r3, #1
 8006398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800639a:	f000 fb53 	bl	8006a44 <vPortExitCritical>

	return xReturn;
 800639e:	69fb      	ldr	r3, [r7, #28]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20000690 	.word	0x20000690
 80063ac:	200006a4 	.word	0x200006a4

080063b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063b4:	4b03      	ldr	r3, [pc, #12]	; (80063c4 <vTaskMissedYield+0x14>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
}
 80063ba:	bf00      	nop
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	200006a0 	.word	0x200006a0

080063c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063d0:	f000 f852 	bl	8006478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <prvIdleTask+0x28>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d9f9      	bls.n	80063d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <prvIdleTask+0x2c>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063ec:	e7f0      	b.n	80063d0 <prvIdleTask+0x8>
 80063ee:	bf00      	nop
 80063f0:	20000590 	.word	0x20000590
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063fe:	2300      	movs	r3, #0
 8006400:	607b      	str	r3, [r7, #4]
 8006402:	e00c      	b.n	800641e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4a12      	ldr	r2, [pc, #72]	; (8006458 <prvInitialiseTaskLists+0x60>)
 8006410:	4413      	add	r3, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fe0b 	bl	800502e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3301      	adds	r3, #1
 800641c:	607b      	str	r3, [r7, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b06      	cmp	r3, #6
 8006422:	d9ef      	bls.n	8006404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006424:	480d      	ldr	r0, [pc, #52]	; (800645c <prvInitialiseTaskLists+0x64>)
 8006426:	f7fe fe02 	bl	800502e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800642a:	480d      	ldr	r0, [pc, #52]	; (8006460 <prvInitialiseTaskLists+0x68>)
 800642c:	f7fe fdff 	bl	800502e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006430:	480c      	ldr	r0, [pc, #48]	; (8006464 <prvInitialiseTaskLists+0x6c>)
 8006432:	f7fe fdfc 	bl	800502e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006436:	480c      	ldr	r0, [pc, #48]	; (8006468 <prvInitialiseTaskLists+0x70>)
 8006438:	f7fe fdf9 	bl	800502e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800643c:	480b      	ldr	r0, [pc, #44]	; (800646c <prvInitialiseTaskLists+0x74>)
 800643e:	f7fe fdf6 	bl	800502e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006442:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <prvInitialiseTaskLists+0x78>)
 8006444:	4a05      	ldr	r2, [pc, #20]	; (800645c <prvInitialiseTaskLists+0x64>)
 8006446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <prvInitialiseTaskLists+0x7c>)
 800644a:	4a05      	ldr	r2, [pc, #20]	; (8006460 <prvInitialiseTaskLists+0x68>)
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000590 	.word	0x20000590
 800645c:	2000061c 	.word	0x2000061c
 8006460:	20000630 	.word	0x20000630
 8006464:	2000064c 	.word	0x2000064c
 8006468:	20000660 	.word	0x20000660
 800646c:	20000678 	.word	0x20000678
 8006470:	20000644 	.word	0x20000644
 8006474:	20000648 	.word	0x20000648

08006478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800647e:	e019      	b.n	80064b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006480:	f000 fab0 	bl	80069e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <prvCheckTasksWaitingTermination+0x50>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fe56 	bl	8005142 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <prvCheckTasksWaitingTermination+0x54>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3b01      	subs	r3, #1
 800649c:	4a0b      	ldr	r2, [pc, #44]	; (80064cc <prvCheckTasksWaitingTermination+0x54>)
 800649e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064a0:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <prvCheckTasksWaitingTermination+0x58>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <prvCheckTasksWaitingTermination+0x58>)
 80064a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064aa:	f000 facb 	bl	8006a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f810 	bl	80064d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <prvCheckTasksWaitingTermination+0x58>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e1      	bne.n	8006480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000660 	.word	0x20000660
 80064cc:	2000068c 	.word	0x2000068c
 80064d0:	20000674 	.word	0x20000674

080064d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d108      	bne.n	80064f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fc28 	bl	8006d40 <vPortFree>
				vPortFree( pxTCB );
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fc25 	bl	8006d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064f6:	e018      	b.n	800652a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d103      	bne.n	800650a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fc1c 	bl	8006d40 <vPortFree>
	}
 8006508:	e00f      	b.n	800652a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006510:	2b02      	cmp	r3, #2
 8006512:	d00a      	beq.n	800652a <prvDeleteTCB+0x56>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <prvDeleteTCB+0x54>
	}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800653a:	4b0c      	ldr	r3, [pc, #48]	; (800656c <prvResetNextTaskUnblockTime+0x38>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <prvResetNextTaskUnblockTime+0x3c>)
 8006546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800654a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800654c:	e008      	b.n	8006560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654e:	4b07      	ldr	r3, [pc, #28]	; (800656c <prvResetNextTaskUnblockTime+0x38>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4a04      	ldr	r2, [pc, #16]	; (8006570 <prvResetNextTaskUnblockTime+0x3c>)
 800655e:	6013      	str	r3, [r2, #0]
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000644 	.word	0x20000644
 8006570:	200006ac 	.word	0x200006ac

08006574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <xTaskGetSchedulerState+0x34>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006582:	2301      	movs	r3, #1
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	e008      	b.n	800659a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006588:	4b08      	ldr	r3, [pc, #32]	; (80065ac <xTaskGetSchedulerState+0x38>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006590:	2302      	movs	r3, #2
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	e001      	b.n	800659a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800659a:	687b      	ldr	r3, [r7, #4]
	}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	20000698 	.word	0x20000698
 80065ac:	200006b4 	.word	0x200006b4

080065b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d06e      	beq.n	80066a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065c6:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <xTaskPriorityDisinherit+0x100>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d00a      	beq.n	80065e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	60fb      	str	r3, [r7, #12]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60bb      	str	r3, [r7, #8]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006608:	1e5a      	subs	r2, r3, #1
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006616:	429a      	cmp	r2, r3
 8006618:	d044      	beq.n	80066a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661e:	2b00      	cmp	r3, #0
 8006620:	d140      	bne.n	80066a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3304      	adds	r3, #4
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fd8b 	bl	8005142 <uxListRemove>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d115      	bne.n	800665e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006636:	491f      	ldr	r1, [pc, #124]	; (80066b4 <xTaskPriorityDisinherit+0x104>)
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xTaskPriorityDisinherit+0xae>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	2201      	movs	r2, #1
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43da      	mvns	r2, r3
 8006654:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <xTaskPriorityDisinherit+0x108>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4013      	ands	r3, r2
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <xTaskPriorityDisinherit+0x108>)
 800665c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	f1c3 0207 	rsb	r2, r3, #7
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	2201      	movs	r2, #1
 8006678:	409a      	lsls	r2, r3
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <xTaskPriorityDisinherit+0x108>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4313      	orrs	r3, r2
 8006680:	4a0d      	ldr	r2, [pc, #52]	; (80066b8 <xTaskPriorityDisinherit+0x108>)
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4a08      	ldr	r2, [pc, #32]	; (80066b4 <xTaskPriorityDisinherit+0x104>)
 8006692:	441a      	add	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f7fe fcf4 	bl	8005088 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066a4:	697b      	ldr	r3, [r7, #20]
	}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	2000058c 	.word	0x2000058c
 80066b4:	20000590 	.word	0x20000590
 80066b8:	20000694 	.word	0x20000694

080066bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066c6:	4b29      	ldr	r3, [pc, #164]	; (800676c <prvAddCurrentTaskToDelayedList+0xb0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066cc:	4b28      	ldr	r3, [pc, #160]	; (8006770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fd35 	bl	8005142 <uxListRemove>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	2201      	movs	r2, #1
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43da      	mvns	r2, r3
 80066ec:	4b21      	ldr	r3, [pc, #132]	; (8006774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4013      	ands	r3, r2
 80066f2:	4a20      	ldr	r2, [pc, #128]	; (8006774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fc:	d10a      	bne.n	8006714 <prvAddCurrentTaskToDelayedList+0x58>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006704:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3304      	adds	r3, #4
 800670a:	4619      	mov	r1, r3
 800670c:	481a      	ldr	r0, [pc, #104]	; (8006778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800670e:	f7fe fcbb 	bl	8005088 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006712:	e026      	b.n	8006762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4413      	add	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800671c:	4b14      	ldr	r3, [pc, #80]	; (8006770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	429a      	cmp	r2, r3
 800672a:	d209      	bcs.n	8006740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <prvAddCurrentTaskToDelayedList+0xc0>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3304      	adds	r3, #4
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f7fe fcc9 	bl	80050d0 <vListInsert>
}
 800673e:	e010      	b.n	8006762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006740:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7fe fcbf 	bl	80050d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006752:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	d202      	bcs.n	8006762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6013      	str	r3, [r2, #0]
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000690 	.word	0x20000690
 8006770:	2000058c 	.word	0x2000058c
 8006774:	20000694 	.word	0x20000694
 8006778:	20000678 	.word	0x20000678
 800677c:	20000648 	.word	0x20000648
 8006780:	20000644 	.word	0x20000644
 8006784:	200006ac 	.word	0x200006ac

08006788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3b04      	subs	r3, #4
 8006798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3b04      	subs	r3, #4
 80067a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f023 0201 	bic.w	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3b04      	subs	r3, #4
 80067b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067b8:	4a0c      	ldr	r2, [pc, #48]	; (80067ec <pxPortInitialiseStack+0x64>)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3b14      	subs	r3, #20
 80067c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3b04      	subs	r3, #4
 80067ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f06f 0202 	mvn.w	r2, #2
 80067d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3b20      	subs	r3, #32
 80067dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067de:	68fb      	ldr	r3, [r7, #12]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	080067f1 	.word	0x080067f1

080067f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <prvTaskExitError+0x54>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006802:	d00a      	beq.n	800681a <prvTaskExitError+0x2a>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	60fb      	str	r3, [r7, #12]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <prvTaskExitError+0x28>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60bb      	str	r3, [r7, #8]
}
 800682c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800682e:	bf00      	nop
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0fc      	beq.n	8006830 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	2000000c 	.word	0x2000000c
	...

08006850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <pxCurrentTCBConst2>)
 8006852:	6819      	ldr	r1, [r3, #0]
 8006854:	6808      	ldr	r0, [r1, #0]
 8006856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	f380 8809 	msr	PSP, r0
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	4770      	bx	lr
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst2>:
 8006870:	2000058c 	.word	0x2000058c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006878:	4808      	ldr	r0, [pc, #32]	; (800689c <prvPortStartFirstTask+0x24>)
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	6800      	ldr	r0, [r0, #0]
 800687e:	f380 8808 	msr	MSP, r0
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8814 	msr	CONTROL, r0
 800688a:	b662      	cpsie	i
 800688c:	b661      	cpsie	f
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	df00      	svc	0
 8006898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800689a:	bf00      	nop
 800689c:	e000ed08 	.word	0xe000ed08

080068a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068a6:	4b46      	ldr	r3, [pc, #280]	; (80069c0 <xPortStartScheduler+0x120>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a46      	ldr	r2, [pc, #280]	; (80069c4 <xPortStartScheduler+0x124>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10a      	bne.n	80068c6 <xPortStartScheduler+0x26>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	613b      	str	r3, [r7, #16]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068c6:	4b3e      	ldr	r3, [pc, #248]	; (80069c0 <xPortStartScheduler+0x120>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3f      	ldr	r2, [pc, #252]	; (80069c8 <xPortStartScheduler+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10a      	bne.n	80068e6 <xPortStartScheduler+0x46>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068e6:	4b39      	ldr	r3, [pc, #228]	; (80069cc <xPortStartScheduler+0x12c>)
 80068e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	22ff      	movs	r2, #255	; 0xff
 80068f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4b31      	ldr	r3, [pc, #196]	; (80069d0 <xPortStartScheduler+0x130>)
 800690c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <xPortStartScheduler+0x134>)
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006914:	e009      	b.n	800692a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006916:	4b2f      	ldr	r3, [pc, #188]	; (80069d4 <xPortStartScheduler+0x134>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	4a2d      	ldr	r2, [pc, #180]	; (80069d4 <xPortStartScheduler+0x134>)
 800691e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006932:	2b80      	cmp	r3, #128	; 0x80
 8006934:	d0ef      	beq.n	8006916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006936:	4b27      	ldr	r3, [pc, #156]	; (80069d4 <xPortStartScheduler+0x134>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1c3 0307 	rsb	r3, r3, #7
 800693e:	2b04      	cmp	r3, #4
 8006940:	d00a      	beq.n	8006958 <xPortStartScheduler+0xb8>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60bb      	str	r3, [r7, #8]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006958:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <xPortStartScheduler+0x134>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <xPortStartScheduler+0x134>)
 8006960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <xPortStartScheduler+0x134>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800696a:	4a1a      	ldr	r2, [pc, #104]	; (80069d4 <xPortStartScheduler+0x134>)
 800696c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	b2da      	uxtb	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006976:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <xPortStartScheduler+0x138>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <xPortStartScheduler+0x138>)
 800697c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <xPortStartScheduler+0x138>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <xPortStartScheduler+0x138>)
 8006988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800698c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800698e:	f000 f8dd 	bl	8006b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <xPortStartScheduler+0x13c>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006998:	f000 f8fc 	bl	8006b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <xPortStartScheduler+0x140>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <xPortStartScheduler+0x140>)
 80069a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069a8:	f7ff ff66 	bl	8006878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069ac:	f7ff fba6 	bl	80060fc <vTaskSwitchContext>
	prvTaskExitError();
 80069b0:	f7ff ff1e 	bl	80067f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	e000ed00 	.word	0xe000ed00
 80069c4:	410fc271 	.word	0x410fc271
 80069c8:	410fc270 	.word	0x410fc270
 80069cc:	e000e400 	.word	0xe000e400
 80069d0:	200006b8 	.word	0x200006b8
 80069d4:	200006bc 	.word	0x200006bc
 80069d8:	e000ed20 	.word	0xe000ed20
 80069dc:	2000000c 	.word	0x2000000c
 80069e0:	e000ef34 	.word	0xe000ef34

080069e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	607b      	str	r3, [r7, #4]
}
 80069fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <vPortEnterCritical+0x58>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <vPortEnterCritical+0x58>)
 8006a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <vPortEnterCritical+0x58>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10f      	bne.n	8006a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <vPortEnterCritical+0x5c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	603b      	str	r3, [r7, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <vPortEnterCritical+0x4a>
	}
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <vPortExitCritical+0x50>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <vPortExitCritical+0x24>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	607b      	str	r3, [r7, #4]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <vPortExitCritical+0x50>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <vPortExitCritical+0x50>)
 8006a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a72:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <vPortExitCritical+0x50>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <vPortExitCritical+0x42>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	2000000c 	.word	0x2000000c
	...

08006aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <pxCurrentTCBConst>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f01e 0f10 	tst.w	lr, #16
 8006ab0:	bf08      	it	eq
 8006ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ac4:	f380 8811 	msr	BASEPRI, r0
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f7ff fb14 	bl	80060fc <vTaskSwitchContext>
 8006ad4:	f04f 0000 	mov.w	r0, #0
 8006ad8:	f380 8811 	msr	BASEPRI, r0
 8006adc:	bc09      	pop	{r0, r3}
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	6808      	ldr	r0, [r1, #0]
 8006ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae6:	f01e 0f10 	tst.w	lr, #16
 8006aea:	bf08      	it	eq
 8006aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006af0:	f380 8809 	msr	PSP, r0
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst>:
 8006b00:	2000058c 	.word	0x2000058c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b22:	f7ff fa33 	bl	8005f8c <xTaskIncrementTick>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <SysTick_Handler+0x40>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f383 8811 	msr	BASEPRI, r3
}
 8006b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <vPortSetupTimerInterrupt+0x34>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <vPortSetupTimerInterrupt+0x38>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <vPortSetupTimerInterrupt+0x3c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0a      	ldr	r2, [pc, #40]	; (8006b8c <vPortSetupTimerInterrupt+0x40>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	099b      	lsrs	r3, r3, #6
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <vPortSetupTimerInterrupt+0x44>)
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <vPortSetupTimerInterrupt+0x34>)
 8006b70:	2207      	movs	r2, #7
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	e000e010 	.word	0xe000e010
 8006b84:	e000e018 	.word	0xe000e018
 8006b88:	20000000 	.word	0x20000000
 8006b8c:	10624dd3 	.word	0x10624dd3
 8006b90:	e000e014 	.word	0xe000e014

08006b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ba4 <vPortEnableVFP+0x10>
 8006b98:	6801      	ldr	r1, [r0, #0]
 8006b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b9e:	6001      	str	r1, [r0, #0]
 8006ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed88 	.word	0xe000ed88

08006ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bb4:	f7ff f940 	bl	8005e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bb8:	4b5b      	ldr	r3, [pc, #364]	; (8006d28 <pvPortMalloc+0x180>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bc0:	f000 f920 	bl	8006e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bc4:	4b59      	ldr	r3, [pc, #356]	; (8006d2c <pvPortMalloc+0x184>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 8093 	bne.w	8006cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01d      	beq.n	8006c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bd8:	2208      	movs	r2, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d014      	beq.n	8006c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f023 0307 	bic.w	r3, r3, #7
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <pvPortMalloc+0x6c>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	617b      	str	r3, [r7, #20]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d06e      	beq.n	8006cf8 <pvPortMalloc+0x150>
 8006c1a:	4b45      	ldr	r3, [pc, #276]	; (8006d30 <pvPortMalloc+0x188>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d869      	bhi.n	8006cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c24:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <pvPortMalloc+0x18c>)
 8006c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c28:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <pvPortMalloc+0x18c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2e:	e004      	b.n	8006c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <pvPortMalloc+0xa4>
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f1      	bne.n	8006c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c4c:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <pvPortMalloc+0x180>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d050      	beq.n	8006cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	2308      	movs	r3, #8
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d91f      	bls.n	8006cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	613b      	str	r3, [r7, #16]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cb2:	69b8      	ldr	r0, [r7, #24]
 8006cb4:	f000 f908 	bl	8006ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <pvPortMalloc+0x188>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <pvPortMalloc+0x188>)
 8006cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <pvPortMalloc+0x188>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <pvPortMalloc+0x190>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d203      	bcs.n	8006cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cd2:	4b17      	ldr	r3, [pc, #92]	; (8006d30 <pvPortMalloc+0x188>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <pvPortMalloc+0x190>)
 8006cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <pvPortMalloc+0x184>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <pvPortMalloc+0x194>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	4a11      	ldr	r2, [pc, #68]	; (8006d3c <pvPortMalloc+0x194>)
 8006cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cf8:	f7ff f8ac 	bl	8005e54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <pvPortMalloc+0x174>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60fb      	str	r3, [r7, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <pvPortMalloc+0x172>
	return pvReturn;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	200042c8 	.word	0x200042c8
 8006d2c:	200042dc 	.word	0x200042dc
 8006d30:	200042cc 	.word	0x200042cc
 8006d34:	200042c0 	.word	0x200042c0
 8006d38:	200042d0 	.word	0x200042d0
 8006d3c:	200042d4 	.word	0x200042d4

08006d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d04d      	beq.n	8006dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d52:	2308      	movs	r3, #8
 8006d54:	425b      	negs	r3, r3
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4413      	add	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <vPortFree+0xb8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <vPortFree+0x44>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60fb      	str	r3, [r7, #12]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <vPortFree+0x62>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60bb      	str	r3, [r7, #8]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <vPortFree+0xb8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01e      	beq.n	8006dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11a      	bne.n	8006dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b0e      	ldr	r3, [pc, #56]	; (8006df8 <vPortFree+0xb8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dc8:	f7ff f836 	bl	8005e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <vPortFree+0xbc>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <vPortFree+0xbc>)
 8006dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dda:	6938      	ldr	r0, [r7, #16]
 8006ddc:	f000 f874 	bl	8006ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <vPortFree+0xc0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3301      	adds	r3, #1
 8006de6:	4a06      	ldr	r2, [pc, #24]	; (8006e00 <vPortFree+0xc0>)
 8006de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dea:	f7ff f833 	bl	8005e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200042dc 	.word	0x200042dc
 8006dfc:	200042cc 	.word	0x200042cc
 8006e00:	200042d8 	.word	0x200042d8

08006e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e10:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <prvHeapInit+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00c      	beq.n	8006e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3307      	adds	r3, #7
 8006e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <prvHeapInit+0xac>)
 8006e34:	4413      	add	r3, r2
 8006e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e42:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e50:	2208      	movs	r2, #8
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0307 	bic.w	r3, r3, #7
 8006e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	4a0a      	ldr	r2, [pc, #40]	; (8006ebc <prvHeapInit+0xb8>)
 8006e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <prvHeapInit+0xbc>)
 8006e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <prvHeapInit+0xc0>)
 8006e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	200006c0 	.word	0x200006c0
 8006eb4:	200042c0 	.word	0x200042c0
 8006eb8:	200042c8 	.word	0x200042c8
 8006ebc:	200042d0 	.word	0x200042d0
 8006ec0:	200042cc 	.word	0x200042cc
 8006ec4:	200042dc 	.word	0x200042dc

08006ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ed0:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <prvInsertBlockIntoFreeList+0xac>)
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e002      	b.n	8006edc <prvInsertBlockIntoFreeList+0x14>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d8f7      	bhi.n	8006ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d108      	bne.n	8006f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	441a      	add	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d118      	bne.n	8006f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <prvInsertBlockIntoFreeList+0xb0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d00d      	beq.n	8006f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	441a      	add	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e008      	b.n	8006f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <prvInsertBlockIntoFreeList+0xb0>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e003      	b.n	8006f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	200042c0 	.word	0x200042c0
 8006f78:	200042c8 	.word	0x200042c8

08006f7c <__cvt>:
 8006f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	ec55 4b10 	vmov	r4, r5, d0
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	460e      	mov	r6, r1
 8006f88:	4619      	mov	r1, r3
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	bfbb      	ittet	lt
 8006f8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f92:	461d      	movlt	r5, r3
 8006f94:	2300      	movge	r3, #0
 8006f96:	232d      	movlt	r3, #45	; 0x2d
 8006f98:	700b      	strb	r3, [r1, #0]
 8006f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fa0:	4691      	mov	r9, r2
 8006fa2:	f023 0820 	bic.w	r8, r3, #32
 8006fa6:	bfbc      	itt	lt
 8006fa8:	4622      	movlt	r2, r4
 8006faa:	4614      	movlt	r4, r2
 8006fac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fb0:	d005      	beq.n	8006fbe <__cvt+0x42>
 8006fb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fb6:	d100      	bne.n	8006fba <__cvt+0x3e>
 8006fb8:	3601      	adds	r6, #1
 8006fba:	2102      	movs	r1, #2
 8006fbc:	e000      	b.n	8006fc0 <__cvt+0x44>
 8006fbe:	2103      	movs	r1, #3
 8006fc0:	ab03      	add	r3, sp, #12
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	ab02      	add	r3, sp, #8
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	ec45 4b10 	vmov	d0, r4, r5
 8006fcc:	4653      	mov	r3, sl
 8006fce:	4632      	mov	r2, r6
 8006fd0:	f000 fe62 	bl	8007c98 <_dtoa_r>
 8006fd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fd8:	4607      	mov	r7, r0
 8006fda:	d102      	bne.n	8006fe2 <__cvt+0x66>
 8006fdc:	f019 0f01 	tst.w	r9, #1
 8006fe0:	d022      	beq.n	8007028 <__cvt+0xac>
 8006fe2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fe6:	eb07 0906 	add.w	r9, r7, r6
 8006fea:	d110      	bne.n	800700e <__cvt+0x92>
 8006fec:	783b      	ldrb	r3, [r7, #0]
 8006fee:	2b30      	cmp	r3, #48	; 0x30
 8006ff0:	d10a      	bne.n	8007008 <__cvt+0x8c>
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7f9 fd85 	bl	8000b08 <__aeabi_dcmpeq>
 8006ffe:	b918      	cbnz	r0, 8007008 <__cvt+0x8c>
 8007000:	f1c6 0601 	rsb	r6, r6, #1
 8007004:	f8ca 6000 	str.w	r6, [sl]
 8007008:	f8da 3000 	ldr.w	r3, [sl]
 800700c:	4499      	add	r9, r3
 800700e:	2200      	movs	r2, #0
 8007010:	2300      	movs	r3, #0
 8007012:	4620      	mov	r0, r4
 8007014:	4629      	mov	r1, r5
 8007016:	f7f9 fd77 	bl	8000b08 <__aeabi_dcmpeq>
 800701a:	b108      	cbz	r0, 8007020 <__cvt+0xa4>
 800701c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007020:	2230      	movs	r2, #48	; 0x30
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	454b      	cmp	r3, r9
 8007026:	d307      	bcc.n	8007038 <__cvt+0xbc>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800702c:	1bdb      	subs	r3, r3, r7
 800702e:	4638      	mov	r0, r7
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	b004      	add	sp, #16
 8007034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007038:	1c59      	adds	r1, r3, #1
 800703a:	9103      	str	r1, [sp, #12]
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	e7f0      	b.n	8007022 <__cvt+0xa6>

08007040 <__exponent>:
 8007040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007042:	4603      	mov	r3, r0
 8007044:	2900      	cmp	r1, #0
 8007046:	bfb8      	it	lt
 8007048:	4249      	neglt	r1, r1
 800704a:	f803 2b02 	strb.w	r2, [r3], #2
 800704e:	bfb4      	ite	lt
 8007050:	222d      	movlt	r2, #45	; 0x2d
 8007052:	222b      	movge	r2, #43	; 0x2b
 8007054:	2909      	cmp	r1, #9
 8007056:	7042      	strb	r2, [r0, #1]
 8007058:	dd2a      	ble.n	80070b0 <__exponent+0x70>
 800705a:	f10d 0207 	add.w	r2, sp, #7
 800705e:	4617      	mov	r7, r2
 8007060:	260a      	movs	r6, #10
 8007062:	4694      	mov	ip, r2
 8007064:	fb91 f5f6 	sdiv	r5, r1, r6
 8007068:	fb06 1415 	mls	r4, r6, r5, r1
 800706c:	3430      	adds	r4, #48	; 0x30
 800706e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007072:	460c      	mov	r4, r1
 8007074:	2c63      	cmp	r4, #99	; 0x63
 8007076:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800707a:	4629      	mov	r1, r5
 800707c:	dcf1      	bgt.n	8007062 <__exponent+0x22>
 800707e:	3130      	adds	r1, #48	; 0x30
 8007080:	f1ac 0402 	sub.w	r4, ip, #2
 8007084:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007088:	1c41      	adds	r1, r0, #1
 800708a:	4622      	mov	r2, r4
 800708c:	42ba      	cmp	r2, r7
 800708e:	d30a      	bcc.n	80070a6 <__exponent+0x66>
 8007090:	f10d 0209 	add.w	r2, sp, #9
 8007094:	eba2 020c 	sub.w	r2, r2, ip
 8007098:	42bc      	cmp	r4, r7
 800709a:	bf88      	it	hi
 800709c:	2200      	movhi	r2, #0
 800709e:	4413      	add	r3, r2
 80070a0:	1a18      	subs	r0, r3, r0
 80070a2:	b003      	add	sp, #12
 80070a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80070aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80070ae:	e7ed      	b.n	800708c <__exponent+0x4c>
 80070b0:	2330      	movs	r3, #48	; 0x30
 80070b2:	3130      	adds	r1, #48	; 0x30
 80070b4:	7083      	strb	r3, [r0, #2]
 80070b6:	70c1      	strb	r1, [r0, #3]
 80070b8:	1d03      	adds	r3, r0, #4
 80070ba:	e7f1      	b.n	80070a0 <__exponent+0x60>

080070bc <_printf_float>:
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	ed2d 8b02 	vpush	{d8}
 80070c4:	b08d      	sub	sp, #52	; 0x34
 80070c6:	460c      	mov	r4, r1
 80070c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070cc:	4616      	mov	r6, r2
 80070ce:	461f      	mov	r7, r3
 80070d0:	4605      	mov	r5, r0
 80070d2:	f000 fcd5 	bl	8007a80 <_localeconv_r>
 80070d6:	f8d0 a000 	ldr.w	sl, [r0]
 80070da:	4650      	mov	r0, sl
 80070dc:	f7f9 f8e8 	bl	80002b0 <strlen>
 80070e0:	2300      	movs	r3, #0
 80070e2:	930a      	str	r3, [sp, #40]	; 0x28
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	9305      	str	r3, [sp, #20]
 80070e8:	f8d8 3000 	ldr.w	r3, [r8]
 80070ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070f0:	3307      	adds	r3, #7
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	f103 0208 	add.w	r2, r3, #8
 80070fa:	f8c8 2000 	str.w	r2, [r8]
 80070fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007102:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007106:	9307      	str	r3, [sp, #28]
 8007108:	f8cd 8018 	str.w	r8, [sp, #24]
 800710c:	ee08 0a10 	vmov	s16, r0
 8007110:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007118:	4b9e      	ldr	r3, [pc, #632]	; (8007394 <_printf_float+0x2d8>)
 800711a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800711e:	f7f9 fd25 	bl	8000b6c <__aeabi_dcmpun>
 8007122:	bb88      	cbnz	r0, 8007188 <_printf_float+0xcc>
 8007124:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007128:	4b9a      	ldr	r3, [pc, #616]	; (8007394 <_printf_float+0x2d8>)
 800712a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800712e:	f7f9 fcff 	bl	8000b30 <__aeabi_dcmple>
 8007132:	bb48      	cbnz	r0, 8007188 <_printf_float+0xcc>
 8007134:	2200      	movs	r2, #0
 8007136:	2300      	movs	r3, #0
 8007138:	4640      	mov	r0, r8
 800713a:	4649      	mov	r1, r9
 800713c:	f7f9 fcee 	bl	8000b1c <__aeabi_dcmplt>
 8007140:	b110      	cbz	r0, 8007148 <_printf_float+0x8c>
 8007142:	232d      	movs	r3, #45	; 0x2d
 8007144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007148:	4a93      	ldr	r2, [pc, #588]	; (8007398 <_printf_float+0x2dc>)
 800714a:	4b94      	ldr	r3, [pc, #592]	; (800739c <_printf_float+0x2e0>)
 800714c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007150:	bf94      	ite	ls
 8007152:	4690      	movls	r8, r2
 8007154:	4698      	movhi	r8, r3
 8007156:	2303      	movs	r3, #3
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	9b05      	ldr	r3, [sp, #20]
 800715c:	f023 0304 	bic.w	r3, r3, #4
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	f04f 0900 	mov.w	r9, #0
 8007166:	9700      	str	r7, [sp, #0]
 8007168:	4633      	mov	r3, r6
 800716a:	aa0b      	add	r2, sp, #44	; 0x2c
 800716c:	4621      	mov	r1, r4
 800716e:	4628      	mov	r0, r5
 8007170:	f000 f9da 	bl	8007528 <_printf_common>
 8007174:	3001      	adds	r0, #1
 8007176:	f040 8090 	bne.w	800729a <_printf_float+0x1de>
 800717a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800717e:	b00d      	add	sp, #52	; 0x34
 8007180:	ecbd 8b02 	vpop	{d8}
 8007184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	4640      	mov	r0, r8
 800718e:	4649      	mov	r1, r9
 8007190:	f7f9 fcec 	bl	8000b6c <__aeabi_dcmpun>
 8007194:	b140      	cbz	r0, 80071a8 <_printf_float+0xec>
 8007196:	464b      	mov	r3, r9
 8007198:	2b00      	cmp	r3, #0
 800719a:	bfbc      	itt	lt
 800719c:	232d      	movlt	r3, #45	; 0x2d
 800719e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071a2:	4a7f      	ldr	r2, [pc, #508]	; (80073a0 <_printf_float+0x2e4>)
 80071a4:	4b7f      	ldr	r3, [pc, #508]	; (80073a4 <_printf_float+0x2e8>)
 80071a6:	e7d1      	b.n	800714c <_printf_float+0x90>
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071ae:	9206      	str	r2, [sp, #24]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	d13f      	bne.n	8007234 <_printf_float+0x178>
 80071b4:	2306      	movs	r3, #6
 80071b6:	6063      	str	r3, [r4, #4]
 80071b8:	9b05      	ldr	r3, [sp, #20]
 80071ba:	6861      	ldr	r1, [r4, #4]
 80071bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071c0:	2300      	movs	r3, #0
 80071c2:	9303      	str	r3, [sp, #12]
 80071c4:	ab0a      	add	r3, sp, #40	; 0x28
 80071c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071ca:	ab09      	add	r3, sp, #36	; 0x24
 80071cc:	ec49 8b10 	vmov	d0, r8, r9
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071d8:	4628      	mov	r0, r5
 80071da:	f7ff fecf 	bl	8006f7c <__cvt>
 80071de:	9b06      	ldr	r3, [sp, #24]
 80071e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071e2:	2b47      	cmp	r3, #71	; 0x47
 80071e4:	4680      	mov	r8, r0
 80071e6:	d108      	bne.n	80071fa <_printf_float+0x13e>
 80071e8:	1cc8      	adds	r0, r1, #3
 80071ea:	db02      	blt.n	80071f2 <_printf_float+0x136>
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	4299      	cmp	r1, r3
 80071f0:	dd41      	ble.n	8007276 <_printf_float+0x1ba>
 80071f2:	f1ab 0302 	sub.w	r3, fp, #2
 80071f6:	fa5f fb83 	uxtb.w	fp, r3
 80071fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071fe:	d820      	bhi.n	8007242 <_printf_float+0x186>
 8007200:	3901      	subs	r1, #1
 8007202:	465a      	mov	r2, fp
 8007204:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007208:	9109      	str	r1, [sp, #36]	; 0x24
 800720a:	f7ff ff19 	bl	8007040 <__exponent>
 800720e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007210:	1813      	adds	r3, r2, r0
 8007212:	2a01      	cmp	r2, #1
 8007214:	4681      	mov	r9, r0
 8007216:	6123      	str	r3, [r4, #16]
 8007218:	dc02      	bgt.n	8007220 <_printf_float+0x164>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	07d2      	lsls	r2, r2, #31
 800721e:	d501      	bpl.n	8007224 <_printf_float+0x168>
 8007220:	3301      	adds	r3, #1
 8007222:	6123      	str	r3, [r4, #16]
 8007224:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007228:	2b00      	cmp	r3, #0
 800722a:	d09c      	beq.n	8007166 <_printf_float+0xaa>
 800722c:	232d      	movs	r3, #45	; 0x2d
 800722e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007232:	e798      	b.n	8007166 <_printf_float+0xaa>
 8007234:	9a06      	ldr	r2, [sp, #24]
 8007236:	2a47      	cmp	r2, #71	; 0x47
 8007238:	d1be      	bne.n	80071b8 <_printf_float+0xfc>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1bc      	bne.n	80071b8 <_printf_float+0xfc>
 800723e:	2301      	movs	r3, #1
 8007240:	e7b9      	b.n	80071b6 <_printf_float+0xfa>
 8007242:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007246:	d118      	bne.n	800727a <_printf_float+0x1be>
 8007248:	2900      	cmp	r1, #0
 800724a:	6863      	ldr	r3, [r4, #4]
 800724c:	dd0b      	ble.n	8007266 <_printf_float+0x1aa>
 800724e:	6121      	str	r1, [r4, #16]
 8007250:	b913      	cbnz	r3, 8007258 <_printf_float+0x19c>
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	07d0      	lsls	r0, r2, #31
 8007256:	d502      	bpl.n	800725e <_printf_float+0x1a2>
 8007258:	3301      	adds	r3, #1
 800725a:	440b      	add	r3, r1
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007260:	f04f 0900 	mov.w	r9, #0
 8007264:	e7de      	b.n	8007224 <_printf_float+0x168>
 8007266:	b913      	cbnz	r3, 800726e <_printf_float+0x1b2>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	07d2      	lsls	r2, r2, #31
 800726c:	d501      	bpl.n	8007272 <_printf_float+0x1b6>
 800726e:	3302      	adds	r3, #2
 8007270:	e7f4      	b.n	800725c <_printf_float+0x1a0>
 8007272:	2301      	movs	r3, #1
 8007274:	e7f2      	b.n	800725c <_printf_float+0x1a0>
 8007276:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800727a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727c:	4299      	cmp	r1, r3
 800727e:	db05      	blt.n	800728c <_printf_float+0x1d0>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	6121      	str	r1, [r4, #16]
 8007284:	07d8      	lsls	r0, r3, #31
 8007286:	d5ea      	bpl.n	800725e <_printf_float+0x1a2>
 8007288:	1c4b      	adds	r3, r1, #1
 800728a:	e7e7      	b.n	800725c <_printf_float+0x1a0>
 800728c:	2900      	cmp	r1, #0
 800728e:	bfd4      	ite	le
 8007290:	f1c1 0202 	rsble	r2, r1, #2
 8007294:	2201      	movgt	r2, #1
 8007296:	4413      	add	r3, r2
 8007298:	e7e0      	b.n	800725c <_printf_float+0x1a0>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	055a      	lsls	r2, r3, #21
 800729e:	d407      	bmi.n	80072b0 <_printf_float+0x1f4>
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	4642      	mov	r2, r8
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	d12c      	bne.n	8007308 <_printf_float+0x24c>
 80072ae:	e764      	b.n	800717a <_printf_float+0xbe>
 80072b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072b4:	f240 80e0 	bls.w	8007478 <_printf_float+0x3bc>
 80072b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	f7f9 fc22 	bl	8000b08 <__aeabi_dcmpeq>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d034      	beq.n	8007332 <_printf_float+0x276>
 80072c8:	4a37      	ldr	r2, [pc, #220]	; (80073a8 <_printf_float+0x2ec>)
 80072ca:	2301      	movs	r3, #1
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f af51 	beq.w	800717a <_printf_float+0xbe>
 80072d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072dc:	429a      	cmp	r2, r3
 80072de:	db02      	blt.n	80072e6 <_printf_float+0x22a>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	07d8      	lsls	r0, r3, #31
 80072e4:	d510      	bpl.n	8007308 <_printf_float+0x24c>
 80072e6:	ee18 3a10 	vmov	r3, s16
 80072ea:	4652      	mov	r2, sl
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	f43f af41 	beq.w	800717a <_printf_float+0xbe>
 80072f8:	f04f 0800 	mov.w	r8, #0
 80072fc:	f104 091a 	add.w	r9, r4, #26
 8007300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007302:	3b01      	subs	r3, #1
 8007304:	4543      	cmp	r3, r8
 8007306:	dc09      	bgt.n	800731c <_printf_float+0x260>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	079b      	lsls	r3, r3, #30
 800730c:	f100 8107 	bmi.w	800751e <_printf_float+0x462>
 8007310:	68e0      	ldr	r0, [r4, #12]
 8007312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007314:	4298      	cmp	r0, r3
 8007316:	bfb8      	it	lt
 8007318:	4618      	movlt	r0, r3
 800731a:	e730      	b.n	800717e <_printf_float+0xc2>
 800731c:	2301      	movs	r3, #1
 800731e:	464a      	mov	r2, r9
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f af27 	beq.w	800717a <_printf_float+0xbe>
 800732c:	f108 0801 	add.w	r8, r8, #1
 8007330:	e7e6      	b.n	8007300 <_printf_float+0x244>
 8007332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	dc39      	bgt.n	80073ac <_printf_float+0x2f0>
 8007338:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <_printf_float+0x2ec>)
 800733a:	2301      	movs	r3, #1
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f af19 	beq.w	800717a <_printf_float+0xbe>
 8007348:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800734c:	4313      	orrs	r3, r2
 800734e:	d102      	bne.n	8007356 <_printf_float+0x29a>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	07d9      	lsls	r1, r3, #31
 8007354:	d5d8      	bpl.n	8007308 <_printf_float+0x24c>
 8007356:	ee18 3a10 	vmov	r3, s16
 800735a:	4652      	mov	r2, sl
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f af09 	beq.w	800717a <_printf_float+0xbe>
 8007368:	f04f 0900 	mov.w	r9, #0
 800736c:	f104 0a1a 	add.w	sl, r4, #26
 8007370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007372:	425b      	negs	r3, r3
 8007374:	454b      	cmp	r3, r9
 8007376:	dc01      	bgt.n	800737c <_printf_float+0x2c0>
 8007378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737a:	e792      	b.n	80072a2 <_printf_float+0x1e6>
 800737c:	2301      	movs	r3, #1
 800737e:	4652      	mov	r2, sl
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	f43f aef7 	beq.w	800717a <_printf_float+0xbe>
 800738c:	f109 0901 	add.w	r9, r9, #1
 8007390:	e7ee      	b.n	8007370 <_printf_float+0x2b4>
 8007392:	bf00      	nop
 8007394:	7fefffff 	.word	0x7fefffff
 8007398:	08009e9c 	.word	0x08009e9c
 800739c:	08009ea0 	.word	0x08009ea0
 80073a0:	08009ea4 	.word	0x08009ea4
 80073a4:	08009ea8 	.word	0x08009ea8
 80073a8:	08009eac 	.word	0x08009eac
 80073ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073b0:	429a      	cmp	r2, r3
 80073b2:	bfa8      	it	ge
 80073b4:	461a      	movge	r2, r3
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	4691      	mov	r9, r2
 80073ba:	dc37      	bgt.n	800742c <_printf_float+0x370>
 80073bc:	f04f 0b00 	mov.w	fp, #0
 80073c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073c4:	f104 021a 	add.w	r2, r4, #26
 80073c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	eba3 0309 	sub.w	r3, r3, r9
 80073d0:	455b      	cmp	r3, fp
 80073d2:	dc33      	bgt.n	800743c <_printf_float+0x380>
 80073d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073d8:	429a      	cmp	r2, r3
 80073da:	db3b      	blt.n	8007454 <_printf_float+0x398>
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	07da      	lsls	r2, r3, #31
 80073e0:	d438      	bmi.n	8007454 <_printf_float+0x398>
 80073e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80073e6:	eba2 0903 	sub.w	r9, r2, r3
 80073ea:	9b05      	ldr	r3, [sp, #20]
 80073ec:	1ad2      	subs	r2, r2, r3
 80073ee:	4591      	cmp	r9, r2
 80073f0:	bfa8      	it	ge
 80073f2:	4691      	movge	r9, r2
 80073f4:	f1b9 0f00 	cmp.w	r9, #0
 80073f8:	dc35      	bgt.n	8007466 <_printf_float+0x3aa>
 80073fa:	f04f 0800 	mov.w	r8, #0
 80073fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007402:	f104 0a1a 	add.w	sl, r4, #26
 8007406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	eba3 0309 	sub.w	r3, r3, r9
 8007410:	4543      	cmp	r3, r8
 8007412:	f77f af79 	ble.w	8007308 <_printf_float+0x24c>
 8007416:	2301      	movs	r3, #1
 8007418:	4652      	mov	r2, sl
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f aeaa 	beq.w	800717a <_printf_float+0xbe>
 8007426:	f108 0801 	add.w	r8, r8, #1
 800742a:	e7ec      	b.n	8007406 <_printf_float+0x34a>
 800742c:	4613      	mov	r3, r2
 800742e:	4631      	mov	r1, r6
 8007430:	4642      	mov	r2, r8
 8007432:	4628      	mov	r0, r5
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	d1c0      	bne.n	80073bc <_printf_float+0x300>
 800743a:	e69e      	b.n	800717a <_printf_float+0xbe>
 800743c:	2301      	movs	r3, #1
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	9205      	str	r2, [sp, #20]
 8007444:	47b8      	blx	r7
 8007446:	3001      	adds	r0, #1
 8007448:	f43f ae97 	beq.w	800717a <_printf_float+0xbe>
 800744c:	9a05      	ldr	r2, [sp, #20]
 800744e:	f10b 0b01 	add.w	fp, fp, #1
 8007452:	e7b9      	b.n	80073c8 <_printf_float+0x30c>
 8007454:	ee18 3a10 	vmov	r3, s16
 8007458:	4652      	mov	r2, sl
 800745a:	4631      	mov	r1, r6
 800745c:	4628      	mov	r0, r5
 800745e:	47b8      	blx	r7
 8007460:	3001      	adds	r0, #1
 8007462:	d1be      	bne.n	80073e2 <_printf_float+0x326>
 8007464:	e689      	b.n	800717a <_printf_float+0xbe>
 8007466:	9a05      	ldr	r2, [sp, #20]
 8007468:	464b      	mov	r3, r9
 800746a:	4442      	add	r2, r8
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	d1c1      	bne.n	80073fa <_printf_float+0x33e>
 8007476:	e680      	b.n	800717a <_printf_float+0xbe>
 8007478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800747a:	2a01      	cmp	r2, #1
 800747c:	dc01      	bgt.n	8007482 <_printf_float+0x3c6>
 800747e:	07db      	lsls	r3, r3, #31
 8007480:	d53a      	bpl.n	80074f8 <_printf_float+0x43c>
 8007482:	2301      	movs	r3, #1
 8007484:	4642      	mov	r2, r8
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f ae74 	beq.w	800717a <_printf_float+0xbe>
 8007492:	ee18 3a10 	vmov	r3, s16
 8007496:	4652      	mov	r2, sl
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	47b8      	blx	r7
 800749e:	3001      	adds	r0, #1
 80074a0:	f43f ae6b 	beq.w	800717a <_printf_float+0xbe>
 80074a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074a8:	2200      	movs	r2, #0
 80074aa:	2300      	movs	r3, #0
 80074ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80074b0:	f7f9 fb2a 	bl	8000b08 <__aeabi_dcmpeq>
 80074b4:	b9d8      	cbnz	r0, 80074ee <_printf_float+0x432>
 80074b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80074ba:	f108 0201 	add.w	r2, r8, #1
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	d10e      	bne.n	80074e6 <_printf_float+0x42a>
 80074c8:	e657      	b.n	800717a <_printf_float+0xbe>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4652      	mov	r2, sl
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b8      	blx	r7
 80074d4:	3001      	adds	r0, #1
 80074d6:	f43f ae50 	beq.w	800717a <_printf_float+0xbe>
 80074da:	f108 0801 	add.w	r8, r8, #1
 80074de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e0:	3b01      	subs	r3, #1
 80074e2:	4543      	cmp	r3, r8
 80074e4:	dcf1      	bgt.n	80074ca <_printf_float+0x40e>
 80074e6:	464b      	mov	r3, r9
 80074e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074ec:	e6da      	b.n	80072a4 <_printf_float+0x1e8>
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	f104 0a1a 	add.w	sl, r4, #26
 80074f6:	e7f2      	b.n	80074de <_printf_float+0x422>
 80074f8:	2301      	movs	r3, #1
 80074fa:	4642      	mov	r2, r8
 80074fc:	e7df      	b.n	80074be <_printf_float+0x402>
 80074fe:	2301      	movs	r3, #1
 8007500:	464a      	mov	r2, r9
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f ae36 	beq.w	800717a <_printf_float+0xbe>
 800750e:	f108 0801 	add.w	r8, r8, #1
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007516:	1a5b      	subs	r3, r3, r1
 8007518:	4543      	cmp	r3, r8
 800751a:	dcf0      	bgt.n	80074fe <_printf_float+0x442>
 800751c:	e6f8      	b.n	8007310 <_printf_float+0x254>
 800751e:	f04f 0800 	mov.w	r8, #0
 8007522:	f104 0919 	add.w	r9, r4, #25
 8007526:	e7f4      	b.n	8007512 <_printf_float+0x456>

08007528 <_printf_common>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	4616      	mov	r6, r2
 800752e:	4699      	mov	r9, r3
 8007530:	688a      	ldr	r2, [r1, #8]
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007538:	4293      	cmp	r3, r2
 800753a:	bfb8      	it	lt
 800753c:	4613      	movlt	r3, r2
 800753e:	6033      	str	r3, [r6, #0]
 8007540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007544:	4607      	mov	r7, r0
 8007546:	460c      	mov	r4, r1
 8007548:	b10a      	cbz	r2, 800754e <_printf_common+0x26>
 800754a:	3301      	adds	r3, #1
 800754c:	6033      	str	r3, [r6, #0]
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	0699      	lsls	r1, r3, #26
 8007552:	bf42      	ittt	mi
 8007554:	6833      	ldrmi	r3, [r6, #0]
 8007556:	3302      	addmi	r3, #2
 8007558:	6033      	strmi	r3, [r6, #0]
 800755a:	6825      	ldr	r5, [r4, #0]
 800755c:	f015 0506 	ands.w	r5, r5, #6
 8007560:	d106      	bne.n	8007570 <_printf_common+0x48>
 8007562:	f104 0a19 	add.w	sl, r4, #25
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	6832      	ldr	r2, [r6, #0]
 800756a:	1a9b      	subs	r3, r3, r2
 800756c:	42ab      	cmp	r3, r5
 800756e:	dc26      	bgt.n	80075be <_printf_common+0x96>
 8007570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007574:	1e13      	subs	r3, r2, #0
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	bf18      	it	ne
 800757a:	2301      	movne	r3, #1
 800757c:	0692      	lsls	r2, r2, #26
 800757e:	d42b      	bmi.n	80075d8 <_printf_common+0xb0>
 8007580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007584:	4649      	mov	r1, r9
 8007586:	4638      	mov	r0, r7
 8007588:	47c0      	blx	r8
 800758a:	3001      	adds	r0, #1
 800758c:	d01e      	beq.n	80075cc <_printf_common+0xa4>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	6922      	ldr	r2, [r4, #16]
 8007592:	f003 0306 	and.w	r3, r3, #6
 8007596:	2b04      	cmp	r3, #4
 8007598:	bf02      	ittt	eq
 800759a:	68e5      	ldreq	r5, [r4, #12]
 800759c:	6833      	ldreq	r3, [r6, #0]
 800759e:	1aed      	subeq	r5, r5, r3
 80075a0:	68a3      	ldr	r3, [r4, #8]
 80075a2:	bf0c      	ite	eq
 80075a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a8:	2500      	movne	r5, #0
 80075aa:	4293      	cmp	r3, r2
 80075ac:	bfc4      	itt	gt
 80075ae:	1a9b      	subgt	r3, r3, r2
 80075b0:	18ed      	addgt	r5, r5, r3
 80075b2:	2600      	movs	r6, #0
 80075b4:	341a      	adds	r4, #26
 80075b6:	42b5      	cmp	r5, r6
 80075b8:	d11a      	bne.n	80075f0 <_printf_common+0xc8>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e008      	b.n	80075d0 <_printf_common+0xa8>
 80075be:	2301      	movs	r3, #1
 80075c0:	4652      	mov	r2, sl
 80075c2:	4649      	mov	r1, r9
 80075c4:	4638      	mov	r0, r7
 80075c6:	47c0      	blx	r8
 80075c8:	3001      	adds	r0, #1
 80075ca:	d103      	bne.n	80075d4 <_printf_common+0xac>
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	3501      	adds	r5, #1
 80075d6:	e7c6      	b.n	8007566 <_printf_common+0x3e>
 80075d8:	18e1      	adds	r1, r4, r3
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	2030      	movs	r0, #48	; 0x30
 80075de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075e2:	4422      	add	r2, r4
 80075e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075ec:	3302      	adds	r3, #2
 80075ee:	e7c7      	b.n	8007580 <_printf_common+0x58>
 80075f0:	2301      	movs	r3, #1
 80075f2:	4622      	mov	r2, r4
 80075f4:	4649      	mov	r1, r9
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d0e6      	beq.n	80075cc <_printf_common+0xa4>
 80075fe:	3601      	adds	r6, #1
 8007600:	e7d9      	b.n	80075b6 <_printf_common+0x8e>
	...

08007604 <_printf_i>:
 8007604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	7e0f      	ldrb	r7, [r1, #24]
 800760a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800760c:	2f78      	cmp	r7, #120	; 0x78
 800760e:	4691      	mov	r9, r2
 8007610:	4680      	mov	r8, r0
 8007612:	460c      	mov	r4, r1
 8007614:	469a      	mov	sl, r3
 8007616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800761a:	d807      	bhi.n	800762c <_printf_i+0x28>
 800761c:	2f62      	cmp	r7, #98	; 0x62
 800761e:	d80a      	bhi.n	8007636 <_printf_i+0x32>
 8007620:	2f00      	cmp	r7, #0
 8007622:	f000 80d4 	beq.w	80077ce <_printf_i+0x1ca>
 8007626:	2f58      	cmp	r7, #88	; 0x58
 8007628:	f000 80c0 	beq.w	80077ac <_printf_i+0x1a8>
 800762c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007634:	e03a      	b.n	80076ac <_printf_i+0xa8>
 8007636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800763a:	2b15      	cmp	r3, #21
 800763c:	d8f6      	bhi.n	800762c <_printf_i+0x28>
 800763e:	a101      	add	r1, pc, #4	; (adr r1, 8007644 <_printf_i+0x40>)
 8007640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007644:	0800769d 	.word	0x0800769d
 8007648:	080076b1 	.word	0x080076b1
 800764c:	0800762d 	.word	0x0800762d
 8007650:	0800762d 	.word	0x0800762d
 8007654:	0800762d 	.word	0x0800762d
 8007658:	0800762d 	.word	0x0800762d
 800765c:	080076b1 	.word	0x080076b1
 8007660:	0800762d 	.word	0x0800762d
 8007664:	0800762d 	.word	0x0800762d
 8007668:	0800762d 	.word	0x0800762d
 800766c:	0800762d 	.word	0x0800762d
 8007670:	080077b5 	.word	0x080077b5
 8007674:	080076dd 	.word	0x080076dd
 8007678:	0800776f 	.word	0x0800776f
 800767c:	0800762d 	.word	0x0800762d
 8007680:	0800762d 	.word	0x0800762d
 8007684:	080077d7 	.word	0x080077d7
 8007688:	0800762d 	.word	0x0800762d
 800768c:	080076dd 	.word	0x080076dd
 8007690:	0800762d 	.word	0x0800762d
 8007694:	0800762d 	.word	0x0800762d
 8007698:	08007777 	.word	0x08007777
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	602a      	str	r2, [r5, #0]
 80076a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076ac:	2301      	movs	r3, #1
 80076ae:	e09f      	b.n	80077f0 <_printf_i+0x1ec>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	0607      	lsls	r7, r0, #24
 80076b6:	f103 0104 	add.w	r1, r3, #4
 80076ba:	6029      	str	r1, [r5, #0]
 80076bc:	d501      	bpl.n	80076c2 <_printf_i+0xbe>
 80076be:	681e      	ldr	r6, [r3, #0]
 80076c0:	e003      	b.n	80076ca <_printf_i+0xc6>
 80076c2:	0646      	lsls	r6, r0, #25
 80076c4:	d5fb      	bpl.n	80076be <_printf_i+0xba>
 80076c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	da03      	bge.n	80076d6 <_printf_i+0xd2>
 80076ce:	232d      	movs	r3, #45	; 0x2d
 80076d0:	4276      	negs	r6, r6
 80076d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d6:	485a      	ldr	r0, [pc, #360]	; (8007840 <_printf_i+0x23c>)
 80076d8:	230a      	movs	r3, #10
 80076da:	e012      	b.n	8007702 <_printf_i+0xfe>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	6820      	ldr	r0, [r4, #0]
 80076e0:	1d19      	adds	r1, r3, #4
 80076e2:	6029      	str	r1, [r5, #0]
 80076e4:	0605      	lsls	r5, r0, #24
 80076e6:	d501      	bpl.n	80076ec <_printf_i+0xe8>
 80076e8:	681e      	ldr	r6, [r3, #0]
 80076ea:	e002      	b.n	80076f2 <_printf_i+0xee>
 80076ec:	0641      	lsls	r1, r0, #25
 80076ee:	d5fb      	bpl.n	80076e8 <_printf_i+0xe4>
 80076f0:	881e      	ldrh	r6, [r3, #0]
 80076f2:	4853      	ldr	r0, [pc, #332]	; (8007840 <_printf_i+0x23c>)
 80076f4:	2f6f      	cmp	r7, #111	; 0x6f
 80076f6:	bf0c      	ite	eq
 80076f8:	2308      	moveq	r3, #8
 80076fa:	230a      	movne	r3, #10
 80076fc:	2100      	movs	r1, #0
 80076fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007702:	6865      	ldr	r5, [r4, #4]
 8007704:	60a5      	str	r5, [r4, #8]
 8007706:	2d00      	cmp	r5, #0
 8007708:	bfa2      	ittt	ge
 800770a:	6821      	ldrge	r1, [r4, #0]
 800770c:	f021 0104 	bicge.w	r1, r1, #4
 8007710:	6021      	strge	r1, [r4, #0]
 8007712:	b90e      	cbnz	r6, 8007718 <_printf_i+0x114>
 8007714:	2d00      	cmp	r5, #0
 8007716:	d04b      	beq.n	80077b0 <_printf_i+0x1ac>
 8007718:	4615      	mov	r5, r2
 800771a:	fbb6 f1f3 	udiv	r1, r6, r3
 800771e:	fb03 6711 	mls	r7, r3, r1, r6
 8007722:	5dc7      	ldrb	r7, [r0, r7]
 8007724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007728:	4637      	mov	r7, r6
 800772a:	42bb      	cmp	r3, r7
 800772c:	460e      	mov	r6, r1
 800772e:	d9f4      	bls.n	800771a <_printf_i+0x116>
 8007730:	2b08      	cmp	r3, #8
 8007732:	d10b      	bne.n	800774c <_printf_i+0x148>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	07de      	lsls	r6, r3, #31
 8007738:	d508      	bpl.n	800774c <_printf_i+0x148>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	6861      	ldr	r1, [r4, #4]
 800773e:	4299      	cmp	r1, r3
 8007740:	bfde      	ittt	le
 8007742:	2330      	movle	r3, #48	; 0x30
 8007744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007748:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800774c:	1b52      	subs	r2, r2, r5
 800774e:	6122      	str	r2, [r4, #16]
 8007750:	f8cd a000 	str.w	sl, [sp]
 8007754:	464b      	mov	r3, r9
 8007756:	aa03      	add	r2, sp, #12
 8007758:	4621      	mov	r1, r4
 800775a:	4640      	mov	r0, r8
 800775c:	f7ff fee4 	bl	8007528 <_printf_common>
 8007760:	3001      	adds	r0, #1
 8007762:	d14a      	bne.n	80077fa <_printf_i+0x1f6>
 8007764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007768:	b004      	add	sp, #16
 800776a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f043 0320 	orr.w	r3, r3, #32
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	4833      	ldr	r0, [pc, #204]	; (8007844 <_printf_i+0x240>)
 8007778:	2778      	movs	r7, #120	; 0x78
 800777a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	6829      	ldr	r1, [r5, #0]
 8007782:	061f      	lsls	r7, r3, #24
 8007784:	f851 6b04 	ldr.w	r6, [r1], #4
 8007788:	d402      	bmi.n	8007790 <_printf_i+0x18c>
 800778a:	065f      	lsls	r7, r3, #25
 800778c:	bf48      	it	mi
 800778e:	b2b6      	uxthmi	r6, r6
 8007790:	07df      	lsls	r7, r3, #31
 8007792:	bf48      	it	mi
 8007794:	f043 0320 	orrmi.w	r3, r3, #32
 8007798:	6029      	str	r1, [r5, #0]
 800779a:	bf48      	it	mi
 800779c:	6023      	strmi	r3, [r4, #0]
 800779e:	b91e      	cbnz	r6, 80077a8 <_printf_i+0x1a4>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	f023 0320 	bic.w	r3, r3, #32
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	2310      	movs	r3, #16
 80077aa:	e7a7      	b.n	80076fc <_printf_i+0xf8>
 80077ac:	4824      	ldr	r0, [pc, #144]	; (8007840 <_printf_i+0x23c>)
 80077ae:	e7e4      	b.n	800777a <_printf_i+0x176>
 80077b0:	4615      	mov	r5, r2
 80077b2:	e7bd      	b.n	8007730 <_printf_i+0x12c>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	6826      	ldr	r6, [r4, #0]
 80077b8:	6961      	ldr	r1, [r4, #20]
 80077ba:	1d18      	adds	r0, r3, #4
 80077bc:	6028      	str	r0, [r5, #0]
 80077be:	0635      	lsls	r5, r6, #24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0x1c4>
 80077c4:	6019      	str	r1, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0x1ca>
 80077c8:	0670      	lsls	r0, r6, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0x1c0>
 80077cc:	8019      	strh	r1, [r3, #0]
 80077ce:	2300      	movs	r3, #0
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	4615      	mov	r5, r2
 80077d4:	e7bc      	b.n	8007750 <_printf_i+0x14c>
 80077d6:	682b      	ldr	r3, [r5, #0]
 80077d8:	1d1a      	adds	r2, r3, #4
 80077da:	602a      	str	r2, [r5, #0]
 80077dc:	681d      	ldr	r5, [r3, #0]
 80077de:	6862      	ldr	r2, [r4, #4]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4628      	mov	r0, r5
 80077e4:	f7f8 fd14 	bl	8000210 <memchr>
 80077e8:	b108      	cbz	r0, 80077ee <_printf_i+0x1ea>
 80077ea:	1b40      	subs	r0, r0, r5
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	2300      	movs	r3, #0
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	e7aa      	b.n	8007750 <_printf_i+0x14c>
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4649      	mov	r1, r9
 8007800:	4640      	mov	r0, r8
 8007802:	47d0      	blx	sl
 8007804:	3001      	adds	r0, #1
 8007806:	d0ad      	beq.n	8007764 <_printf_i+0x160>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	d413      	bmi.n	8007836 <_printf_i+0x232>
 800780e:	68e0      	ldr	r0, [r4, #12]
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	4298      	cmp	r0, r3
 8007814:	bfb8      	it	lt
 8007816:	4618      	movlt	r0, r3
 8007818:	e7a6      	b.n	8007768 <_printf_i+0x164>
 800781a:	2301      	movs	r3, #1
 800781c:	4632      	mov	r2, r6
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	47d0      	blx	sl
 8007824:	3001      	adds	r0, #1
 8007826:	d09d      	beq.n	8007764 <_printf_i+0x160>
 8007828:	3501      	adds	r5, #1
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	9903      	ldr	r1, [sp, #12]
 800782e:	1a5b      	subs	r3, r3, r1
 8007830:	42ab      	cmp	r3, r5
 8007832:	dcf2      	bgt.n	800781a <_printf_i+0x216>
 8007834:	e7eb      	b.n	800780e <_printf_i+0x20a>
 8007836:	2500      	movs	r5, #0
 8007838:	f104 0619 	add.w	r6, r4, #25
 800783c:	e7f5      	b.n	800782a <_printf_i+0x226>
 800783e:	bf00      	nop
 8007840:	08009eae 	.word	0x08009eae
 8007844:	08009ebf 	.word	0x08009ebf

08007848 <std>:
 8007848:	2300      	movs	r3, #0
 800784a:	b510      	push	{r4, lr}
 800784c:	4604      	mov	r4, r0
 800784e:	e9c0 3300 	strd	r3, r3, [r0]
 8007852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007856:	6083      	str	r3, [r0, #8]
 8007858:	8181      	strh	r1, [r0, #12]
 800785a:	6643      	str	r3, [r0, #100]	; 0x64
 800785c:	81c2      	strh	r2, [r0, #14]
 800785e:	6183      	str	r3, [r0, #24]
 8007860:	4619      	mov	r1, r3
 8007862:	2208      	movs	r2, #8
 8007864:	305c      	adds	r0, #92	; 0x5c
 8007866:	f000 f902 	bl	8007a6e <memset>
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x38>)
 800786c:	6263      	str	r3, [r4, #36]	; 0x24
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <std+0x3c>)
 8007870:	62a3      	str	r3, [r4, #40]	; 0x28
 8007872:	4b05      	ldr	r3, [pc, #20]	; (8007888 <std+0x40>)
 8007874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <std+0x44>)
 8007878:	6224      	str	r4, [r4, #32]
 800787a:	6323      	str	r3, [r4, #48]	; 0x30
 800787c:	bd10      	pop	{r4, pc}
 800787e:	bf00      	nop
 8007880:	080079e9 	.word	0x080079e9
 8007884:	08007a0b 	.word	0x08007a0b
 8007888:	08007a43 	.word	0x08007a43
 800788c:	08007a67 	.word	0x08007a67

08007890 <stdio_exit_handler>:
 8007890:	4a02      	ldr	r2, [pc, #8]	; (800789c <stdio_exit_handler+0xc>)
 8007892:	4903      	ldr	r1, [pc, #12]	; (80078a0 <stdio_exit_handler+0x10>)
 8007894:	4803      	ldr	r0, [pc, #12]	; (80078a4 <stdio_exit_handler+0x14>)
 8007896:	f000 b869 	b.w	800796c <_fwalk_sglue>
 800789a:	bf00      	nop
 800789c:	20000010 	.word	0x20000010
 80078a0:	08009531 	.word	0x08009531
 80078a4:	2000001c 	.word	0x2000001c

080078a8 <cleanup_stdio>:
 80078a8:	6841      	ldr	r1, [r0, #4]
 80078aa:	4b0c      	ldr	r3, [pc, #48]	; (80078dc <cleanup_stdio+0x34>)
 80078ac:	4299      	cmp	r1, r3
 80078ae:	b510      	push	{r4, lr}
 80078b0:	4604      	mov	r4, r0
 80078b2:	d001      	beq.n	80078b8 <cleanup_stdio+0x10>
 80078b4:	f001 fe3c 	bl	8009530 <_fflush_r>
 80078b8:	68a1      	ldr	r1, [r4, #8]
 80078ba:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <cleanup_stdio+0x38>)
 80078bc:	4299      	cmp	r1, r3
 80078be:	d002      	beq.n	80078c6 <cleanup_stdio+0x1e>
 80078c0:	4620      	mov	r0, r4
 80078c2:	f001 fe35 	bl	8009530 <_fflush_r>
 80078c6:	68e1      	ldr	r1, [r4, #12]
 80078c8:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <cleanup_stdio+0x3c>)
 80078ca:	4299      	cmp	r1, r3
 80078cc:	d004      	beq.n	80078d8 <cleanup_stdio+0x30>
 80078ce:	4620      	mov	r0, r4
 80078d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d4:	f001 be2c 	b.w	8009530 <_fflush_r>
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	bf00      	nop
 80078dc:	200042e0 	.word	0x200042e0
 80078e0:	20004348 	.word	0x20004348
 80078e4:	200043b0 	.word	0x200043b0

080078e8 <global_stdio_init.part.0>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <global_stdio_init.part.0+0x30>)
 80078ec:	4c0b      	ldr	r4, [pc, #44]	; (800791c <global_stdio_init.part.0+0x34>)
 80078ee:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <global_stdio_init.part.0+0x38>)
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	4620      	mov	r0, r4
 80078f4:	2200      	movs	r2, #0
 80078f6:	2104      	movs	r1, #4
 80078f8:	f7ff ffa6 	bl	8007848 <std>
 80078fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007900:	2201      	movs	r2, #1
 8007902:	2109      	movs	r1, #9
 8007904:	f7ff ffa0 	bl	8007848 <std>
 8007908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800790c:	2202      	movs	r2, #2
 800790e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007912:	2112      	movs	r1, #18
 8007914:	f7ff bf98 	b.w	8007848 <std>
 8007918:	20004418 	.word	0x20004418
 800791c:	200042e0 	.word	0x200042e0
 8007920:	08007891 	.word	0x08007891

08007924 <__sfp_lock_acquire>:
 8007924:	4801      	ldr	r0, [pc, #4]	; (800792c <__sfp_lock_acquire+0x8>)
 8007926:	f000 b91f 	b.w	8007b68 <__retarget_lock_acquire_recursive>
 800792a:	bf00      	nop
 800792c:	20004421 	.word	0x20004421

08007930 <__sfp_lock_release>:
 8007930:	4801      	ldr	r0, [pc, #4]	; (8007938 <__sfp_lock_release+0x8>)
 8007932:	f000 b91a 	b.w	8007b6a <__retarget_lock_release_recursive>
 8007936:	bf00      	nop
 8007938:	20004421 	.word	0x20004421

0800793c <__sinit>:
 800793c:	b510      	push	{r4, lr}
 800793e:	4604      	mov	r4, r0
 8007940:	f7ff fff0 	bl	8007924 <__sfp_lock_acquire>
 8007944:	6a23      	ldr	r3, [r4, #32]
 8007946:	b11b      	cbz	r3, 8007950 <__sinit+0x14>
 8007948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794c:	f7ff bff0 	b.w	8007930 <__sfp_lock_release>
 8007950:	4b04      	ldr	r3, [pc, #16]	; (8007964 <__sinit+0x28>)
 8007952:	6223      	str	r3, [r4, #32]
 8007954:	4b04      	ldr	r3, [pc, #16]	; (8007968 <__sinit+0x2c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f5      	bne.n	8007948 <__sinit+0xc>
 800795c:	f7ff ffc4 	bl	80078e8 <global_stdio_init.part.0>
 8007960:	e7f2      	b.n	8007948 <__sinit+0xc>
 8007962:	bf00      	nop
 8007964:	080078a9 	.word	0x080078a9
 8007968:	20004418 	.word	0x20004418

0800796c <_fwalk_sglue>:
 800796c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007970:	4607      	mov	r7, r0
 8007972:	4688      	mov	r8, r1
 8007974:	4614      	mov	r4, r2
 8007976:	2600      	movs	r6, #0
 8007978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800797c:	f1b9 0901 	subs.w	r9, r9, #1
 8007980:	d505      	bpl.n	800798e <_fwalk_sglue+0x22>
 8007982:	6824      	ldr	r4, [r4, #0]
 8007984:	2c00      	cmp	r4, #0
 8007986:	d1f7      	bne.n	8007978 <_fwalk_sglue+0xc>
 8007988:	4630      	mov	r0, r6
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	89ab      	ldrh	r3, [r5, #12]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d907      	bls.n	80079a4 <_fwalk_sglue+0x38>
 8007994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007998:	3301      	adds	r3, #1
 800799a:	d003      	beq.n	80079a4 <_fwalk_sglue+0x38>
 800799c:	4629      	mov	r1, r5
 800799e:	4638      	mov	r0, r7
 80079a0:	47c0      	blx	r8
 80079a2:	4306      	orrs	r6, r0
 80079a4:	3568      	adds	r5, #104	; 0x68
 80079a6:	e7e9      	b.n	800797c <_fwalk_sglue+0x10>

080079a8 <siprintf>:
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b500      	push	{lr}
 80079ac:	b09c      	sub	sp, #112	; 0x70
 80079ae:	ab1d      	add	r3, sp, #116	; 0x74
 80079b0:	9002      	str	r0, [sp, #8]
 80079b2:	9006      	str	r0, [sp, #24]
 80079b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079b8:	4809      	ldr	r0, [pc, #36]	; (80079e0 <siprintf+0x38>)
 80079ba:	9107      	str	r1, [sp, #28]
 80079bc:	9104      	str	r1, [sp, #16]
 80079be:	4909      	ldr	r1, [pc, #36]	; (80079e4 <siprintf+0x3c>)
 80079c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c4:	9105      	str	r1, [sp, #20]
 80079c6:	6800      	ldr	r0, [r0, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	a902      	add	r1, sp, #8
 80079cc:	f001 fc2c 	bl	8009228 <_svfiprintf_r>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	b01c      	add	sp, #112	; 0x70
 80079d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079dc:	b003      	add	sp, #12
 80079de:	4770      	bx	lr
 80079e0:	20000068 	.word	0x20000068
 80079e4:	ffff0208 	.word	0xffff0208

080079e8 <__sread>:
 80079e8:	b510      	push	{r4, lr}
 80079ea:	460c      	mov	r4, r1
 80079ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f0:	f000 f86c 	bl	8007acc <_read_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	bfab      	itete	ge
 80079f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079fa:	89a3      	ldrhlt	r3, [r4, #12]
 80079fc:	181b      	addge	r3, r3, r0
 80079fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a02:	bfac      	ite	ge
 8007a04:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a06:	81a3      	strhlt	r3, [r4, #12]
 8007a08:	bd10      	pop	{r4, pc}

08007a0a <__swrite>:
 8007a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0e:	461f      	mov	r7, r3
 8007a10:	898b      	ldrh	r3, [r1, #12]
 8007a12:	05db      	lsls	r3, r3, #23
 8007a14:	4605      	mov	r5, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	4616      	mov	r6, r2
 8007a1a:	d505      	bpl.n	8007a28 <__swrite+0x1e>
 8007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a20:	2302      	movs	r3, #2
 8007a22:	2200      	movs	r2, #0
 8007a24:	f000 f840 	bl	8007aa8 <_lseek_r>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	4632      	mov	r2, r6
 8007a36:	463b      	mov	r3, r7
 8007a38:	4628      	mov	r0, r5
 8007a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3e:	f000 b857 	b.w	8007af0 <_write_r>

08007a42 <__sseek>:
 8007a42:	b510      	push	{r4, lr}
 8007a44:	460c      	mov	r4, r1
 8007a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4a:	f000 f82d 	bl	8007aa8 <_lseek_r>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	bf15      	itete	ne
 8007a54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a5e:	81a3      	strheq	r3, [r4, #12]
 8007a60:	bf18      	it	ne
 8007a62:	81a3      	strhne	r3, [r4, #12]
 8007a64:	bd10      	pop	{r4, pc}

08007a66 <__sclose>:
 8007a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6a:	f000 b80d 	b.w	8007a88 <_close_r>

08007a6e <memset>:
 8007a6e:	4402      	add	r2, r0
 8007a70:	4603      	mov	r3, r0
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d100      	bne.n	8007a78 <memset+0xa>
 8007a76:	4770      	bx	lr
 8007a78:	f803 1b01 	strb.w	r1, [r3], #1
 8007a7c:	e7f9      	b.n	8007a72 <memset+0x4>
	...

08007a80 <_localeconv_r>:
 8007a80:	4800      	ldr	r0, [pc, #0]	; (8007a84 <_localeconv_r+0x4>)
 8007a82:	4770      	bx	lr
 8007a84:	2000015c 	.word	0x2000015c

08007a88 <_close_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d06      	ldr	r5, [pc, #24]	; (8007aa4 <_close_r+0x1c>)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	602b      	str	r3, [r5, #0]
 8007a94:	f7fa f9c5 	bl	8001e22 <_close>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_close_r+0x1a>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_close_r+0x1a>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	2000441c 	.word	0x2000441c

08007aa8 <_lseek_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	; (8007ac8 <_lseek_r+0x20>)
 8007aac:	4604      	mov	r4, r0
 8007aae:	4608      	mov	r0, r1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	602a      	str	r2, [r5, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f7fa f9da 	bl	8001e70 <_lseek>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_lseek_r+0x1e>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_lseek_r+0x1e>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	2000441c 	.word	0x2000441c

08007acc <_read_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d07      	ldr	r5, [pc, #28]	; (8007aec <_read_r+0x20>)
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	602a      	str	r2, [r5, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f7fa f968 	bl	8001db0 <_read>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_read_r+0x1e>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_read_r+0x1e>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	2000441c 	.word	0x2000441c

08007af0 <_write_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d07      	ldr	r5, [pc, #28]	; (8007b10 <_write_r+0x20>)
 8007af4:	4604      	mov	r4, r0
 8007af6:	4608      	mov	r0, r1
 8007af8:	4611      	mov	r1, r2
 8007afa:	2200      	movs	r2, #0
 8007afc:	602a      	str	r2, [r5, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f7fa f973 	bl	8001dea <_write>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_write_r+0x1e>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_write_r+0x1e>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	2000441c 	.word	0x2000441c

08007b14 <__errno>:
 8007b14:	4b01      	ldr	r3, [pc, #4]	; (8007b1c <__errno+0x8>)
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000068 	.word	0x20000068

08007b20 <__libc_init_array>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	4d0d      	ldr	r5, [pc, #52]	; (8007b58 <__libc_init_array+0x38>)
 8007b24:	4c0d      	ldr	r4, [pc, #52]	; (8007b5c <__libc_init_array+0x3c>)
 8007b26:	1b64      	subs	r4, r4, r5
 8007b28:	10a4      	asrs	r4, r4, #2
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	42a6      	cmp	r6, r4
 8007b2e:	d109      	bne.n	8007b44 <__libc_init_array+0x24>
 8007b30:	4d0b      	ldr	r5, [pc, #44]	; (8007b60 <__libc_init_array+0x40>)
 8007b32:	4c0c      	ldr	r4, [pc, #48]	; (8007b64 <__libc_init_array+0x44>)
 8007b34:	f002 f892 	bl	8009c5c <_init>
 8007b38:	1b64      	subs	r4, r4, r5
 8007b3a:	10a4      	asrs	r4, r4, #2
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	42a6      	cmp	r6, r4
 8007b40:	d105      	bne.n	8007b4e <__libc_init_array+0x2e>
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b48:	4798      	blx	r3
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7ee      	b.n	8007b2c <__libc_init_array+0xc>
 8007b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b52:	4798      	blx	r3
 8007b54:	3601      	adds	r6, #1
 8007b56:	e7f2      	b.n	8007b3e <__libc_init_array+0x1e>
 8007b58:	0800a214 	.word	0x0800a214
 8007b5c:	0800a214 	.word	0x0800a214
 8007b60:	0800a214 	.word	0x0800a214
 8007b64:	0800a218 	.word	0x0800a218

08007b68 <__retarget_lock_acquire_recursive>:
 8007b68:	4770      	bx	lr

08007b6a <__retarget_lock_release_recursive>:
 8007b6a:	4770      	bx	lr

08007b6c <memcpy>:
 8007b6c:	440a      	add	r2, r1
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b74:	d100      	bne.n	8007b78 <memcpy+0xc>
 8007b76:	4770      	bx	lr
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b82:	4291      	cmp	r1, r2
 8007b84:	d1f9      	bne.n	8007b7a <memcpy+0xe>
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <quorem>:
 8007b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	6903      	ldr	r3, [r0, #16]
 8007b8e:	690c      	ldr	r4, [r1, #16]
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	4607      	mov	r7, r0
 8007b94:	db7e      	blt.n	8007c94 <quorem+0x10c>
 8007b96:	3c01      	subs	r4, #1
 8007b98:	f101 0814 	add.w	r8, r1, #20
 8007b9c:	f100 0514 	add.w	r5, r0, #20
 8007ba0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007baa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bba:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bbe:	d331      	bcc.n	8007c24 <quorem+0x9c>
 8007bc0:	f04f 0e00 	mov.w	lr, #0
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	46ac      	mov	ip, r5
 8007bc8:	46f2      	mov	sl, lr
 8007bca:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bce:	b293      	uxth	r3, r2
 8007bd0:	fb06 e303 	mla	r3, r6, r3, lr
 8007bd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bd8:	0c1a      	lsrs	r2, r3, #16
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	ebaa 0303 	sub.w	r3, sl, r3
 8007be0:	f8dc a000 	ldr.w	sl, [ip]
 8007be4:	fa13 f38a 	uxtah	r3, r3, sl
 8007be8:	fb06 220e 	mla	r2, r6, lr, r2
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	9b00      	ldr	r3, [sp, #0]
 8007bf0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bf4:	b292      	uxth	r2, r2
 8007bf6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bfe:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c02:	4581      	cmp	r9, r0
 8007c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c08:	f84c 3b04 	str.w	r3, [ip], #4
 8007c0c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c10:	d2db      	bcs.n	8007bca <quorem+0x42>
 8007c12:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c16:	b92b      	cbnz	r3, 8007c24 <quorem+0x9c>
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	3b04      	subs	r3, #4
 8007c1c:	429d      	cmp	r5, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	d32c      	bcc.n	8007c7c <quorem+0xf4>
 8007c22:	613c      	str	r4, [r7, #16]
 8007c24:	4638      	mov	r0, r7
 8007c26:	f001 f9a5 	bl	8008f74 <__mcmp>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	db22      	blt.n	8007c74 <quorem+0xec>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	4629      	mov	r1, r5
 8007c32:	2000      	movs	r0, #0
 8007c34:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c38:	f8d1 c000 	ldr.w	ip, [r1]
 8007c3c:	b293      	uxth	r3, r2
 8007c3e:	1ac3      	subs	r3, r0, r3
 8007c40:	0c12      	lsrs	r2, r2, #16
 8007c42:	fa13 f38c 	uxtah	r3, r3, ip
 8007c46:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c54:	45c1      	cmp	r9, r8
 8007c56:	f841 3b04 	str.w	r3, [r1], #4
 8007c5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c5e:	d2e9      	bcs.n	8007c34 <quorem+0xac>
 8007c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c68:	b922      	cbnz	r2, 8007c74 <quorem+0xec>
 8007c6a:	3b04      	subs	r3, #4
 8007c6c:	429d      	cmp	r5, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	d30a      	bcc.n	8007c88 <quorem+0x100>
 8007c72:	613c      	str	r4, [r7, #16]
 8007c74:	4630      	mov	r0, r6
 8007c76:	b003      	add	sp, #12
 8007c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7c:	6812      	ldr	r2, [r2, #0]
 8007c7e:	3b04      	subs	r3, #4
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	d1ce      	bne.n	8007c22 <quorem+0x9a>
 8007c84:	3c01      	subs	r4, #1
 8007c86:	e7c9      	b.n	8007c1c <quorem+0x94>
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	3b04      	subs	r3, #4
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	d1f0      	bne.n	8007c72 <quorem+0xea>
 8007c90:	3c01      	subs	r4, #1
 8007c92:	e7eb      	b.n	8007c6c <quorem+0xe4>
 8007c94:	2000      	movs	r0, #0
 8007c96:	e7ee      	b.n	8007c76 <quorem+0xee>

08007c98 <_dtoa_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	ed2d 8b04 	vpush	{d8-d9}
 8007ca0:	69c5      	ldr	r5, [r0, #28]
 8007ca2:	b093      	sub	sp, #76	; 0x4c
 8007ca4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ca8:	ec57 6b10 	vmov	r6, r7, d0
 8007cac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cb0:	9107      	str	r1, [sp, #28]
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8007cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007cb8:	b975      	cbnz	r5, 8007cd8 <_dtoa_r+0x40>
 8007cba:	2010      	movs	r0, #16
 8007cbc:	f000 fe2a 	bl	8008914 <malloc>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	61e0      	str	r0, [r4, #28]
 8007cc4:	b920      	cbnz	r0, 8007cd0 <_dtoa_r+0x38>
 8007cc6:	4bae      	ldr	r3, [pc, #696]	; (8007f80 <_dtoa_r+0x2e8>)
 8007cc8:	21ef      	movs	r1, #239	; 0xef
 8007cca:	48ae      	ldr	r0, [pc, #696]	; (8007f84 <_dtoa_r+0x2ec>)
 8007ccc:	f001 fc82 	bl	80095d4 <__assert_func>
 8007cd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cd4:	6005      	str	r5, [r0, #0]
 8007cd6:	60c5      	str	r5, [r0, #12]
 8007cd8:	69e3      	ldr	r3, [r4, #28]
 8007cda:	6819      	ldr	r1, [r3, #0]
 8007cdc:	b151      	cbz	r1, 8007cf4 <_dtoa_r+0x5c>
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	604a      	str	r2, [r1, #4]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4093      	lsls	r3, r2
 8007ce6:	608b      	str	r3, [r1, #8]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 ff07 	bl	8008afc <_Bfree>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	1e3b      	subs	r3, r7, #0
 8007cf6:	bfbb      	ittet	lt
 8007cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cfc:	9303      	strlt	r3, [sp, #12]
 8007cfe:	2300      	movge	r3, #0
 8007d00:	2201      	movlt	r2, #1
 8007d02:	bfac      	ite	ge
 8007d04:	f8c8 3000 	strge.w	r3, [r8]
 8007d08:	f8c8 2000 	strlt.w	r2, [r8]
 8007d0c:	4b9e      	ldr	r3, [pc, #632]	; (8007f88 <_dtoa_r+0x2f0>)
 8007d0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d12:	ea33 0308 	bics.w	r3, r3, r8
 8007d16:	d11b      	bne.n	8007d50 <_dtoa_r+0xb8>
 8007d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d24:	4333      	orrs	r3, r6
 8007d26:	f000 8593 	beq.w	8008850 <_dtoa_r+0xbb8>
 8007d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d2c:	b963      	cbnz	r3, 8007d48 <_dtoa_r+0xb0>
 8007d2e:	4b97      	ldr	r3, [pc, #604]	; (8007f8c <_dtoa_r+0x2f4>)
 8007d30:	e027      	b.n	8007d82 <_dtoa_r+0xea>
 8007d32:	4b97      	ldr	r3, [pc, #604]	; (8007f90 <_dtoa_r+0x2f8>)
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	9800      	ldr	r0, [sp, #0]
 8007d3e:	b013      	add	sp, #76	; 0x4c
 8007d40:	ecbd 8b04 	vpop	{d8-d9}
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	4b90      	ldr	r3, [pc, #576]	; (8007f8c <_dtoa_r+0x2f4>)
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	3303      	adds	r3, #3
 8007d4e:	e7f3      	b.n	8007d38 <_dtoa_r+0xa0>
 8007d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d54:	2200      	movs	r2, #0
 8007d56:	ec51 0b17 	vmov	r0, r1, d7
 8007d5a:	eeb0 8a47 	vmov.f32	s16, s14
 8007d5e:	eef0 8a67 	vmov.f32	s17, s15
 8007d62:	2300      	movs	r3, #0
 8007d64:	f7f8 fed0 	bl	8000b08 <__aeabi_dcmpeq>
 8007d68:	4681      	mov	r9, r0
 8007d6a:	b160      	cbz	r0, 8007d86 <_dtoa_r+0xee>
 8007d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d6e:	2301      	movs	r3, #1
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8568 	beq.w	800884a <_dtoa_r+0xbb2>
 8007d7a:	4b86      	ldr	r3, [pc, #536]	; (8007f94 <_dtoa_r+0x2fc>)
 8007d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	e7da      	b.n	8007d3c <_dtoa_r+0xa4>
 8007d86:	aa10      	add	r2, sp, #64	; 0x40
 8007d88:	a911      	add	r1, sp, #68	; 0x44
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d90:	eef0 0a68 	vmov.f32	s1, s17
 8007d94:	f001 f994 	bl	80090c0 <__d2b>
 8007d98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007d9c:	4682      	mov	sl, r0
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	d07f      	beq.n	8007ea2 <_dtoa_r+0x20a>
 8007da2:	ee18 3a90 	vmov	r3, s17
 8007da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007daa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007dae:	ec51 0b18 	vmov	r0, r1, d8
 8007db2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007db6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b75      	ldr	r3, [pc, #468]	; (8007f98 <_dtoa_r+0x300>)
 8007dc4:	f7f8 fa80 	bl	80002c8 <__aeabi_dsub>
 8007dc8:	a367      	add	r3, pc, #412	; (adr r3, 8007f68 <_dtoa_r+0x2d0>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fc33 	bl	8000638 <__aeabi_dmul>
 8007dd2:	a367      	add	r3, pc, #412	; (adr r3, 8007f70 <_dtoa_r+0x2d8>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fa78 	bl	80002cc <__adddf3>
 8007ddc:	4606      	mov	r6, r0
 8007dde:	4628      	mov	r0, r5
 8007de0:	460f      	mov	r7, r1
 8007de2:	f7f8 fbbf 	bl	8000564 <__aeabi_i2d>
 8007de6:	a364      	add	r3, pc, #400	; (adr r3, 8007f78 <_dtoa_r+0x2e0>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fc24 	bl	8000638 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fa68 	bl	80002cc <__adddf3>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	f7f8 feca 	bl	8000b98 <__aeabi_d2iz>
 8007e04:	2200      	movs	r2, #0
 8007e06:	4683      	mov	fp, r0
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	f7f8 fe85 	bl	8000b1c <__aeabi_dcmplt>
 8007e12:	b148      	cbz	r0, 8007e28 <_dtoa_r+0x190>
 8007e14:	4658      	mov	r0, fp
 8007e16:	f7f8 fba5 	bl	8000564 <__aeabi_i2d>
 8007e1a:	4632      	mov	r2, r6
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	f7f8 fe73 	bl	8000b08 <__aeabi_dcmpeq>
 8007e22:	b908      	cbnz	r0, 8007e28 <_dtoa_r+0x190>
 8007e24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007e28:	f1bb 0f16 	cmp.w	fp, #22
 8007e2c:	d857      	bhi.n	8007ede <_dtoa_r+0x246>
 8007e2e:	4b5b      	ldr	r3, [pc, #364]	; (8007f9c <_dtoa_r+0x304>)
 8007e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	ec51 0b18 	vmov	r0, r1, d8
 8007e3c:	f7f8 fe6e 	bl	8000b1c <__aeabi_dcmplt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d04e      	beq.n	8007ee2 <_dtoa_r+0x24a>
 8007e44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007e48:	2300      	movs	r3, #0
 8007e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e4e:	1b5b      	subs	r3, r3, r5
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	bf45      	ittet	mi
 8007e54:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e58:	9305      	strmi	r3, [sp, #20]
 8007e5a:	2300      	movpl	r3, #0
 8007e5c:	2300      	movmi	r3, #0
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	bf54      	ite	pl
 8007e62:	9305      	strpl	r3, [sp, #20]
 8007e64:	9306      	strmi	r3, [sp, #24]
 8007e66:	f1bb 0f00 	cmp.w	fp, #0
 8007e6a:	db3c      	blt.n	8007ee6 <_dtoa_r+0x24e>
 8007e6c:	9b06      	ldr	r3, [sp, #24]
 8007e6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007e72:	445b      	add	r3, fp
 8007e74:	9306      	str	r3, [sp, #24]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9308      	str	r3, [sp, #32]
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d868      	bhi.n	8007f52 <_dtoa_r+0x2ba>
 8007e80:	2b05      	cmp	r3, #5
 8007e82:	bfc4      	itt	gt
 8007e84:	3b04      	subgt	r3, #4
 8007e86:	9307      	strgt	r3, [sp, #28]
 8007e88:	9b07      	ldr	r3, [sp, #28]
 8007e8a:	f1a3 0302 	sub.w	r3, r3, #2
 8007e8e:	bfcc      	ite	gt
 8007e90:	2500      	movgt	r5, #0
 8007e92:	2501      	movle	r5, #1
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	f200 8085 	bhi.w	8007fa4 <_dtoa_r+0x30c>
 8007e9a:	e8df f003 	tbb	[pc, r3]
 8007e9e:	3b2e      	.short	0x3b2e
 8007ea0:	5839      	.short	0x5839
 8007ea2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ea6:	441d      	add	r5, r3
 8007ea8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	bfc1      	itttt	gt
 8007eb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007eb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007eb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007ebc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ec0:	bfd6      	itet	le
 8007ec2:	f1c3 0320 	rsble	r3, r3, #32
 8007ec6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007eca:	fa06 f003 	lslle.w	r0, r6, r3
 8007ece:	f7f8 fb39 	bl	8000544 <__aeabi_ui2d>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ed8:	3d01      	subs	r5, #1
 8007eda:	920e      	str	r2, [sp, #56]	; 0x38
 8007edc:	e76f      	b.n	8007dbe <_dtoa_r+0x126>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e7b3      	b.n	8007e4a <_dtoa_r+0x1b2>
 8007ee2:	900c      	str	r0, [sp, #48]	; 0x30
 8007ee4:	e7b2      	b.n	8007e4c <_dtoa_r+0x1b4>
 8007ee6:	9b05      	ldr	r3, [sp, #20]
 8007ee8:	eba3 030b 	sub.w	r3, r3, fp
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	f1cb 0300 	rsb	r3, fp, #0
 8007ef2:	9308      	str	r3, [sp, #32]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ef8:	e7bf      	b.n	8007e7a <_dtoa_r+0x1e2>
 8007efa:	2300      	movs	r3, #0
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc52      	bgt.n	8007faa <_dtoa_r+0x312>
 8007f04:	2301      	movs	r3, #1
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f0e:	e00b      	b.n	8007f28 <_dtoa_r+0x290>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f3      	b.n	8007efc <_dtoa_r+0x264>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	445b      	add	r3, fp
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	bfb8      	it	lt
 8007f26:	2301      	movlt	r3, #1
 8007f28:	69e0      	ldr	r0, [r4, #28]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	f102 0614 	add.w	r6, r2, #20
 8007f32:	429e      	cmp	r6, r3
 8007f34:	d93d      	bls.n	8007fb2 <_dtoa_r+0x31a>
 8007f36:	6041      	str	r1, [r0, #4]
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fd9f 	bl	8008a7c <_Balloc>
 8007f3e:	9000      	str	r0, [sp, #0]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d139      	bne.n	8007fb8 <_dtoa_r+0x320>
 8007f44:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <_dtoa_r+0x308>)
 8007f46:	4602      	mov	r2, r0
 8007f48:	f240 11af 	movw	r1, #431	; 0x1af
 8007f4c:	e6bd      	b.n	8007cca <_dtoa_r+0x32>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e7e1      	b.n	8007f16 <_dtoa_r+0x27e>
 8007f52:	2501      	movs	r5, #1
 8007f54:	2300      	movs	r3, #0
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	9509      	str	r5, [sp, #36]	; 0x24
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	2200      	movs	r2, #0
 8007f64:	2312      	movs	r3, #18
 8007f66:	e7d1      	b.n	8007f0c <_dtoa_r+0x274>
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	08009edd 	.word	0x08009edd
 8007f84:	08009ef4 	.word	0x08009ef4
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	08009ed9 	.word	0x08009ed9
 8007f90:	08009ed0 	.word	0x08009ed0
 8007f94:	08009ead 	.word	0x08009ead
 8007f98:	3ff80000 	.word	0x3ff80000
 8007f9c:	08009fe0 	.word	0x08009fe0
 8007fa0:	08009f4c 	.word	0x08009f4c
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	e7d7      	b.n	8007f5a <_dtoa_r+0x2c2>
 8007faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	e7ba      	b.n	8007f28 <_dtoa_r+0x290>
 8007fb2:	3101      	adds	r1, #1
 8007fb4:	0052      	lsls	r2, r2, #1
 8007fb6:	e7ba      	b.n	8007f2e <_dtoa_r+0x296>
 8007fb8:	69e3      	ldr	r3, [r4, #28]
 8007fba:	9a00      	ldr	r2, [sp, #0]
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	2b0e      	cmp	r3, #14
 8007fc2:	f200 80a8 	bhi.w	8008116 <_dtoa_r+0x47e>
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	f000 80a5 	beq.w	8008116 <_dtoa_r+0x47e>
 8007fcc:	f1bb 0f00 	cmp.w	fp, #0
 8007fd0:	dd38      	ble.n	8008044 <_dtoa_r+0x3ac>
 8007fd2:	4bc0      	ldr	r3, [pc, #768]	; (80082d4 <_dtoa_r+0x63c>)
 8007fd4:	f00b 020f 	and.w	r2, fp, #15
 8007fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007fe8:	d019      	beq.n	800801e <_dtoa_r+0x386>
 8007fea:	4bbb      	ldr	r3, [pc, #748]	; (80082d8 <_dtoa_r+0x640>)
 8007fec:	ec51 0b18 	vmov	r0, r1, d8
 8007ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ff4:	f7f8 fc4a 	bl	800088c <__aeabi_ddiv>
 8007ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffc:	f008 080f 	and.w	r8, r8, #15
 8008000:	2503      	movs	r5, #3
 8008002:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80082d8 <_dtoa_r+0x640>
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	d10a      	bne.n	8008022 <_dtoa_r+0x38a>
 800800c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	f7f8 fc3a 	bl	800088c <__aeabi_ddiv>
 8008018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800801c:	e02b      	b.n	8008076 <_dtoa_r+0x3de>
 800801e:	2502      	movs	r5, #2
 8008020:	e7ef      	b.n	8008002 <_dtoa_r+0x36a>
 8008022:	f018 0f01 	tst.w	r8, #1
 8008026:	d008      	beq.n	800803a <_dtoa_r+0x3a2>
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008030:	f7f8 fb02 	bl	8000638 <__aeabi_dmul>
 8008034:	3501      	adds	r5, #1
 8008036:	4606      	mov	r6, r0
 8008038:	460f      	mov	r7, r1
 800803a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800803e:	f109 0908 	add.w	r9, r9, #8
 8008042:	e7e0      	b.n	8008006 <_dtoa_r+0x36e>
 8008044:	f000 809f 	beq.w	8008186 <_dtoa_r+0x4ee>
 8008048:	f1cb 0600 	rsb	r6, fp, #0
 800804c:	4ba1      	ldr	r3, [pc, #644]	; (80082d4 <_dtoa_r+0x63c>)
 800804e:	4fa2      	ldr	r7, [pc, #648]	; (80082d8 <_dtoa_r+0x640>)
 8008050:	f006 020f 	and.w	r2, r6, #15
 8008054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	ec51 0b18 	vmov	r0, r1, d8
 8008060:	f7f8 faea 	bl	8000638 <__aeabi_dmul>
 8008064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008068:	1136      	asrs	r6, r6, #4
 800806a:	2300      	movs	r3, #0
 800806c:	2502      	movs	r5, #2
 800806e:	2e00      	cmp	r6, #0
 8008070:	d17e      	bne.n	8008170 <_dtoa_r+0x4d8>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1d0      	bne.n	8008018 <_dtoa_r+0x380>
 8008076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008078:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8084 	beq.w	800818a <_dtoa_r+0x4f2>
 8008082:	4b96      	ldr	r3, [pc, #600]	; (80082dc <_dtoa_r+0x644>)
 8008084:	2200      	movs	r2, #0
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fd47 	bl	8000b1c <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d07b      	beq.n	800818a <_dtoa_r+0x4f2>
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d078      	beq.n	800818a <_dtoa_r+0x4f2>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	dd39      	ble.n	8008112 <_dtoa_r+0x47a>
 800809e:	4b90      	ldr	r3, [pc, #576]	; (80082e0 <_dtoa_r+0x648>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 fac7 	bl	8000638 <__aeabi_dmul>
 80080aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ae:	9e01      	ldr	r6, [sp, #4]
 80080b0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80080b4:	3501      	adds	r5, #1
 80080b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7f8 fa52 	bl	8000564 <__aeabi_i2d>
 80080c0:	4642      	mov	r2, r8
 80080c2:	464b      	mov	r3, r9
 80080c4:	f7f8 fab8 	bl	8000638 <__aeabi_dmul>
 80080c8:	4b86      	ldr	r3, [pc, #536]	; (80082e4 <_dtoa_r+0x64c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	f7f8 f8fe 	bl	80002cc <__adddf3>
 80080d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80080d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	2e00      	cmp	r6, #0
 80080dc:	d158      	bne.n	8008190 <_dtoa_r+0x4f8>
 80080de:	4b82      	ldr	r3, [pc, #520]	; (80082e8 <_dtoa_r+0x650>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	4640      	mov	r0, r8
 80080e4:	4649      	mov	r1, r9
 80080e6:	f7f8 f8ef 	bl	80002c8 <__aeabi_dsub>
 80080ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ee:	4680      	mov	r8, r0
 80080f0:	4689      	mov	r9, r1
 80080f2:	f7f8 fd31 	bl	8000b58 <__aeabi_dcmpgt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f040 8296 	bne.w	8008628 <_dtoa_r+0x990>
 80080fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008100:	4640      	mov	r0, r8
 8008102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008106:	4649      	mov	r1, r9
 8008108:	f7f8 fd08 	bl	8000b1c <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 8289 	bne.w	8008624 <_dtoa_r+0x98c>
 8008112:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008118:	2b00      	cmp	r3, #0
 800811a:	f2c0 814e 	blt.w	80083ba <_dtoa_r+0x722>
 800811e:	f1bb 0f0e 	cmp.w	fp, #14
 8008122:	f300 814a 	bgt.w	80083ba <_dtoa_r+0x722>
 8008126:	4b6b      	ldr	r3, [pc, #428]	; (80082d4 <_dtoa_r+0x63c>)
 8008128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800812c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	f280 80dc 	bge.w	80082f0 <_dtoa_r+0x658>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f300 80d8 	bgt.w	80082f0 <_dtoa_r+0x658>
 8008140:	f040 826f 	bne.w	8008622 <_dtoa_r+0x98a>
 8008144:	4b68      	ldr	r3, [pc, #416]	; (80082e8 <_dtoa_r+0x650>)
 8008146:	2200      	movs	r2, #0
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 fa74 	bl	8000638 <__aeabi_dmul>
 8008150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008154:	f7f8 fcf6 	bl	8000b44 <__aeabi_dcmpge>
 8008158:	9e04      	ldr	r6, [sp, #16]
 800815a:	4637      	mov	r7, r6
 800815c:	2800      	cmp	r0, #0
 800815e:	f040 8245 	bne.w	80085ec <_dtoa_r+0x954>
 8008162:	9d00      	ldr	r5, [sp, #0]
 8008164:	2331      	movs	r3, #49	; 0x31
 8008166:	f805 3b01 	strb.w	r3, [r5], #1
 800816a:	f10b 0b01 	add.w	fp, fp, #1
 800816e:	e241      	b.n	80085f4 <_dtoa_r+0x95c>
 8008170:	07f2      	lsls	r2, r6, #31
 8008172:	d505      	bpl.n	8008180 <_dtoa_r+0x4e8>
 8008174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008178:	f7f8 fa5e 	bl	8000638 <__aeabi_dmul>
 800817c:	3501      	adds	r5, #1
 800817e:	2301      	movs	r3, #1
 8008180:	1076      	asrs	r6, r6, #1
 8008182:	3708      	adds	r7, #8
 8008184:	e773      	b.n	800806e <_dtoa_r+0x3d6>
 8008186:	2502      	movs	r5, #2
 8008188:	e775      	b.n	8008076 <_dtoa_r+0x3de>
 800818a:	9e04      	ldr	r6, [sp, #16]
 800818c:	465f      	mov	r7, fp
 800818e:	e792      	b.n	80080b6 <_dtoa_r+0x41e>
 8008190:	9900      	ldr	r1, [sp, #0]
 8008192:	4b50      	ldr	r3, [pc, #320]	; (80082d4 <_dtoa_r+0x63c>)
 8008194:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008198:	4431      	add	r1, r6
 800819a:	9102      	str	r1, [sp, #8]
 800819c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819e:	eeb0 9a47 	vmov.f32	s18, s14
 80081a2:	eef0 9a67 	vmov.f32	s19, s15
 80081a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d044      	beq.n	800823c <_dtoa_r+0x5a4>
 80081b2:	494e      	ldr	r1, [pc, #312]	; (80082ec <_dtoa_r+0x654>)
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7f8 fb69 	bl	800088c <__aeabi_ddiv>
 80081ba:	ec53 2b19 	vmov	r2, r3, d9
 80081be:	f7f8 f883 	bl	80002c8 <__aeabi_dsub>
 80081c2:	9d00      	ldr	r5, [sp, #0]
 80081c4:	ec41 0b19 	vmov	d9, r0, r1
 80081c8:	4649      	mov	r1, r9
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7f8 fce4 	bl	8000b98 <__aeabi_d2iz>
 80081d0:	4606      	mov	r6, r0
 80081d2:	f7f8 f9c7 	bl	8000564 <__aeabi_i2d>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 f873 	bl	80002c8 <__aeabi_dsub>
 80081e2:	3630      	adds	r6, #48	; 0x30
 80081e4:	f805 6b01 	strb.w	r6, [r5], #1
 80081e8:	ec53 2b19 	vmov	r2, r3, d9
 80081ec:	4680      	mov	r8, r0
 80081ee:	4689      	mov	r9, r1
 80081f0:	f7f8 fc94 	bl	8000b1c <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d164      	bne.n	80082c2 <_dtoa_r+0x62a>
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4937      	ldr	r1, [pc, #220]	; (80082dc <_dtoa_r+0x644>)
 80081fe:	2000      	movs	r0, #0
 8008200:	f7f8 f862 	bl	80002c8 <__aeabi_dsub>
 8008204:	ec53 2b19 	vmov	r2, r3, d9
 8008208:	f7f8 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f040 80b6 	bne.w	800837e <_dtoa_r+0x6e6>
 8008212:	9b02      	ldr	r3, [sp, #8]
 8008214:	429d      	cmp	r5, r3
 8008216:	f43f af7c 	beq.w	8008112 <_dtoa_r+0x47a>
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <_dtoa_r+0x648>)
 800821c:	ec51 0b19 	vmov	r0, r1, d9
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 fa09 	bl	8000638 <__aeabi_dmul>
 8008226:	4b2e      	ldr	r3, [pc, #184]	; (80082e0 <_dtoa_r+0x648>)
 8008228:	ec41 0b19 	vmov	d9, r0, r1
 800822c:	2200      	movs	r2, #0
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	f7f8 fa01 	bl	8000638 <__aeabi_dmul>
 8008236:	4680      	mov	r8, r0
 8008238:	4689      	mov	r9, r1
 800823a:	e7c5      	b.n	80081c8 <_dtoa_r+0x530>
 800823c:	ec51 0b17 	vmov	r0, r1, d7
 8008240:	f7f8 f9fa 	bl	8000638 <__aeabi_dmul>
 8008244:	9b02      	ldr	r3, [sp, #8]
 8008246:	9d00      	ldr	r5, [sp, #0]
 8008248:	930f      	str	r3, [sp, #60]	; 0x3c
 800824a:	ec41 0b19 	vmov	d9, r0, r1
 800824e:	4649      	mov	r1, r9
 8008250:	4640      	mov	r0, r8
 8008252:	f7f8 fca1 	bl	8000b98 <__aeabi_d2iz>
 8008256:	4606      	mov	r6, r0
 8008258:	f7f8 f984 	bl	8000564 <__aeabi_i2d>
 800825c:	3630      	adds	r6, #48	; 0x30
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f82f 	bl	80002c8 <__aeabi_dsub>
 800826a:	f805 6b01 	strb.w	r6, [r5], #1
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	429d      	cmp	r5, r3
 8008272:	4680      	mov	r8, r0
 8008274:	4689      	mov	r9, r1
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	d124      	bne.n	80082c6 <_dtoa_r+0x62e>
 800827c:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <_dtoa_r+0x654>)
 800827e:	ec51 0b19 	vmov	r0, r1, d9
 8008282:	f7f8 f823 	bl	80002cc <__adddf3>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4640      	mov	r0, r8
 800828c:	4649      	mov	r1, r9
 800828e:	f7f8 fc63 	bl	8000b58 <__aeabi_dcmpgt>
 8008292:	2800      	cmp	r0, #0
 8008294:	d173      	bne.n	800837e <_dtoa_r+0x6e6>
 8008296:	ec53 2b19 	vmov	r2, r3, d9
 800829a:	4914      	ldr	r1, [pc, #80]	; (80082ec <_dtoa_r+0x654>)
 800829c:	2000      	movs	r0, #0
 800829e:	f7f8 f813 	bl	80002c8 <__aeabi_dsub>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4640      	mov	r0, r8
 80082a8:	4649      	mov	r1, r9
 80082aa:	f7f8 fc37 	bl	8000b1c <__aeabi_dcmplt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f af2f 	beq.w	8008112 <_dtoa_r+0x47a>
 80082b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082b6:	1e6b      	subs	r3, r5, #1
 80082b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80082ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	d0f8      	beq.n	80082b4 <_dtoa_r+0x61c>
 80082c2:	46bb      	mov	fp, r7
 80082c4:	e04a      	b.n	800835c <_dtoa_r+0x6c4>
 80082c6:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <_dtoa_r+0x648>)
 80082c8:	f7f8 f9b6 	bl	8000638 <__aeabi_dmul>
 80082cc:	4680      	mov	r8, r0
 80082ce:	4689      	mov	r9, r1
 80082d0:	e7bd      	b.n	800824e <_dtoa_r+0x5b6>
 80082d2:	bf00      	nop
 80082d4:	08009fe0 	.word	0x08009fe0
 80082d8:	08009fb8 	.word	0x08009fb8
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	40240000 	.word	0x40240000
 80082e4:	401c0000 	.word	0x401c0000
 80082e8:	40140000 	.word	0x40140000
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082f4:	9d00      	ldr	r5, [sp, #0]
 80082f6:	4642      	mov	r2, r8
 80082f8:	464b      	mov	r3, r9
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 fac5 	bl	800088c <__aeabi_ddiv>
 8008302:	f7f8 fc49 	bl	8000b98 <__aeabi_d2iz>
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	f7f8 f92c 	bl	8000564 <__aeabi_i2d>
 800830c:	4642      	mov	r2, r8
 800830e:	464b      	mov	r3, r9
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f7 ffd4 	bl	80002c8 <__aeabi_dsub>
 8008320:	9e01      	ldr	r6, [sp, #4]
 8008322:	9f04      	ldr	r7, [sp, #16]
 8008324:	3630      	adds	r6, #48	; 0x30
 8008326:	f805 6b01 	strb.w	r6, [r5], #1
 800832a:	9e00      	ldr	r6, [sp, #0]
 800832c:	1bae      	subs	r6, r5, r6
 800832e:	42b7      	cmp	r7, r6
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	d134      	bne.n	80083a0 <_dtoa_r+0x708>
 8008336:	f7f7 ffc9 	bl	80002cc <__adddf3>
 800833a:	4642      	mov	r2, r8
 800833c:	464b      	mov	r3, r9
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	f7f8 fc09 	bl	8000b58 <__aeabi_dcmpgt>
 8008346:	b9c8      	cbnz	r0, 800837c <_dtoa_r+0x6e4>
 8008348:	4642      	mov	r2, r8
 800834a:	464b      	mov	r3, r9
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f8 fbda 	bl	8000b08 <__aeabi_dcmpeq>
 8008354:	b110      	cbz	r0, 800835c <_dtoa_r+0x6c4>
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	07db      	lsls	r3, r3, #31
 800835a:	d40f      	bmi.n	800837c <_dtoa_r+0x6e4>
 800835c:	4651      	mov	r1, sl
 800835e:	4620      	mov	r0, r4
 8008360:	f000 fbcc 	bl	8008afc <_Bfree>
 8008364:	2300      	movs	r3, #0
 8008366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008368:	702b      	strb	r3, [r5, #0]
 800836a:	f10b 0301 	add.w	r3, fp, #1
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008372:	2b00      	cmp	r3, #0
 8008374:	f43f ace2 	beq.w	8007d3c <_dtoa_r+0xa4>
 8008378:	601d      	str	r5, [r3, #0]
 800837a:	e4df      	b.n	8007d3c <_dtoa_r+0xa4>
 800837c:	465f      	mov	r7, fp
 800837e:	462b      	mov	r3, r5
 8008380:	461d      	mov	r5, r3
 8008382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008386:	2a39      	cmp	r2, #57	; 0x39
 8008388:	d106      	bne.n	8008398 <_dtoa_r+0x700>
 800838a:	9a00      	ldr	r2, [sp, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d1f7      	bne.n	8008380 <_dtoa_r+0x6e8>
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	2230      	movs	r2, #48	; 0x30
 8008394:	3701      	adds	r7, #1
 8008396:	700a      	strb	r2, [r1, #0]
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	3201      	adds	r2, #1
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e790      	b.n	80082c2 <_dtoa_r+0x62a>
 80083a0:	4ba3      	ldr	r3, [pc, #652]	; (8008630 <_dtoa_r+0x998>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	f7f8 f948 	bl	8000638 <__aeabi_dmul>
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	4606      	mov	r6, r0
 80083ae:	460f      	mov	r7, r1
 80083b0:	f7f8 fbaa 	bl	8000b08 <__aeabi_dcmpeq>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d09e      	beq.n	80082f6 <_dtoa_r+0x65e>
 80083b8:	e7d0      	b.n	800835c <_dtoa_r+0x6c4>
 80083ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083bc:	2a00      	cmp	r2, #0
 80083be:	f000 80ca 	beq.w	8008556 <_dtoa_r+0x8be>
 80083c2:	9a07      	ldr	r2, [sp, #28]
 80083c4:	2a01      	cmp	r2, #1
 80083c6:	f300 80ad 	bgt.w	8008524 <_dtoa_r+0x88c>
 80083ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	f000 80a5 	beq.w	800851c <_dtoa_r+0x884>
 80083d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083d6:	9e08      	ldr	r6, [sp, #32]
 80083d8:	9d05      	ldr	r5, [sp, #20]
 80083da:	9a05      	ldr	r2, [sp, #20]
 80083dc:	441a      	add	r2, r3
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	9a06      	ldr	r2, [sp, #24]
 80083e2:	2101      	movs	r1, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	4620      	mov	r0, r4
 80083e8:	9206      	str	r2, [sp, #24]
 80083ea:	f000 fc3d 	bl	8008c68 <__i2b>
 80083ee:	4607      	mov	r7, r0
 80083f0:	b165      	cbz	r5, 800840c <_dtoa_r+0x774>
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd09      	ble.n	800840c <_dtoa_r+0x774>
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	9a05      	ldr	r2, [sp, #20]
 80083fc:	bfa8      	it	ge
 80083fe:	462b      	movge	r3, r5
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	9205      	str	r2, [sp, #20]
 8008404:	9a06      	ldr	r2, [sp, #24]
 8008406:	1aed      	subs	r5, r5, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	9306      	str	r3, [sp, #24]
 800840c:	9b08      	ldr	r3, [sp, #32]
 800840e:	b1f3      	cbz	r3, 800844e <_dtoa_r+0x7b6>
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 80a3 	beq.w	800855e <_dtoa_r+0x8c6>
 8008418:	2e00      	cmp	r6, #0
 800841a:	dd10      	ble.n	800843e <_dtoa_r+0x7a6>
 800841c:	4639      	mov	r1, r7
 800841e:	4632      	mov	r2, r6
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fce1 	bl	8008de8 <__pow5mult>
 8008426:	4652      	mov	r2, sl
 8008428:	4601      	mov	r1, r0
 800842a:	4607      	mov	r7, r0
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fc31 	bl	8008c94 <__multiply>
 8008432:	4651      	mov	r1, sl
 8008434:	4680      	mov	r8, r0
 8008436:	4620      	mov	r0, r4
 8008438:	f000 fb60 	bl	8008afc <_Bfree>
 800843c:	46c2      	mov	sl, r8
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	1b9a      	subs	r2, r3, r6
 8008442:	d004      	beq.n	800844e <_dtoa_r+0x7b6>
 8008444:	4651      	mov	r1, sl
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fcce 	bl	8008de8 <__pow5mult>
 800844c:	4682      	mov	sl, r0
 800844e:	2101      	movs	r1, #1
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fc09 	bl	8008c68 <__i2b>
 8008456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	4606      	mov	r6, r0
 800845c:	f340 8081 	ble.w	8008562 <_dtoa_r+0x8ca>
 8008460:	461a      	mov	r2, r3
 8008462:	4601      	mov	r1, r0
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fcbf 	bl	8008de8 <__pow5mult>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	2b01      	cmp	r3, #1
 800846e:	4606      	mov	r6, r0
 8008470:	dd7a      	ble.n	8008568 <_dtoa_r+0x8d0>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	6933      	ldr	r3, [r6, #16]
 8008478:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800847c:	6918      	ldr	r0, [r3, #16]
 800847e:	f000 fba5 	bl	8008bcc <__hi0bits>
 8008482:	f1c0 0020 	rsb	r0, r0, #32
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	4418      	add	r0, r3
 800848a:	f010 001f 	ands.w	r0, r0, #31
 800848e:	f000 8094 	beq.w	80085ba <_dtoa_r+0x922>
 8008492:	f1c0 0320 	rsb	r3, r0, #32
 8008496:	2b04      	cmp	r3, #4
 8008498:	f340 8085 	ble.w	80085a6 <_dtoa_r+0x90e>
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	f1c0 001c 	rsb	r0, r0, #28
 80084a2:	4403      	add	r3, r0
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	9b06      	ldr	r3, [sp, #24]
 80084a8:	4403      	add	r3, r0
 80084aa:	4405      	add	r5, r0
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	9b05      	ldr	r3, [sp, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dd05      	ble.n	80084c0 <_dtoa_r+0x828>
 80084b4:	4651      	mov	r1, sl
 80084b6:	461a      	mov	r2, r3
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fcef 	bl	8008e9c <__lshift>
 80084be:	4682      	mov	sl, r0
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x83a>
 80084c6:	4631      	mov	r1, r6
 80084c8:	461a      	mov	r2, r3
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fce6 	bl	8008e9c <__lshift>
 80084d0:	4606      	mov	r6, r0
 80084d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d072      	beq.n	80085be <_dtoa_r+0x926>
 80084d8:	4631      	mov	r1, r6
 80084da:	4650      	mov	r0, sl
 80084dc:	f000 fd4a 	bl	8008f74 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	da6c      	bge.n	80085be <_dtoa_r+0x926>
 80084e4:	2300      	movs	r3, #0
 80084e6:	4651      	mov	r1, sl
 80084e8:	220a      	movs	r2, #10
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fb28 	bl	8008b40 <__multadd>
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80084f6:	4682      	mov	sl, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 81b0 	beq.w	800885e <_dtoa_r+0xbc6>
 80084fe:	2300      	movs	r3, #0
 8008500:	4639      	mov	r1, r7
 8008502:	220a      	movs	r2, #10
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fb1b 	bl	8008b40 <__multadd>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	4607      	mov	r7, r0
 8008510:	f300 8096 	bgt.w	8008640 <_dtoa_r+0x9a8>
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	2b02      	cmp	r3, #2
 8008518:	dc59      	bgt.n	80085ce <_dtoa_r+0x936>
 800851a:	e091      	b.n	8008640 <_dtoa_r+0x9a8>
 800851c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800851e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008522:	e758      	b.n	80083d6 <_dtoa_r+0x73e>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	1e5e      	subs	r6, r3, #1
 8008528:	9b08      	ldr	r3, [sp, #32]
 800852a:	42b3      	cmp	r3, r6
 800852c:	bfbf      	itttt	lt
 800852e:	9b08      	ldrlt	r3, [sp, #32]
 8008530:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008532:	9608      	strlt	r6, [sp, #32]
 8008534:	1af3      	sublt	r3, r6, r3
 8008536:	bfb4      	ite	lt
 8008538:	18d2      	addlt	r2, r2, r3
 800853a:	1b9e      	subge	r6, r3, r6
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	bfbc      	itt	lt
 8008540:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008542:	2600      	movlt	r6, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	bfb7      	itett	lt
 8008548:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800854c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008550:	1a9d      	sublt	r5, r3, r2
 8008552:	2300      	movlt	r3, #0
 8008554:	e741      	b.n	80083da <_dtoa_r+0x742>
 8008556:	9e08      	ldr	r6, [sp, #32]
 8008558:	9d05      	ldr	r5, [sp, #20]
 800855a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800855c:	e748      	b.n	80083f0 <_dtoa_r+0x758>
 800855e:	9a08      	ldr	r2, [sp, #32]
 8008560:	e770      	b.n	8008444 <_dtoa_r+0x7ac>
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b01      	cmp	r3, #1
 8008566:	dc19      	bgt.n	800859c <_dtoa_r+0x904>
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	b9bb      	cbnz	r3, 800859c <_dtoa_r+0x904>
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008572:	b99b      	cbnz	r3, 800859c <_dtoa_r+0x904>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857a:	0d1b      	lsrs	r3, r3, #20
 800857c:	051b      	lsls	r3, r3, #20
 800857e:	b183      	cbz	r3, 80085a2 <_dtoa_r+0x90a>
 8008580:	9b05      	ldr	r3, [sp, #20]
 8008582:	3301      	adds	r3, #1
 8008584:	9305      	str	r3, [sp, #20]
 8008586:	9b06      	ldr	r3, [sp, #24]
 8008588:	3301      	adds	r3, #1
 800858a:	9306      	str	r3, [sp, #24]
 800858c:	f04f 0801 	mov.w	r8, #1
 8008590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	f47f af6f 	bne.w	8008476 <_dtoa_r+0x7de>
 8008598:	2001      	movs	r0, #1
 800859a:	e774      	b.n	8008486 <_dtoa_r+0x7ee>
 800859c:	f04f 0800 	mov.w	r8, #0
 80085a0:	e7f6      	b.n	8008590 <_dtoa_r+0x8f8>
 80085a2:	4698      	mov	r8, r3
 80085a4:	e7f4      	b.n	8008590 <_dtoa_r+0x8f8>
 80085a6:	d082      	beq.n	80084ae <_dtoa_r+0x816>
 80085a8:	9a05      	ldr	r2, [sp, #20]
 80085aa:	331c      	adds	r3, #28
 80085ac:	441a      	add	r2, r3
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	441a      	add	r2, r3
 80085b4:	441d      	add	r5, r3
 80085b6:	9206      	str	r2, [sp, #24]
 80085b8:	e779      	b.n	80084ae <_dtoa_r+0x816>
 80085ba:	4603      	mov	r3, r0
 80085bc:	e7f4      	b.n	80085a8 <_dtoa_r+0x910>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc37      	bgt.n	8008634 <_dtoa_r+0x99c>
 80085c4:	9b07      	ldr	r3, [sp, #28]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dd34      	ble.n	8008634 <_dtoa_r+0x99c>
 80085ca:	9b04      	ldr	r3, [sp, #16]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	b963      	cbnz	r3, 80085ec <_dtoa_r+0x954>
 80085d2:	4631      	mov	r1, r6
 80085d4:	2205      	movs	r2, #5
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fab2 	bl	8008b40 <__multadd>
 80085dc:	4601      	mov	r1, r0
 80085de:	4606      	mov	r6, r0
 80085e0:	4650      	mov	r0, sl
 80085e2:	f000 fcc7 	bl	8008f74 <__mcmp>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f73f adbb 	bgt.w	8008162 <_dtoa_r+0x4ca>
 80085ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ee:	9d00      	ldr	r5, [sp, #0]
 80085f0:	ea6f 0b03 	mvn.w	fp, r3
 80085f4:	f04f 0800 	mov.w	r8, #0
 80085f8:	4631      	mov	r1, r6
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fa7e 	bl	8008afc <_Bfree>
 8008600:	2f00      	cmp	r7, #0
 8008602:	f43f aeab 	beq.w	800835c <_dtoa_r+0x6c4>
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	d005      	beq.n	8008618 <_dtoa_r+0x980>
 800860c:	45b8      	cmp	r8, r7
 800860e:	d003      	beq.n	8008618 <_dtoa_r+0x980>
 8008610:	4641      	mov	r1, r8
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fa72 	bl	8008afc <_Bfree>
 8008618:	4639      	mov	r1, r7
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fa6e 	bl	8008afc <_Bfree>
 8008620:	e69c      	b.n	800835c <_dtoa_r+0x6c4>
 8008622:	2600      	movs	r6, #0
 8008624:	4637      	mov	r7, r6
 8008626:	e7e1      	b.n	80085ec <_dtoa_r+0x954>
 8008628:	46bb      	mov	fp, r7
 800862a:	4637      	mov	r7, r6
 800862c:	e599      	b.n	8008162 <_dtoa_r+0x4ca>
 800862e:	bf00      	nop
 8008630:	40240000 	.word	0x40240000
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80c8 	beq.w	80087cc <_dtoa_r+0xb34>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	2d00      	cmp	r5, #0
 8008642:	dd05      	ble.n	8008650 <_dtoa_r+0x9b8>
 8008644:	4639      	mov	r1, r7
 8008646:	462a      	mov	r2, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fc27 	bl	8008e9c <__lshift>
 800864e:	4607      	mov	r7, r0
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	d05b      	beq.n	800870e <_dtoa_r+0xa76>
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fa0f 	bl	8008a7c <_Balloc>
 800865e:	4605      	mov	r5, r0
 8008660:	b928      	cbnz	r0, 800866e <_dtoa_r+0x9d6>
 8008662:	4b83      	ldr	r3, [pc, #524]	; (8008870 <_dtoa_r+0xbd8>)
 8008664:	4602      	mov	r2, r0
 8008666:	f240 21ef 	movw	r1, #751	; 0x2ef
 800866a:	f7ff bb2e 	b.w	8007cca <_dtoa_r+0x32>
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	3202      	adds	r2, #2
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	f107 010c 	add.w	r1, r7, #12
 8008678:	300c      	adds	r0, #12
 800867a:	f7ff fa77 	bl	8007b6c <memcpy>
 800867e:	2201      	movs	r2, #1
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc0a 	bl	8008e9c <__lshift>
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008692:	4413      	add	r3, r2
 8008694:	9308      	str	r3, [sp, #32]
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	46b8      	mov	r8, r7
 800869e:	9306      	str	r3, [sp, #24]
 80086a0:	4607      	mov	r7, r0
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	4631      	mov	r1, r6
 80086a6:	3b01      	subs	r3, #1
 80086a8:	4650      	mov	r0, sl
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	f7ff fa6c 	bl	8007b88 <quorem>
 80086b0:	4641      	mov	r1, r8
 80086b2:	9002      	str	r0, [sp, #8]
 80086b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80086b8:	4650      	mov	r0, sl
 80086ba:	f000 fc5b 	bl	8008f74 <__mcmp>
 80086be:	463a      	mov	r2, r7
 80086c0:	9005      	str	r0, [sp, #20]
 80086c2:	4631      	mov	r1, r6
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fc71 	bl	8008fac <__mdiff>
 80086ca:	68c2      	ldr	r2, [r0, #12]
 80086cc:	4605      	mov	r5, r0
 80086ce:	bb02      	cbnz	r2, 8008712 <_dtoa_r+0xa7a>
 80086d0:	4601      	mov	r1, r0
 80086d2:	4650      	mov	r0, sl
 80086d4:	f000 fc4e 	bl	8008f74 <__mcmp>
 80086d8:	4602      	mov	r2, r0
 80086da:	4629      	mov	r1, r5
 80086dc:	4620      	mov	r0, r4
 80086de:	9209      	str	r2, [sp, #36]	; 0x24
 80086e0:	f000 fa0c 	bl	8008afc <_Bfree>
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e8:	9d04      	ldr	r5, [sp, #16]
 80086ea:	ea43 0102 	orr.w	r1, r3, r2
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	4319      	orrs	r1, r3
 80086f2:	d110      	bne.n	8008716 <_dtoa_r+0xa7e>
 80086f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80086f8:	d029      	beq.n	800874e <_dtoa_r+0xab6>
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dd02      	ble.n	8008706 <_dtoa_r+0xa6e>
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	f883 9000 	strb.w	r9, [r3]
 800870c:	e774      	b.n	80085f8 <_dtoa_r+0x960>
 800870e:	4638      	mov	r0, r7
 8008710:	e7ba      	b.n	8008688 <_dtoa_r+0x9f0>
 8008712:	2201      	movs	r2, #1
 8008714:	e7e1      	b.n	80086da <_dtoa_r+0xa42>
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db04      	blt.n	8008726 <_dtoa_r+0xa8e>
 800871c:	9907      	ldr	r1, [sp, #28]
 800871e:	430b      	orrs	r3, r1
 8008720:	9906      	ldr	r1, [sp, #24]
 8008722:	430b      	orrs	r3, r1
 8008724:	d120      	bne.n	8008768 <_dtoa_r+0xad0>
 8008726:	2a00      	cmp	r2, #0
 8008728:	dded      	ble.n	8008706 <_dtoa_r+0xa6e>
 800872a:	4651      	mov	r1, sl
 800872c:	2201      	movs	r2, #1
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fbb4 	bl	8008e9c <__lshift>
 8008734:	4631      	mov	r1, r6
 8008736:	4682      	mov	sl, r0
 8008738:	f000 fc1c 	bl	8008f74 <__mcmp>
 800873c:	2800      	cmp	r0, #0
 800873e:	dc03      	bgt.n	8008748 <_dtoa_r+0xab0>
 8008740:	d1e1      	bne.n	8008706 <_dtoa_r+0xa6e>
 8008742:	f019 0f01 	tst.w	r9, #1
 8008746:	d0de      	beq.n	8008706 <_dtoa_r+0xa6e>
 8008748:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800874c:	d1d8      	bne.n	8008700 <_dtoa_r+0xa68>
 800874e:	9a01      	ldr	r2, [sp, #4]
 8008750:	2339      	movs	r3, #57	; 0x39
 8008752:	7013      	strb	r3, [r2, #0]
 8008754:	462b      	mov	r3, r5
 8008756:	461d      	mov	r5, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800875e:	2a39      	cmp	r2, #57	; 0x39
 8008760:	d06c      	beq.n	800883c <_dtoa_r+0xba4>
 8008762:	3201      	adds	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	e747      	b.n	80085f8 <_dtoa_r+0x960>
 8008768:	2a00      	cmp	r2, #0
 800876a:	dd07      	ble.n	800877c <_dtoa_r+0xae4>
 800876c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008770:	d0ed      	beq.n	800874e <_dtoa_r+0xab6>
 8008772:	9a01      	ldr	r2, [sp, #4]
 8008774:	f109 0301 	add.w	r3, r9, #1
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	e73d      	b.n	80085f8 <_dtoa_r+0x960>
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	9a08      	ldr	r2, [sp, #32]
 8008780:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008784:	4293      	cmp	r3, r2
 8008786:	d043      	beq.n	8008810 <_dtoa_r+0xb78>
 8008788:	4651      	mov	r1, sl
 800878a:	2300      	movs	r3, #0
 800878c:	220a      	movs	r2, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f000 f9d6 	bl	8008b40 <__multadd>
 8008794:	45b8      	cmp	r8, r7
 8008796:	4682      	mov	sl, r0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	f04f 020a 	mov.w	r2, #10
 80087a0:	4641      	mov	r1, r8
 80087a2:	4620      	mov	r0, r4
 80087a4:	d107      	bne.n	80087b6 <_dtoa_r+0xb1e>
 80087a6:	f000 f9cb 	bl	8008b40 <__multadd>
 80087aa:	4680      	mov	r8, r0
 80087ac:	4607      	mov	r7, r0
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	e775      	b.n	80086a2 <_dtoa_r+0xa0a>
 80087b6:	f000 f9c3 	bl	8008b40 <__multadd>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4680      	mov	r8, r0
 80087be:	2300      	movs	r3, #0
 80087c0:	220a      	movs	r2, #10
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 f9bc 	bl	8008b40 <__multadd>
 80087c8:	4607      	mov	r7, r0
 80087ca:	e7f0      	b.n	80087ae <_dtoa_r+0xb16>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	9d00      	ldr	r5, [sp, #0]
 80087d2:	4631      	mov	r1, r6
 80087d4:	4650      	mov	r0, sl
 80087d6:	f7ff f9d7 	bl	8007b88 <quorem>
 80087da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	f805 9b01 	strb.w	r9, [r5], #1
 80087e4:	1aea      	subs	r2, r5, r3
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	dd07      	ble.n	80087fc <_dtoa_r+0xb64>
 80087ec:	4651      	mov	r1, sl
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 f9a4 	bl	8008b40 <__multadd>
 80087f8:	4682      	mov	sl, r0
 80087fa:	e7ea      	b.n	80087d2 <_dtoa_r+0xb3a>
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfc8      	it	gt
 8008802:	461d      	movgt	r5, r3
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	bfd8      	it	le
 8008808:	2501      	movle	r5, #1
 800880a:	441d      	add	r5, r3
 800880c:	f04f 0800 	mov.w	r8, #0
 8008810:	4651      	mov	r1, sl
 8008812:	2201      	movs	r2, #1
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fb41 	bl	8008e9c <__lshift>
 800881a:	4631      	mov	r1, r6
 800881c:	4682      	mov	sl, r0
 800881e:	f000 fba9 	bl	8008f74 <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	dc96      	bgt.n	8008754 <_dtoa_r+0xabc>
 8008826:	d102      	bne.n	800882e <_dtoa_r+0xb96>
 8008828:	f019 0f01 	tst.w	r9, #1
 800882c:	d192      	bne.n	8008754 <_dtoa_r+0xabc>
 800882e:	462b      	mov	r3, r5
 8008830:	461d      	mov	r5, r3
 8008832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008836:	2a30      	cmp	r2, #48	; 0x30
 8008838:	d0fa      	beq.n	8008830 <_dtoa_r+0xb98>
 800883a:	e6dd      	b.n	80085f8 <_dtoa_r+0x960>
 800883c:	9a00      	ldr	r2, [sp, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d189      	bne.n	8008756 <_dtoa_r+0xabe>
 8008842:	f10b 0b01 	add.w	fp, fp, #1
 8008846:	2331      	movs	r3, #49	; 0x31
 8008848:	e796      	b.n	8008778 <_dtoa_r+0xae0>
 800884a:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <_dtoa_r+0xbdc>)
 800884c:	f7ff ba99 	b.w	8007d82 <_dtoa_r+0xea>
 8008850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f aa6d 	bne.w	8007d32 <_dtoa_r+0x9a>
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <_dtoa_r+0xbe0>)
 800885a:	f7ff ba92 	b.w	8007d82 <_dtoa_r+0xea>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	dcb5      	bgt.n	80087d0 <_dtoa_r+0xb38>
 8008864:	9b07      	ldr	r3, [sp, #28]
 8008866:	2b02      	cmp	r3, #2
 8008868:	f73f aeb1 	bgt.w	80085ce <_dtoa_r+0x936>
 800886c:	e7b0      	b.n	80087d0 <_dtoa_r+0xb38>
 800886e:	bf00      	nop
 8008870:	08009f4c 	.word	0x08009f4c
 8008874:	08009eac 	.word	0x08009eac
 8008878:	08009ed0 	.word	0x08009ed0

0800887c <_free_r>:
 800887c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800887e:	2900      	cmp	r1, #0
 8008880:	d044      	beq.n	800890c <_free_r+0x90>
 8008882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f1a1 0404 	sub.w	r4, r1, #4
 800888e:	bfb8      	it	lt
 8008890:	18e4      	addlt	r4, r4, r3
 8008892:	f000 f8e7 	bl	8008a64 <__malloc_lock>
 8008896:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <_free_r+0x94>)
 8008898:	9801      	ldr	r0, [sp, #4]
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	b933      	cbnz	r3, 80088ac <_free_r+0x30>
 800889e:	6063      	str	r3, [r4, #4]
 80088a0:	6014      	str	r4, [r2, #0]
 80088a2:	b003      	add	sp, #12
 80088a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a8:	f000 b8e2 	b.w	8008a70 <__malloc_unlock>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d908      	bls.n	80088c2 <_free_r+0x46>
 80088b0:	6825      	ldr	r5, [r4, #0]
 80088b2:	1961      	adds	r1, r4, r5
 80088b4:	428b      	cmp	r3, r1
 80088b6:	bf01      	itttt	eq
 80088b8:	6819      	ldreq	r1, [r3, #0]
 80088ba:	685b      	ldreq	r3, [r3, #4]
 80088bc:	1949      	addeq	r1, r1, r5
 80088be:	6021      	streq	r1, [r4, #0]
 80088c0:	e7ed      	b.n	800889e <_free_r+0x22>
 80088c2:	461a      	mov	r2, r3
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	b10b      	cbz	r3, 80088cc <_free_r+0x50>
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d9fa      	bls.n	80088c2 <_free_r+0x46>
 80088cc:	6811      	ldr	r1, [r2, #0]
 80088ce:	1855      	adds	r5, r2, r1
 80088d0:	42a5      	cmp	r5, r4
 80088d2:	d10b      	bne.n	80088ec <_free_r+0x70>
 80088d4:	6824      	ldr	r4, [r4, #0]
 80088d6:	4421      	add	r1, r4
 80088d8:	1854      	adds	r4, r2, r1
 80088da:	42a3      	cmp	r3, r4
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	d1e0      	bne.n	80088a2 <_free_r+0x26>
 80088e0:	681c      	ldr	r4, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	6053      	str	r3, [r2, #4]
 80088e6:	440c      	add	r4, r1
 80088e8:	6014      	str	r4, [r2, #0]
 80088ea:	e7da      	b.n	80088a2 <_free_r+0x26>
 80088ec:	d902      	bls.n	80088f4 <_free_r+0x78>
 80088ee:	230c      	movs	r3, #12
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	e7d6      	b.n	80088a2 <_free_r+0x26>
 80088f4:	6825      	ldr	r5, [r4, #0]
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	428b      	cmp	r3, r1
 80088fa:	bf04      	itt	eq
 80088fc:	6819      	ldreq	r1, [r3, #0]
 80088fe:	685b      	ldreq	r3, [r3, #4]
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	bf04      	itt	eq
 8008904:	1949      	addeq	r1, r1, r5
 8008906:	6021      	streq	r1, [r4, #0]
 8008908:	6054      	str	r4, [r2, #4]
 800890a:	e7ca      	b.n	80088a2 <_free_r+0x26>
 800890c:	b003      	add	sp, #12
 800890e:	bd30      	pop	{r4, r5, pc}
 8008910:	20004424 	.word	0x20004424

08008914 <malloc>:
 8008914:	4b02      	ldr	r3, [pc, #8]	; (8008920 <malloc+0xc>)
 8008916:	4601      	mov	r1, r0
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	f000 b823 	b.w	8008964 <_malloc_r>
 800891e:	bf00      	nop
 8008920:	20000068 	.word	0x20000068

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0e      	ldr	r6, [pc, #56]	; (8008960 <sbrk_aligned+0x3c>)
 8008928:	460c      	mov	r4, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	b911      	cbnz	r1, 8008936 <sbrk_aligned+0x12>
 8008930:	f000 fe40 	bl	80095b4 <_sbrk_r>
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fe3b 	bl	80095b4 <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <sbrk_aligned+0x34>
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d007      	beq.n	800895c <sbrk_aligned+0x38>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f000 fe30 	bl	80095b4 <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d101      	bne.n	800895c <sbrk_aligned+0x38>
 8008958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	20004428 	.word	0x20004428

08008964 <_malloc_r>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	1ccd      	adds	r5, r1, #3
 800896a:	f025 0503 	bic.w	r5, r5, #3
 800896e:	3508      	adds	r5, #8
 8008970:	2d0c      	cmp	r5, #12
 8008972:	bf38      	it	cc
 8008974:	250c      	movcc	r5, #12
 8008976:	2d00      	cmp	r5, #0
 8008978:	4607      	mov	r7, r0
 800897a:	db01      	blt.n	8008980 <_malloc_r+0x1c>
 800897c:	42a9      	cmp	r1, r5
 800897e:	d905      	bls.n	800898c <_malloc_r+0x28>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	2600      	movs	r6, #0
 8008986:	4630      	mov	r0, r6
 8008988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a60 <_malloc_r+0xfc>
 8008990:	f000 f868 	bl	8008a64 <__malloc_lock>
 8008994:	f8d8 3000 	ldr.w	r3, [r8]
 8008998:	461c      	mov	r4, r3
 800899a:	bb5c      	cbnz	r4, 80089f4 <_malloc_r+0x90>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff ffc0 	bl	8008924 <sbrk_aligned>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	4604      	mov	r4, r0
 80089a8:	d155      	bne.n	8008a56 <_malloc_r+0xf2>
 80089aa:	f8d8 4000 	ldr.w	r4, [r8]
 80089ae:	4626      	mov	r6, r4
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	d145      	bne.n	8008a40 <_malloc_r+0xdc>
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d048      	beq.n	8008a4a <_malloc_r+0xe6>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	4631      	mov	r1, r6
 80089bc:	4638      	mov	r0, r7
 80089be:	eb04 0903 	add.w	r9, r4, r3
 80089c2:	f000 fdf7 	bl	80095b4 <_sbrk_r>
 80089c6:	4581      	cmp	r9, r0
 80089c8:	d13f      	bne.n	8008a4a <_malloc_r+0xe6>
 80089ca:	6821      	ldr	r1, [r4, #0]
 80089cc:	1a6d      	subs	r5, r5, r1
 80089ce:	4629      	mov	r1, r5
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ffa7 	bl	8008924 <sbrk_aligned>
 80089d6:	3001      	adds	r0, #1
 80089d8:	d037      	beq.n	8008a4a <_malloc_r+0xe6>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	442b      	add	r3, r5
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	f8d8 3000 	ldr.w	r3, [r8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d038      	beq.n	8008a5a <_malloc_r+0xf6>
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	42a2      	cmp	r2, r4
 80089ec:	d12b      	bne.n	8008a46 <_malloc_r+0xe2>
 80089ee:	2200      	movs	r2, #0
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	e00f      	b.n	8008a14 <_malloc_r+0xb0>
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	1b52      	subs	r2, r2, r5
 80089f8:	d41f      	bmi.n	8008a3a <_malloc_r+0xd6>
 80089fa:	2a0b      	cmp	r2, #11
 80089fc:	d917      	bls.n	8008a2e <_malloc_r+0xca>
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	bf18      	it	ne
 8008a06:	6059      	strne	r1, [r3, #4]
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	bf08      	it	eq
 8008a0c:	f8c8 1000 	streq.w	r1, [r8]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4638      	mov	r0, r7
 8008a16:	f104 060b 	add.w	r6, r4, #11
 8008a1a:	f000 f829 	bl	8008a70 <__malloc_unlock>
 8008a1e:	f026 0607 	bic.w	r6, r6, #7
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	1af2      	subs	r2, r6, r3
 8008a26:	d0ae      	beq.n	8008986 <_malloc_r+0x22>
 8008a28:	1b9b      	subs	r3, r3, r6
 8008a2a:	50a3      	str	r3, [r4, r2]
 8008a2c:	e7ab      	b.n	8008986 <_malloc_r+0x22>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	d1dd      	bne.n	80089f0 <_malloc_r+0x8c>
 8008a34:	f8c8 2000 	str.w	r2, [r8]
 8008a38:	e7ec      	b.n	8008a14 <_malloc_r+0xb0>
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	6864      	ldr	r4, [r4, #4]
 8008a3e:	e7ac      	b.n	800899a <_malloc_r+0x36>
 8008a40:	4634      	mov	r4, r6
 8008a42:	6876      	ldr	r6, [r6, #4]
 8008a44:	e7b4      	b.n	80089b0 <_malloc_r+0x4c>
 8008a46:	4613      	mov	r3, r2
 8008a48:	e7cc      	b.n	80089e4 <_malloc_r+0x80>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f000 f80e 	bl	8008a70 <__malloc_unlock>
 8008a54:	e797      	b.n	8008986 <_malloc_r+0x22>
 8008a56:	6025      	str	r5, [r4, #0]
 8008a58:	e7dc      	b.n	8008a14 <_malloc_r+0xb0>
 8008a5a:	605b      	str	r3, [r3, #4]
 8008a5c:	deff      	udf	#255	; 0xff
 8008a5e:	bf00      	nop
 8008a60:	20004424 	.word	0x20004424

08008a64 <__malloc_lock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_lock+0x8>)
 8008a66:	f7ff b87f 	b.w	8007b68 <__retarget_lock_acquire_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20004420 	.word	0x20004420

08008a70 <__malloc_unlock>:
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <__malloc_unlock+0x8>)
 8008a72:	f7ff b87a 	b.w	8007b6a <__retarget_lock_release_recursive>
 8008a76:	bf00      	nop
 8008a78:	20004420 	.word	0x20004420

08008a7c <_Balloc>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	69c6      	ldr	r6, [r0, #28]
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	b976      	cbnz	r6, 8008aa4 <_Balloc+0x28>
 8008a86:	2010      	movs	r0, #16
 8008a88:	f7ff ff44 	bl	8008914 <malloc>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	61e0      	str	r0, [r4, #28]
 8008a90:	b920      	cbnz	r0, 8008a9c <_Balloc+0x20>
 8008a92:	4b18      	ldr	r3, [pc, #96]	; (8008af4 <_Balloc+0x78>)
 8008a94:	4818      	ldr	r0, [pc, #96]	; (8008af8 <_Balloc+0x7c>)
 8008a96:	216b      	movs	r1, #107	; 0x6b
 8008a98:	f000 fd9c 	bl	80095d4 <__assert_func>
 8008a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aa0:	6006      	str	r6, [r0, #0]
 8008aa2:	60c6      	str	r6, [r0, #12]
 8008aa4:	69e6      	ldr	r6, [r4, #28]
 8008aa6:	68f3      	ldr	r3, [r6, #12]
 8008aa8:	b183      	cbz	r3, 8008acc <_Balloc+0x50>
 8008aaa:	69e3      	ldr	r3, [r4, #28]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ab2:	b9b8      	cbnz	r0, 8008ae4 <_Balloc+0x68>
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8008aba:	1d72      	adds	r2, r6, #5
 8008abc:	0092      	lsls	r2, r2, #2
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fda6 	bl	8009610 <_calloc_r>
 8008ac4:	b160      	cbz	r0, 8008ae0 <_Balloc+0x64>
 8008ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aca:	e00e      	b.n	8008aea <_Balloc+0x6e>
 8008acc:	2221      	movs	r2, #33	; 0x21
 8008ace:	2104      	movs	r1, #4
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fd9d 	bl	8009610 <_calloc_r>
 8008ad6:	69e3      	ldr	r3, [r4, #28]
 8008ad8:	60f0      	str	r0, [r6, #12]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e4      	bne.n	8008aaa <_Balloc+0x2e>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	6802      	ldr	r2, [r0, #0]
 8008ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aea:	2300      	movs	r3, #0
 8008aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008af0:	e7f7      	b.n	8008ae2 <_Balloc+0x66>
 8008af2:	bf00      	nop
 8008af4:	08009edd 	.word	0x08009edd
 8008af8:	08009f5d 	.word	0x08009f5d

08008afc <_Bfree>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	69c6      	ldr	r6, [r0, #28]
 8008b00:	4605      	mov	r5, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b976      	cbnz	r6, 8008b24 <_Bfree+0x28>
 8008b06:	2010      	movs	r0, #16
 8008b08:	f7ff ff04 	bl	8008914 <malloc>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	61e8      	str	r0, [r5, #28]
 8008b10:	b920      	cbnz	r0, 8008b1c <_Bfree+0x20>
 8008b12:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <_Bfree+0x3c>)
 8008b14:	4809      	ldr	r0, [pc, #36]	; (8008b3c <_Bfree+0x40>)
 8008b16:	218f      	movs	r1, #143	; 0x8f
 8008b18:	f000 fd5c 	bl	80095d4 <__assert_func>
 8008b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b20:	6006      	str	r6, [r0, #0]
 8008b22:	60c6      	str	r6, [r0, #12]
 8008b24:	b13c      	cbz	r4, 8008b36 <_Bfree+0x3a>
 8008b26:	69eb      	ldr	r3, [r5, #28]
 8008b28:	6862      	ldr	r2, [r4, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b30:	6021      	str	r1, [r4, #0]
 8008b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	08009edd 	.word	0x08009edd
 8008b3c:	08009f5d 	.word	0x08009f5d

08008b40 <__multadd>:
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	690d      	ldr	r5, [r1, #16]
 8008b46:	4607      	mov	r7, r0
 8008b48:	460c      	mov	r4, r1
 8008b4a:	461e      	mov	r6, r3
 8008b4c:	f101 0c14 	add.w	ip, r1, #20
 8008b50:	2000      	movs	r0, #0
 8008b52:	f8dc 3000 	ldr.w	r3, [ip]
 8008b56:	b299      	uxth	r1, r3
 8008b58:	fb02 6101 	mla	r1, r2, r1, r6
 8008b5c:	0c1e      	lsrs	r6, r3, #16
 8008b5e:	0c0b      	lsrs	r3, r1, #16
 8008b60:	fb02 3306 	mla	r3, r2, r6, r3
 8008b64:	b289      	uxth	r1, r1
 8008b66:	3001      	adds	r0, #1
 8008b68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b6c:	4285      	cmp	r5, r0
 8008b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b76:	dcec      	bgt.n	8008b52 <__multadd+0x12>
 8008b78:	b30e      	cbz	r6, 8008bbe <__multadd+0x7e>
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc19      	bgt.n	8008bb4 <__multadd+0x74>
 8008b80:	6861      	ldr	r1, [r4, #4]
 8008b82:	4638      	mov	r0, r7
 8008b84:	3101      	adds	r1, #1
 8008b86:	f7ff ff79 	bl	8008a7c <_Balloc>
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <__multadd+0x5a>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <__multadd+0x84>)
 8008b92:	480d      	ldr	r0, [pc, #52]	; (8008bc8 <__multadd+0x88>)
 8008b94:	21ba      	movs	r1, #186	; 0xba
 8008b96:	f000 fd1d 	bl	80095d4 <__assert_func>
 8008b9a:	6922      	ldr	r2, [r4, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	f104 010c 	add.w	r1, r4, #12
 8008ba2:	0092      	lsls	r2, r2, #2
 8008ba4:	300c      	adds	r0, #12
 8008ba6:	f7fe ffe1 	bl	8007b6c <memcpy>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4638      	mov	r0, r7
 8008bae:	f7ff ffa5 	bl	8008afc <_Bfree>
 8008bb2:	4644      	mov	r4, r8
 8008bb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bb8:	3501      	adds	r5, #1
 8008bba:	615e      	str	r6, [r3, #20]
 8008bbc:	6125      	str	r5, [r4, #16]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc4:	08009f4c 	.word	0x08009f4c
 8008bc8:	08009f5d 	.word	0x08009f5d

08008bcc <__hi0bits>:
 8008bcc:	0c03      	lsrs	r3, r0, #16
 8008bce:	041b      	lsls	r3, r3, #16
 8008bd0:	b9d3      	cbnz	r3, 8008c08 <__hi0bits+0x3c>
 8008bd2:	0400      	lsls	r0, r0, #16
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bda:	bf04      	itt	eq
 8008bdc:	0200      	lsleq	r0, r0, #8
 8008bde:	3308      	addeq	r3, #8
 8008be0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008be4:	bf04      	itt	eq
 8008be6:	0100      	lsleq	r0, r0, #4
 8008be8:	3304      	addeq	r3, #4
 8008bea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bee:	bf04      	itt	eq
 8008bf0:	0080      	lsleq	r0, r0, #2
 8008bf2:	3302      	addeq	r3, #2
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	db05      	blt.n	8008c04 <__hi0bits+0x38>
 8008bf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bfc:	f103 0301 	add.w	r3, r3, #1
 8008c00:	bf08      	it	eq
 8008c02:	2320      	moveq	r3, #32
 8008c04:	4618      	mov	r0, r3
 8008c06:	4770      	bx	lr
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e7e4      	b.n	8008bd6 <__hi0bits+0xa>

08008c0c <__lo0bits>:
 8008c0c:	6803      	ldr	r3, [r0, #0]
 8008c0e:	f013 0207 	ands.w	r2, r3, #7
 8008c12:	d00c      	beq.n	8008c2e <__lo0bits+0x22>
 8008c14:	07d9      	lsls	r1, r3, #31
 8008c16:	d422      	bmi.n	8008c5e <__lo0bits+0x52>
 8008c18:	079a      	lsls	r2, r3, #30
 8008c1a:	bf49      	itett	mi
 8008c1c:	085b      	lsrmi	r3, r3, #1
 8008c1e:	089b      	lsrpl	r3, r3, #2
 8008c20:	6003      	strmi	r3, [r0, #0]
 8008c22:	2201      	movmi	r2, #1
 8008c24:	bf5c      	itt	pl
 8008c26:	6003      	strpl	r3, [r0, #0]
 8008c28:	2202      	movpl	r2, #2
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	4770      	bx	lr
 8008c2e:	b299      	uxth	r1, r3
 8008c30:	b909      	cbnz	r1, 8008c36 <__lo0bits+0x2a>
 8008c32:	0c1b      	lsrs	r3, r3, #16
 8008c34:	2210      	movs	r2, #16
 8008c36:	b2d9      	uxtb	r1, r3
 8008c38:	b909      	cbnz	r1, 8008c3e <__lo0bits+0x32>
 8008c3a:	3208      	adds	r2, #8
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	0719      	lsls	r1, r3, #28
 8008c40:	bf04      	itt	eq
 8008c42:	091b      	lsreq	r3, r3, #4
 8008c44:	3204      	addeq	r2, #4
 8008c46:	0799      	lsls	r1, r3, #30
 8008c48:	bf04      	itt	eq
 8008c4a:	089b      	lsreq	r3, r3, #2
 8008c4c:	3202      	addeq	r2, #2
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	d403      	bmi.n	8008c5a <__lo0bits+0x4e>
 8008c52:	085b      	lsrs	r3, r3, #1
 8008c54:	f102 0201 	add.w	r2, r2, #1
 8008c58:	d003      	beq.n	8008c62 <__lo0bits+0x56>
 8008c5a:	6003      	str	r3, [r0, #0]
 8008c5c:	e7e5      	b.n	8008c2a <__lo0bits+0x1e>
 8008c5e:	2200      	movs	r2, #0
 8008c60:	e7e3      	b.n	8008c2a <__lo0bits+0x1e>
 8008c62:	2220      	movs	r2, #32
 8008c64:	e7e1      	b.n	8008c2a <__lo0bits+0x1e>
	...

08008c68 <__i2b>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	f7ff ff05 	bl	8008a7c <_Balloc>
 8008c72:	4602      	mov	r2, r0
 8008c74:	b928      	cbnz	r0, 8008c82 <__i2b+0x1a>
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <__i2b+0x24>)
 8008c78:	4805      	ldr	r0, [pc, #20]	; (8008c90 <__i2b+0x28>)
 8008c7a:	f240 1145 	movw	r1, #325	; 0x145
 8008c7e:	f000 fca9 	bl	80095d4 <__assert_func>
 8008c82:	2301      	movs	r3, #1
 8008c84:	6144      	str	r4, [r0, #20]
 8008c86:	6103      	str	r3, [r0, #16]
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	bf00      	nop
 8008c8c:	08009f4c 	.word	0x08009f4c
 8008c90:	08009f5d 	.word	0x08009f5d

08008c94 <__multiply>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	4691      	mov	r9, r2
 8008c9a:	690a      	ldr	r2, [r1, #16]
 8008c9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	bfb8      	it	lt
 8008ca4:	460b      	movlt	r3, r1
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	bfbc      	itt	lt
 8008caa:	464c      	movlt	r4, r9
 8008cac:	4699      	movlt	r9, r3
 8008cae:	6927      	ldr	r7, [r4, #16]
 8008cb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	6861      	ldr	r1, [r4, #4]
 8008cb8:	eb07 060a 	add.w	r6, r7, sl
 8008cbc:	42b3      	cmp	r3, r6
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	bfb8      	it	lt
 8008cc2:	3101      	addlt	r1, #1
 8008cc4:	f7ff feda 	bl	8008a7c <_Balloc>
 8008cc8:	b930      	cbnz	r0, 8008cd8 <__multiply+0x44>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4b44      	ldr	r3, [pc, #272]	; (8008de0 <__multiply+0x14c>)
 8008cce:	4845      	ldr	r0, [pc, #276]	; (8008de4 <__multiply+0x150>)
 8008cd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008cd4:	f000 fc7e 	bl	80095d4 <__assert_func>
 8008cd8:	f100 0514 	add.w	r5, r0, #20
 8008cdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ce0:	462b      	mov	r3, r5
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	4543      	cmp	r3, r8
 8008ce6:	d321      	bcc.n	8008d2c <__multiply+0x98>
 8008ce8:	f104 0314 	add.w	r3, r4, #20
 8008cec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cf0:	f109 0314 	add.w	r3, r9, #20
 8008cf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cf8:	9202      	str	r2, [sp, #8]
 8008cfa:	1b3a      	subs	r2, r7, r4
 8008cfc:	3a15      	subs	r2, #21
 8008cfe:	f022 0203 	bic.w	r2, r2, #3
 8008d02:	3204      	adds	r2, #4
 8008d04:	f104 0115 	add.w	r1, r4, #21
 8008d08:	428f      	cmp	r7, r1
 8008d0a:	bf38      	it	cc
 8008d0c:	2204      	movcc	r2, #4
 8008d0e:	9201      	str	r2, [sp, #4]
 8008d10:	9a02      	ldr	r2, [sp, #8]
 8008d12:	9303      	str	r3, [sp, #12]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d80c      	bhi.n	8008d32 <__multiply+0x9e>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	dd03      	ble.n	8008d24 <__multiply+0x90>
 8008d1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d05b      	beq.n	8008ddc <__multiply+0x148>
 8008d24:	6106      	str	r6, [r0, #16]
 8008d26:	b005      	add	sp, #20
 8008d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	f843 2b04 	str.w	r2, [r3], #4
 8008d30:	e7d8      	b.n	8008ce4 <__multiply+0x50>
 8008d32:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d36:	f1ba 0f00 	cmp.w	sl, #0
 8008d3a:	d024      	beq.n	8008d86 <__multiply+0xf2>
 8008d3c:	f104 0e14 	add.w	lr, r4, #20
 8008d40:	46a9      	mov	r9, r5
 8008d42:	f04f 0c00 	mov.w	ip, #0
 8008d46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d4a:	f8d9 1000 	ldr.w	r1, [r9]
 8008d4e:	fa1f fb82 	uxth.w	fp, r2
 8008d52:	b289      	uxth	r1, r1
 8008d54:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8008d60:	4461      	add	r1, ip
 8008d62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d66:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d6e:	b289      	uxth	r1, r1
 8008d70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d74:	4577      	cmp	r7, lr
 8008d76:	f849 1b04 	str.w	r1, [r9], #4
 8008d7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d7e:	d8e2      	bhi.n	8008d46 <__multiply+0xb2>
 8008d80:	9a01      	ldr	r2, [sp, #4]
 8008d82:	f845 c002 	str.w	ip, [r5, r2]
 8008d86:	9a03      	ldr	r2, [sp, #12]
 8008d88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	f1b9 0f00 	cmp.w	r9, #0
 8008d92:	d021      	beq.n	8008dd8 <__multiply+0x144>
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	f104 0c14 	add.w	ip, r4, #20
 8008d9a:	46ae      	mov	lr, r5
 8008d9c:	f04f 0a00 	mov.w	sl, #0
 8008da0:	f8bc b000 	ldrh.w	fp, [ip]
 8008da4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008da8:	fb09 220b 	mla	r2, r9, fp, r2
 8008dac:	4452      	add	r2, sl
 8008dae:	b289      	uxth	r1, r1
 8008db0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008db4:	f84e 1b04 	str.w	r1, [lr], #4
 8008db8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008dbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dc0:	f8be 1000 	ldrh.w	r1, [lr]
 8008dc4:	fb09 110a 	mla	r1, r9, sl, r1
 8008dc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008dcc:	4567      	cmp	r7, ip
 8008dce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dd2:	d8e5      	bhi.n	8008da0 <__multiply+0x10c>
 8008dd4:	9a01      	ldr	r2, [sp, #4]
 8008dd6:	50a9      	str	r1, [r5, r2]
 8008dd8:	3504      	adds	r5, #4
 8008dda:	e799      	b.n	8008d10 <__multiply+0x7c>
 8008ddc:	3e01      	subs	r6, #1
 8008dde:	e79b      	b.n	8008d18 <__multiply+0x84>
 8008de0:	08009f4c 	.word	0x08009f4c
 8008de4:	08009f5d 	.word	0x08009f5d

08008de8 <__pow5mult>:
 8008de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dec:	4615      	mov	r5, r2
 8008dee:	f012 0203 	ands.w	r2, r2, #3
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	d007      	beq.n	8008e08 <__pow5mult+0x20>
 8008df8:	4c25      	ldr	r4, [pc, #148]	; (8008e90 <__pow5mult+0xa8>)
 8008dfa:	3a01      	subs	r2, #1
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e02:	f7ff fe9d 	bl	8008b40 <__multadd>
 8008e06:	4607      	mov	r7, r0
 8008e08:	10ad      	asrs	r5, r5, #2
 8008e0a:	d03d      	beq.n	8008e88 <__pow5mult+0xa0>
 8008e0c:	69f4      	ldr	r4, [r6, #28]
 8008e0e:	b97c      	cbnz	r4, 8008e30 <__pow5mult+0x48>
 8008e10:	2010      	movs	r0, #16
 8008e12:	f7ff fd7f 	bl	8008914 <malloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	61f0      	str	r0, [r6, #28]
 8008e1a:	b928      	cbnz	r0, 8008e28 <__pow5mult+0x40>
 8008e1c:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <__pow5mult+0xac>)
 8008e1e:	481e      	ldr	r0, [pc, #120]	; (8008e98 <__pow5mult+0xb0>)
 8008e20:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e24:	f000 fbd6 	bl	80095d4 <__assert_func>
 8008e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e2c:	6004      	str	r4, [r0, #0]
 8008e2e:	60c4      	str	r4, [r0, #12]
 8008e30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e38:	b94c      	cbnz	r4, 8008e4e <__pow5mult+0x66>
 8008e3a:	f240 2171 	movw	r1, #625	; 0x271
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff ff12 	bl	8008c68 <__i2b>
 8008e44:	2300      	movs	r3, #0
 8008e46:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	6003      	str	r3, [r0, #0]
 8008e4e:	f04f 0900 	mov.w	r9, #0
 8008e52:	07eb      	lsls	r3, r5, #31
 8008e54:	d50a      	bpl.n	8008e6c <__pow5mult+0x84>
 8008e56:	4639      	mov	r1, r7
 8008e58:	4622      	mov	r2, r4
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff ff1a 	bl	8008c94 <__multiply>
 8008e60:	4639      	mov	r1, r7
 8008e62:	4680      	mov	r8, r0
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff fe49 	bl	8008afc <_Bfree>
 8008e6a:	4647      	mov	r7, r8
 8008e6c:	106d      	asrs	r5, r5, #1
 8008e6e:	d00b      	beq.n	8008e88 <__pow5mult+0xa0>
 8008e70:	6820      	ldr	r0, [r4, #0]
 8008e72:	b938      	cbnz	r0, 8008e84 <__pow5mult+0x9c>
 8008e74:	4622      	mov	r2, r4
 8008e76:	4621      	mov	r1, r4
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff ff0b 	bl	8008c94 <__multiply>
 8008e7e:	6020      	str	r0, [r4, #0]
 8008e80:	f8c0 9000 	str.w	r9, [r0]
 8008e84:	4604      	mov	r4, r0
 8008e86:	e7e4      	b.n	8008e52 <__pow5mult+0x6a>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8e:	bf00      	nop
 8008e90:	0800a0a8 	.word	0x0800a0a8
 8008e94:	08009edd 	.word	0x08009edd
 8008e98:	08009f5d 	.word	0x08009f5d

08008e9c <__lshift>:
 8008e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	6849      	ldr	r1, [r1, #4]
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	4607      	mov	r7, r0
 8008eae:	4691      	mov	r9, r2
 8008eb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eb4:	f108 0601 	add.w	r6, r8, #1
 8008eb8:	42b3      	cmp	r3, r6
 8008eba:	db0b      	blt.n	8008ed4 <__lshift+0x38>
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff fddd 	bl	8008a7c <_Balloc>
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	b948      	cbnz	r0, 8008eda <__lshift+0x3e>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	4b28      	ldr	r3, [pc, #160]	; (8008f6c <__lshift+0xd0>)
 8008eca:	4829      	ldr	r0, [pc, #164]	; (8008f70 <__lshift+0xd4>)
 8008ecc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008ed0:	f000 fb80 	bl	80095d4 <__assert_func>
 8008ed4:	3101      	adds	r1, #1
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	e7ee      	b.n	8008eb8 <__lshift+0x1c>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f100 0114 	add.w	r1, r0, #20
 8008ee0:	f100 0210 	add.w	r2, r0, #16
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	4553      	cmp	r3, sl
 8008ee8:	db33      	blt.n	8008f52 <__lshift+0xb6>
 8008eea:	6920      	ldr	r0, [r4, #16]
 8008eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ef0:	f104 0314 	add.w	r3, r4, #20
 8008ef4:	f019 091f 	ands.w	r9, r9, #31
 8008ef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008efc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f00:	d02b      	beq.n	8008f5a <__lshift+0xbe>
 8008f02:	f1c9 0e20 	rsb	lr, r9, #32
 8008f06:	468a      	mov	sl, r1
 8008f08:	2200      	movs	r2, #0
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f10:	4310      	orrs	r0, r2
 8008f12:	f84a 0b04 	str.w	r0, [sl], #4
 8008f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1a:	459c      	cmp	ip, r3
 8008f1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f20:	d8f3      	bhi.n	8008f0a <__lshift+0x6e>
 8008f22:	ebac 0304 	sub.w	r3, ip, r4
 8008f26:	3b15      	subs	r3, #21
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	f104 0015 	add.w	r0, r4, #21
 8008f32:	4584      	cmp	ip, r0
 8008f34:	bf38      	it	cc
 8008f36:	2304      	movcc	r3, #4
 8008f38:	50ca      	str	r2, [r1, r3]
 8008f3a:	b10a      	cbz	r2, 8008f40 <__lshift+0xa4>
 8008f3c:	f108 0602 	add.w	r6, r8, #2
 8008f40:	3e01      	subs	r6, #1
 8008f42:	4638      	mov	r0, r7
 8008f44:	612e      	str	r6, [r5, #16]
 8008f46:	4621      	mov	r1, r4
 8008f48:	f7ff fdd8 	bl	8008afc <_Bfree>
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f52:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f56:	3301      	adds	r3, #1
 8008f58:	e7c5      	b.n	8008ee6 <__lshift+0x4a>
 8008f5a:	3904      	subs	r1, #4
 8008f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f64:	459c      	cmp	ip, r3
 8008f66:	d8f9      	bhi.n	8008f5c <__lshift+0xc0>
 8008f68:	e7ea      	b.n	8008f40 <__lshift+0xa4>
 8008f6a:	bf00      	nop
 8008f6c:	08009f4c 	.word	0x08009f4c
 8008f70:	08009f5d 	.word	0x08009f5d

08008f74 <__mcmp>:
 8008f74:	b530      	push	{r4, r5, lr}
 8008f76:	6902      	ldr	r2, [r0, #16]
 8008f78:	690c      	ldr	r4, [r1, #16]
 8008f7a:	1b12      	subs	r2, r2, r4
 8008f7c:	d10e      	bne.n	8008f9c <__mcmp+0x28>
 8008f7e:	f100 0314 	add.w	r3, r0, #20
 8008f82:	3114      	adds	r1, #20
 8008f84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f94:	42a5      	cmp	r5, r4
 8008f96:	d003      	beq.n	8008fa0 <__mcmp+0x2c>
 8008f98:	d305      	bcc.n	8008fa6 <__mcmp+0x32>
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	bd30      	pop	{r4, r5, pc}
 8008fa0:	4283      	cmp	r3, r0
 8008fa2:	d3f3      	bcc.n	8008f8c <__mcmp+0x18>
 8008fa4:	e7fa      	b.n	8008f9c <__mcmp+0x28>
 8008fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008faa:	e7f7      	b.n	8008f9c <__mcmp+0x28>

08008fac <__mdiff>:
 8008fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4690      	mov	r8, r2
 8008fba:	f7ff ffdb 	bl	8008f74 <__mcmp>
 8008fbe:	1e05      	subs	r5, r0, #0
 8008fc0:	d110      	bne.n	8008fe4 <__mdiff+0x38>
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7ff fd59 	bl	8008a7c <_Balloc>
 8008fca:	b930      	cbnz	r0, 8008fda <__mdiff+0x2e>
 8008fcc:	4b3a      	ldr	r3, [pc, #232]	; (80090b8 <__mdiff+0x10c>)
 8008fce:	4602      	mov	r2, r0
 8008fd0:	f240 2137 	movw	r1, #567	; 0x237
 8008fd4:	4839      	ldr	r0, [pc, #228]	; (80090bc <__mdiff+0x110>)
 8008fd6:	f000 fafd 	bl	80095d4 <__assert_func>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	bfa4      	itt	ge
 8008fe6:	4643      	movge	r3, r8
 8008fe8:	46a0      	movge	r8, r4
 8008fea:	4630      	mov	r0, r6
 8008fec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ff0:	bfa6      	itte	ge
 8008ff2:	461c      	movge	r4, r3
 8008ff4:	2500      	movge	r5, #0
 8008ff6:	2501      	movlt	r5, #1
 8008ff8:	f7ff fd40 	bl	8008a7c <_Balloc>
 8008ffc:	b920      	cbnz	r0, 8009008 <__mdiff+0x5c>
 8008ffe:	4b2e      	ldr	r3, [pc, #184]	; (80090b8 <__mdiff+0x10c>)
 8009000:	4602      	mov	r2, r0
 8009002:	f240 2145 	movw	r1, #581	; 0x245
 8009006:	e7e5      	b.n	8008fd4 <__mdiff+0x28>
 8009008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800900c:	6926      	ldr	r6, [r4, #16]
 800900e:	60c5      	str	r5, [r0, #12]
 8009010:	f104 0914 	add.w	r9, r4, #20
 8009014:	f108 0514 	add.w	r5, r8, #20
 8009018:	f100 0e14 	add.w	lr, r0, #20
 800901c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009024:	f108 0210 	add.w	r2, r8, #16
 8009028:	46f2      	mov	sl, lr
 800902a:	2100      	movs	r1, #0
 800902c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009034:	fa11 f88b 	uxtah	r8, r1, fp
 8009038:	b299      	uxth	r1, r3
 800903a:	0c1b      	lsrs	r3, r3, #16
 800903c:	eba8 0801 	sub.w	r8, r8, r1
 8009040:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009044:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009048:	fa1f f888 	uxth.w	r8, r8
 800904c:	1419      	asrs	r1, r3, #16
 800904e:	454e      	cmp	r6, r9
 8009050:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009054:	f84a 3b04 	str.w	r3, [sl], #4
 8009058:	d8e8      	bhi.n	800902c <__mdiff+0x80>
 800905a:	1b33      	subs	r3, r6, r4
 800905c:	3b15      	subs	r3, #21
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	3304      	adds	r3, #4
 8009064:	3415      	adds	r4, #21
 8009066:	42a6      	cmp	r6, r4
 8009068:	bf38      	it	cc
 800906a:	2304      	movcc	r3, #4
 800906c:	441d      	add	r5, r3
 800906e:	4473      	add	r3, lr
 8009070:	469e      	mov	lr, r3
 8009072:	462e      	mov	r6, r5
 8009074:	4566      	cmp	r6, ip
 8009076:	d30e      	bcc.n	8009096 <__mdiff+0xea>
 8009078:	f10c 0203 	add.w	r2, ip, #3
 800907c:	1b52      	subs	r2, r2, r5
 800907e:	f022 0203 	bic.w	r2, r2, #3
 8009082:	3d03      	subs	r5, #3
 8009084:	45ac      	cmp	ip, r5
 8009086:	bf38      	it	cc
 8009088:	2200      	movcc	r2, #0
 800908a:	4413      	add	r3, r2
 800908c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009090:	b17a      	cbz	r2, 80090b2 <__mdiff+0x106>
 8009092:	6107      	str	r7, [r0, #16]
 8009094:	e7a4      	b.n	8008fe0 <__mdiff+0x34>
 8009096:	f856 8b04 	ldr.w	r8, [r6], #4
 800909a:	fa11 f288 	uxtah	r2, r1, r8
 800909e:	1414      	asrs	r4, r2, #16
 80090a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090a4:	b292      	uxth	r2, r2
 80090a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80090aa:	f84e 2b04 	str.w	r2, [lr], #4
 80090ae:	1421      	asrs	r1, r4, #16
 80090b0:	e7e0      	b.n	8009074 <__mdiff+0xc8>
 80090b2:	3f01      	subs	r7, #1
 80090b4:	e7ea      	b.n	800908c <__mdiff+0xe0>
 80090b6:	bf00      	nop
 80090b8:	08009f4c 	.word	0x08009f4c
 80090bc:	08009f5d 	.word	0x08009f5d

080090c0 <__d2b>:
 80090c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090c4:	460f      	mov	r7, r1
 80090c6:	2101      	movs	r1, #1
 80090c8:	ec59 8b10 	vmov	r8, r9, d0
 80090cc:	4616      	mov	r6, r2
 80090ce:	f7ff fcd5 	bl	8008a7c <_Balloc>
 80090d2:	4604      	mov	r4, r0
 80090d4:	b930      	cbnz	r0, 80090e4 <__d2b+0x24>
 80090d6:	4602      	mov	r2, r0
 80090d8:	4b24      	ldr	r3, [pc, #144]	; (800916c <__d2b+0xac>)
 80090da:	4825      	ldr	r0, [pc, #148]	; (8009170 <__d2b+0xb0>)
 80090dc:	f240 310f 	movw	r1, #783	; 0x30f
 80090e0:	f000 fa78 	bl	80095d4 <__assert_func>
 80090e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090ec:	bb2d      	cbnz	r5, 800913a <__d2b+0x7a>
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	f1b8 0300 	subs.w	r3, r8, #0
 80090f4:	d026      	beq.n	8009144 <__d2b+0x84>
 80090f6:	4668      	mov	r0, sp
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	f7ff fd87 	bl	8008c0c <__lo0bits>
 80090fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009102:	b1e8      	cbz	r0, 8009140 <__d2b+0x80>
 8009104:	f1c0 0320 	rsb	r3, r0, #32
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	430b      	orrs	r3, r1
 800910e:	40c2      	lsrs	r2, r0
 8009110:	6163      	str	r3, [r4, #20]
 8009112:	9201      	str	r2, [sp, #4]
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	61a3      	str	r3, [r4, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf14      	ite	ne
 800911c:	2202      	movne	r2, #2
 800911e:	2201      	moveq	r2, #1
 8009120:	6122      	str	r2, [r4, #16]
 8009122:	b1bd      	cbz	r5, 8009154 <__d2b+0x94>
 8009124:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009128:	4405      	add	r5, r0
 800912a:	603d      	str	r5, [r7, #0]
 800912c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009130:	6030      	str	r0, [r6, #0]
 8009132:	4620      	mov	r0, r4
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800913e:	e7d6      	b.n	80090ee <__d2b+0x2e>
 8009140:	6161      	str	r1, [r4, #20]
 8009142:	e7e7      	b.n	8009114 <__d2b+0x54>
 8009144:	a801      	add	r0, sp, #4
 8009146:	f7ff fd61 	bl	8008c0c <__lo0bits>
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	6163      	str	r3, [r4, #20]
 800914e:	3020      	adds	r0, #32
 8009150:	2201      	movs	r2, #1
 8009152:	e7e5      	b.n	8009120 <__d2b+0x60>
 8009154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800915c:	6038      	str	r0, [r7, #0]
 800915e:	6918      	ldr	r0, [r3, #16]
 8009160:	f7ff fd34 	bl	8008bcc <__hi0bits>
 8009164:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009168:	e7e2      	b.n	8009130 <__d2b+0x70>
 800916a:	bf00      	nop
 800916c:	08009f4c 	.word	0x08009f4c
 8009170:	08009f5d 	.word	0x08009f5d

08009174 <__ssputs_r>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	688e      	ldr	r6, [r1, #8]
 800917a:	461f      	mov	r7, r3
 800917c:	42be      	cmp	r6, r7
 800917e:	680b      	ldr	r3, [r1, #0]
 8009180:	4682      	mov	sl, r0
 8009182:	460c      	mov	r4, r1
 8009184:	4690      	mov	r8, r2
 8009186:	d82c      	bhi.n	80091e2 <__ssputs_r+0x6e>
 8009188:	898a      	ldrh	r2, [r1, #12]
 800918a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800918e:	d026      	beq.n	80091de <__ssputs_r+0x6a>
 8009190:	6965      	ldr	r5, [r4, #20]
 8009192:	6909      	ldr	r1, [r1, #16]
 8009194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009198:	eba3 0901 	sub.w	r9, r3, r1
 800919c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091a0:	1c7b      	adds	r3, r7, #1
 80091a2:	444b      	add	r3, r9
 80091a4:	106d      	asrs	r5, r5, #1
 80091a6:	429d      	cmp	r5, r3
 80091a8:	bf38      	it	cc
 80091aa:	461d      	movcc	r5, r3
 80091ac:	0553      	lsls	r3, r2, #21
 80091ae:	d527      	bpl.n	8009200 <__ssputs_r+0x8c>
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7ff fbd7 	bl	8008964 <_malloc_r>
 80091b6:	4606      	mov	r6, r0
 80091b8:	b360      	cbz	r0, 8009214 <__ssputs_r+0xa0>
 80091ba:	6921      	ldr	r1, [r4, #16]
 80091bc:	464a      	mov	r2, r9
 80091be:	f7fe fcd5 	bl	8007b6c <memcpy>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	6126      	str	r6, [r4, #16]
 80091d0:	6165      	str	r5, [r4, #20]
 80091d2:	444e      	add	r6, r9
 80091d4:	eba5 0509 	sub.w	r5, r5, r9
 80091d8:	6026      	str	r6, [r4, #0]
 80091da:	60a5      	str	r5, [r4, #8]
 80091dc:	463e      	mov	r6, r7
 80091de:	42be      	cmp	r6, r7
 80091e0:	d900      	bls.n	80091e4 <__ssputs_r+0x70>
 80091e2:	463e      	mov	r6, r7
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	4632      	mov	r2, r6
 80091e8:	4641      	mov	r1, r8
 80091ea:	f000 f9c9 	bl	8009580 <memmove>
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	1b9b      	subs	r3, r3, r6
 80091f2:	60a3      	str	r3, [r4, #8]
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	4433      	add	r3, r6
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	2000      	movs	r0, #0
 80091fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009200:	462a      	mov	r2, r5
 8009202:	f000 fa2d 	bl	8009660 <_realloc_r>
 8009206:	4606      	mov	r6, r0
 8009208:	2800      	cmp	r0, #0
 800920a:	d1e0      	bne.n	80091ce <__ssputs_r+0x5a>
 800920c:	6921      	ldr	r1, [r4, #16]
 800920e:	4650      	mov	r0, sl
 8009210:	f7ff fb34 	bl	800887c <_free_r>
 8009214:	230c      	movs	r3, #12
 8009216:	f8ca 3000 	str.w	r3, [sl]
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009226:	e7e9      	b.n	80091fc <__ssputs_r+0x88>

08009228 <_svfiprintf_r>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	4698      	mov	r8, r3
 800922e:	898b      	ldrh	r3, [r1, #12]
 8009230:	061b      	lsls	r3, r3, #24
 8009232:	b09d      	sub	sp, #116	; 0x74
 8009234:	4607      	mov	r7, r0
 8009236:	460d      	mov	r5, r1
 8009238:	4614      	mov	r4, r2
 800923a:	d50e      	bpl.n	800925a <_svfiprintf_r+0x32>
 800923c:	690b      	ldr	r3, [r1, #16]
 800923e:	b963      	cbnz	r3, 800925a <_svfiprintf_r+0x32>
 8009240:	2140      	movs	r1, #64	; 0x40
 8009242:	f7ff fb8f 	bl	8008964 <_malloc_r>
 8009246:	6028      	str	r0, [r5, #0]
 8009248:	6128      	str	r0, [r5, #16]
 800924a:	b920      	cbnz	r0, 8009256 <_svfiprintf_r+0x2e>
 800924c:	230c      	movs	r3, #12
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009254:	e0d0      	b.n	80093f8 <_svfiprintf_r+0x1d0>
 8009256:	2340      	movs	r3, #64	; 0x40
 8009258:	616b      	str	r3, [r5, #20]
 800925a:	2300      	movs	r3, #0
 800925c:	9309      	str	r3, [sp, #36]	; 0x24
 800925e:	2320      	movs	r3, #32
 8009260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009264:	f8cd 800c 	str.w	r8, [sp, #12]
 8009268:	2330      	movs	r3, #48	; 0x30
 800926a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009410 <_svfiprintf_r+0x1e8>
 800926e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009272:	f04f 0901 	mov.w	r9, #1
 8009276:	4623      	mov	r3, r4
 8009278:	469a      	mov	sl, r3
 800927a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800927e:	b10a      	cbz	r2, 8009284 <_svfiprintf_r+0x5c>
 8009280:	2a25      	cmp	r2, #37	; 0x25
 8009282:	d1f9      	bne.n	8009278 <_svfiprintf_r+0x50>
 8009284:	ebba 0b04 	subs.w	fp, sl, r4
 8009288:	d00b      	beq.n	80092a2 <_svfiprintf_r+0x7a>
 800928a:	465b      	mov	r3, fp
 800928c:	4622      	mov	r2, r4
 800928e:	4629      	mov	r1, r5
 8009290:	4638      	mov	r0, r7
 8009292:	f7ff ff6f 	bl	8009174 <__ssputs_r>
 8009296:	3001      	adds	r0, #1
 8009298:	f000 80a9 	beq.w	80093ee <_svfiprintf_r+0x1c6>
 800929c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800929e:	445a      	add	r2, fp
 80092a0:	9209      	str	r2, [sp, #36]	; 0x24
 80092a2:	f89a 3000 	ldrb.w	r3, [sl]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 80a1 	beq.w	80093ee <_svfiprintf_r+0x1c6>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b6:	f10a 0a01 	add.w	sl, sl, #1
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	9307      	str	r3, [sp, #28]
 80092be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c2:	931a      	str	r3, [sp, #104]	; 0x68
 80092c4:	4654      	mov	r4, sl
 80092c6:	2205      	movs	r2, #5
 80092c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092cc:	4850      	ldr	r0, [pc, #320]	; (8009410 <_svfiprintf_r+0x1e8>)
 80092ce:	f7f6 ff9f 	bl	8000210 <memchr>
 80092d2:	9a04      	ldr	r2, [sp, #16]
 80092d4:	b9d8      	cbnz	r0, 800930e <_svfiprintf_r+0xe6>
 80092d6:	06d0      	lsls	r0, r2, #27
 80092d8:	bf44      	itt	mi
 80092da:	2320      	movmi	r3, #32
 80092dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e0:	0711      	lsls	r1, r2, #28
 80092e2:	bf44      	itt	mi
 80092e4:	232b      	movmi	r3, #43	; 0x2b
 80092e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ea:	f89a 3000 	ldrb.w	r3, [sl]
 80092ee:	2b2a      	cmp	r3, #42	; 0x2a
 80092f0:	d015      	beq.n	800931e <_svfiprintf_r+0xf6>
 80092f2:	9a07      	ldr	r2, [sp, #28]
 80092f4:	4654      	mov	r4, sl
 80092f6:	2000      	movs	r0, #0
 80092f8:	f04f 0c0a 	mov.w	ip, #10
 80092fc:	4621      	mov	r1, r4
 80092fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009302:	3b30      	subs	r3, #48	; 0x30
 8009304:	2b09      	cmp	r3, #9
 8009306:	d94d      	bls.n	80093a4 <_svfiprintf_r+0x17c>
 8009308:	b1b0      	cbz	r0, 8009338 <_svfiprintf_r+0x110>
 800930a:	9207      	str	r2, [sp, #28]
 800930c:	e014      	b.n	8009338 <_svfiprintf_r+0x110>
 800930e:	eba0 0308 	sub.w	r3, r0, r8
 8009312:	fa09 f303 	lsl.w	r3, r9, r3
 8009316:	4313      	orrs	r3, r2
 8009318:	9304      	str	r3, [sp, #16]
 800931a:	46a2      	mov	sl, r4
 800931c:	e7d2      	b.n	80092c4 <_svfiprintf_r+0x9c>
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	1d19      	adds	r1, r3, #4
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	9103      	str	r1, [sp, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	bfbb      	ittet	lt
 800932a:	425b      	neglt	r3, r3
 800932c:	f042 0202 	orrlt.w	r2, r2, #2
 8009330:	9307      	strge	r3, [sp, #28]
 8009332:	9307      	strlt	r3, [sp, #28]
 8009334:	bfb8      	it	lt
 8009336:	9204      	strlt	r2, [sp, #16]
 8009338:	7823      	ldrb	r3, [r4, #0]
 800933a:	2b2e      	cmp	r3, #46	; 0x2e
 800933c:	d10c      	bne.n	8009358 <_svfiprintf_r+0x130>
 800933e:	7863      	ldrb	r3, [r4, #1]
 8009340:	2b2a      	cmp	r3, #42	; 0x2a
 8009342:	d134      	bne.n	80093ae <_svfiprintf_r+0x186>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	1d1a      	adds	r2, r3, #4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	9203      	str	r2, [sp, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	bfb8      	it	lt
 8009350:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009354:	3402      	adds	r4, #2
 8009356:	9305      	str	r3, [sp, #20]
 8009358:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009420 <_svfiprintf_r+0x1f8>
 800935c:	7821      	ldrb	r1, [r4, #0]
 800935e:	2203      	movs	r2, #3
 8009360:	4650      	mov	r0, sl
 8009362:	f7f6 ff55 	bl	8000210 <memchr>
 8009366:	b138      	cbz	r0, 8009378 <_svfiprintf_r+0x150>
 8009368:	9b04      	ldr	r3, [sp, #16]
 800936a:	eba0 000a 	sub.w	r0, r0, sl
 800936e:	2240      	movs	r2, #64	; 0x40
 8009370:	4082      	lsls	r2, r0
 8009372:	4313      	orrs	r3, r2
 8009374:	3401      	adds	r4, #1
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937c:	4825      	ldr	r0, [pc, #148]	; (8009414 <_svfiprintf_r+0x1ec>)
 800937e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009382:	2206      	movs	r2, #6
 8009384:	f7f6 ff44 	bl	8000210 <memchr>
 8009388:	2800      	cmp	r0, #0
 800938a:	d038      	beq.n	80093fe <_svfiprintf_r+0x1d6>
 800938c:	4b22      	ldr	r3, [pc, #136]	; (8009418 <_svfiprintf_r+0x1f0>)
 800938e:	bb1b      	cbnz	r3, 80093d8 <_svfiprintf_r+0x1b0>
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	3307      	adds	r3, #7
 8009394:	f023 0307 	bic.w	r3, r3, #7
 8009398:	3308      	adds	r3, #8
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939e:	4433      	add	r3, r6
 80093a0:	9309      	str	r3, [sp, #36]	; 0x24
 80093a2:	e768      	b.n	8009276 <_svfiprintf_r+0x4e>
 80093a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a8:	460c      	mov	r4, r1
 80093aa:	2001      	movs	r0, #1
 80093ac:	e7a6      	b.n	80092fc <_svfiprintf_r+0xd4>
 80093ae:	2300      	movs	r3, #0
 80093b0:	3401      	adds	r4, #1
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	4619      	mov	r1, r3
 80093b6:	f04f 0c0a 	mov.w	ip, #10
 80093ba:	4620      	mov	r0, r4
 80093bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c0:	3a30      	subs	r2, #48	; 0x30
 80093c2:	2a09      	cmp	r2, #9
 80093c4:	d903      	bls.n	80093ce <_svfiprintf_r+0x1a6>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0c6      	beq.n	8009358 <_svfiprintf_r+0x130>
 80093ca:	9105      	str	r1, [sp, #20]
 80093cc:	e7c4      	b.n	8009358 <_svfiprintf_r+0x130>
 80093ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d2:	4604      	mov	r4, r0
 80093d4:	2301      	movs	r3, #1
 80093d6:	e7f0      	b.n	80093ba <_svfiprintf_r+0x192>
 80093d8:	ab03      	add	r3, sp, #12
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	462a      	mov	r2, r5
 80093de:	4b0f      	ldr	r3, [pc, #60]	; (800941c <_svfiprintf_r+0x1f4>)
 80093e0:	a904      	add	r1, sp, #16
 80093e2:	4638      	mov	r0, r7
 80093e4:	f7fd fe6a 	bl	80070bc <_printf_float>
 80093e8:	1c42      	adds	r2, r0, #1
 80093ea:	4606      	mov	r6, r0
 80093ec:	d1d6      	bne.n	800939c <_svfiprintf_r+0x174>
 80093ee:	89ab      	ldrh	r3, [r5, #12]
 80093f0:	065b      	lsls	r3, r3, #25
 80093f2:	f53f af2d 	bmi.w	8009250 <_svfiprintf_r+0x28>
 80093f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093f8:	b01d      	add	sp, #116	; 0x74
 80093fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fe:	ab03      	add	r3, sp, #12
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	462a      	mov	r2, r5
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <_svfiprintf_r+0x1f4>)
 8009406:	a904      	add	r1, sp, #16
 8009408:	4638      	mov	r0, r7
 800940a:	f7fe f8fb 	bl	8007604 <_printf_i>
 800940e:	e7eb      	b.n	80093e8 <_svfiprintf_r+0x1c0>
 8009410:	0800a0b4 	.word	0x0800a0b4
 8009414:	0800a0be 	.word	0x0800a0be
 8009418:	080070bd 	.word	0x080070bd
 800941c:	08009175 	.word	0x08009175
 8009420:	0800a0ba 	.word	0x0800a0ba

08009424 <__sflush_r>:
 8009424:	898a      	ldrh	r2, [r1, #12]
 8009426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942a:	4605      	mov	r5, r0
 800942c:	0710      	lsls	r0, r2, #28
 800942e:	460c      	mov	r4, r1
 8009430:	d458      	bmi.n	80094e4 <__sflush_r+0xc0>
 8009432:	684b      	ldr	r3, [r1, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	dc05      	bgt.n	8009444 <__sflush_r+0x20>
 8009438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800943a:	2b00      	cmp	r3, #0
 800943c:	dc02      	bgt.n	8009444 <__sflush_r+0x20>
 800943e:	2000      	movs	r0, #0
 8009440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009446:	2e00      	cmp	r6, #0
 8009448:	d0f9      	beq.n	800943e <__sflush_r+0x1a>
 800944a:	2300      	movs	r3, #0
 800944c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009450:	682f      	ldr	r7, [r5, #0]
 8009452:	6a21      	ldr	r1, [r4, #32]
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	d032      	beq.n	80094be <__sflush_r+0x9a>
 8009458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	075a      	lsls	r2, r3, #29
 800945e:	d505      	bpl.n	800946c <__sflush_r+0x48>
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	1ac0      	subs	r0, r0, r3
 8009464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009466:	b10b      	cbz	r3, 800946c <__sflush_r+0x48>
 8009468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800946a:	1ac0      	subs	r0, r0, r3
 800946c:	2300      	movs	r3, #0
 800946e:	4602      	mov	r2, r0
 8009470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009472:	6a21      	ldr	r1, [r4, #32]
 8009474:	4628      	mov	r0, r5
 8009476:	47b0      	blx	r6
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	d106      	bne.n	800948c <__sflush_r+0x68>
 800947e:	6829      	ldr	r1, [r5, #0]
 8009480:	291d      	cmp	r1, #29
 8009482:	d82b      	bhi.n	80094dc <__sflush_r+0xb8>
 8009484:	4a29      	ldr	r2, [pc, #164]	; (800952c <__sflush_r+0x108>)
 8009486:	410a      	asrs	r2, r1
 8009488:	07d6      	lsls	r6, r2, #31
 800948a:	d427      	bmi.n	80094dc <__sflush_r+0xb8>
 800948c:	2200      	movs	r2, #0
 800948e:	6062      	str	r2, [r4, #4]
 8009490:	04d9      	lsls	r1, r3, #19
 8009492:	6922      	ldr	r2, [r4, #16]
 8009494:	6022      	str	r2, [r4, #0]
 8009496:	d504      	bpl.n	80094a2 <__sflush_r+0x7e>
 8009498:	1c42      	adds	r2, r0, #1
 800949a:	d101      	bne.n	80094a0 <__sflush_r+0x7c>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	b903      	cbnz	r3, 80094a2 <__sflush_r+0x7e>
 80094a0:	6560      	str	r0, [r4, #84]	; 0x54
 80094a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094a4:	602f      	str	r7, [r5, #0]
 80094a6:	2900      	cmp	r1, #0
 80094a8:	d0c9      	beq.n	800943e <__sflush_r+0x1a>
 80094aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ae:	4299      	cmp	r1, r3
 80094b0:	d002      	beq.n	80094b8 <__sflush_r+0x94>
 80094b2:	4628      	mov	r0, r5
 80094b4:	f7ff f9e2 	bl	800887c <_free_r>
 80094b8:	2000      	movs	r0, #0
 80094ba:	6360      	str	r0, [r4, #52]	; 0x34
 80094bc:	e7c0      	b.n	8009440 <__sflush_r+0x1c>
 80094be:	2301      	movs	r3, #1
 80094c0:	4628      	mov	r0, r5
 80094c2:	47b0      	blx	r6
 80094c4:	1c41      	adds	r1, r0, #1
 80094c6:	d1c8      	bne.n	800945a <__sflush_r+0x36>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0c5      	beq.n	800945a <__sflush_r+0x36>
 80094ce:	2b1d      	cmp	r3, #29
 80094d0:	d001      	beq.n	80094d6 <__sflush_r+0xb2>
 80094d2:	2b16      	cmp	r3, #22
 80094d4:	d101      	bne.n	80094da <__sflush_r+0xb6>
 80094d6:	602f      	str	r7, [r5, #0]
 80094d8:	e7b1      	b.n	800943e <__sflush_r+0x1a>
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	e7ad      	b.n	8009440 <__sflush_r+0x1c>
 80094e4:	690f      	ldr	r7, [r1, #16]
 80094e6:	2f00      	cmp	r7, #0
 80094e8:	d0a9      	beq.n	800943e <__sflush_r+0x1a>
 80094ea:	0793      	lsls	r3, r2, #30
 80094ec:	680e      	ldr	r6, [r1, #0]
 80094ee:	bf08      	it	eq
 80094f0:	694b      	ldreq	r3, [r1, #20]
 80094f2:	600f      	str	r7, [r1, #0]
 80094f4:	bf18      	it	ne
 80094f6:	2300      	movne	r3, #0
 80094f8:	eba6 0807 	sub.w	r8, r6, r7
 80094fc:	608b      	str	r3, [r1, #8]
 80094fe:	f1b8 0f00 	cmp.w	r8, #0
 8009502:	dd9c      	ble.n	800943e <__sflush_r+0x1a>
 8009504:	6a21      	ldr	r1, [r4, #32]
 8009506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009508:	4643      	mov	r3, r8
 800950a:	463a      	mov	r2, r7
 800950c:	4628      	mov	r0, r5
 800950e:	47b0      	blx	r6
 8009510:	2800      	cmp	r0, #0
 8009512:	dc06      	bgt.n	8009522 <__sflush_r+0xfe>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009520:	e78e      	b.n	8009440 <__sflush_r+0x1c>
 8009522:	4407      	add	r7, r0
 8009524:	eba8 0800 	sub.w	r8, r8, r0
 8009528:	e7e9      	b.n	80094fe <__sflush_r+0xda>
 800952a:	bf00      	nop
 800952c:	dfbffffe 	.word	0xdfbffffe

08009530 <_fflush_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	690b      	ldr	r3, [r1, #16]
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	b913      	cbnz	r3, 8009540 <_fflush_r+0x10>
 800953a:	2500      	movs	r5, #0
 800953c:	4628      	mov	r0, r5
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	b118      	cbz	r0, 800954a <_fflush_r+0x1a>
 8009542:	6a03      	ldr	r3, [r0, #32]
 8009544:	b90b      	cbnz	r3, 800954a <_fflush_r+0x1a>
 8009546:	f7fe f9f9 	bl	800793c <__sinit>
 800954a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0f3      	beq.n	800953a <_fflush_r+0xa>
 8009552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009554:	07d0      	lsls	r0, r2, #31
 8009556:	d404      	bmi.n	8009562 <_fflush_r+0x32>
 8009558:	0599      	lsls	r1, r3, #22
 800955a:	d402      	bmi.n	8009562 <_fflush_r+0x32>
 800955c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800955e:	f7fe fb03 	bl	8007b68 <__retarget_lock_acquire_recursive>
 8009562:	4628      	mov	r0, r5
 8009564:	4621      	mov	r1, r4
 8009566:	f7ff ff5d 	bl	8009424 <__sflush_r>
 800956a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800956c:	07da      	lsls	r2, r3, #31
 800956e:	4605      	mov	r5, r0
 8009570:	d4e4      	bmi.n	800953c <_fflush_r+0xc>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	059b      	lsls	r3, r3, #22
 8009576:	d4e1      	bmi.n	800953c <_fflush_r+0xc>
 8009578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800957a:	f7fe faf6 	bl	8007b6a <__retarget_lock_release_recursive>
 800957e:	e7dd      	b.n	800953c <_fflush_r+0xc>

08009580 <memmove>:
 8009580:	4288      	cmp	r0, r1
 8009582:	b510      	push	{r4, lr}
 8009584:	eb01 0402 	add.w	r4, r1, r2
 8009588:	d902      	bls.n	8009590 <memmove+0x10>
 800958a:	4284      	cmp	r4, r0
 800958c:	4623      	mov	r3, r4
 800958e:	d807      	bhi.n	80095a0 <memmove+0x20>
 8009590:	1e43      	subs	r3, r0, #1
 8009592:	42a1      	cmp	r1, r4
 8009594:	d008      	beq.n	80095a8 <memmove+0x28>
 8009596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800959a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800959e:	e7f8      	b.n	8009592 <memmove+0x12>
 80095a0:	4402      	add	r2, r0
 80095a2:	4601      	mov	r1, r0
 80095a4:	428a      	cmp	r2, r1
 80095a6:	d100      	bne.n	80095aa <memmove+0x2a>
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095b2:	e7f7      	b.n	80095a4 <memmove+0x24>

080095b4 <_sbrk_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d06      	ldr	r5, [pc, #24]	; (80095d0 <_sbrk_r+0x1c>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7f8 fc64 	bl	8001e8c <_sbrk>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_sbrk_r+0x1a>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_sbrk_r+0x1a>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	2000441c 	.word	0x2000441c

080095d4 <__assert_func>:
 80095d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095d6:	4614      	mov	r4, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <__assert_func+0x2c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4605      	mov	r5, r0
 80095e0:	68d8      	ldr	r0, [r3, #12]
 80095e2:	b14c      	cbz	r4, 80095f8 <__assert_func+0x24>
 80095e4:	4b07      	ldr	r3, [pc, #28]	; (8009604 <__assert_func+0x30>)
 80095e6:	9100      	str	r1, [sp, #0]
 80095e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ec:	4906      	ldr	r1, [pc, #24]	; (8009608 <__assert_func+0x34>)
 80095ee:	462b      	mov	r3, r5
 80095f0:	f000 f872 	bl	80096d8 <fiprintf>
 80095f4:	f000 f882 	bl	80096fc <abort>
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <__assert_func+0x38>)
 80095fa:	461c      	mov	r4, r3
 80095fc:	e7f3      	b.n	80095e6 <__assert_func+0x12>
 80095fe:	bf00      	nop
 8009600:	20000068 	.word	0x20000068
 8009604:	0800a0cf 	.word	0x0800a0cf
 8009608:	0800a0dc 	.word	0x0800a0dc
 800960c:	0800a10a 	.word	0x0800a10a

08009610 <_calloc_r>:
 8009610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009612:	fba1 2402 	umull	r2, r4, r1, r2
 8009616:	b94c      	cbnz	r4, 800962c <_calloc_r+0x1c>
 8009618:	4611      	mov	r1, r2
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	f7ff f9a2 	bl	8008964 <_malloc_r>
 8009620:	9a01      	ldr	r2, [sp, #4]
 8009622:	4605      	mov	r5, r0
 8009624:	b930      	cbnz	r0, 8009634 <_calloc_r+0x24>
 8009626:	4628      	mov	r0, r5
 8009628:	b003      	add	sp, #12
 800962a:	bd30      	pop	{r4, r5, pc}
 800962c:	220c      	movs	r2, #12
 800962e:	6002      	str	r2, [r0, #0]
 8009630:	2500      	movs	r5, #0
 8009632:	e7f8      	b.n	8009626 <_calloc_r+0x16>
 8009634:	4621      	mov	r1, r4
 8009636:	f7fe fa1a 	bl	8007a6e <memset>
 800963a:	e7f4      	b.n	8009626 <_calloc_r+0x16>

0800963c <__ascii_mbtowc>:
 800963c:	b082      	sub	sp, #8
 800963e:	b901      	cbnz	r1, 8009642 <__ascii_mbtowc+0x6>
 8009640:	a901      	add	r1, sp, #4
 8009642:	b142      	cbz	r2, 8009656 <__ascii_mbtowc+0x1a>
 8009644:	b14b      	cbz	r3, 800965a <__ascii_mbtowc+0x1e>
 8009646:	7813      	ldrb	r3, [r2, #0]
 8009648:	600b      	str	r3, [r1, #0]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	1e10      	subs	r0, r2, #0
 800964e:	bf18      	it	ne
 8009650:	2001      	movne	r0, #1
 8009652:	b002      	add	sp, #8
 8009654:	4770      	bx	lr
 8009656:	4610      	mov	r0, r2
 8009658:	e7fb      	b.n	8009652 <__ascii_mbtowc+0x16>
 800965a:	f06f 0001 	mvn.w	r0, #1
 800965e:	e7f8      	b.n	8009652 <__ascii_mbtowc+0x16>

08009660 <_realloc_r>:
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	4680      	mov	r8, r0
 8009666:	4614      	mov	r4, r2
 8009668:	460e      	mov	r6, r1
 800966a:	b921      	cbnz	r1, 8009676 <_realloc_r+0x16>
 800966c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009670:	4611      	mov	r1, r2
 8009672:	f7ff b977 	b.w	8008964 <_malloc_r>
 8009676:	b92a      	cbnz	r2, 8009684 <_realloc_r+0x24>
 8009678:	f7ff f900 	bl	800887c <_free_r>
 800967c:	4625      	mov	r5, r4
 800967e:	4628      	mov	r0, r5
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	f000 f841 	bl	800970a <_malloc_usable_size_r>
 8009688:	4284      	cmp	r4, r0
 800968a:	4607      	mov	r7, r0
 800968c:	d802      	bhi.n	8009694 <_realloc_r+0x34>
 800968e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009692:	d812      	bhi.n	80096ba <_realloc_r+0x5a>
 8009694:	4621      	mov	r1, r4
 8009696:	4640      	mov	r0, r8
 8009698:	f7ff f964 	bl	8008964 <_malloc_r>
 800969c:	4605      	mov	r5, r0
 800969e:	2800      	cmp	r0, #0
 80096a0:	d0ed      	beq.n	800967e <_realloc_r+0x1e>
 80096a2:	42bc      	cmp	r4, r7
 80096a4:	4622      	mov	r2, r4
 80096a6:	4631      	mov	r1, r6
 80096a8:	bf28      	it	cs
 80096aa:	463a      	movcs	r2, r7
 80096ac:	f7fe fa5e 	bl	8007b6c <memcpy>
 80096b0:	4631      	mov	r1, r6
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff f8e2 	bl	800887c <_free_r>
 80096b8:	e7e1      	b.n	800967e <_realloc_r+0x1e>
 80096ba:	4635      	mov	r5, r6
 80096bc:	e7df      	b.n	800967e <_realloc_r+0x1e>

080096be <__ascii_wctomb>:
 80096be:	b149      	cbz	r1, 80096d4 <__ascii_wctomb+0x16>
 80096c0:	2aff      	cmp	r2, #255	; 0xff
 80096c2:	bf85      	ittet	hi
 80096c4:	238a      	movhi	r3, #138	; 0x8a
 80096c6:	6003      	strhi	r3, [r0, #0]
 80096c8:	700a      	strbls	r2, [r1, #0]
 80096ca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80096ce:	bf98      	it	ls
 80096d0:	2001      	movls	r0, #1
 80096d2:	4770      	bx	lr
 80096d4:	4608      	mov	r0, r1
 80096d6:	4770      	bx	lr

080096d8 <fiprintf>:
 80096d8:	b40e      	push	{r1, r2, r3}
 80096da:	b503      	push	{r0, r1, lr}
 80096dc:	4601      	mov	r1, r0
 80096de:	ab03      	add	r3, sp, #12
 80096e0:	4805      	ldr	r0, [pc, #20]	; (80096f8 <fiprintf+0x20>)
 80096e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e6:	6800      	ldr	r0, [r0, #0]
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f000 f83f 	bl	800976c <_vfiprintf_r>
 80096ee:	b002      	add	sp, #8
 80096f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f4:	b003      	add	sp, #12
 80096f6:	4770      	bx	lr
 80096f8:	20000068 	.word	0x20000068

080096fc <abort>:
 80096fc:	b508      	push	{r3, lr}
 80096fe:	2006      	movs	r0, #6
 8009700:	f000 fa0c 	bl	8009b1c <raise>
 8009704:	2001      	movs	r0, #1
 8009706:	f7f8 fb49 	bl	8001d9c <_exit>

0800970a <_malloc_usable_size_r>:
 800970a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800970e:	1f18      	subs	r0, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbc      	itt	lt
 8009714:	580b      	ldrlt	r3, [r1, r0]
 8009716:	18c0      	addlt	r0, r0, r3
 8009718:	4770      	bx	lr

0800971a <__sfputc_r>:
 800971a:	6893      	ldr	r3, [r2, #8]
 800971c:	3b01      	subs	r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	b410      	push	{r4}
 8009722:	6093      	str	r3, [r2, #8]
 8009724:	da08      	bge.n	8009738 <__sfputc_r+0x1e>
 8009726:	6994      	ldr	r4, [r2, #24]
 8009728:	42a3      	cmp	r3, r4
 800972a:	db01      	blt.n	8009730 <__sfputc_r+0x16>
 800972c:	290a      	cmp	r1, #10
 800972e:	d103      	bne.n	8009738 <__sfputc_r+0x1e>
 8009730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009734:	f000 b934 	b.w	80099a0 <__swbuf_r>
 8009738:	6813      	ldr	r3, [r2, #0]
 800973a:	1c58      	adds	r0, r3, #1
 800973c:	6010      	str	r0, [r2, #0]
 800973e:	7019      	strb	r1, [r3, #0]
 8009740:	4608      	mov	r0, r1
 8009742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009746:	4770      	bx	lr

08009748 <__sfputs_r>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	4606      	mov	r6, r0
 800974c:	460f      	mov	r7, r1
 800974e:	4614      	mov	r4, r2
 8009750:	18d5      	adds	r5, r2, r3
 8009752:	42ac      	cmp	r4, r5
 8009754:	d101      	bne.n	800975a <__sfputs_r+0x12>
 8009756:	2000      	movs	r0, #0
 8009758:	e007      	b.n	800976a <__sfputs_r+0x22>
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	463a      	mov	r2, r7
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff ffda 	bl	800971a <__sfputc_r>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d1f3      	bne.n	8009752 <__sfputs_r+0xa>
 800976a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800976c <_vfiprintf_r>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	460d      	mov	r5, r1
 8009772:	b09d      	sub	sp, #116	; 0x74
 8009774:	4614      	mov	r4, r2
 8009776:	4698      	mov	r8, r3
 8009778:	4606      	mov	r6, r0
 800977a:	b118      	cbz	r0, 8009784 <_vfiprintf_r+0x18>
 800977c:	6a03      	ldr	r3, [r0, #32]
 800977e:	b90b      	cbnz	r3, 8009784 <_vfiprintf_r+0x18>
 8009780:	f7fe f8dc 	bl	800793c <__sinit>
 8009784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	d405      	bmi.n	8009796 <_vfiprintf_r+0x2a>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d402      	bmi.n	8009796 <_vfiprintf_r+0x2a>
 8009790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009792:	f7fe f9e9 	bl	8007b68 <__retarget_lock_acquire_recursive>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	071b      	lsls	r3, r3, #28
 800979a:	d501      	bpl.n	80097a0 <_vfiprintf_r+0x34>
 800979c:	692b      	ldr	r3, [r5, #16]
 800979e:	b99b      	cbnz	r3, 80097c8 <_vfiprintf_r+0x5c>
 80097a0:	4629      	mov	r1, r5
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 f93a 	bl	8009a1c <__swsetup_r>
 80097a8:	b170      	cbz	r0, 80097c8 <_vfiprintf_r+0x5c>
 80097aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ac:	07dc      	lsls	r4, r3, #31
 80097ae:	d504      	bpl.n	80097ba <_vfiprintf_r+0x4e>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b4:	b01d      	add	sp, #116	; 0x74
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	0598      	lsls	r0, r3, #22
 80097be:	d4f7      	bmi.n	80097b0 <_vfiprintf_r+0x44>
 80097c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c2:	f7fe f9d2 	bl	8007b6a <__retarget_lock_release_recursive>
 80097c6:	e7f3      	b.n	80097b0 <_vfiprintf_r+0x44>
 80097c8:	2300      	movs	r3, #0
 80097ca:	9309      	str	r3, [sp, #36]	; 0x24
 80097cc:	2320      	movs	r3, #32
 80097ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d6:	2330      	movs	r3, #48	; 0x30
 80097d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800998c <_vfiprintf_r+0x220>
 80097dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e0:	f04f 0901 	mov.w	r9, #1
 80097e4:	4623      	mov	r3, r4
 80097e6:	469a      	mov	sl, r3
 80097e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ec:	b10a      	cbz	r2, 80097f2 <_vfiprintf_r+0x86>
 80097ee:	2a25      	cmp	r2, #37	; 0x25
 80097f0:	d1f9      	bne.n	80097e6 <_vfiprintf_r+0x7a>
 80097f2:	ebba 0b04 	subs.w	fp, sl, r4
 80097f6:	d00b      	beq.n	8009810 <_vfiprintf_r+0xa4>
 80097f8:	465b      	mov	r3, fp
 80097fa:	4622      	mov	r2, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	4630      	mov	r0, r6
 8009800:	f7ff ffa2 	bl	8009748 <__sfputs_r>
 8009804:	3001      	adds	r0, #1
 8009806:	f000 80a9 	beq.w	800995c <_vfiprintf_r+0x1f0>
 800980a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800980c:	445a      	add	r2, fp
 800980e:	9209      	str	r2, [sp, #36]	; 0x24
 8009810:	f89a 3000 	ldrb.w	r3, [sl]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 80a1 	beq.w	800995c <_vfiprintf_r+0x1f0>
 800981a:	2300      	movs	r3, #0
 800981c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009824:	f10a 0a01 	add.w	sl, sl, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	9307      	str	r3, [sp, #28]
 800982c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009830:	931a      	str	r3, [sp, #104]	; 0x68
 8009832:	4654      	mov	r4, sl
 8009834:	2205      	movs	r2, #5
 8009836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983a:	4854      	ldr	r0, [pc, #336]	; (800998c <_vfiprintf_r+0x220>)
 800983c:	f7f6 fce8 	bl	8000210 <memchr>
 8009840:	9a04      	ldr	r2, [sp, #16]
 8009842:	b9d8      	cbnz	r0, 800987c <_vfiprintf_r+0x110>
 8009844:	06d1      	lsls	r1, r2, #27
 8009846:	bf44      	itt	mi
 8009848:	2320      	movmi	r3, #32
 800984a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800984e:	0713      	lsls	r3, r2, #28
 8009850:	bf44      	itt	mi
 8009852:	232b      	movmi	r3, #43	; 0x2b
 8009854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009858:	f89a 3000 	ldrb.w	r3, [sl]
 800985c:	2b2a      	cmp	r3, #42	; 0x2a
 800985e:	d015      	beq.n	800988c <_vfiprintf_r+0x120>
 8009860:	9a07      	ldr	r2, [sp, #28]
 8009862:	4654      	mov	r4, sl
 8009864:	2000      	movs	r0, #0
 8009866:	f04f 0c0a 	mov.w	ip, #10
 800986a:	4621      	mov	r1, r4
 800986c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009870:	3b30      	subs	r3, #48	; 0x30
 8009872:	2b09      	cmp	r3, #9
 8009874:	d94d      	bls.n	8009912 <_vfiprintf_r+0x1a6>
 8009876:	b1b0      	cbz	r0, 80098a6 <_vfiprintf_r+0x13a>
 8009878:	9207      	str	r2, [sp, #28]
 800987a:	e014      	b.n	80098a6 <_vfiprintf_r+0x13a>
 800987c:	eba0 0308 	sub.w	r3, r0, r8
 8009880:	fa09 f303 	lsl.w	r3, r9, r3
 8009884:	4313      	orrs	r3, r2
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	46a2      	mov	sl, r4
 800988a:	e7d2      	b.n	8009832 <_vfiprintf_r+0xc6>
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	1d19      	adds	r1, r3, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	9103      	str	r1, [sp, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	bfbb      	ittet	lt
 8009898:	425b      	neglt	r3, r3
 800989a:	f042 0202 	orrlt.w	r2, r2, #2
 800989e:	9307      	strge	r3, [sp, #28]
 80098a0:	9307      	strlt	r3, [sp, #28]
 80098a2:	bfb8      	it	lt
 80098a4:	9204      	strlt	r2, [sp, #16]
 80098a6:	7823      	ldrb	r3, [r4, #0]
 80098a8:	2b2e      	cmp	r3, #46	; 0x2e
 80098aa:	d10c      	bne.n	80098c6 <_vfiprintf_r+0x15a>
 80098ac:	7863      	ldrb	r3, [r4, #1]
 80098ae:	2b2a      	cmp	r3, #42	; 0x2a
 80098b0:	d134      	bne.n	800991c <_vfiprintf_r+0x1b0>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	1d1a      	adds	r2, r3, #4
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	9203      	str	r2, [sp, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	bfb8      	it	lt
 80098be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098c2:	3402      	adds	r4, #2
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800999c <_vfiprintf_r+0x230>
 80098ca:	7821      	ldrb	r1, [r4, #0]
 80098cc:	2203      	movs	r2, #3
 80098ce:	4650      	mov	r0, sl
 80098d0:	f7f6 fc9e 	bl	8000210 <memchr>
 80098d4:	b138      	cbz	r0, 80098e6 <_vfiprintf_r+0x17a>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	eba0 000a 	sub.w	r0, r0, sl
 80098dc:	2240      	movs	r2, #64	; 0x40
 80098de:	4082      	lsls	r2, r0
 80098e0:	4313      	orrs	r3, r2
 80098e2:	3401      	adds	r4, #1
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ea:	4829      	ldr	r0, [pc, #164]	; (8009990 <_vfiprintf_r+0x224>)
 80098ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098f0:	2206      	movs	r2, #6
 80098f2:	f7f6 fc8d 	bl	8000210 <memchr>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d03f      	beq.n	800997a <_vfiprintf_r+0x20e>
 80098fa:	4b26      	ldr	r3, [pc, #152]	; (8009994 <_vfiprintf_r+0x228>)
 80098fc:	bb1b      	cbnz	r3, 8009946 <_vfiprintf_r+0x1da>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	3307      	adds	r3, #7
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	3308      	adds	r3, #8
 8009908:	9303      	str	r3, [sp, #12]
 800990a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990c:	443b      	add	r3, r7
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	e768      	b.n	80097e4 <_vfiprintf_r+0x78>
 8009912:	fb0c 3202 	mla	r2, ip, r2, r3
 8009916:	460c      	mov	r4, r1
 8009918:	2001      	movs	r0, #1
 800991a:	e7a6      	b.n	800986a <_vfiprintf_r+0xfe>
 800991c:	2300      	movs	r3, #0
 800991e:	3401      	adds	r4, #1
 8009920:	9305      	str	r3, [sp, #20]
 8009922:	4619      	mov	r1, r3
 8009924:	f04f 0c0a 	mov.w	ip, #10
 8009928:	4620      	mov	r0, r4
 800992a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800992e:	3a30      	subs	r2, #48	; 0x30
 8009930:	2a09      	cmp	r2, #9
 8009932:	d903      	bls.n	800993c <_vfiprintf_r+0x1d0>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0c6      	beq.n	80098c6 <_vfiprintf_r+0x15a>
 8009938:	9105      	str	r1, [sp, #20]
 800993a:	e7c4      	b.n	80098c6 <_vfiprintf_r+0x15a>
 800993c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009940:	4604      	mov	r4, r0
 8009942:	2301      	movs	r3, #1
 8009944:	e7f0      	b.n	8009928 <_vfiprintf_r+0x1bc>
 8009946:	ab03      	add	r3, sp, #12
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	462a      	mov	r2, r5
 800994c:	4b12      	ldr	r3, [pc, #72]	; (8009998 <_vfiprintf_r+0x22c>)
 800994e:	a904      	add	r1, sp, #16
 8009950:	4630      	mov	r0, r6
 8009952:	f7fd fbb3 	bl	80070bc <_printf_float>
 8009956:	4607      	mov	r7, r0
 8009958:	1c78      	adds	r0, r7, #1
 800995a:	d1d6      	bne.n	800990a <_vfiprintf_r+0x19e>
 800995c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800995e:	07d9      	lsls	r1, r3, #31
 8009960:	d405      	bmi.n	800996e <_vfiprintf_r+0x202>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	059a      	lsls	r2, r3, #22
 8009966:	d402      	bmi.n	800996e <_vfiprintf_r+0x202>
 8009968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800996a:	f7fe f8fe 	bl	8007b6a <__retarget_lock_release_recursive>
 800996e:	89ab      	ldrh	r3, [r5, #12]
 8009970:	065b      	lsls	r3, r3, #25
 8009972:	f53f af1d 	bmi.w	80097b0 <_vfiprintf_r+0x44>
 8009976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009978:	e71c      	b.n	80097b4 <_vfiprintf_r+0x48>
 800997a:	ab03      	add	r3, sp, #12
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	462a      	mov	r2, r5
 8009980:	4b05      	ldr	r3, [pc, #20]	; (8009998 <_vfiprintf_r+0x22c>)
 8009982:	a904      	add	r1, sp, #16
 8009984:	4630      	mov	r0, r6
 8009986:	f7fd fe3d 	bl	8007604 <_printf_i>
 800998a:	e7e4      	b.n	8009956 <_vfiprintf_r+0x1ea>
 800998c:	0800a0b4 	.word	0x0800a0b4
 8009990:	0800a0be 	.word	0x0800a0be
 8009994:	080070bd 	.word	0x080070bd
 8009998:	08009749 	.word	0x08009749
 800999c:	0800a0ba 	.word	0x0800a0ba

080099a0 <__swbuf_r>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	460e      	mov	r6, r1
 80099a4:	4614      	mov	r4, r2
 80099a6:	4605      	mov	r5, r0
 80099a8:	b118      	cbz	r0, 80099b2 <__swbuf_r+0x12>
 80099aa:	6a03      	ldr	r3, [r0, #32]
 80099ac:	b90b      	cbnz	r3, 80099b2 <__swbuf_r+0x12>
 80099ae:	f7fd ffc5 	bl	800793c <__sinit>
 80099b2:	69a3      	ldr	r3, [r4, #24]
 80099b4:	60a3      	str	r3, [r4, #8]
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	071a      	lsls	r2, r3, #28
 80099ba:	d525      	bpl.n	8009a08 <__swbuf_r+0x68>
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	b31b      	cbz	r3, 8009a08 <__swbuf_r+0x68>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	6922      	ldr	r2, [r4, #16]
 80099c4:	1a98      	subs	r0, r3, r2
 80099c6:	6963      	ldr	r3, [r4, #20]
 80099c8:	b2f6      	uxtb	r6, r6
 80099ca:	4283      	cmp	r3, r0
 80099cc:	4637      	mov	r7, r6
 80099ce:	dc04      	bgt.n	80099da <__swbuf_r+0x3a>
 80099d0:	4621      	mov	r1, r4
 80099d2:	4628      	mov	r0, r5
 80099d4:	f7ff fdac 	bl	8009530 <_fflush_r>
 80099d8:	b9e0      	cbnz	r0, 8009a14 <__swbuf_r+0x74>
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	3b01      	subs	r3, #1
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	701e      	strb	r6, [r3, #0]
 80099e8:	6962      	ldr	r2, [r4, #20]
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d004      	beq.n	80099fa <__swbuf_r+0x5a>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	07db      	lsls	r3, r3, #31
 80099f4:	d506      	bpl.n	8009a04 <__swbuf_r+0x64>
 80099f6:	2e0a      	cmp	r6, #10
 80099f8:	d104      	bne.n	8009a04 <__swbuf_r+0x64>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f7ff fd97 	bl	8009530 <_fflush_r>
 8009a02:	b938      	cbnz	r0, 8009a14 <__swbuf_r+0x74>
 8009a04:	4638      	mov	r0, r7
 8009a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f000 f806 	bl	8009a1c <__swsetup_r>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d0d5      	beq.n	80099c0 <__swbuf_r+0x20>
 8009a14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009a18:	e7f4      	b.n	8009a04 <__swbuf_r+0x64>
	...

08009a1c <__swsetup_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ac8 <__swsetup_r+0xac>)
 8009a20:	4605      	mov	r5, r0
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	460c      	mov	r4, r1
 8009a26:	b118      	cbz	r0, 8009a30 <__swsetup_r+0x14>
 8009a28:	6a03      	ldr	r3, [r0, #32]
 8009a2a:	b90b      	cbnz	r3, 8009a30 <__swsetup_r+0x14>
 8009a2c:	f7fd ff86 	bl	800793c <__sinit>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a36:	0718      	lsls	r0, r3, #28
 8009a38:	d422      	bmi.n	8009a80 <__swsetup_r+0x64>
 8009a3a:	06d9      	lsls	r1, r3, #27
 8009a3c:	d407      	bmi.n	8009a4e <__swsetup_r+0x32>
 8009a3e:	2309      	movs	r3, #9
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a4c:	e034      	b.n	8009ab8 <__swsetup_r+0x9c>
 8009a4e:	0758      	lsls	r0, r3, #29
 8009a50:	d512      	bpl.n	8009a78 <__swsetup_r+0x5c>
 8009a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a54:	b141      	cbz	r1, 8009a68 <__swsetup_r+0x4c>
 8009a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a5a:	4299      	cmp	r1, r3
 8009a5c:	d002      	beq.n	8009a64 <__swsetup_r+0x48>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f7fe ff0c 	bl	800887c <_free_r>
 8009a64:	2300      	movs	r3, #0
 8009a66:	6363      	str	r3, [r4, #52]	; 0x34
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	2300      	movs	r3, #0
 8009a72:	6063      	str	r3, [r4, #4]
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0308 	orr.w	r3, r3, #8
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	b94b      	cbnz	r3, 8009a98 <__swsetup_r+0x7c>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a8e:	d003      	beq.n	8009a98 <__swsetup_r+0x7c>
 8009a90:	4621      	mov	r1, r4
 8009a92:	4628      	mov	r0, r5
 8009a94:	f000 f884 	bl	8009ba0 <__smakebuf_r>
 8009a98:	89a0      	ldrh	r0, [r4, #12]
 8009a9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a9e:	f010 0301 	ands.w	r3, r0, #1
 8009aa2:	d00a      	beq.n	8009aba <__swsetup_r+0x9e>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	6963      	ldr	r3, [r4, #20]
 8009aaa:	425b      	negs	r3, r3
 8009aac:	61a3      	str	r3, [r4, #24]
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	b943      	cbnz	r3, 8009ac4 <__swsetup_r+0xa8>
 8009ab2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ab6:	d1c4      	bne.n	8009a42 <__swsetup_r+0x26>
 8009ab8:	bd38      	pop	{r3, r4, r5, pc}
 8009aba:	0781      	lsls	r1, r0, #30
 8009abc:	bf58      	it	pl
 8009abe:	6963      	ldrpl	r3, [r4, #20]
 8009ac0:	60a3      	str	r3, [r4, #8]
 8009ac2:	e7f4      	b.n	8009aae <__swsetup_r+0x92>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e7f7      	b.n	8009ab8 <__swsetup_r+0x9c>
 8009ac8:	20000068 	.word	0x20000068

08009acc <_raise_r>:
 8009acc:	291f      	cmp	r1, #31
 8009ace:	b538      	push	{r3, r4, r5, lr}
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	d904      	bls.n	8009ae0 <_raise_r+0x14>
 8009ad6:	2316      	movs	r3, #22
 8009ad8:	6003      	str	r3, [r0, #0]
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ae2:	b112      	cbz	r2, 8009aea <_raise_r+0x1e>
 8009ae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ae8:	b94b      	cbnz	r3, 8009afe <_raise_r+0x32>
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f830 	bl	8009b50 <_getpid_r>
 8009af0:	462a      	mov	r2, r5
 8009af2:	4601      	mov	r1, r0
 8009af4:	4620      	mov	r0, r4
 8009af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009afa:	f000 b817 	b.w	8009b2c <_kill_r>
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d00a      	beq.n	8009b18 <_raise_r+0x4c>
 8009b02:	1c59      	adds	r1, r3, #1
 8009b04:	d103      	bne.n	8009b0e <_raise_r+0x42>
 8009b06:	2316      	movs	r3, #22
 8009b08:	6003      	str	r3, [r0, #0]
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	e7e7      	b.n	8009ade <_raise_r+0x12>
 8009b0e:	2400      	movs	r4, #0
 8009b10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b14:	4628      	mov	r0, r5
 8009b16:	4798      	blx	r3
 8009b18:	2000      	movs	r0, #0
 8009b1a:	e7e0      	b.n	8009ade <_raise_r+0x12>

08009b1c <raise>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <raise+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f7ff bfd3 	b.w	8009acc <_raise_r>
 8009b26:	bf00      	nop
 8009b28:	20000068 	.word	0x20000068

08009b2c <_kill_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d07      	ldr	r5, [pc, #28]	; (8009b4c <_kill_r+0x20>)
 8009b30:	2300      	movs	r3, #0
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	4611      	mov	r1, r2
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	f7f8 f91f 	bl	8001d7c <_kill>
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	d102      	bne.n	8009b48 <_kill_r+0x1c>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	b103      	cbz	r3, 8009b48 <_kill_r+0x1c>
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	bd38      	pop	{r3, r4, r5, pc}
 8009b4a:	bf00      	nop
 8009b4c:	2000441c 	.word	0x2000441c

08009b50 <_getpid_r>:
 8009b50:	f7f8 b90c 	b.w	8001d6c <_getpid>

08009b54 <__swhatbuf_r>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	460c      	mov	r4, r1
 8009b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	b096      	sub	sp, #88	; 0x58
 8009b60:	4615      	mov	r5, r2
 8009b62:	461e      	mov	r6, r3
 8009b64:	da0d      	bge.n	8009b82 <__swhatbuf_r+0x2e>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b6c:	f04f 0100 	mov.w	r1, #0
 8009b70:	bf0c      	ite	eq
 8009b72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b76:	2340      	movne	r3, #64	; 0x40
 8009b78:	2000      	movs	r0, #0
 8009b7a:	6031      	str	r1, [r6, #0]
 8009b7c:	602b      	str	r3, [r5, #0]
 8009b7e:	b016      	add	sp, #88	; 0x58
 8009b80:	bd70      	pop	{r4, r5, r6, pc}
 8009b82:	466a      	mov	r2, sp
 8009b84:	f000 f848 	bl	8009c18 <_fstat_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	dbec      	blt.n	8009b66 <__swhatbuf_r+0x12>
 8009b8c:	9901      	ldr	r1, [sp, #4]
 8009b8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b96:	4259      	negs	r1, r3
 8009b98:	4159      	adcs	r1, r3
 8009b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b9e:	e7eb      	b.n	8009b78 <__swhatbuf_r+0x24>

08009ba0 <__smakebuf_r>:
 8009ba0:	898b      	ldrh	r3, [r1, #12]
 8009ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba4:	079d      	lsls	r5, r3, #30
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	d507      	bpl.n	8009bbc <__smakebuf_r+0x1c>
 8009bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	6123      	str	r3, [r4, #16]
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	6163      	str	r3, [r4, #20]
 8009bb8:	b002      	add	sp, #8
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	ab01      	add	r3, sp, #4
 8009bbe:	466a      	mov	r2, sp
 8009bc0:	f7ff ffc8 	bl	8009b54 <__swhatbuf_r>
 8009bc4:	9900      	ldr	r1, [sp, #0]
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7fe fecb 	bl	8008964 <_malloc_r>
 8009bce:	b948      	cbnz	r0, 8009be4 <__smakebuf_r+0x44>
 8009bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d4ef      	bmi.n	8009bb8 <__smakebuf_r+0x18>
 8009bd8:	f023 0303 	bic.w	r3, r3, #3
 8009bdc:	f043 0302 	orr.w	r3, r3, #2
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	e7e3      	b.n	8009bac <__smakebuf_r+0xc>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	6020      	str	r0, [r4, #0]
 8009be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	6163      	str	r3, [r4, #20]
 8009bf2:	9b01      	ldr	r3, [sp, #4]
 8009bf4:	6120      	str	r0, [r4, #16]
 8009bf6:	b15b      	cbz	r3, 8009c10 <__smakebuf_r+0x70>
 8009bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f000 f81d 	bl	8009c3c <_isatty_r>
 8009c02:	b128      	cbz	r0, 8009c10 <__smakebuf_r+0x70>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	431d      	orrs	r5, r3
 8009c14:	81a5      	strh	r5, [r4, #12]
 8009c16:	e7cf      	b.n	8009bb8 <__smakebuf_r+0x18>

08009c18 <_fstat_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d07      	ldr	r5, [pc, #28]	; (8009c38 <_fstat_r+0x20>)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	4611      	mov	r1, r2
 8009c24:	602b      	str	r3, [r5, #0]
 8009c26:	f7f8 f908 	bl	8001e3a <_fstat>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d102      	bne.n	8009c34 <_fstat_r+0x1c>
 8009c2e:	682b      	ldr	r3, [r5, #0]
 8009c30:	b103      	cbz	r3, 8009c34 <_fstat_r+0x1c>
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	bd38      	pop	{r3, r4, r5, pc}
 8009c36:	bf00      	nop
 8009c38:	2000441c 	.word	0x2000441c

08009c3c <_isatty_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d06      	ldr	r5, [pc, #24]	; (8009c58 <_isatty_r+0x1c>)
 8009c40:	2300      	movs	r3, #0
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	602b      	str	r3, [r5, #0]
 8009c48:	f7f8 f907 	bl	8001e5a <_isatty>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_isatty_r+0x1a>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_isatty_r+0x1a>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	2000441c 	.word	0x2000441c

08009c5c <_init>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	bf00      	nop
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr

08009c68 <_fini>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr
