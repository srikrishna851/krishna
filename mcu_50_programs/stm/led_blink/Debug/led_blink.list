
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003f8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003fc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003fc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001347  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004a7  00000000  00000000  000213be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013e  00000000  00000000  00021a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f65b  00000000  00000000  00021b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e4c  00000000  00000000  000411c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2cdb  00000000  00000000  00043015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000550  00000000  00000000  00105cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00106240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003d8 	.word	0x080003d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080003d8 	.word	0x080003d8

08000204 <main>:
#include "stm32f4xx.h"
void delayMs(int n);
int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
RCC->AHB1ENR |= 1; /* enable GPIOA clock */
 8000208:	4b13      	ldr	r3, [pc, #76]	; (8000258 <main+0x54>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a12      	ldr	r2, [pc, #72]	; (8000258 <main+0x54>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
GPIOA->MODER &= ~0x00000C00; /* clear pin mode */
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <main+0x58>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a10      	ldr	r2, [pc, #64]	; (800025c <main+0x58>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800021e:	6013      	str	r3, [r2, #0]
GPIOA->MODER |=
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0d      	ldr	r2, [pc, #52]	; (800025c <main+0x58>)
 8000226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022a:	6013      	str	r3, [r2, #0]
0x00000400; /* set pin to output mode */
while(1) {
GPIOA->ODR |= 0x00000020; /* turn on LED */
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x58>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <main+0x58>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6153      	str	r3, [r2, #20]
delayMs(500);
 8000238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800023c:	f000 f810 	bl	8000260 <delayMs>
GPIOA->ODR &= ~0x00000020; /* turn off LED */
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <main+0x58>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <main+0x58>)
 8000246:	f023 0320 	bic.w	r3, r3, #32
 800024a:	6153      	str	r3, [r2, #20]
delayMs(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000250:	f000 f806 	bl	8000260 <delayMs>
GPIOA->ODR |= 0x00000020; /* turn on LED */
 8000254:	e7ea      	b.n	800022c <main+0x28>
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40020000 	.word	0x40020000

08000260 <delayMs>:
}
}
/* 16 MHz SYSCLK */
void delayMs(int n) {
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
int i;
for (; n > 0; n--)
 8000268:	e00d      	b.n	8000286 <delayMs+0x26>
for (i = 0; i < 3195; i++) ; }
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	e002      	b.n	8000276 <delayMs+0x16>
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	3301      	adds	r3, #1
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	f640 427a 	movw	r2, #3194	; 0xc7a
 800027c:	4293      	cmp	r3, r2
 800027e:	ddf7      	ble.n	8000270 <delayMs+0x10>
for (; n > 0; n--)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3b01      	subs	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b00      	cmp	r3, #0
 800028a:	dcee      	bgt.n	800026a <delayMs+0xa>
for (i = 0; i < 3195; i++) ; }
 800028c:	bf00      	nop
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr

0800029a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800029e:	e7fe      	b.n	800029e <NMI_Handler+0x4>

080002a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <HardFault_Handler+0x4>

080002a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002aa:	e7fe      	b.n	80002aa <MemManage_Handler+0x4>

080002ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler+0x4>

080002b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <UsageFault_Handler+0x4>

080002b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr

080002c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e6:	f000 f83f 	bl	8000368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <SystemInit+0x20>)
 80002f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <SystemInit+0x20>)
 80002fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800034c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000330:	4c0b      	ldr	r4, [pc, #44]	; (8000360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800033e:	f7ff ffd7 	bl	80002f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000342:	f000 f825 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000346:	f7ff ff5d 	bl	8000204 <main>
  bx  lr    
 800034a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800034c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000358:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 800035c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000360:	20000024 	.word	0x20000024

08000364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_IncTick+0x20>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	461a      	mov	r2, r3
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <HAL_IncTick+0x24>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4413      	add	r3, r2
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_IncTick+0x24>)
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20000000 	.word	0x20000000
 800038c:	20000020 	.word	0x20000020

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	; (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	; (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	; (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
