
GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000600  08000600  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000600  08000600  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000600  08000600  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000608  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800060c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800060c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000152b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000566  00000000  00000000  000215a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00021b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000181  00000000  00000000  00021d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6c1  00000000  00000000  00021ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fae  00000000  00000000  0004156a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2e5f  00000000  00000000  00043518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006b0  00000000  00000000  00106378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00106a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800056c 	.word	0x0800056c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800056c 	.word	0x0800056c

08000204 <cmd1>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void cmd1(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	 uart_str_wr("AT\n\r");
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <cmd1+0x14>)
 800020a:	f000 f8f5 	bl	80003f8 <uart_str_wr>
	 delayMs();
 800020e:	f000 f857 	bl	80002c0 <delayMs>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	08000584 	.word	0x08000584

0800021c <cmd2>:

void cmd2(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

	uart_str_wr("AT+CMGF=1\n\r");
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <cmd2+0x14>)
 8000222:	f000 f8e9 	bl	80003f8 <uart_str_wr>
	delayMs();
 8000226:	f000 f84b 	bl	80002c0 <delayMs>

}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	0800058c 	.word	0x0800058c

08000234 <cmd3>:

void cmd3(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	uart_str_wr("AT+CMGL=\"ALL\"\n\r");
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <cmd3+0x14>)
 800023a:	f000 f8dd 	bl	80003f8 <uart_str_wr>
	delayMs();
 800023e:	f000 f83f 	bl	80002c0 <delayMs>

}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	08000598 	.word	0x08000598

0800024c <cmd4>:

void cmd4(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	uart_str_wr("AT+CSC====S=\"GSM\"\n\r");
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <cmd4+0x28>)
 8000252:	f000 f8d1 	bl	80003f8 <uart_str_wr>
	delayMs();
 8000256:	f000 f833 	bl	80002c0 <delayMs>
	uart_str_wr("AT+CMGS=\"6366035611\"\n\r");
 800025a:	4807      	ldr	r0, [pc, #28]	; (8000278 <cmd4+0x2c>)
 800025c:	f000 f8cc 	bl	80003f8 <uart_str_wr>
	delayMs();
 8000260:	f000 f82e 	bl	80002c0 <delayMs>
	uart_str_wr("HELLO FROM MANJU \x1A\n\r");
 8000264:	4805      	ldr	r0, [pc, #20]	; (800027c <cmd4+0x30>)
 8000266:	f000 f8c7 	bl	80003f8 <uart_str_wr>
	delayMs();
 800026a:	f000 f829 	bl	80002c0 <delayMs>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	080005a8 	.word	0x080005a8
 8000278:	080005bc 	.word	0x080005bc
 800027c:	080005d4 	.word	0x080005d4

08000280 <cmd5>:
void cmd5(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	uart_str_wr("ATD+916366035611;\n\r");
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <cmd5+0x14>)
 8000286:	f000 f8b7 	bl	80003f8 <uart_str_wr>
	delayMs();
 800028a:	f000 f819 	bl	80002c0 <delayMs>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	080005ec 	.word	0x080005ec

08000298 <main>:
	delayMs();
}*/


int main()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	delayMs();
 800029c:	f000 f810 	bl	80002c0 <delayMs>

	uart1_init();
 80002a0:	f000 f824 	bl	80002ec <uart1_init>
	cmd1();
 80002a4:	f7ff ffae 	bl	8000204 <cmd1>
	cmd5();
 80002a8:	f7ff ffea 	bl	8000280 <cmd5>
	cmd2();
 80002ac:	f7ff ffb6 	bl	800021c <cmd2>
	cmd3();
 80002b0:	f7ff ffc0 	bl	8000234 <cmd3>
	cmd4();
 80002b4:	f7ff ffca 	bl	800024c <cmd4>

    return 0;
 80002b8:	2300      	movs	r3, #0
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <delayMs>:

void delayMs(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1000000; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delayMs+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <delayMs+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	ddf8      	ble.n	80002cc <delayMs+0xc>
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	000f423f 	.word	0x000f423f

080002ec <uart1_init>:


void uart1_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

    /*Configure uart gpio pin**/
        /*Enable clock access to gpioa */
        RCC->AHB1ENR |= GPIOAEN;
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <uart1_init+0x80>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a1d      	ldr	r2, [pc, #116]	; (800036c <uart1_init+0x80>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30

        //Set PA9 mode to alternate function mode/
        GPIOA->MODER  |= PA9MOD;
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <uart1_init+0x84>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <uart1_init+0x84>)
 8000302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000306:	6013      	str	r3, [r2, #0]

        //Set PA10 mode to alternate function mode/
        GPIOA->MODER  |= PA10MOD;
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <uart1_init+0x84>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a18      	ldr	r2, [pc, #96]	; (8000370 <uart1_init+0x84>)
 800030e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000312:	6013      	str	r3, [r2, #0]

        //Set PA9 alternate function type to UART_TX (AF07)/
        GPIOA->AFR[1] |= PA9AF;
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <uart1_init+0x84>)
 8000316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000318:	4a15      	ldr	r2, [pc, #84]	; (8000370 <uart1_init+0x84>)
 800031a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800031e:	6253      	str	r3, [r2, #36]	; 0x24

        //Set PA10 alternate function type to UART_RX (AF07)/
        GPIOA->AFR[1] |= PA10AF;
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <uart1_init+0x84>)
 8000322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000324:	4a12      	ldr	r2, [pc, #72]	; (8000370 <uart1_init+0x84>)
 8000326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800032a:	6253      	str	r3, [r2, #36]	; 0x24

        /*Configure uart module **/
        /*Enable clock access to uart1 */
         RCC->APB2ENR |= APB2EN;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <uart1_init+0x80>)
 800032e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000330:	4a0e      	ldr	r2, [pc, #56]	; (800036c <uart1_init+0x80>)
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6453      	str	r3, [r2, #68]	; 0x44

        //Configure baudrate/
        uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 8000338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800033c:	490d      	ldr	r1, [pc, #52]	; (8000374 <uart1_init+0x88>)
 800033e:	480e      	ldr	r0, [pc, #56]	; (8000378 <uart1_init+0x8c>)
 8000340:	f000 f81c 	bl	800037c <uart_set_baudrate>

        //Configure the transfer direction/
        USART1->CR1 |= USART1_TX;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <uart1_init+0x8c>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <uart1_init+0x8c>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	60d3      	str	r3, [r2, #12]

        //Configure the transfer direction/
        USART1->CR1 |= USART1_RX;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <uart1_init+0x8c>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a08      	ldr	r2, [pc, #32]	; (8000378 <uart1_init+0x8c>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	60d3      	str	r3, [r2, #12]

        //Enable uart module/
        USART1->CR1 |= USART1EN;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <uart1_init+0x8c>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a05      	ldr	r2, [pc, #20]	; (8000378 <uart1_init+0x8c>)
 8000362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000366:	60d3      	str	r3, [r2, #12]

}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40023800 	.word	0x40023800
 8000370:	40020000 	.word	0x40020000
 8000374:	00f42400 	.word	0x00f42400
 8000378:	40011000 	.word	0x40011000

0800037c <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
    USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000388:	6879      	ldr	r1, [r7, #4]
 800038a:	68b8      	ldr	r0, [r7, #8]
 800038c:	f000 f808 	bl	80003a0 <compute_uart_bd>
 8000390:	4603      	mov	r3, r0
 8000392:	461a      	mov	r2, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	609a      	str	r2, [r3, #8]
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	085a      	lsrs	r2, r3, #1
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	441a      	add	r2, r3
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	b29b      	uxth	r3, r3
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <uart1_write>:
	return USART1->DR;
}


void uart1_write(int ch)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  //Make sure the transmit data register is empty/
	while(!(USART1->SR & SR_TXE)){}
 80003d0:	bf00      	nop
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <uart1_write+0x2c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <uart1_write+0xa>

  //Write to transmit data register/
	USART1->DR	=  (ch & 0xFF);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <uart1_write+0x2c>)
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	6053      	str	r3, [r2, #4]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40011000 	.word	0x40011000

080003f8 <uart_str_wr>:

void uart_str_wr(char *str)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	for(int i =0; str[i]!='\0';i++)
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e009      	b.n	800041a <uart_str_wr+0x22>
	{
		uart1_write(str[i]);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ffda 	bl	80003c8 <uart1_write>
	for(int i =0; str[i]!='\0';i++)
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	3301      	adds	r3, #1
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <uart_str_wr+0xe>
	}
}
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <NMI_Handler+0x4>

08000436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043a:	e7fe      	b.n	800043a <HardFault_Handler+0x4>

0800043c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <MemManage_Handler+0x4>

08000442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000446:	e7fe      	b.n	8000446 <BusFault_Handler+0x4>

08000448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044c:	e7fe      	b.n	800044c <UsageFault_Handler+0x4>

0800044e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047c:	f000 f83e 	bl	80004fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <SystemInit+0x20>)
 800048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <SystemInit+0x20>)
 8000490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004ac:	480d      	ldr	r0, [pc, #52]	; (80004e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004ae:	490e      	ldr	r1, [pc, #56]	; (80004e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004c4:	4c0b      	ldr	r4, [pc, #44]	; (80004f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004d2:	f7ff ffd7 	bl	8000484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004d6:	f000 f825 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004da:	f7ff fedd 	bl	8000298 <main>
  bx  lr    
 80004de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ec:	08000608 	.word	0x08000608
  ldr r2, =_sbss
 80004f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f4:	20000024 	.word	0x20000024

080004f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_IncTick+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_IncTick+0x24>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4413      	add	r3, r2
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_IncTick+0x24>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000020 	.word	0x20000020

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4d0d      	ldr	r5, [pc, #52]	; (800055c <__libc_init_array+0x38>)
 8000528:	4c0d      	ldr	r4, [pc, #52]	; (8000560 <__libc_init_array+0x3c>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	2600      	movs	r6, #0
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	4d0b      	ldr	r5, [pc, #44]	; (8000564 <__libc_init_array+0x40>)
 8000536:	4c0c      	ldr	r4, [pc, #48]	; (8000568 <__libc_init_array+0x44>)
 8000538:	f000 f818 	bl	800056c <_init>
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	2600      	movs	r6, #0
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000600 	.word	0x08000600
 8000560:	08000600 	.word	0x08000600
 8000564:	08000600 	.word	0x08000600
 8000568:	08000604 	.word	0x08000604

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
