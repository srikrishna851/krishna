
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b4  080005b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b4  080005b4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005b4  080005b4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b4  080005b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b4  080005b4  000105b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005b8  080005b8  000105b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005bc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005c0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005c0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001455  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050b  00000000  00000000  000214cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  000219d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014c  00000000  00000000  00021bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f661  00000000  00000000  00021cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f96  00000000  00000000  0004135d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d2f  00000000  00000000  000432f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000059c  00000000  00000000  00106024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001065c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800059c 	.word	0x0800059c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800059c 	.word	0x0800059c

08000204 <main>:
#define SLAVE_ADDR 0x68 /* 1101 000. DS1337 */
void delayMs(int n);
void I2C1_init(void);
int I2C1_byteRead(char saddr, char maddr, char* data); void
delayMs(int n);
int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
char data;
I2C1_init();
 800020a:	f000 f833 	bl	8000274 <I2C1_init>
/* configure PA5 for the green LED (LD2) */
RCC->AHB1ENR |= 1; /* enable GPIOA clock */
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <main+0x68>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000212:	4a16      	ldr	r2, [pc, #88]	; (800026c <main+0x68>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
GPIOA->MODER &=~0x00000C00; /* clear pin mode */
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <main+0x6c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a14      	ldr	r2, [pc, #80]	; (8000270 <main+0x6c>)
 8000220:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000224:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= 0x00000400; /* set
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <main+0x6c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <main+0x6c>)
 800022c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000230:	6013      	str	r3, [r2, #0]
pin to output mode */
while (1)
{
I2C1_byteRead(SLAVE_ADDR, 0, &data);
 8000232:	1dfb      	adds	r3, r7, #7
 8000234:	461a      	mov	r2, r3
 8000236:	2100      	movs	r1, #0
 8000238:	2068      	movs	r0, #104	; 0x68
 800023a:	f000 f877 	bl	800032c <I2C1_byteRead>

if (data & 1)
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 0301 	and.w	r3, r3, #1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d006      	beq.n	8000256 <main+0x52>
GPIOA->ODR |= 0x00000020; /* turn on LED */
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <main+0x6c>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a08      	ldr	r2, [pc, #32]	; (8000270 <main+0x6c>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	e005      	b.n	8000262 <main+0x5e>
else
GPIOA->ODR &= ~0x00000020; /* turn off LED */
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <main+0x6c>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <main+0x6c>)
 800025c:	f023 0320 	bic.w	r3, r3, #32
 8000260:	6153      	str	r3, [r2, #20]
delayMs(10); }
 8000262:	200a      	movs	r0, #10
 8000264:	f000 f8de 	bl	8000424 <delayMs>
I2C1_byteRead(SLAVE_ADDR, 0, &data);
 8000268:	e7e3      	b.n	8000232 <main+0x2e>
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000

08000274 <I2C1_init>:
}void I2C1_init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
RCC->AHB1ENR |= 2; /* Enable GPIOB clock */
 8000278:	4b29      	ldr	r3, [pc, #164]	; (8000320 <I2C1_init+0xac>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <I2C1_init+0xac>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6313      	str	r3, [r2, #48]	; 0x30
RCC->APB1ENR |=0x00200000; /* Enable I2C1 clock */
 8000284:	4b26      	ldr	r3, [pc, #152]	; (8000320 <I2C1_init+0xac>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000288:	4a25      	ldr	r2, [pc, #148]	; (8000320 <I2C1_init+0xac>)
 800028a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800028e:	6413      	str	r3, [r2, #64]	; 0x40
/* configure PB8, PB9 pins for I2C1 */
GPIOB->AFR[1] &= ~0x000000FF; /* PB8, PB9 I2C1 SCL, SDA */
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <I2C1_init+0xb0>)
 8000292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000294:	4a23      	ldr	r2, [pc, #140]	; (8000324 <I2C1_init+0xb0>)
 8000296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800029a:	6253      	str	r3, [r2, #36]	; 0x24
GPIOB->AFR[1] |= 0x00000044;
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <I2C1_init+0xb0>)
 800029e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <I2C1_init+0xb0>)
 80002a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80002a6:	6253      	str	r3, [r2, #36]	; 0x24
GPIOB->MODER &= ~0x000F0000; /* PB8, PB9 use alternate function */
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <I2C1_init+0xb0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <I2C1_init+0xb0>)
 80002ae:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80002b2:	6013      	str	r3, [r2, #0]
GPIOB->MODER |= 0x000A0000;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <I2C1_init+0xb0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1a      	ldr	r2, [pc, #104]	; (8000324 <I2C1_init+0xb0>)
 80002ba:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80002be:	6013      	str	r3, [r2, #0]
GPIOB->OTYPER |= 0x00000300; /* output open-drain */
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <I2C1_init+0xb0>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4a17      	ldr	r2, [pc, #92]	; (8000324 <I2C1_init+0xb0>)
 80002c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80002ca:	6053      	str	r3, [r2, #4]
GPIOB->PUPDR &=~0x000F0000; /* with pull-ups */
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <I2C1_init+0xb0>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <I2C1_init+0xb0>)
 80002d2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80002d6:	60d3      	str	r3, [r2, #12]
GPIOB->PUPDR |= 0x00050000;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <I2C1_init+0xb0>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <I2C1_init+0xb0>)
 80002de:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80002e2:	60d3      	str	r3, [r2, #12]
I2C1->CR1 = 0x8000; /* software reset I2C1 */
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <I2C1_init+0xb4>)
 80002e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002ea:	601a      	str	r2, [r3, #0]
I2C1->CR1 &= ~0x8000;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <I2C1_init+0xb4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <I2C1_init+0xb4>)
 80002f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002f6:	6013      	str	r3, [r2, #0]
/* out of reset */
I2C1->CR2 = 0x0010; /* peripheral clock is 16 MHz*/
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <I2C1_init+0xb4>)
 80002fa:	2210      	movs	r2, #16
 80002fc:	605a      	str	r2, [r3, #4]
 I2C1->CCR = 80; /* standard mode, 100kHz clock */
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <I2C1_init+0xb4>)
 8000300:	2250      	movs	r2, #80	; 0x50
 8000302:	61da      	str	r2, [r3, #28]
I2C1->TRISE =17; /* maximum rise time */
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <I2C1_init+0xb4>)
 8000306:	2211      	movs	r2, #17
 8000308:	621a      	str	r2, [r3, #32]
I2C1->CR1 |= 0x0001; /* enable I2C1
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <I2C1_init+0xb4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a06      	ldr	r2, [pc, #24]	; (8000328 <I2C1_init+0xb4>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6013      	str	r3, [r2, #0]
module */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40023800 	.word	0x40023800
 8000324:	40020400 	.word	0x40020400
 8000328:	40005400 	.word	0x40005400

0800032c <I2C1_byteRead>:
/* this funtion reads a byte of data from the memory location *
maddr of a device with I2C slave device address saddr. * For
simplicity, no error checking or error report is done. */
int I2C1_byteRead(char saddr, char maddr, char* data)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	603a      	str	r2, [r7, #0]
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	460b      	mov	r3, r1
 800033a:	71bb      	strb	r3, [r7, #6]
volatile int tmp;
	while (I2C1->SR2 & 2); /* wait until bus not busy */
 800033c:	bf00      	nop
 800033e:	4b38      	ldr	r3, [pc, #224]	; (8000420 <I2C1_byteRead+0xf4>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f9      	bne.n	800033e <I2C1_byteRead+0x12>
	I2C1->CR1 |= 0x100; /* generate start */
 800034a:	4b35      	ldr	r3, [pc, #212]	; (8000420 <I2C1_byteRead+0xf4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a34      	ldr	r2, [pc, #208]	; (8000420 <I2C1_byteRead+0xf4>)
 8000350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000354:	6013      	str	r3, [r2, #0]
while (!(I2C1->SR1 & 1));
 8000356:	bf00      	nop
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <I2C1_byteRead+0xf4>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <I2C1_byteRead+0x2c>
/* wait until start flag is set */
	I2C1->DR = saddr << 1; /* transmit slave address + Write */
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	005a      	lsls	r2, r3, #1
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <I2C1_byteRead+0xf4>)
 800036a:	611a      	str	r2, [r3, #16]
while (!
 800036c:	bf00      	nop
		(I2C1->SR1 & 2)); /* wait until addr flag is set */
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <I2C1_byteRead+0xf4>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f003 0302 	and.w	r3, r3, #2
while (!
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f9      	beq.n	800036e <I2C1_byteRead+0x42>
tmp = I2C1->SR2;
 800037a:	4b29      	ldr	r3, [pc, #164]	; (8000420 <I2C1_byteRead+0xf4>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	60fb      	str	r3, [r7, #12]
/* clear addr flag */
	while (!(I2C1->SR1 & 0x80)); /* wait until data register empty */
 8000380:	bf00      	nop
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <I2C1_byteRead+0xf4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <I2C1_byteRead+0x56>
I2C1->DR = maddr; /* send memory address */
 800038e:	4a24      	ldr	r2, [pc, #144]	; (8000420 <I2C1_byteRead+0xf4>)
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & 0x80)); /* wait until data register empty */
 8000394:	bf00      	nop
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <I2C1_byteRead+0xf4>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f9      	beq.n	8000396 <I2C1_byteRead+0x6a>
I2C1->CR1 |= 0x100; /* generate restart */
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <I2C1_byteRead+0xf4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <I2C1_byteRead+0xf4>)
 80003a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ac:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & 1));
 80003ae:	bf00      	nop
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <I2C1_byteRead+0xf4>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0f9      	beq.n	80003b0 <I2C1_byteRead+0x84>
/* wait until start flag is set */
	I2C1->DR = saddr << 1 | 1; /*
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	f043 0201 	orr.w	r2, r3, #1
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <I2C1_byteRead+0xf4>)
 80003c6:	611a      	str	r2, [r3, #16]
transmit slave address + Read */
while (!(I2C1->SR1 & 2)); /* wait until addr flag is set */
 80003c8:	bf00      	nop
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <I2C1_byteRead+0xf4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f003 0302 	and.w	r3, r3, #2
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f9      	beq.n	80003ca <I2C1_byteRead+0x9e>
	I2C1->CR1 &= ~0x400; /* Disable Acknowledge */
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <I2C1_byteRead+0xf4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a11      	ldr	r2, [pc, #68]	; (8000420 <I2C1_byteRead+0xf4>)
 80003dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003e0:	6013      	str	r3, [r2, #0]
tmp = I2C1->SR2; /* clear
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <I2C1_byteRead+0xf4>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	60fb      	str	r3, [r7, #12]
addr flag */
	I2C1->CR1 |= 0x200; /* generate stop after data received */
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <I2C1_byteRead+0xf4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <I2C1_byteRead+0xf4>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6013      	str	r3, [r2, #0]
while (!(I2C1->SR1 & 0x40)); /* Wait until RXNE flag is set */
 80003f4:	bf00      	nop
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <I2C1_byteRead+0xf4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f9      	beq.n	80003f6 <I2C1_byteRead+0xca>
	*data++ = I2C1->DR; /* Read data from DR */
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <I2C1_byteRead+0xf4>)
 8000404:	6919      	ldr	r1, [r3, #16]
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	603a      	str	r2, [r7, #0]
 800040c:	b2ca      	uxtb	r2, r1
 800040e:	701a      	strb	r2, [r3, #0]
	return 0; }/* 16 MHz SYSCLK */
 8000410:	2300      	movs	r3, #0
 8000412:	4618      	mov	r0, r3
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40005400 	.word	0x40005400

08000424 <delayMs>:
void delayMs(int n) {
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
int i;
for (; n > 0; n--)
 800042c:	e00d      	b.n	800044a <delayMs+0x26>
for (i = 0; i < 3195; i++) ;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	e002      	b.n	800043a <delayMs+0x16>
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000440:	4293      	cmp	r3, r2
 8000442:	ddf7      	ble.n	8000434 <delayMs+0x10>
for (; n > 0; n--)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	dcee      	bgt.n	800042e <delayMs+0xa>
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <NMI_Handler+0x4>

08000464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <HardFault_Handler+0x4>

0800046a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <MemManage_Handler+0x4>

08000470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <BusFault_Handler+0x4>

08000476 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <UsageFault_Handler+0x4>

0800047c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f000 f83f 	bl	800052c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <SystemInit+0x20>)
 80004ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <SystemInit+0x20>)
 80004c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000510 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004de:	490e      	ldr	r1, [pc, #56]	; (8000518 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004f4:	4c0b      	ldr	r4, [pc, #44]	; (8000524 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000502:	f7ff ffd7 	bl	80004b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f000 f825 	bl	8000554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050a:	f7ff fe7b 	bl	8000204 <main>
  bx  lr    
 800050e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800051c:	080005bc 	.word	0x080005bc
  ldr r2, =_sbss
 8000520:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000524:	20000024 	.word	0x20000024

08000528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20000020 	.word	0x20000020

08000554 <__libc_init_array>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	4d0d      	ldr	r5, [pc, #52]	; (800058c <__libc_init_array+0x38>)
 8000558:	4c0d      	ldr	r4, [pc, #52]	; (8000590 <__libc_init_array+0x3c>)
 800055a:	1b64      	subs	r4, r4, r5
 800055c:	10a4      	asrs	r4, r4, #2
 800055e:	2600      	movs	r6, #0
 8000560:	42a6      	cmp	r6, r4
 8000562:	d109      	bne.n	8000578 <__libc_init_array+0x24>
 8000564:	4d0b      	ldr	r5, [pc, #44]	; (8000594 <__libc_init_array+0x40>)
 8000566:	4c0c      	ldr	r4, [pc, #48]	; (8000598 <__libc_init_array+0x44>)
 8000568:	f000 f818 	bl	800059c <_init>
 800056c:	1b64      	subs	r4, r4, r5
 800056e:	10a4      	asrs	r4, r4, #2
 8000570:	2600      	movs	r6, #0
 8000572:	42a6      	cmp	r6, r4
 8000574:	d105      	bne.n	8000582 <__libc_init_array+0x2e>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f855 3b04 	ldr.w	r3, [r5], #4
 800057c:	4798      	blx	r3
 800057e:	3601      	adds	r6, #1
 8000580:	e7ee      	b.n	8000560 <__libc_init_array+0xc>
 8000582:	f855 3b04 	ldr.w	r3, [r5], #4
 8000586:	4798      	blx	r3
 8000588:	3601      	adds	r6, #1
 800058a:	e7f2      	b.n	8000572 <__libc_init_array+0x1e>
 800058c:	080005b4 	.word	0x080005b4
 8000590:	080005b4 	.word	0x080005b4
 8000594:	080005b4 	.word	0x080005b4
 8000598:	080005b8 	.word	0x080005b8

0800059c <_init>:
 800059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059e:	bf00      	nop
 80005a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a2:	bc08      	pop	{r3}
 80005a4:	469e      	mov	lr, r3
 80005a6:	4770      	bx	lr

080005a8 <_fini>:
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	bf00      	nop
 80005ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ae:	bc08      	pop	{r3}
 80005b0:	469e      	mov	lr, r3
 80005b2:	4770      	bx	lr
