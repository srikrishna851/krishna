
RFID_string.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004c8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004cc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004cc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001441  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000052c  00000000  00000000  000214b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000219e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000151  00000000  00000000  00021bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f661  00000000  00000000  00021d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001eeb  00000000  00000000  0004137a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d4c  00000000  00000000  00043265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005b8  00000000  00000000  00105fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0010656c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a8 	.word	0x080004a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004a8 	.word	0x080004a8

08000204 <main>:
void usart1_write(int ch);
char usart1_read(void);
void usart1_read_string(char *buffer, int buffer_size);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b08e      	sub	sp, #56	; 0x38
 8000208:	af00      	add	r7, sp, #0
    char rfid_buffer[RFID_BUFFER_SIZE];
    usart1_init();
 800020a:	f000 f807 	bl	800021c <usart1_init>

    while (1) {
        usart1_read_string(rfid_buffer, RFID_BUFFER_SIZE);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2132      	movs	r1, #50	; 0x32
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f872 	bl	80002fc <usart1_read_string>
 8000218:	e7f9      	b.n	800020e <main+0xa>
	...

0800021c <usart1_init>:

    }
}

void usart1_init(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
    // Same as before...
		RCC->AHB1ENR |= 1;
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <usart1_init+0x7c>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000224:	4a1c      	ldr	r2, [pc, #112]	; (8000298 <usart1_init+0x7c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->APB2ENR |= 0x00000010;
 800022c:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <usart1_init+0x7c>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000230:	4a19      	ldr	r2, [pc, #100]	; (8000298 <usart1_init+0x7c>)
 8000232:	f043 0310 	orr.w	r3, r3, #16
 8000236:	6453      	str	r3, [r2, #68]	; 0x44
		GPIOA->MODER &= ~0x003C0000;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <usart1_init+0x80>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a17      	ldr	r2, [pc, #92]	; (800029c <usart1_init+0x80>)
 800023e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000242:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x00280000;
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <usart1_init+0x80>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a14      	ldr	r2, [pc, #80]	; (800029c <usart1_init+0x80>)
 800024a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800024e:	6013      	str	r3, [r2, #0]
		GPIOA->AFR[1] &= ~0x0FF0;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <usart1_init+0x80>)
 8000252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <usart1_init+0x80>)
 8000256:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800025a:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1] |= 0x0770 ; /* alt8 for UART1 */
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <usart1_init+0x80>)
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <usart1_init+0x80>)
 8000262:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000266:	6253      	str	r3, [r2, #36]	; 0x24
		USART1->BRR = 0x0683; /* 9600 baud @ 16 MHz */
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <usart1_init+0x84>)
 800026a:	f240 6283 	movw	r2, #1667	; 0x683
 800026e:	609a      	str	r2, [r3, #8]
		USART1->CR1 = 0x000C;/* enable Tx, Rx, 8-bit data */
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <usart1_init+0x84>)
 8000272:	220c      	movs	r2, #12
 8000274:	60da      	str	r2, [r3, #12]
		USART1->CR2 = 0x0000; /* 1 stop bit*/
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <usart1_init+0x84>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
		USART1->CR3 = 0x0000; /* no flow control */
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <usart1_init+0x84>)
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
		USART1->CR1 |= 0x2000; /*enable UART1 */
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <usart1_init+0x84>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <usart1_init+0x84>)
 8000288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028c:	60d3      	str	r3, [r2, #12]

}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000
 80002a0:	40011000 	.word	0x40011000

080002a4 <usart1_write>:

void usart1_write(int ch)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    // Same as before...
    while (!(USART1->SR & 0x0080)) {} // wait until Tx buffer empty
 80002ac:	bf00      	nop
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <usart1_write+0x2c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f9      	beq.n	80002ae <usart1_write+0xa>
    USART1->DR = (ch & 0xFF);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <usart1_write+0x2c>)
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	6053      	str	r3, [r2, #4]
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40011000 	.word	0x40011000

080002d4 <usart1_read>:

char usart1_read(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
    while (!(USART1->SR & 0x0020)) {} // wait until char arrives
 80002d8:	bf00      	nop
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <usart1_read+0x24>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0320 	and.w	r3, r3, #32
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <usart1_read+0x6>
    return USART1->DR;
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <usart1_read+0x24>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	b2db      	uxtb	r3, r3
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40011000 	.word	0x40011000

080002fc <usart1_read_string>:

void usart1_read_string(char *buffer, int buffer_size)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
    int i = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
    char c;

    // Read characters until the buffer is full or the termination character is received
    while (i < buffer_size - 1) { // Leave space for the null terminator
 800030a:	e01b      	b.n	8000344 <usart1_read_string+0x48>
        c = usart1_read();
 800030c:	f7ff ffe2 	bl	80002d4 <usart1_read>
 8000310:	4603      	mov	r3, r0
 8000312:	72fb      	strb	r3, [r7, #11]
        usart1_write(c); // Echo back the received character
 8000314:	7afb      	ldrb	r3, [r7, #11]
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ffc4 	bl	80002a4 <usart1_write>

        if (c == '\r' || c == '\n') { // Termination character received
 800031c:	7afb      	ldrb	r3, [r7, #11]
 800031e:	2b0d      	cmp	r3, #13
 8000320:	d002      	beq.n	8000328 <usart1_read_string+0x2c>
 8000322:	7afb      	ldrb	r3, [r7, #11]
 8000324:	2b0a      	cmp	r3, #10
 8000326:	d105      	bne.n	8000334 <usart1_read_string+0x38>
            buffer[i] = '\0'; // Null-terminate the string
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4413      	add	r3, r2
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
            break;
 8000332:	e00c      	b.n	800034e <usart1_read_string+0x52>
        } else {
            buffer[i] = c;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	7afa      	ldrb	r2, [r7, #11]
 800033c:	701a      	strb	r2, [r3, #0]
            i++;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3301      	adds	r3, #1
 8000342:	60fb      	str	r3, [r7, #12]
    while (i < buffer_size - 1) { // Leave space for the null terminator
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	3b01      	subs	r3, #1
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	429a      	cmp	r2, r3
 800034c:	dbde      	blt.n	800030c <usart1_read_string+0x10>
        }
    }

    // If the buffer is full, ensure null termination
    if (i == buffer_size - 1) {
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3b01      	subs	r3, #1
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	d104      	bne.n	8000362 <usart1_read_string+0x66>
        buffer[i] = '\0';
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
    }
}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800036e:	e7fe      	b.n	800036e <NMI_Handler+0x4>

08000370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <HardFault_Handler+0x4>

08000376 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <MemManage_Handler+0x4>

0800037c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <BusFault_Handler+0x4>

08000382 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <UsageFault_Handler+0x4>

08000388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b6:	f000 f83f 	bl	8000438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <SystemInit+0x20>)
 80003c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <SystemInit+0x20>)
 80003cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800041c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003ea:	490e      	ldr	r1, [pc, #56]	; (8000424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0b      	ldr	r2, [pc, #44]	; (800042c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000400:	4c0b      	ldr	r4, [pc, #44]	; (8000430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800040e:	f7ff ffd7 	bl	80003c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000412:	f000 f825 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000416:	f7ff fef5 	bl	8000204 <main>
  bx  lr    
 800041a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800041c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000428:	080004c8 	.word	0x080004c8
  ldr r2, =_sbss
 800042c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000430:	20000024 	.word	0x20000024

08000434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC_IRQHandler>
	...

08000438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_IncTick+0x20>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_IncTick+0x24>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4413      	add	r3, r2
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_IncTick+0x24>)
 800044a:	6013      	str	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000000 	.word	0x20000000
 800045c:	20000020 	.word	0x20000020

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	4d0d      	ldr	r5, [pc, #52]	; (8000498 <__libc_init_array+0x38>)
 8000464:	4c0d      	ldr	r4, [pc, #52]	; (800049c <__libc_init_array+0x3c>)
 8000466:	1b64      	subs	r4, r4, r5
 8000468:	10a4      	asrs	r4, r4, #2
 800046a:	2600      	movs	r6, #0
 800046c:	42a6      	cmp	r6, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	4d0b      	ldr	r5, [pc, #44]	; (80004a0 <__libc_init_array+0x40>)
 8000472:	4c0c      	ldr	r4, [pc, #48]	; (80004a4 <__libc_init_array+0x44>)
 8000474:	f000 f818 	bl	80004a8 <_init>
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	10a4      	asrs	r4, r4, #2
 800047c:	2600      	movs	r6, #0
 800047e:	42a6      	cmp	r6, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	f855 3b04 	ldr.w	r3, [r5], #4
 8000488:	4798      	blx	r3
 800048a:	3601      	adds	r6, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000492:	4798      	blx	r3
 8000494:	3601      	adds	r6, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004c0 	.word	0x080004c0
 800049c:	080004c0 	.word	0x080004c0
 80004a0:	080004c0 	.word	0x080004c0
 80004a4:	080004c4 	.word	0x080004c4

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
