
free_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  08005048  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  08005048  000249d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011af4  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a37  00000000  00000000  00031b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  000345b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b36  00000000  00000000  00035448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002992  00000000  00000000  00035f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104cd  00000000  00000000  00038910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e91  00000000  00000000  00048ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c24  00000000  00000000  0011ac70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011e894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f10 	.word	0x08004f10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004f10 	.word	0x08004f10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fa8a 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f834 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8ca 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f89e 	bl	800066c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f001 ff66 	bl	8002400 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of NormalTask */
  NormalTaskHandle = osThreadNew(StartDefaultTask, NULL, &NormalTask_attributes);
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <main+0x50>)
 8000536:	2100      	movs	r1, #0
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <main+0x54>)
 800053a:	f001 ffab 	bl	8002494 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <main+0x58>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of HighTask02 */
  HighTask02Handle = osThreadNew(StartTask02, NULL, &HighTask02_attributes);
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <main+0x5c>)
 8000546:	2100      	movs	r1, #0
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <main+0x60>)
 800054a:	f001 ffa3 	bl	8002494 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <main+0x64>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of LowTask03 */
  LowTask03Handle = osThreadNew(StartTask03, NULL, &LowTask03_attributes);
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <main+0x68>)
 8000556:	2100      	movs	r1, #0
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <main+0x6c>)
 800055a:	f001 ff9b 	bl	8002494 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0a      	ldr	r2, [pc, #40]	; (800058c <main+0x70>)
 8000562:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000564:	f001 ff70 	bl	8002448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	e7fe      	b.n	8000568 <main+0x4c>
 800056a:	bf00      	nop
 800056c:	08004fa4 	.word	0x08004fa4
 8000570:	0800079d 	.word	0x0800079d
 8000574:	20000070 	.word	0x20000070
 8000578:	08004fc8 	.word	0x08004fc8
 800057c:	080007e5 	.word	0x080007e5
 8000580:	20000074 	.word	0x20000074
 8000584:	08004fec 	.word	0x08004fec
 8000588:	08000835 	.word	0x08000835
 800058c:	20000078 	.word	0x20000078

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	; 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fc7c 	bl	8004e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a29      	ldr	r2, [pc, #164]	; (8000664 <SystemClock_Config+0xd4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xd8>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f85a 	bl	80016d8 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062a:	f000 f92b 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fcfa 	bl	8001044 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000656:	f000 f915 	bl	8000884 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART2_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f001 fab6 	bl	8001c14 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f8e9 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xd4>)
 800074c:	f000 fc60 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000768:	f000 fabe 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076c:	2320      	movs	r3, #32
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000784:	f000 fab0 	bl	8000ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	40020800 	.word	0x40020800

0800079c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *arg1="entering normal task\n";
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <StartDefaultTask+0x40>)
 80007a6:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2,(uint8_t*)arg1,strlen(arg1),100);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fd31 	bl	8000210 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	68f9      	ldr	r1, [r7, #12]
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <StartDefaultTask+0x44>)
 80007b8:	f001 fa79 	bl	8001cae <HAL_UART_Transmit>
	  char *arg2="entering normal task\n";
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <StartDefaultTask+0x40>)
 80007be:	60bb      	str	r3, [r7, #8]
	  HAL_UART_Transmit(&huart2,(uint8_t*)arg2,strlen(arg2),100);
 80007c0:	68b8      	ldr	r0, [r7, #8]
 80007c2:	f7ff fd25 	bl	8000210 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	2364      	movs	r3, #100	; 0x64
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <StartDefaultTask+0x44>)
 80007d0:	f001 fa6d 	bl	8001cae <HAL_UART_Transmit>
    osDelay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 feef 	bl	80025b8 <osDelay>
  {
 80007da:	e7e3      	b.n	80007a4 <StartDefaultTask+0x8>
 80007dc:	08004f4c 	.word	0x08004f4c
 80007e0:	2000002c 	.word	0x2000002c

080007e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  char *arg1="entering high task\n";
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <StartTask02+0x48>)
 80007ee:	60fb      	str	r3, [r7, #12]
	  	  HAL_UART_Transmit(&huart2,(uint8_t*)arg1,strlen(arg1),100);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f7ff fd0d 	bl	8000210 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	68f9      	ldr	r1, [r7, #12]
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <StartTask02+0x4c>)
 8000800:	f001 fa55 	bl	8001cae <HAL_UART_Transmit>
	  	  char *arg2="entering high task\n";
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <StartTask02+0x48>)
 8000806:	60bb      	str	r3, [r7, #8]
	  	  HAL_UART_Transmit(&huart2,(uint8_t*)arg2,strlen(arg2),100);
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f7ff fd01 	bl	8000210 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <StartTask02+0x4c>)
 8000818:	f001 fa49 	bl	8001cae <HAL_UART_Transmit>
	      osDelay(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f001 fecb 	bl	80025b8 <osDelay>
    osDelay(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f001 fec8 	bl	80025b8 <osDelay>
  {
 8000828:	e7e0      	b.n	80007ec <StartTask02+0x8>
 800082a:	bf00      	nop
 800082c:	08004f64 	.word	0x08004f64
 8000830:	2000002c 	.word	0x2000002c

08000834 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  char *arg1="entering low task\n";
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <StartTask03+0x48>)
 800083e:	60fb      	str	r3, [r7, #12]
	  	  HAL_UART_Transmit(&huart2,(uint8_t*)arg1,strlen(arg1),100);
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fce5 	bl	8000210 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	68f9      	ldr	r1, [r7, #12]
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <StartTask03+0x4c>)
 8000850:	f001 fa2d 	bl	8001cae <HAL_UART_Transmit>
	  	  char *arg2="entering low task\n";
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <StartTask03+0x48>)
 8000856:	60bb      	str	r3, [r7, #8]
	  	  HAL_UART_Transmit(&huart2,(uint8_t*)arg2,strlen(arg2),100);
 8000858:	68b8      	ldr	r0, [r7, #8]
 800085a:	f7ff fcd9 	bl	8000210 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29a      	uxth	r2, r3
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <StartTask03+0x4c>)
 8000868:	f001 fa21 	bl	8001cae <HAL_UART_Transmit>
	      osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f001 fea3 	bl	80025b8 <osDelay>
    osDelay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f001 fea0 	bl	80025b8 <osDelay>
  {
 8000878:	e7e0      	b.n	800083c <StartTask03+0x8>
 800087a:	bf00      	nop
 800087c:	08004f78 	.word	0x08004f78
 8000880:	2000002c 	.word	0x2000002c

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_MspInit+0x54>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x54>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_MspInit+0x54>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_MspInit+0x54>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 f9de 	bl	8000c96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12b      	bne.n	8000962 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0x8c>)
 800095e:	f000 f9c3 	bl	8000ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f898 	bl	8000adc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ac:	f003 fa12 	bl	8003dd4 <xTaskGetSchedulerState>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d001      	beq.n	80009ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009b6:	f003 fff7 	bl	80049a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f004 fa4b 	bl	8004eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd81 	bl	800051c <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a28:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8000a2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a30:	200049d0 	.word	0x200049d0

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f90d 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff ff10 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f917 	bl	8000cce <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab8:	f000 f8ed 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	2000007c 	.word	0x2000007c

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000007c 	.word	0x2000007c

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff5c 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffb0 	bl	8000c3c <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e165      	b.n	8000fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8154 	bne.w	8000fca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d005      	beq.n	8000d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d130      	bne.n	8000d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d017      	beq.n	8000dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d123      	bne.n	8000e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	69b9      	ldr	r1, [r7, #24]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0203 	and.w	r2, r3, #3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80ae 	beq.w	8000fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a5c      	ldr	r2, [pc, #368]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	4a58      	ldr	r2, [pc, #352]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x308>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d025      	beq.n	8000f02 <HAL_GPIO_Init+0x21a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01f      	beq.n	8000efe <HAL_GPIO_Init+0x216>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4d      	ldr	r2, [pc, #308]	; (8000ff8 <HAL_GPIO_Init+0x310>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0x212>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4c      	ldr	r2, [pc, #304]	; (8000ffc <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0x20e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_GPIO_Init+0x20a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d007      	beq.n	8000eee <HAL_GPIO_Init+0x206>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x320>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_GPIO_Init+0x202>
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	e00c      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000eea:	2307      	movs	r3, #7
 8000eec:	e00a      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000f02:	2300      	movs	r3, #0
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_GPIO_Init+0x324>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_GPIO_Init+0x324>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f67f ae96 	bls.w	8000d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40021400 	.word	0x40021400
 8001008:	40021800 	.word	0x40021800
 800100c:	40013c00 	.word	0x40013c00

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0cc      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d90c      	bls.n	8001080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800106e:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0b8      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a58      	ldr	r2, [pc, #352]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	494d      	ldr	r1, [pc, #308]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d044      	beq.n	8001164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d119      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e07f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e06f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e067      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f023 0203 	bic.w	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4934      	ldr	r1, [pc, #208]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fce6 	bl	8000b04 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	e00a      	b.n	8001152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff fce2 	bl	8000b04 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e04f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 020c 	and.w	r2, r3, #12
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d1eb      	bne.n	800113c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d20c      	bcs.n	800118c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e032      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	4916      	ldr	r1, [pc, #88]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	490e      	ldr	r1, [pc, #56]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ca:	f000 f855 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	490a      	ldr	r1, [pc, #40]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	5ccb      	ldrb	r3, [r1, r3]
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fc46 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00
 8001200:	40023800 	.word	0x40023800
 8001204:	08005010 	.word	0x08005010
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_RCC_GetHCLKFreq+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000

08001228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800122c:	f7ff fff0 	bl	8001210 <HAL_RCC_GetHCLKFreq>
 8001230:	4602      	mov	r2, r0
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	0a9b      	lsrs	r3, r3, #10
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	4903      	ldr	r1, [pc, #12]	; (800124c <HAL_RCC_GetPCLK1Freq+0x24>)
 800123e:	5ccb      	ldrb	r3, [r1, r3]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	08005020 	.word	0x08005020

08001250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001254:	f7ff ffdc 	bl	8001210 <HAL_RCC_GetHCLKFreq>
 8001258:	4602      	mov	r2, r0
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	0b5b      	lsrs	r3, r3, #13
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	4903      	ldr	r1, [pc, #12]	; (8001274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001266:	5ccb      	ldrb	r3, [r1, r3]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800126c:	4618      	mov	r0, r3
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	08005020 	.word	0x08005020

08001278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800127c:	b0ae      	sub	sp, #184	; 0xb8
 800127e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800129e:	4bcb      	ldr	r3, [pc, #812]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	f200 8206 	bhi.w	80016b8 <HAL_RCC_GetSysClockFreq+0x440>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012e9 	.word	0x080012e9
 80012b8:	080016b9 	.word	0x080016b9
 80012bc:	080016b9 	.word	0x080016b9
 80012c0:	080016b9 	.word	0x080016b9
 80012c4:	080012f1 	.word	0x080012f1
 80012c8:	080016b9 	.word	0x080016b9
 80012cc:	080016b9 	.word	0x080016b9
 80012d0:	080016b9 	.word	0x080016b9
 80012d4:	080012f9 	.word	0x080012f9
 80012d8:	080016b9 	.word	0x080016b9
 80012dc:	080016b9 	.word	0x080016b9
 80012e0:	080016b9 	.word	0x080016b9
 80012e4:	080014e9 	.word	0x080014e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012e8:	4bb9      	ldr	r3, [pc, #740]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80012ee:	e1e7      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012f0:	4bb8      	ldr	r3, [pc, #736]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012f6:	e1e3      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f8:	4bb4      	ldr	r3, [pc, #720]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001304:	4bb1      	ldr	r3, [pc, #708]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d071      	beq.n	80013f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001310:	4bae      	ldr	r3, [pc, #696]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	099b      	lsrs	r3, r3, #6
 8001316:	2200      	movs	r2, #0
 8001318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800131c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001336:	4622      	mov	r2, r4
 8001338:	462b      	mov	r3, r5
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	0159      	lsls	r1, r3, #5
 8001344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001348:	0150      	lsls	r0, r2, #5
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4621      	mov	r1, r4
 8001350:	1a51      	subs	r1, r2, r1
 8001352:	6439      	str	r1, [r7, #64]	; 0x40
 8001354:	4629      	mov	r1, r5
 8001356:	eb63 0301 	sbc.w	r3, r3, r1
 800135a:	647b      	str	r3, [r7, #68]	; 0x44
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001368:	4649      	mov	r1, r9
 800136a:	018b      	lsls	r3, r1, #6
 800136c:	4641      	mov	r1, r8
 800136e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001372:	4641      	mov	r1, r8
 8001374:	018a      	lsls	r2, r1, #6
 8001376:	4641      	mov	r1, r8
 8001378:	1a51      	subs	r1, r2, r1
 800137a:	63b9      	str	r1, [r7, #56]	; 0x38
 800137c:	4649      	mov	r1, r9
 800137e:	eb63 0301 	sbc.w	r3, r3, r1
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001390:	4649      	mov	r1, r9
 8001392:	00cb      	lsls	r3, r1, #3
 8001394:	4641      	mov	r1, r8
 8001396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800139a:	4641      	mov	r1, r8
 800139c:	00ca      	lsls	r2, r1, #3
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	4622      	mov	r2, r4
 80013a6:	189b      	adds	r3, r3, r2
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
 80013aa:	462b      	mov	r3, r5
 80013ac:	460a      	mov	r2, r1
 80013ae:	eb42 0303 	adc.w	r3, r2, r3
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013c0:	4629      	mov	r1, r5
 80013c2:	024b      	lsls	r3, r1, #9
 80013c4:	4621      	mov	r1, r4
 80013c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013ca:	4621      	mov	r1, r4
 80013cc:	024a      	lsls	r2, r1, #9
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013d6:	2200      	movs	r2, #0
 80013d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80013e4:	f7fe ff1c 	bl	8000220 <__aeabi_uldivmod>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4613      	mov	r3, r2
 80013ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013f2:	e067      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f4:	4b75      	ldr	r3, [pc, #468]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	2200      	movs	r2, #0
 80013fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001400:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800140c:	67bb      	str	r3, [r7, #120]	; 0x78
 800140e:	2300      	movs	r3, #0
 8001410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001412:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001416:	4622      	mov	r2, r4
 8001418:	462b      	mov	r3, r5
 800141a:	f04f 0000 	mov.w	r0, #0
 800141e:	f04f 0100 	mov.w	r1, #0
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001428:	0150      	lsls	r0, r2, #5
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4621      	mov	r1, r4
 8001430:	1a51      	subs	r1, r2, r1
 8001432:	62b9      	str	r1, [r7, #40]	; 0x28
 8001434:	4629      	mov	r1, r5
 8001436:	eb63 0301 	sbc.w	r3, r3, r1
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001448:	4649      	mov	r1, r9
 800144a:	018b      	lsls	r3, r1, #6
 800144c:	4641      	mov	r1, r8
 800144e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001452:	4641      	mov	r1, r8
 8001454:	018a      	lsls	r2, r1, #6
 8001456:	4641      	mov	r1, r8
 8001458:	ebb2 0a01 	subs.w	sl, r2, r1
 800145c:	4649      	mov	r1, r9
 800145e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800146e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001476:	4692      	mov	sl, r2
 8001478:	469b      	mov	fp, r3
 800147a:	4623      	mov	r3, r4
 800147c:	eb1a 0303 	adds.w	r3, sl, r3
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	462b      	mov	r3, r5
 8001484:	eb4b 0303 	adc.w	r3, fp, r3
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001496:	4629      	mov	r1, r5
 8001498:	028b      	lsls	r3, r1, #10
 800149a:	4621      	mov	r1, r4
 800149c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014a0:	4621      	mov	r1, r4
 80014a2:	028a      	lsls	r2, r1, #10
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014ac:	2200      	movs	r2, #0
 80014ae:	673b      	str	r3, [r7, #112]	; 0x70
 80014b0:	677a      	str	r2, [r7, #116]	; 0x74
 80014b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014b6:	f7fe feb3 	bl	8000220 <__aeabi_uldivmod>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4613      	mov	r3, r2
 80014c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	3301      	adds	r3, #1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80014d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014e6:	e0eb      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e8:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d06b      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001500:	4b32      	ldr	r3, [pc, #200]	; (80015cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	2200      	movs	r2, #0
 8001508:	66bb      	str	r3, [r7, #104]	; 0x68
 800150a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800150c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800150e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001512:	663b      	str	r3, [r7, #96]	; 0x60
 8001514:	2300      	movs	r3, #0
 8001516:	667b      	str	r3, [r7, #100]	; 0x64
 8001518:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800151c:	4622      	mov	r2, r4
 800151e:	462b      	mov	r3, r5
 8001520:	f04f 0000 	mov.w	r0, #0
 8001524:	f04f 0100 	mov.w	r1, #0
 8001528:	0159      	lsls	r1, r3, #5
 800152a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800152e:	0150      	lsls	r0, r2, #5
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4621      	mov	r1, r4
 8001536:	1a51      	subs	r1, r2, r1
 8001538:	61b9      	str	r1, [r7, #24]
 800153a:	4629      	mov	r1, r5
 800153c:	eb63 0301 	sbc.w	r3, r3, r1
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800154e:	4659      	mov	r1, fp
 8001550:	018b      	lsls	r3, r1, #6
 8001552:	4651      	mov	r1, sl
 8001554:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001558:	4651      	mov	r1, sl
 800155a:	018a      	lsls	r2, r1, #6
 800155c:	4651      	mov	r1, sl
 800155e:	ebb2 0801 	subs.w	r8, r2, r1
 8001562:	4659      	mov	r1, fp
 8001564:	eb63 0901 	sbc.w	r9, r3, r1
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800157c:	4690      	mov	r8, r2
 800157e:	4699      	mov	r9, r3
 8001580:	4623      	mov	r3, r4
 8001582:	eb18 0303 	adds.w	r3, r8, r3
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	462b      	mov	r3, r5
 800158a:	eb49 0303 	adc.w	r3, r9, r3
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800159c:	4629      	mov	r1, r5
 800159e:	024b      	lsls	r3, r1, #9
 80015a0:	4621      	mov	r1, r4
 80015a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015a6:	4621      	mov	r1, r4
 80015a8:	024a      	lsls	r2, r1, #9
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b2:	2200      	movs	r2, #0
 80015b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80015b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015bc:	f7fe fe30 	bl	8000220 <__aeabi_uldivmod>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4613      	mov	r3, r2
 80015c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015ca:	e065      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x420>
 80015cc:	40023800 	.word	0x40023800
 80015d0:	00f42400 	.word	0x00f42400
 80015d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	2200      	movs	r2, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	4611      	mov	r1, r2
 80015e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015e8:	653b      	str	r3, [r7, #80]	; 0x50
 80015ea:	2300      	movs	r3, #0
 80015ec:	657b      	str	r3, [r7, #84]	; 0x54
 80015ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80015f2:	4642      	mov	r2, r8
 80015f4:	464b      	mov	r3, r9
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	0159      	lsls	r1, r3, #5
 8001600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001604:	0150      	lsls	r0, r2, #5
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4641      	mov	r1, r8
 800160c:	1a51      	subs	r1, r2, r1
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	4649      	mov	r1, r9
 8001612:	eb63 0301 	sbc.w	r3, r3, r1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001624:	4659      	mov	r1, fp
 8001626:	018b      	lsls	r3, r1, #6
 8001628:	4651      	mov	r1, sl
 800162a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800162e:	4651      	mov	r1, sl
 8001630:	018a      	lsls	r2, r1, #6
 8001632:	4651      	mov	r1, sl
 8001634:	1a54      	subs	r4, r2, r1
 8001636:	4659      	mov	r1, fp
 8001638:	eb63 0501 	sbc.w	r5, r3, r1
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	00eb      	lsls	r3, r5, #3
 8001646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800164a:	00e2      	lsls	r2, r4, #3
 800164c:	4614      	mov	r4, r2
 800164e:	461d      	mov	r5, r3
 8001650:	4643      	mov	r3, r8
 8001652:	18e3      	adds	r3, r4, r3
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	464b      	mov	r3, r9
 8001658:	eb45 0303 	adc.w	r3, r5, r3
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800166a:	4629      	mov	r1, r5
 800166c:	028b      	lsls	r3, r1, #10
 800166e:	4621      	mov	r1, r4
 8001670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001674:	4621      	mov	r1, r4
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001680:	2200      	movs	r2, #0
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
 8001684:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800168a:	f7fe fdc9 	bl	8000220 <__aeabi_uldivmod>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4613      	mov	r3, r2
 8001694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	0f1b      	lsrs	r3, r3, #28
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80016a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016b6:	e003      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	37b8      	adds	r7, #184	; 0xb8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	00f42400 	.word	0x00f42400

080016d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e28d      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8083 	beq.w	80017fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016f8:	4b94      	ldr	r3, [pc, #592]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b04      	cmp	r3, #4
 8001702:	d019      	beq.n	8001738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001704:	4b91      	ldr	r3, [pc, #580]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800170c:	2b08      	cmp	r3, #8
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001710:	4b8e      	ldr	r3, [pc, #568]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800171c:	d00c      	beq.n	8001738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d112      	bne.n	8001750 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001736:	d10b      	bne.n	8001750 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d05b      	beq.n	80017fc <HAL_RCC_OscConfig+0x124>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d157      	bne.n	80017fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e25a      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x90>
 800175a:	4b7c      	ldr	r3, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7b      	ldr	r2, [pc, #492]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xcc>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xb4>
 8001772:	4b76      	ldr	r3, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a75      	ldr	r2, [pc, #468]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b73      	ldr	r3, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a72      	ldr	r2, [pc, #456]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xcc>
 800178c:	4b6f      	ldr	r3, [pc, #444]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6e      	ldr	r2, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b6c      	ldr	r3, [pc, #432]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6b      	ldr	r2, [pc, #428]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff f9aa 	bl	8000b04 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff f9a6 	bl	8000b04 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e21f      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xdc>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff f996 	bl	8000b04 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f992 	bl	8000b04 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e20b      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x104>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d06f      	beq.n	80018ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d017      	beq.n	8001846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001816:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800181e:	2b08      	cmp	r3, #8
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b44      	ldr	r3, [pc, #272]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x186>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1d3      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4937      	ldr	r1, [pc, #220]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_RCC_OscConfig+0x278>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f93f 	bl	8000b04 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff f93b 	bl	8000b04 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1b4      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_OscConfig+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b28      	ldr	r3, [pc, #160]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4925      	ldr	r1, [pc, #148]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <HAL_RCC_OscConfig+0x278>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff f91e 	bl	8000b04 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff f91a 	bl	8000b04 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e193      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d036      	beq.n	8001964 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff f8fe 	bl	8000b04 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff f8fa 	bl	8000b04 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e173      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x234>
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_OscConfig+0x27c>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f7ff f8e7 	bl	8000b04 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff f8e3 	bl	8000b04 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e15c      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b8a      	ldr	r3, [pc, #552]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ea      	bne.n	800193a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8097 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <HAL_RCC_OscConfig+0x4b0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x4b0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a75      	ldr	r2, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4b0>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff f8a3 	bl	8000b04 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff f89f 	bl	8000b04 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e118      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b6c      	ldr	r3, [pc, #432]	; (8001b88 <HAL_RCC_OscConfig+0x4b0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x31e>
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	e01c      	b.n	8001a30 <HAL_RCC_OscConfig+0x358>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x340>
 80019fe:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a60      	ldr	r2, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x358>
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a59      	ldr	r2, [pc, #356]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f864 	bl	8000b04 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff f860 	bl	8000b04 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0d7      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x368>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f84e 	bl	8000b04 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f84a 	bl	8000b04 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0c1      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	4a3a      	ldr	r2, [pc, #232]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80ad 	beq.w	8001c04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aaa:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d060      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d145      	bne.n	8001b4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_RCC_OscConfig+0x4b4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f81e 	bl	8000b04 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff f81a 	bl	8000b04 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e093      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	071b      	lsls	r3, r3, #28
 8001b16:	491b      	ldr	r1, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x4b4>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7fe ffef 	bl	8000b04 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7fe ffeb 	bl	8000b04 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e064      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x452>
 8001b48:	e05c      	b.n	8001c04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_OscConfig+0x4b4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7fe ffd8 	bl	8000b04 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7fe ffd4 	bl	8000b04 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e04d      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x480>
 8001b76:	e045      	b.n	8001c04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e040      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_RCC_OscConfig+0x538>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d030      	beq.n	8001c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d129      	bne.n	8001c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d122      	bne.n	8001c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d119      	bne.n	8001c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10f      	bne.n	8001c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e03f      	b.n	8001ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fe54 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f929 	bl	8001eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b08a      	sub	sp, #40	; 0x28
 8001cb2:	af02      	add	r7, sp, #8
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d17c      	bne.n	8001dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_UART_Transmit+0x2c>
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e075      	b.n	8001dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_UART_Transmit+0x3e>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e06e      	b.n	8001dca <HAL_UART_Transmit+0x11c>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2221      	movs	r2, #33	; 0x21
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d02:	f7fe feff 	bl	8000b04 <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	88fa      	ldrh	r2, [r7, #6]
 8001d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1c:	d108      	bne.n	8001d30 <HAL_UART_Transmit+0x82>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d104      	bne.n	8001d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	e003      	b.n	8001d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d40:	e02a      	b.n	8001d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f840 	bl	8001dd2 <UART_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e036      	b.n	8001dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10b      	bne.n	8001d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	3302      	adds	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	e007      	b.n	8001d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1cf      	bne.n	8001d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2140      	movs	r1, #64	; 0x40
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f810 	bl	8001dd2 <UART_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e006      	b.n	8001dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b090      	sub	sp, #64	; 0x40
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001de2:	e050      	b.n	8001e86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dea:	d04c      	beq.n	8001e86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001df2:	f7fe fe87 	bl	8000b04 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d241      	bcs.n	8001e86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	330c      	adds	r3, #12
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	e853 3f00 	ldrex	r3, [r3]
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	330c      	adds	r3, #12
 8001e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e22:	637a      	str	r2, [r7, #52]	; 0x34
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e2a:	e841 2300 	strex	r3, r2, [r1]
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e5      	bne.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	e853 3f00 	ldrex	r3, [r3]
 8001e44:	613b      	str	r3, [r7, #16]
   return(result);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3314      	adds	r3, #20
 8001e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e56:	623a      	str	r2, [r7, #32]
 8001e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5a:	69f9      	ldr	r1, [r7, #28]
 8001e5c:	6a3a      	ldr	r2, [r7, #32]
 8001e5e:	e841 2300 	strex	r3, r2, [r1]
 8001e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e5      	bne.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e00f      	b.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d09f      	beq.n	8001de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3740      	adds	r7, #64	; 0x40
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb4:	b0c0      	sub	sp, #256	; 0x100
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	ea40 0301 	orr.w	r3, r0, r1
 8001ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f08:	f021 010c 	bic.w	r1, r1, #12
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f16:	430b      	orrs	r3, r1
 8001f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2a:	6999      	ldr	r1, [r3, #24]
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	ea40 0301 	orr.w	r3, r0, r1
 8001f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b8f      	ldr	r3, [pc, #572]	; (800217c <UART_SetConfig+0x2cc>)
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d005      	beq.n	8001f50 <UART_SetConfig+0xa0>
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <UART_SetConfig+0x2d0>)
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d104      	bne.n	8001f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f50:	f7ff f97e 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 8001f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f58:	e003      	b.n	8001f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f5a:	f7ff f965 	bl	8001228 <HAL_RCC_GetPCLK1Freq>
 8001f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6c:	f040 810c 	bne.w	8002188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f74:	2200      	movs	r2, #0
 8001f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f82:	4622      	mov	r2, r4
 8001f84:	462b      	mov	r3, r5
 8001f86:	1891      	adds	r1, r2, r2
 8001f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f8a:	415b      	adcs	r3, r3
 8001f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f92:	4621      	mov	r1, r4
 8001f94:	eb12 0801 	adds.w	r8, r2, r1
 8001f98:	4629      	mov	r1, r5
 8001f9a:	eb43 0901 	adc.w	r9, r3, r1
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fb2:	4690      	mov	r8, r2
 8001fb4:	4699      	mov	r9, r3
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	eb18 0303 	adds.w	r3, r8, r3
 8001fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	eb49 0303 	adc.w	r3, r9, r3
 8001fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fde:	460b      	mov	r3, r1
 8001fe0:	18db      	adds	r3, r3, r3
 8001fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	eb42 0303 	adc.w	r3, r2, r3
 8001fea:	657b      	str	r3, [r7, #84]	; 0x54
 8001fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ff4:	f7fe f914 	bl	8000220 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4b61      	ldr	r3, [pc, #388]	; (8002184 <UART_SetConfig+0x2d4>)
 8001ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	011c      	lsls	r4, r3, #4
 8002006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800200a:	2200      	movs	r2, #0
 800200c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002018:	4642      	mov	r2, r8
 800201a:	464b      	mov	r3, r9
 800201c:	1891      	adds	r1, r2, r2
 800201e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002020:	415b      	adcs	r3, r3
 8002022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002028:	4641      	mov	r1, r8
 800202a:	eb12 0a01 	adds.w	sl, r2, r1
 800202e:	4649      	mov	r1, r9
 8002030:	eb43 0b01 	adc.w	fp, r3, r1
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002048:	4692      	mov	sl, r2
 800204a:	469b      	mov	fp, r3
 800204c:	4643      	mov	r3, r8
 800204e:	eb1a 0303 	adds.w	r3, sl, r3
 8002052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002056:	464b      	mov	r3, r9
 8002058:	eb4b 0303 	adc.w	r3, fp, r3
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800206c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002074:	460b      	mov	r3, r1
 8002076:	18db      	adds	r3, r3, r3
 8002078:	643b      	str	r3, [r7, #64]	; 0x40
 800207a:	4613      	mov	r3, r2
 800207c:	eb42 0303 	adc.w	r3, r2, r3
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
 8002082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800208a:	f7fe f8c9 	bl	8000220 <__aeabi_uldivmod>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4611      	mov	r1, r2
 8002094:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <UART_SetConfig+0x2d4>)
 8002096:	fba3 2301 	umull	r2, r3, r3, r1
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2264      	movs	r2, #100	; 0x64
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	1acb      	subs	r3, r1, r3
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <UART_SetConfig+0x2d4>)
 80020ac:	fba3 2302 	umull	r2, r3, r3, r2
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020b8:	441c      	add	r4, r3
 80020ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020be:	2200      	movs	r2, #0
 80020c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020cc:	4642      	mov	r2, r8
 80020ce:	464b      	mov	r3, r9
 80020d0:	1891      	adds	r1, r2, r2
 80020d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80020d4:	415b      	adcs	r3, r3
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020dc:	4641      	mov	r1, r8
 80020de:	1851      	adds	r1, r2, r1
 80020e0:	6339      	str	r1, [r7, #48]	; 0x30
 80020e2:	4649      	mov	r1, r9
 80020e4:	414b      	adcs	r3, r1
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020f4:	4659      	mov	r1, fp
 80020f6:	00cb      	lsls	r3, r1, #3
 80020f8:	4651      	mov	r1, sl
 80020fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020fe:	4651      	mov	r1, sl
 8002100:	00ca      	lsls	r2, r1, #3
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	4603      	mov	r3, r0
 8002108:	4642      	mov	r2, r8
 800210a:	189b      	adds	r3, r3, r2
 800210c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002110:	464b      	mov	r3, r9
 8002112:	460a      	mov	r2, r1
 8002114:	eb42 0303 	adc.w	r3, r2, r3
 8002118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800212c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002130:	460b      	mov	r3, r1
 8002132:	18db      	adds	r3, r3, r3
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
 8002136:	4613      	mov	r3, r2
 8002138:	eb42 0303 	adc.w	r3, r2, r3
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800213e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002146:	f7fe f86b 	bl	8000220 <__aeabi_uldivmod>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <UART_SetConfig+0x2d4>)
 8002150:	fba3 1302 	umull	r1, r3, r3, r2
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	2164      	movs	r1, #100	; 0x64
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	3332      	adds	r3, #50	; 0x32
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <UART_SetConfig+0x2d4>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	f003 0207 	and.w	r2, r3, #7
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4422      	add	r2, r4
 8002176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002178:	e106      	b.n	8002388 <UART_SetConfig+0x4d8>
 800217a:	bf00      	nop
 800217c:	40011000 	.word	0x40011000
 8002180:	40011400 	.word	0x40011400
 8002184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800218c:	2200      	movs	r2, #0
 800218e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800219a:	4642      	mov	r2, r8
 800219c:	464b      	mov	r3, r9
 800219e:	1891      	adds	r1, r2, r2
 80021a0:	6239      	str	r1, [r7, #32]
 80021a2:	415b      	adcs	r3, r3
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021aa:	4641      	mov	r1, r8
 80021ac:	1854      	adds	r4, r2, r1
 80021ae:	4649      	mov	r1, r9
 80021b0:	eb43 0501 	adc.w	r5, r3, r1
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	00eb      	lsls	r3, r5, #3
 80021be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c2:	00e2      	lsls	r2, r4, #3
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	18e3      	adds	r3, r4, r3
 80021cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021d0:	464b      	mov	r3, r9
 80021d2:	eb45 0303 	adc.w	r3, r5, r3
 80021d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021f6:	4629      	mov	r1, r5
 80021f8:	008b      	lsls	r3, r1, #2
 80021fa:	4621      	mov	r1, r4
 80021fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002200:	4621      	mov	r1, r4
 8002202:	008a      	lsls	r2, r1, #2
 8002204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002208:	f7fe f80a 	bl	8000220 <__aeabi_uldivmod>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4b60      	ldr	r3, [pc, #384]	; (8002394 <UART_SetConfig+0x4e4>)
 8002212:	fba3 2302 	umull	r2, r3, r3, r2
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	011c      	lsls	r4, r3, #4
 800221a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800221e:	2200      	movs	r2, #0
 8002220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800222c:	4642      	mov	r2, r8
 800222e:	464b      	mov	r3, r9
 8002230:	1891      	adds	r1, r2, r2
 8002232:	61b9      	str	r1, [r7, #24]
 8002234:	415b      	adcs	r3, r3
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800223c:	4641      	mov	r1, r8
 800223e:	1851      	adds	r1, r2, r1
 8002240:	6139      	str	r1, [r7, #16]
 8002242:	4649      	mov	r1, r9
 8002244:	414b      	adcs	r3, r1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002254:	4659      	mov	r1, fp
 8002256:	00cb      	lsls	r3, r1, #3
 8002258:	4651      	mov	r1, sl
 800225a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800225e:	4651      	mov	r1, sl
 8002260:	00ca      	lsls	r2, r1, #3
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	4603      	mov	r3, r0
 8002268:	4642      	mov	r2, r8
 800226a:	189b      	adds	r3, r3, r2
 800226c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002270:	464b      	mov	r3, r9
 8002272:	460a      	mov	r2, r1
 8002274:	eb42 0303 	adc.w	r3, r2, r3
 8002278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	67bb      	str	r3, [r7, #120]	; 0x78
 8002286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002294:	4649      	mov	r1, r9
 8002296:	008b      	lsls	r3, r1, #2
 8002298:	4641      	mov	r1, r8
 800229a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800229e:	4641      	mov	r1, r8
 80022a0:	008a      	lsls	r2, r1, #2
 80022a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022a6:	f7fd ffbb 	bl	8000220 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <UART_SetConfig+0x4e4>)
 80022b2:	fba3 2301 	umull	r2, r3, r3, r1
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2264      	movs	r2, #100	; 0x64
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	1acb      	subs	r3, r1, r3
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	3332      	adds	r3, #50	; 0x32
 80022c4:	4a33      	ldr	r2, [pc, #204]	; (8002394 <UART_SetConfig+0x4e4>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	441c      	add	r4, r3
 80022d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022d6:	2200      	movs	r2, #0
 80022d8:	673b      	str	r3, [r7, #112]	; 0x70
 80022da:	677a      	str	r2, [r7, #116]	; 0x74
 80022dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022e0:	4642      	mov	r2, r8
 80022e2:	464b      	mov	r3, r9
 80022e4:	1891      	adds	r1, r2, r2
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	415b      	adcs	r3, r3
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022f0:	4641      	mov	r1, r8
 80022f2:	1851      	adds	r1, r2, r1
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	4649      	mov	r1, r9
 80022f8:	414b      	adcs	r3, r1
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002308:	4659      	mov	r1, fp
 800230a:	00cb      	lsls	r3, r1, #3
 800230c:	4651      	mov	r1, sl
 800230e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002312:	4651      	mov	r1, sl
 8002314:	00ca      	lsls	r2, r1, #3
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	4603      	mov	r3, r0
 800231c:	4642      	mov	r2, r8
 800231e:	189b      	adds	r3, r3, r2
 8002320:	66bb      	str	r3, [r7, #104]	; 0x68
 8002322:	464b      	mov	r3, r9
 8002324:	460a      	mov	r2, r1
 8002326:	eb42 0303 	adc.w	r3, r2, r3
 800232a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
 8002336:	667a      	str	r2, [r7, #100]	; 0x64
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002344:	4649      	mov	r1, r9
 8002346:	008b      	lsls	r3, r1, #2
 8002348:	4641      	mov	r1, r8
 800234a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800234e:	4641      	mov	r1, r8
 8002350:	008a      	lsls	r2, r1, #2
 8002352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002356:	f7fd ff63 	bl	8000220 <__aeabi_uldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <UART_SetConfig+0x4e4>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	2164      	movs	r1, #100	; 0x64
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	3332      	adds	r3, #50	; 0x32
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <UART_SetConfig+0x4e4>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4422      	add	r2, r4
 8002386:	609a      	str	r2, [r3, #8]
}
 8002388:	bf00      	nop
 800238a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800238e:	46bd      	mov	sp, r7
 8002390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002394:	51eb851f 	.word	0x51eb851f

08002398 <__NVIC_SetPriority>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80023f0:	2100      	movs	r1, #0
 80023f2:	f06f 0004 	mvn.w	r0, #4
 80023f6:	f7ff ffcf 	bl	8002398 <__NVIC_SetPriority>
#endif
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002406:	f3ef 8305 	mrs	r3, IPSR
 800240a:	603b      	str	r3, [r7, #0]
  return(result);
 800240c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002412:	f06f 0305 	mvn.w	r3, #5
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	e00c      	b.n	8002434 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <osKernelInitialize+0x44>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <osKernelInitialize+0x44>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	e002      	b.n	8002434 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000080 	.word	0x20000080

08002448 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800244e:	f3ef 8305 	mrs	r3, IPSR
 8002452:	603b      	str	r3, [r7, #0]
  return(result);
 8002454:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <osKernelStart+0x1a>
    stat = osErrorISR;
 800245a:	f06f 0305 	mvn.w	r3, #5
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	e010      	b.n	8002484 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <osKernelStart+0x48>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d109      	bne.n	800247e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800246a:	f7ff ffbf 	bl	80023ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <osKernelStart+0x48>)
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002474:	f001 f866 	bl	8003544 <vTaskStartScheduler>
      stat = osOK;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	e002      	b.n	8002484 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000080 	.word	0x20000080

08002494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af04      	add	r7, sp, #16
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a4:	f3ef 8305 	mrs	r3, IPSR
 80024a8:	617b      	str	r3, [r7, #20]
  return(result);
 80024aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d17e      	bne.n	80025ae <osThreadNew+0x11a>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d07b      	beq.n	80025ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80024ba:	2318      	movs	r3, #24
 80024bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d045      	beq.n	800255a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <osThreadNew+0x48>
        name = attr->name;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <osThreadNew+0x6e>
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b38      	cmp	r3, #56	; 0x38
 80024f4:	d805      	bhi.n	8002502 <osThreadNew+0x6e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <osThreadNew+0x72>
        return (NULL);
 8002502:	2300      	movs	r3, #0
 8002504:	e054      	b.n	80025b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00e      	beq.n	800253c <osThreadNew+0xa8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b5b      	cmp	r3, #91	; 0x5b
 8002524:	d90a      	bls.n	800253c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <osThreadNew+0xa8>
        mem = 1;
 8002536:	2301      	movs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e010      	b.n	800255e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <osThreadNew+0xca>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d108      	bne.n	800255e <osThreadNew+0xca>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <osThreadNew+0xca>
          mem = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e001      	b.n	800255e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d110      	bne.n	8002586 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800256c:	9202      	str	r2, [sp, #8]
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6a3a      	ldr	r2, [r7, #32]
 8002578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fe0c 	bl	8003198 <xTaskCreateStatic>
 8002580:	4603      	mov	r3, r0
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e013      	b.n	80025ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d110      	bne.n	80025ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	b29a      	uxth	r2, r3
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fe57 	bl	8003252 <xTaskCreate>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <osThreadNew+0x11a>
            hTask = NULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025ae:	693b      	ldr	r3, [r7, #16]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c0:	f3ef 8305 	mrs	r3, IPSR
 80025c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80025c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <osDelay+0x1c>
    stat = osErrorISR;
 80025cc:	f06f 0305 	mvn.w	r3, #5
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e007      	b.n	80025e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 ff7c 	bl	80034dc <vTaskDelay>
    }
  }

  return (stat);
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <vApplicationGetIdleTaskMemory+0x2c>)
 8002600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <vApplicationGetIdleTaskMemory+0x30>)
 8002606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	601a      	str	r2, [r3, #0]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000084 	.word	0x20000084
 8002620:	200000e0 	.word	0x200000e0

08002624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a07      	ldr	r2, [pc, #28]	; (8002650 <vApplicationGetTimerTaskMemory+0x2c>)
 8002634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <vApplicationGetTimerTaskMemory+0x30>)
 800263a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	200002e0 	.word	0x200002e0
 8002654:	2000033c 	.word	0x2000033c

08002658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0208 	add.w	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f103 0208 	add.w	r2, r3, #8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0208 	add.w	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d103      	bne.n	800271a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e00c      	b.n	8002734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3308      	adds	r3, #8
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e002      	b.n	8002728 <vListInsert+0x2e>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d2f6      	bcs.n	8002722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6852      	ldr	r2, [r2, #4]
 800278c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d103      	bne.n	80027a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027ea:	f002 f84b 	bl	8004884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	441a      	add	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	3b01      	subs	r3, #1
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	441a      	add	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	22ff      	movs	r2, #255	; 0xff
 800282e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22ff      	movs	r2, #255	; 0xff
 8002836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d114      	bne.n	800286a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01a      	beq.n	800287e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3310      	adds	r3, #16
 800284c:	4618      	mov	r0, r3
 800284e:	f001 f903 	bl	8003a58 <xTaskRemoveFromEventList>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d012      	beq.n	800287e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <xQueueGenericReset+0xcc>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	e009      	b.n	800287e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3310      	adds	r3, #16
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fef2 	bl	8002658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff feed 	bl	8002658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800287e:	f002 f831 	bl	80048e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e000ed04 	.word	0xe000ed04

08002890 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08e      	sub	sp, #56	; 0x38
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <xQueueGenericCreateStatic+0x52>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <xQueueGenericCreateStatic+0x56>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <xQueueGenericCreateStatic+0x58>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	623b      	str	r3, [r7, #32]
}
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <xQueueGenericCreateStatic+0x7e>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <xQueueGenericCreateStatic+0x82>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <xQueueGenericCreateStatic+0x84>
 8002912:	2300      	movs	r3, #0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	61fb      	str	r3, [r7, #28]
}
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800292e:	2350      	movs	r3, #80	; 0x50
 8002930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b50      	cmp	r3, #80	; 0x50
 8002936:	d00a      	beq.n	800294e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	61bb      	str	r3, [r7, #24]
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800294e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002962:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f805 	bl	8002980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002978:	4618      	mov	r0, r3
 800297a:	3730      	adds	r7, #48	; 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e002      	b.n	80029a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029ae:	2101      	movs	r1, #1
 80029b0:	69b8      	ldr	r0, [r7, #24]
 80029b2:	f7ff ff05 	bl	80027c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	; 0x38
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029d6:	2300      	movs	r3, #0
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueGenericSend+0x32>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <xQueueGenericSend+0x40>
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <xQueueGenericSend+0x44>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <xQueueGenericSend+0x46>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <xQueueGenericSend+0x60>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a24:	bf00      	nop
 8002a26:	e7fe      	b.n	8002a26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d103      	bne.n	8002a36 <xQueueGenericSend+0x6e>
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <xQueueGenericSend+0x72>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <xQueueGenericSend+0x74>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	623b      	str	r3, [r7, #32]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a56:	f001 f9bd 	bl	8003dd4 <xTaskGetSchedulerState>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <xQueueGenericSend+0x9e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <xQueueGenericSend+0xa2>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueGenericSend+0xa4>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	61fb      	str	r3, [r7, #28]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a86:	f001 fefd 	bl	8004884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <xQueueGenericSend+0xd4>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d129      	bne.n	8002af0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aa2:	f000 fa0b 	bl	8002ebc <prvCopyDataToQueue>
 8002aa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	3324      	adds	r3, #36	; 0x24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 ffcf 	bl	8003a58 <xTaskRemoveFromEventList>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <xQueueGenericSend+0x1f8>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	e00a      	b.n	8002ae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <xQueueGenericSend+0x1f8>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ae8:	f001 fefc 	bl	80048e4 <vPortExitCritical>
				return pdPASS;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e063      	b.n	8002bb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002af6:	f001 fef5 	bl	80048e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e05c      	b.n	8002bb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 f809 	bl	8003b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b12:	f001 fee7 	bl	80048e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b16:	f000 fd7b 	bl	8003610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b1a:	f001 feb3 	bl	8004884 <vPortEnterCritical>
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2a:	d103      	bne.n	8002b34 <xQueueGenericSend+0x16c>
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b40:	d103      	bne.n	8002b4a <xQueueGenericSend+0x182>
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b4a:	f001 fecb 	bl	80048e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b4e:	1d3a      	adds	r2, r7, #4
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fff8 	bl	8003b4c <xTaskCheckForTimeOut>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d124      	bne.n	8002bac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b64:	f000 faa2 	bl	80030ac <prvIsQueueFull>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d018      	beq.n	8002ba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	3310      	adds	r3, #16
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 ff1e 	bl	80039b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7e:	f000 fa2d 	bl	8002fdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b82:	f000 fd53 	bl	800362c <xTaskResumeAll>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f af7c 	bne.w	8002a86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <xQueueGenericSend+0x1f8>)
 8002b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	e772      	b.n	8002a86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba2:	f000 fa1b 	bl	8002fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ba6:	f000 fd41 	bl	800362c <xTaskResumeAll>
 8002baa:	e76c      	b.n	8002a86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bae:	f000 fa15 	bl	8002fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bb2:	f000 fd3b 	bl	800362c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3738      	adds	r7, #56	; 0x38
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b090      	sub	sp, #64	; 0x40
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <xQueueGenericSendFromISR+0x3c>
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <xQueueGenericSendFromISR+0x40>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <xQueueGenericSendFromISR+0x42>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c1c:	bf00      	nop
 8002c1e:	e7fe      	b.n	8002c1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d103      	bne.n	8002c2e <xQueueGenericSendFromISR+0x6a>
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <xQueueGenericSendFromISR+0x6e>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <xQueueGenericSendFromISR+0x70>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	623b      	str	r3, [r7, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c4e:	f001 fefb 	bl	8004a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c52:	f3ef 8211 	mrs	r2, BASEPRI
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	61fa      	str	r2, [r7, #28]
 8002c68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <xQueueGenericSendFromISR+0xbc>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d12f      	bne.n	8002ce0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c96:	f000 f911 	bl	8002ebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca2:	d112      	bne.n	8002cca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fed1 	bl	8003a58 <xTaskRemoveFromEventList>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e007      	b.n	8002cda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	b25a      	sxtb	r2, r3
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002cde:	e001      	b.n	8002ce4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3740      	adds	r7, #64	; 0x40
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	; 0x30
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <xQueueReceive+0x30>
	__asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	623b      	str	r3, [r7, #32]
}
 8002d28:	bf00      	nop
 8002d2a:	e7fe      	b.n	8002d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <xQueueReceive+0x3e>
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <xQueueReceive+0x42>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <xQueueReceive+0x44>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <xQueueReceive+0x5e>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	61fb      	str	r3, [r7, #28]
}
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d5a:	f001 f83b 	bl	8003dd4 <xTaskGetSchedulerState>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <xQueueReceive+0x6e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <xQueueReceive+0x72>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueReceive+0x74>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xQueueReceive+0x8e>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	61bb      	str	r3, [r7, #24]
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d8a:	f001 fd7b 	bl	8004884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01f      	beq.n	8002dda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9e:	f000 f8f7 	bl	8002f90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00f      	beq.n	8002dd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	3310      	adds	r3, #16
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fe4e 	bl	8003a58 <xTaskRemoveFromEventList>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <xQueueReceive+0x1bc>)
 8002dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dd2:	f001 fd87 	bl	80048e4 <vPortExitCritical>
				return pdPASS;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e069      	b.n	8002eae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002de0:	f001 fd80 	bl	80048e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e062      	b.n	8002eae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dee:	f107 0310 	add.w	r3, r7, #16
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fe94 	bl	8003b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dfc:	f001 fd72 	bl	80048e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e00:	f000 fc06 	bl	8003610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e04:	f001 fd3e 	bl	8004884 <vPortEnterCritical>
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d103      	bne.n	8002e1e <xQueueReceive+0x122>
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2a:	d103      	bne.n	8002e34 <xQueueReceive+0x138>
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e34:	f001 fd56 	bl	80048e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e38:	1d3a      	adds	r2, r7, #4
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fe83 	bl	8003b4c <xTaskCheckForTimeOut>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d123      	bne.n	8002e94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e4e:	f000 f917 	bl	8003080 <prvIsQueueEmpty>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d017      	beq.n	8002e88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	3324      	adds	r3, #36	; 0x24
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fda9 	bl	80039b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e68:	f000 f8b8 	bl	8002fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e6c:	f000 fbde 	bl	800362c <xTaskResumeAll>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d189      	bne.n	8002d8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <xQueueReceive+0x1bc>)
 8002e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	e780      	b.n	8002d8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e8a:	f000 f8a7 	bl	8002fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e8e:	f000 fbcd 	bl	800362c <xTaskResumeAll>
 8002e92:	e77a      	b.n	8002d8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e96:	f000 f8a1 	bl	8002fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e9a:	f000 fbc7 	bl	800362c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea0:	f000 f8ee 	bl	8003080 <prvIsQueueEmpty>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f43f af6f 	beq.w	8002d8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3730      	adds	r7, #48	; 0x30
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10d      	bne.n	8002ef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d14d      	bne.n	8002f7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 ff92 	bl	8003e10 <xTaskPriorityDisinherit>
 8002eec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e043      	b.n	8002f7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d119      	bne.n	8002f30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6858      	ldr	r0, [r3, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	461a      	mov	r2, r3
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	f001 fff4 	bl	8004ef4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	441a      	add	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d32b      	bcc.n	8002f7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	e026      	b.n	8002f7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68d8      	ldr	r0, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	f001 ffda 	bl	8004ef4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	425b      	negs	r3, r3
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d207      	bcs.n	8002f6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	425b      	negs	r3, r3
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d105      	bne.n	8002f7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f86:	697b      	ldr	r3, [r7, #20]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	441a      	add	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d303      	bcc.n	8002fc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68d9      	ldr	r1, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f001 ff90 	bl	8004ef4 <memcpy>
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fe4:	f001 fc4e 	bl	8004884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ff0:	e011      	b.n	8003016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3324      	adds	r3, #36	; 0x24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fd2a 	bl	8003a58 <xTaskRemoveFromEventList>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800300a:	f000 fe01 	bl	8003c10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3b01      	subs	r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	dce9      	bgt.n	8002ff2 <prvUnlockQueue+0x16>
 800301e:	e000      	b.n	8003022 <prvUnlockQueue+0x46>
					break;
 8003020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800302a:	f001 fc5b 	bl	80048e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800302e:	f001 fc29 	bl	8004884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800303a:	e011      	b.n	8003060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d012      	beq.n	800306a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3310      	adds	r3, #16
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fd05 	bl	8003a58 <xTaskRemoveFromEventList>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003054:	f000 fddc 	bl	8003c10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003058:	7bbb      	ldrb	r3, [r7, #14]
 800305a:	3b01      	subs	r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003064:	2b00      	cmp	r3, #0
 8003066:	dce9      	bgt.n	800303c <prvUnlockQueue+0x60>
 8003068:	e000      	b.n	800306c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800306a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003074:	f001 fc36 	bl	80048e4 <vPortExitCritical>
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003088:	f001 fbfc 	bl	8004884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e001      	b.n	800309e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800309e:	f001 fc21 	bl	80048e4 <vPortExitCritical>

	return xReturn;
 80030a2:	68fb      	ldr	r3, [r7, #12]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030b4:	f001 fbe6 	bl	8004884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d102      	bne.n	80030ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030c4:	2301      	movs	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e001      	b.n	80030ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ce:	f001 fc09 	bl	80048e4 <vPortExitCritical>

	return xReturn;
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	e014      	b.n	8003116 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030ec:	4a0f      	ldr	r2, [pc, #60]	; (800312c <vQueueAddToRegistry+0x50>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030f8:	490c      	ldr	r1, [pc, #48]	; (800312c <vQueueAddToRegistry+0x50>)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <vQueueAddToRegistry+0x50>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800310e:	e006      	b.n	800311e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3301      	adds	r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b07      	cmp	r3, #7
 800311a:	d9e7      	bls.n	80030ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	2000073c 	.word	0x2000073c

08003130 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003140:	f001 fba0 	bl	8004884 <vPortEnterCritical>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800314a:	b25b      	sxtb	r3, r3
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003150:	d103      	bne.n	800315a <vQueueWaitForMessageRestricted+0x2a>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003160:	b25b      	sxtb	r3, r3
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003166:	d103      	bne.n	8003170 <vQueueWaitForMessageRestricted+0x40>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003170:	f001 fbb8 	bl	80048e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3324      	adds	r3, #36	; 0x24
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fc3b 	bl	8003a00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff26 	bl	8002fdc <prvUnlockQueue>
	}
 8003190:	bf00      	nop
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08e      	sub	sp, #56	; 0x38
 800319c:	af04      	add	r7, sp, #16
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	623b      	str	r3, [r7, #32]
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <xTaskCreateStatic+0x46>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	61fb      	str	r3, [r7, #28]
}
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031de:	235c      	movs	r3, #92	; 0x5c
 80031e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b5c      	cmp	r3, #92	; 0x5c
 80031e6:	d00a      	beq.n	80031fe <xTaskCreateStatic+0x66>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	61bb      	str	r3, [r7, #24]
}
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01e      	beq.n	8003244 <xTaskCreateStatic+0xac>
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01b      	beq.n	8003244 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003214:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	2202      	movs	r2, #2
 800321a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800321e:	2300      	movs	r3, #0
 8003220:	9303      	str	r3, [sp, #12]
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	9302      	str	r3, [sp, #8]
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f850 	bl	80032dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800323c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800323e:	f000 f8dd 	bl	80033fc <prvAddNewTaskToReadyList>
 8003242:	e001      	b.n	8003248 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003248:	697b      	ldr	r3, [r7, #20]
	}
 800324a:	4618      	mov	r0, r3
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003252:	b580      	push	{r7, lr}
 8003254:	b08c      	sub	sp, #48	; 0x30
 8003256:	af04      	add	r7, sp, #16
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4618      	mov	r0, r3
 8003268:	f001 fc2e 	bl	8004ac8 <pvPortMalloc>
 800326c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003274:	205c      	movs	r0, #92	; 0x5c
 8003276:	f001 fc27 	bl	8004ac8 <pvPortMalloc>
 800327a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
 8003288:	e005      	b.n	8003296 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f001 fce8 	bl	8004c60 <vPortFree>
 8003290:	e001      	b.n	8003296 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d017      	beq.n	80032cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	2300      	movs	r3, #0
 80032a8:	9303      	str	r3, [sp, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	9302      	str	r3, [sp, #8]
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f80e 	bl	80032dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032c0:	69f8      	ldr	r0, [r7, #28]
 80032c2:	f000 f89b 	bl	80033fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e002      	b.n	80032d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032d2:	69bb      	ldr	r3, [r7, #24]
	}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	21a5      	movs	r1, #165	; 0xa5
 80032f6:	f001 fdd1 	bl	8004e9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003304:	3b01      	subs	r3, #1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f023 0307 	bic.w	r3, r3, #7
 8003312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <prvInitialiseNewTask+0x58>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	617b      	str	r3, [r7, #20]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01f      	beq.n	800337a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e012      	b.n	8003366 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	7819      	ldrb	r1, [r3, #0]
 8003348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	4413      	add	r3, r2
 800334e:	3334      	adds	r3, #52	; 0x34
 8003350:	460a      	mov	r2, r1
 8003352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	4413      	add	r3, r2
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	3301      	adds	r3, #1
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d9e9      	bls.n	8003340 <prvInitialiseNewTask+0x64>
 800336c:	e000      	b.n	8003370 <prvInitialiseNewTask+0x94>
			{
				break;
 800336e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003378:	e003      	b.n	8003382 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	2b37      	cmp	r3, #55	; 0x37
 8003386:	d901      	bls.n	800338c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003388:	2337      	movs	r3, #55	; 0x37
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003396:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	2200      	movs	r2, #0
 800339c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	3304      	adds	r3, #4
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f978 	bl	8002698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	3318      	adds	r3, #24
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff f973 	bl	8002698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	2200      	movs	r2, #0
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	69b8      	ldr	r0, [r7, #24]
 80033dc:	f001 f928 	bl	8004630 <pxPortInitialiseStack>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033f2:	bf00      	nop
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003404:	f001 fa3e 	bl	8004884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <prvAddNewTaskToReadyList+0xc4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <prvAddNewTaskToReadyList+0xc4>)
 8003410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003412:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <prvAddNewTaskToReadyList+0xc8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800341a:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <prvAddNewTaskToReadyList+0xc8>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <prvAddNewTaskToReadyList+0xc4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d110      	bne.n	800344a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003428:	f000 fc16 	bl	8003c58 <prvInitialiseTaskLists>
 800342c:	e00d      	b.n	800344a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800342e:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <prvAddNewTaskToReadyList+0xcc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <prvAddNewTaskToReadyList+0xc8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	429a      	cmp	r2, r3
 8003442:	d802      	bhi.n	800344a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <prvAddNewTaskToReadyList+0xc8>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <prvAddNewTaskToReadyList+0xd0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <prvAddNewTaskToReadyList+0xd0>)
 8003452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <prvAddNewTaskToReadyList+0xd0>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <prvAddNewTaskToReadyList+0xd4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d903      	bls.n	8003470 <prvAddNewTaskToReadyList+0x74>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <prvAddNewTaskToReadyList+0xd4>)
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <prvAddNewTaskToReadyList+0xd8>)
 800347e:	441a      	add	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7ff f913 	bl	80026b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800348c:	f001 fa2a 	bl	80048e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <prvAddNewTaskToReadyList+0xcc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00e      	beq.n	80034b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <prvAddNewTaskToReadyList+0xc8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d207      	bcs.n	80034b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <prvAddNewTaskToReadyList+0xdc>)
 80034a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000c50 	.word	0x20000c50
 80034c4:	2000077c 	.word	0x2000077c
 80034c8:	20000c5c 	.word	0x20000c5c
 80034cc:	20000c6c 	.word	0x20000c6c
 80034d0:	20000c58 	.word	0x20000c58
 80034d4:	20000780 	.word	0x20000780
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d017      	beq.n	800351e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <vTaskDelay+0x60>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <vTaskDelay+0x30>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	60bb      	str	r3, [r7, #8]
}
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800350c:	f000 f880 	bl	8003610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003510:	2100      	movs	r1, #0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fcea 	bl	8003eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003518:	f000 f888 	bl	800362c <xTaskResumeAll>
 800351c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <vTaskDelay+0x64>)
 8003526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000c78 	.word	0x20000c78
 8003540:	e000ed04 	.word	0xe000ed04

08003544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003552:	463a      	mov	r2, r7
 8003554:	1d39      	adds	r1, r7, #4
 8003556:	f107 0308 	add.w	r3, r7, #8
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f848 	bl	80025f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003560:	6839      	ldr	r1, [r7, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	9202      	str	r2, [sp, #8]
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2300      	movs	r3, #0
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	460a      	mov	r2, r1
 8003572:	4921      	ldr	r1, [pc, #132]	; (80035f8 <vTaskStartScheduler+0xb4>)
 8003574:	4821      	ldr	r0, [pc, #132]	; (80035fc <vTaskStartScheduler+0xb8>)
 8003576:	f7ff fe0f 	bl	8003198 <xTaskCreateStatic>
 800357a:	4603      	mov	r3, r0
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <vTaskStartScheduler+0xbc>)
 800357e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <vTaskStartScheduler+0xbc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003588:	2301      	movs	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e001      	b.n	8003592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d102      	bne.n	800359e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003598:	f000 fcfc 	bl	8003f94 <xTimerCreateTimerTask>
 800359c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d116      	bne.n	80035d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	613b      	str	r3, [r7, #16]
}
 80035b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <vTaskStartScheduler+0xc0>)
 80035ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <vTaskStartScheduler+0xc4>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <vTaskStartScheduler+0xc8>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035cc:	f001 f8b8 	bl	8004740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035d0:	e00e      	b.n	80035f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d8:	d10a      	bne.n	80035f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	60fb      	str	r3, [r7, #12]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vTaskStartScheduler+0xaa>
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	08004f8c 	.word	0x08004f8c
 80035fc:	08003c29 	.word	0x08003c29
 8003600:	20000c74 	.word	0x20000c74
 8003604:	20000c70 	.word	0x20000c70
 8003608:	20000c5c 	.word	0x20000c5c
 800360c:	20000c54 	.word	0x20000c54

08003610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <vTaskSuspendAll+0x18>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	4a03      	ldr	r2, [pc, #12]	; (8003628 <vTaskSuspendAll+0x18>)
 800361c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	20000c78 	.word	0x20000c78

0800362c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800363a:	4b42      	ldr	r3, [pc, #264]	; (8003744 <xTaskResumeAll+0x118>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <xTaskResumeAll+0x2c>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	603b      	str	r3, [r7, #0]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003658:	f001 f914 	bl	8004884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800365c:	4b39      	ldr	r3, [pc, #228]	; (8003744 <xTaskResumeAll+0x118>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	4a38      	ldr	r2, [pc, #224]	; (8003744 <xTaskResumeAll+0x118>)
 8003664:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <xTaskResumeAll+0x118>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d162      	bne.n	8003734 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <xTaskResumeAll+0x11c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d05e      	beq.n	8003734 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003676:	e02f      	b.n	80036d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <xTaskResumeAll+0x120>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3318      	adds	r3, #24
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff f871 	bl	800276c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3304      	adds	r3, #4
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f86c 	bl	800276c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <xTaskResumeAll+0x124>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d903      	bls.n	80036a8 <xTaskResumeAll+0x7c>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <xTaskResumeAll+0x124>)
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <xTaskResumeAll+0x128>)
 80036b6:	441a      	add	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f7fe fff7 	bl	80026b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <xTaskResumeAll+0x12c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <xTaskResumeAll+0x130>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <xTaskResumeAll+0x120>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1cb      	bne.n	8003678 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036e6:	f000 fb55 	bl	8003d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <xTaskResumeAll+0x134>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036f6:	f000 f847 	bl	8003788 <xTaskIncrementTick>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <xTaskResumeAll+0x130>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3b01      	subs	r3, #1
 800370a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f1      	bne.n	80036f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <xTaskResumeAll+0x134>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <xTaskResumeAll+0x130>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003720:	2301      	movs	r3, #1
 8003722:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <xTaskResumeAll+0x138>)
 8003726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003734:	f001 f8d6 	bl	80048e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003738:	68bb      	ldr	r3, [r7, #8]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000c78 	.word	0x20000c78
 8003748:	20000c50 	.word	0x20000c50
 800374c:	20000c10 	.word	0x20000c10
 8003750:	20000c58 	.word	0x20000c58
 8003754:	20000780 	.word	0x20000780
 8003758:	2000077c 	.word	0x2000077c
 800375c:	20000c64 	.word	0x20000c64
 8003760:	20000c60 	.word	0x20000c60
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <xTaskGetTickCount+0x1c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000c54 	.word	0x20000c54

08003788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003792:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <xTaskIncrementTick+0x148>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 808f 	bne.w	80038ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800379c:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <xTaskIncrementTick+0x14c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037a4:	4a4b      	ldr	r2, [pc, #300]	; (80038d4 <xTaskIncrementTick+0x14c>)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d120      	bne.n	80037f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037b0:	4b49      	ldr	r3, [pc, #292]	; (80038d8 <xTaskIncrementTick+0x150>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	603b      	str	r3, [r7, #0]
}
 80037cc:	bf00      	nop
 80037ce:	e7fe      	b.n	80037ce <xTaskIncrementTick+0x46>
 80037d0:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <xTaskIncrementTick+0x150>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <xTaskIncrementTick+0x154>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <xTaskIncrementTick+0x150>)
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4a3f      	ldr	r2, [pc, #252]	; (80038dc <xTaskIncrementTick+0x154>)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <xTaskIncrementTick+0x158>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <xTaskIncrementTick+0x158>)
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	f000 fad1 	bl	8003d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037f2:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <xTaskIncrementTick+0x15c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d349      	bcc.n	8003890 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fc:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <xTaskIncrementTick+0x150>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003806:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <xTaskIncrementTick+0x15c>)
 8003808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800380c:	601a      	str	r2, [r3, #0]
					break;
 800380e:	e03f      	b.n	8003890 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <xTaskIncrementTick+0x150>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d203      	bcs.n	8003830 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003828:	4a2e      	ldr	r2, [pc, #184]	; (80038e4 <xTaskIncrementTick+0x15c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800382e:	e02f      	b.n	8003890 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	3304      	adds	r3, #4
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe ff99 	bl	800276c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3318      	adds	r3, #24
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe ff90 	bl	800276c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <xTaskIncrementTick+0x160>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d903      	bls.n	8003860 <xTaskIncrementTick+0xd8>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <xTaskIncrementTick+0x160>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <xTaskIncrementTick+0x164>)
 800386e:	441a      	add	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7fe ff1b 	bl	80026b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <xTaskIncrementTick+0x168>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	429a      	cmp	r2, r3
 8003888:	d3b8      	bcc.n	80037fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800388a:	2301      	movs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800388e:	e7b5      	b.n	80037fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003890:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <xTaskIncrementTick+0x168>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	4915      	ldr	r1, [pc, #84]	; (80038ec <xTaskIncrementTick+0x164>)
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d901      	bls.n	80038ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <xTaskIncrementTick+0x16c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e004      	b.n	80038c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <xTaskIncrementTick+0x170>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <xTaskIncrementTick+0x170>)
 80038c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038c4:	697b      	ldr	r3, [r7, #20]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000c78 	.word	0x20000c78
 80038d4:	20000c54 	.word	0x20000c54
 80038d8:	20000c08 	.word	0x20000c08
 80038dc:	20000c0c 	.word	0x20000c0c
 80038e0:	20000c68 	.word	0x20000c68
 80038e4:	20000c70 	.word	0x20000c70
 80038e8:	20000c58 	.word	0x20000c58
 80038ec:	20000780 	.word	0x20000780
 80038f0:	2000077c 	.word	0x2000077c
 80038f4:	20000c64 	.word	0x20000c64
 80038f8:	20000c60 	.word	0x20000c60

080038fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <vTaskSwitchContext+0xa8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800390a:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <vTaskSwitchContext+0xac>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003910:	e041      	b.n	8003996 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <vTaskSwitchContext+0xac>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003918:	4b24      	ldr	r3, [pc, #144]	; (80039ac <vTaskSwitchContext+0xb0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e010      	b.n	8003942 <vTaskSwitchContext+0x46>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <vTaskSwitchContext+0x40>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	607b      	str	r3, [r7, #4]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <vTaskSwitchContext+0x3e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3b01      	subs	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	491b      	ldr	r1, [pc, #108]	; (80039b0 <vTaskSwitchContext+0xb4>)
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0e4      	beq.n	8003920 <vTaskSwitchContext+0x24>
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <vTaskSwitchContext+0xb4>)
 8003962:	4413      	add	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3308      	adds	r3, #8
 8003978:	429a      	cmp	r2, r3
 800397a:	d104      	bne.n	8003986 <vTaskSwitchContext+0x8a>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <vTaskSwitchContext+0xb8>)
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4a06      	ldr	r2, [pc, #24]	; (80039ac <vTaskSwitchContext+0xb0>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6013      	str	r3, [r2, #0]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000c78 	.word	0x20000c78
 80039a8:	20000c64 	.word	0x20000c64
 80039ac:	20000c58 	.word	0x20000c58
 80039b0:	20000780 	.word	0x20000780
 80039b4:	2000077c 	.word	0x2000077c

080039b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	60fb      	str	r3, [r7, #12]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <vTaskPlaceOnEventList+0x44>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3318      	adds	r3, #24
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe fe87 	bl	80026fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039ec:	2101      	movs	r1, #1
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f000 fa7c 	bl	8003eec <prvAddCurrentTaskToDelayedList>
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000077c 	.word	0x2000077c

08003a00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	617b      	str	r3, [r7, #20]
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	4619      	mov	r1, r3
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7fe fe3e 	bl	80026b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	68b8      	ldr	r0, [r7, #8]
 8003a46:	f000 fa51 	bl	8003eec <prvAddCurrentTaskToDelayedList>
	}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	2000077c 	.word	0x2000077c

08003a58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	60fb      	str	r3, [r7, #12]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	3318      	adds	r3, #24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fe6f 	bl	800276c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <xTaskRemoveFromEventList+0xb0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11d      	bne.n	8003ad2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fe66 	bl	800276c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <xTaskRemoveFromEventList+0xb4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d903      	bls.n	8003ab4 <xTaskRemoveFromEventList+0x5c>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <xTaskRemoveFromEventList+0xb4>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <xTaskRemoveFromEventList+0xb8>)
 8003ac2:	441a      	add	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f7fe fdf1 	bl	80026b2 <vListInsertEnd>
 8003ad0:	e005      	b.n	8003ade <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480e      	ldr	r0, [pc, #56]	; (8003b14 <xTaskRemoveFromEventList+0xbc>)
 8003ada:	f7fe fdea 	bl	80026b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <xTaskRemoveFromEventList+0xc0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d905      	bls.n	8003af8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <xTaskRemoveFromEventList+0xc4>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e001      	b.n	8003afc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003afc:	697b      	ldr	r3, [r7, #20]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000c78 	.word	0x20000c78
 8003b0c:	20000c58 	.word	0x20000c58
 8003b10:	20000780 	.word	0x20000780
 8003b14:	20000c10 	.word	0x20000c10
 8003b18:	2000077c 	.word	0x2000077c
 8003b1c:	20000c64 	.word	0x20000c64

08003b20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <vTaskInternalSetTimeOutState+0x24>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <vTaskInternalSetTimeOutState+0x28>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	605a      	str	r2, [r3, #4]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	20000c68 	.word	0x20000c68
 8003b48:	20000c54 	.word	0x20000c54

08003b4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	613b      	str	r3, [r7, #16]
}
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	60fb      	str	r3, [r7, #12]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b8e:	f000 fe79 	bl	8004884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <xTaskCheckForTimeOut+0xbc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003baa:	d102      	bne.n	8003bb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	e023      	b.n	8003bfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <xTaskCheckForTimeOut+0xc0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d007      	beq.n	8003bce <xTaskCheckForTimeOut+0x82>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e015      	b.n	8003bfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d20b      	bcs.n	8003bf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff9b 	bl	8003b20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e004      	b.n	8003bfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bfa:	f000 fe73 	bl	80048e4 <vPortExitCritical>

	return xReturn;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000c54 	.word	0x20000c54
 8003c0c:	20000c68 	.word	0x20000c68

08003c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <vTaskMissedYield+0x14>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	20000c64 	.word	0x20000c64

08003c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c30:	f000 f852 	bl	8003cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <prvIdleTask+0x28>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d9f9      	bls.n	8003c30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <prvIdleTask+0x2c>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c4c:	e7f0      	b.n	8003c30 <prvIdleTask+0x8>
 8003c4e:	bf00      	nop
 8003c50:	20000780 	.word	0x20000780
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e00c      	b.n	8003c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <prvInitialiseTaskLists+0x60>)
 8003c70:	4413      	add	r3, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fcf0 	bl	8002658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b37      	cmp	r3, #55	; 0x37
 8003c82:	d9ef      	bls.n	8003c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c84:	480d      	ldr	r0, [pc, #52]	; (8003cbc <prvInitialiseTaskLists+0x64>)
 8003c86:	f7fe fce7 	bl	8002658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c8a:	480d      	ldr	r0, [pc, #52]	; (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003c8c:	f7fe fce4 	bl	8002658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c90:	480c      	ldr	r0, [pc, #48]	; (8003cc4 <prvInitialiseTaskLists+0x6c>)
 8003c92:	f7fe fce1 	bl	8002658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c96:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <prvInitialiseTaskLists+0x70>)
 8003c98:	f7fe fcde 	bl	8002658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c9c:	480b      	ldr	r0, [pc, #44]	; (8003ccc <prvInitialiseTaskLists+0x74>)
 8003c9e:	f7fe fcdb 	bl	8002658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <prvInitialiseTaskLists+0x78>)
 8003ca4:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <prvInitialiseTaskLists+0x64>)
 8003ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <prvInitialiseTaskLists+0x7c>)
 8003caa:	4a05      	ldr	r2, [pc, #20]	; (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000780 	.word	0x20000780
 8003cbc:	20000be0 	.word	0x20000be0
 8003cc0:	20000bf4 	.word	0x20000bf4
 8003cc4:	20000c10 	.word	0x20000c10
 8003cc8:	20000c24 	.word	0x20000c24
 8003ccc:	20000c3c 	.word	0x20000c3c
 8003cd0:	20000c08 	.word	0x20000c08
 8003cd4:	20000c0c 	.word	0x20000c0c

08003cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cde:	e019      	b.n	8003d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ce0:	f000 fdd0 	bl	8004884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <prvCheckTasksWaitingTermination+0x50>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fd3b 	bl	800276c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d0a:	f000 fdeb 	bl	80048e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f810 	bl	8003d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e1      	bne.n	8003ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000c24 	.word	0x20000c24
 8003d2c:	20000c50 	.word	0x20000c50
 8003d30:	20000c38 	.word	0x20000c38

08003d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d108      	bne.n	8003d58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 ff88 	bl	8004c60 <vPortFree>
				vPortFree( pxTCB );
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 ff85 	bl	8004c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d56:	e018      	b.n	8003d8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d103      	bne.n	8003d6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 ff7c 	bl	8004c60 <vPortFree>
	}
 8003d68:	e00f      	b.n	8003d8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d00a      	beq.n	8003d8a <prvDeleteTCB+0x56>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <prvDeleteTCB+0x54>
	}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dac:	e008      	b.n	8003dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000c08 	.word	0x20000c08
 8003dd0:	20000c70 	.word	0x20000c70

08003dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <xTaskGetSchedulerState+0x34>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003de2:	2301      	movs	r3, #1
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	e008      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <xTaskGetSchedulerState+0x38>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003df0:	2302      	movs	r3, #2
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e001      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dfa:	687b      	ldr	r3, [r7, #4]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000c5c 	.word	0x20000c5c
 8003e0c:	20000c78 	.word	0x20000c78

08003e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d056      	beq.n	8003ed4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <xTaskPriorityDisinherit+0xd0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d00a      	beq.n	8003e46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60fb      	str	r3, [r7, #12]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60bb      	str	r3, [r7, #8]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	1e5a      	subs	r2, r3, #1
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d02c      	beq.n	8003ed4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d128      	bne.n	8003ed4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fc70 	bl	800276c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <xTaskPriorityDisinherit+0xd4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d903      	bls.n	8003eb4 <xTaskPriorityDisinherit+0xa4>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <xTaskPriorityDisinherit+0xd4>)
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <xTaskPriorityDisinherit+0xd8>)
 8003ec2:	441a      	add	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7fe fbf1 	bl	80026b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ed4:	697b      	ldr	r3, [r7, #20]
	}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000077c 	.word	0x2000077c
 8003ee4:	20000c58 	.word	0x20000c58
 8003ee8:	20000780 	.word	0x20000780

08003eec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ef6:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x90>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fc32 	bl	800276c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f0e:	d10a      	bne.n	8003f26 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4819      	ldr	r0, [pc, #100]	; (8003f84 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f20:	f7fe fbc7 	bl	80026b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f24:	e026      	b.n	8003f74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d209      	bcs.n	8003f52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe fbd5 	bl	80026fa <vListInsert>
}
 8003f50:	e010      	b.n	8003f74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fe fbcb 	bl	80026fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d202      	bcs.n	8003f74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f6e:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000c54 	.word	0x20000c54
 8003f80:	2000077c 	.word	0x2000077c
 8003f84:	20000c3c 	.word	0x20000c3c
 8003f88:	20000c0c 	.word	0x20000c0c
 8003f8c:	20000c08 	.word	0x20000c08
 8003f90:	20000c70 	.word	0x20000c70

08003f94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f9e:	f000 fb07 	bl	80045b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <xTimerCreateTimerTask+0x80>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d021      	beq.n	8003fee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fb2:	1d3a      	adds	r2, r7, #4
 8003fb4:	f107 0108 	add.w	r1, r7, #8
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe fb31 	bl	8002624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	9202      	str	r2, [sp, #8]
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2302      	movs	r3, #2
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	4910      	ldr	r1, [pc, #64]	; (8004018 <xTimerCreateTimerTask+0x84>)
 8003fd6:	4811      	ldr	r0, [pc, #68]	; (800401c <xTimerCreateTimerTask+0x88>)
 8003fd8:	f7ff f8de 	bl	8003198 <xTaskCreateStatic>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <xTimerCreateTimerTask+0x8c>)
 8003fe0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <xTimerCreateTimerTask+0x8c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fea:	2301      	movs	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	613b      	str	r3, [r7, #16]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800400a:	697b      	ldr	r3, [r7, #20]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000cac 	.word	0x20000cac
 8004018:	08004f94 	.word	0x08004f94
 800401c:	08004159 	.word	0x08004159
 8004020:	20000cb0 	.word	0x20000cb0

08004024 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004032:	2300      	movs	r3, #0
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xTimerGenericCommand+0x2e>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	623b      	str	r3, [r7, #32]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <xTimerGenericCommand+0x98>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02a      	beq.n	80040b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b05      	cmp	r3, #5
 800406a:	dc18      	bgt.n	800409e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800406c:	f7ff feb2 	bl	8003dd4 <xTaskGetSchedulerState>
 8004070:	4603      	mov	r3, r0
 8004072:	2b02      	cmp	r3, #2
 8004074:	d109      	bne.n	800408a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <xTimerGenericCommand+0x98>)
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	f107 0110 	add.w	r1, r7, #16
 800407e:	2300      	movs	r3, #0
 8004080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004082:	f7fe fca1 	bl	80029c8 <xQueueGenericSend>
 8004086:	6278      	str	r0, [r7, #36]	; 0x24
 8004088:	e012      	b.n	80040b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <xTimerGenericCommand+0x98>)
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f107 0110 	add.w	r1, r7, #16
 8004092:	2300      	movs	r3, #0
 8004094:	2200      	movs	r2, #0
 8004096:	f7fe fc97 	bl	80029c8 <xQueueGenericSend>
 800409a:	6278      	str	r0, [r7, #36]	; 0x24
 800409c:	e008      	b.n	80040b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <xTimerGenericCommand+0x98>)
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	f107 0110 	add.w	r1, r7, #16
 80040a6:	2300      	movs	r3, #0
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	f7fe fd8b 	bl	8002bc4 <xQueueGenericSendFromISR>
 80040ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3728      	adds	r7, #40	; 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000cac 	.word	0x20000cac

080040c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ca:	4b22      	ldr	r3, [pc, #136]	; (8004154 <prvProcessExpiredTimer+0x94>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe fb47 	bl	800276c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	699a      	ldr	r2, [r3, #24]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	18d1      	adds	r1, r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	6978      	ldr	r0, [r7, #20]
 80040fa:	f000 f8d1 	bl	80042a0 <prvInsertTimerInActiveList>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01f      	beq.n	8004144 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004104:	2300      	movs	r3, #0
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2300      	movs	r3, #0
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	2100      	movs	r1, #0
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff ff88 	bl	8004024 <xTimerGenericCommand>
 8004114:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d113      	bne.n	8004144 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	60fb      	str	r3, [r7, #12]
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	4798      	blx	r3
}
 800414c:	bf00      	nop
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000ca4 	.word	0x20000ca4

08004158 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f857 	bl	8004218 <prvGetNextExpireTime>
 800416a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4619      	mov	r1, r3
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f803 	bl	800417c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004176:	f000 f8d5 	bl	8004324 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800417a:	e7f1      	b.n	8004160 <prvTimerTask+0x8>

0800417c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004186:	f7ff fa43 	bl	8003610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f866 	bl	8004260 <prvSampleTimeNow>
 8004194:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d130      	bne.n	80041fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <prvProcessTimerOrBlockTask+0x3c>
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d806      	bhi.n	80041b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041aa:	f7ff fa3f 	bl	800362c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041ae:	68f9      	ldr	r1, [r7, #12]
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff85 	bl	80040c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041b6:	e024      	b.n	8004202 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <prvProcessTimerOrBlockTask+0x90>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <prvProcessTimerOrBlockTask+0x50>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <prvProcessTimerOrBlockTask+0x52>
 80041cc:	2300      	movs	r3, #0
 80041ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <prvProcessTimerOrBlockTask+0x94>)
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	f7fe ffa7 	bl	8003130 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041e2:	f7ff fa23 	bl	800362c <xTaskResumeAll>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <prvProcessTimerOrBlockTask+0x98>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
}
 80041fc:	e001      	b.n	8004202 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041fe:	f7ff fa15 	bl	800362c <xTaskResumeAll>
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000ca8 	.word	0x20000ca8
 8004210:	20000cac 	.word	0x20000cac
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <prvGetNextExpireTime+0x44>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <prvGetNextExpireTime+0x16>
 800422a:	2201      	movs	r2, #1
 800422c:	e000      	b.n	8004230 <prvGetNextExpireTime+0x18>
 800422e:	2200      	movs	r2, #0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800423c:	4b07      	ldr	r3, [pc, #28]	; (800425c <prvGetNextExpireTime+0x44>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e001      	b.n	800424c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000ca4 	.word	0x20000ca4

08004260 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004268:	f7ff fa7e 	bl	8003768 <xTaskGetTickCount>
 800426c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <prvSampleTimeNow+0x3c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	429a      	cmp	r2, r3
 8004276:	d205      	bcs.n	8004284 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004278:	f000 f936 	bl	80044e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e002      	b.n	800428a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <prvSampleTimeNow+0x3c>)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000cb4 	.word	0x20000cb4

080042a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d812      	bhi.n	80042ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	1ad2      	subs	r2, r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042d4:	2301      	movs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e01b      	b.n	8004312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <prvInsertTimerInActiveList+0x7c>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7fe fa08 	bl	80026fa <vListInsert>
 80042ea:	e012      	b.n	8004312 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d206      	bcs.n	8004302 <prvInsertTimerInActiveList+0x62>
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e007      	b.n	8004312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <prvInsertTimerInActiveList+0x80>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3304      	adds	r3, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f7fe f9f4 	bl	80026fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000ca8 	.word	0x20000ca8
 8004320:	20000ca4 	.word	0x20000ca4

08004324 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	; 0x38
 8004328:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800432a:	e0ca      	b.n	80044c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	da18      	bge.n	8004364 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	3304      	adds	r3, #4
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	61fb      	str	r3, [r7, #28]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435a:	6850      	ldr	r0, [r2, #4]
 800435c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435e:	6892      	ldr	r2, [r2, #8]
 8004360:	4611      	mov	r1, r2
 8004362:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f2c0 80ab 	blt.w	80044c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe f9f5 	bl	800276c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004382:	463b      	mov	r3, r7
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff6b 	bl	8004260 <prvSampleTimeNow>
 800438a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b09      	cmp	r3, #9
 8004390:	f200 8096 	bhi.w	80044c0 <prvProcessReceivedCommands+0x19c>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <prvProcessReceivedCommands+0x78>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043c5 	.word	0x080043c5
 80043a8:	08004439 	.word	0x08004439
 80043ac:	0800444d 	.word	0x0800444d
 80043b0:	08004497 	.word	0x08004497
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043c5 	.word	0x080043c5
 80043bc:	08004439 	.word	0x08004439
 80043c0:	0800444d 	.word	0x0800444d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	18d1      	adds	r1, r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e4:	f7ff ff5c 	bl	80042a0 <prvInsertTimerInActiveList>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d069      	beq.n	80044c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d05e      	beq.n	80044c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	441a      	add	r2, r3
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2300      	movs	r3, #0
 8004412:	2100      	movs	r1, #0
 8004414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004416:	f7ff fe05 	bl	8004024 <xTimerGenericCommand>
 800441a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d14f      	bne.n	80044c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	61bb      	str	r3, [r7, #24]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800444a:	e03a      	b.n	80044c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	617b      	str	r3, [r7, #20]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	18d1      	adds	r1, r2, r3
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004490:	f7ff ff06 	bl	80042a0 <prvInsertTimerInActiveList>
					break;
 8004494:	e015      	b.n	80044c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80044a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a6:	f000 fbdb 	bl	8004c60 <vPortFree>
 80044aa:	e00a      	b.n	80044c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044be:	e000      	b.n	80044c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80044c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <prvProcessReceivedCommands+0x1c0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	1d39      	adds	r1, r7, #4
 80044c8:	2200      	movs	r2, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fc16 	bl	8002cfc <xQueueReceive>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f47f af2a 	bne.w	800432c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3730      	adds	r7, #48	; 0x30
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000cac 	.word	0x20000cac

080044e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044ee:	e048      	b.n	8004582 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044f0:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <prvSwitchTimerLists+0xc0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044fa:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <prvSwitchTimerLists+0xc0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3304      	adds	r3, #4
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe f92f 	bl	800276c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d02e      	beq.n	8004582 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	429a      	cmp	r2, r3
 8004534:	d90e      	bls.n	8004554 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <prvSwitchTimerLists+0xc0>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3304      	adds	r3, #4
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f7fe f8d4 	bl	80026fa <vListInsert>
 8004552:	e016      	b.n	8004582 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004554:	2300      	movs	r3, #0
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2300      	movs	r3, #0
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	2100      	movs	r1, #0
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fd60 	bl	8004024 <xTimerGenericCommand>
 8004564:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	603b      	str	r3, [r7, #0]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <prvSwitchTimerLists+0xc0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1b1      	bne.n	80044f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <prvSwitchTimerLists+0xc0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <prvSwitchTimerLists+0xc4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <prvSwitchTimerLists+0xc0>)
 8004598:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800459a:	4a04      	ldr	r2, [pc, #16]	; (80045ac <prvSwitchTimerLists+0xc4>)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000ca4 	.word	0x20000ca4
 80045ac:	20000ca8 	.word	0x20000ca8

080045b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045b6:	f000 f965 	bl	8004884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <prvCheckForValidListAndQueue+0x60>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d120      	bne.n	8004604 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045c2:	4814      	ldr	r0, [pc, #80]	; (8004614 <prvCheckForValidListAndQueue+0x64>)
 80045c4:	f7fe f848 	bl	8002658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045c8:	4813      	ldr	r0, [pc, #76]	; (8004618 <prvCheckForValidListAndQueue+0x68>)
 80045ca:	f7fe f845 	bl	8002658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <prvCheckForValidListAndQueue+0x6c>)
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <prvCheckForValidListAndQueue+0x64>)
 80045d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <prvCheckForValidListAndQueue+0x70>)
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <prvCheckForValidListAndQueue+0x68>)
 80045d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045da:	2300      	movs	r3, #0
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <prvCheckForValidListAndQueue+0x74>)
 80045e0:	4a11      	ldr	r2, [pc, #68]	; (8004628 <prvCheckForValidListAndQueue+0x78>)
 80045e2:	2110      	movs	r1, #16
 80045e4:	200a      	movs	r0, #10
 80045e6:	f7fe f953 	bl	8002890 <xQueueGenericCreateStatic>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a08      	ldr	r2, [pc, #32]	; (8004610 <prvCheckForValidListAndQueue+0x60>)
 80045ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <prvCheckForValidListAndQueue+0x60>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <prvCheckForValidListAndQueue+0x60>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	490b      	ldr	r1, [pc, #44]	; (800462c <prvCheckForValidListAndQueue+0x7c>)
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fd6c 	bl	80030dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004604:	f000 f96e 	bl	80048e4 <vPortExitCritical>
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000cac 	.word	0x20000cac
 8004614:	20000c7c 	.word	0x20000c7c
 8004618:	20000c90 	.word	0x20000c90
 800461c:	20000ca4 	.word	0x20000ca4
 8004620:	20000ca8 	.word	0x20000ca8
 8004624:	20000d58 	.word	0x20000d58
 8004628:	20000cb8 	.word	0x20000cb8
 800462c:	08004f9c 	.word	0x08004f9c

08004630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3b04      	subs	r3, #4
 8004640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3b04      	subs	r3, #4
 800464e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b04      	subs	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004660:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <pxPortInitialiseStack+0x64>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b14      	subs	r3, #20
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b04      	subs	r3, #4
 8004676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f06f 0202 	mvn.w	r2, #2
 800467e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3b20      	subs	r3, #32
 8004684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004686:	68fb      	ldr	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	08004699 	.word	0x08004699

08004698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <prvTaskExitError+0x54>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046aa:	d00a      	beq.n	80046c2 <prvTaskExitError+0x2a>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <prvTaskExitError+0x28>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	60bb      	str	r3, [r7, #8]
}
 80046d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046d6:	bf00      	nop
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0fc      	beq.n	80046d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	2000000c 	.word	0x2000000c

080046f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <pxCurrentTCBConst2>)
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	6808      	ldr	r0, [r1, #0]
 80046f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	f380 8809 	msr	PSP, r0
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	4770      	bx	lr
 800470c:	f3af 8000 	nop.w

08004710 <pxCurrentTCBConst2>:
 8004710:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004718:	4808      	ldr	r0, [pc, #32]	; (800473c <prvPortStartFirstTask+0x24>)
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	6800      	ldr	r0, [r0, #0]
 800471e:	f380 8808 	msr	MSP, r0
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8814 	msr	CONTROL, r0
 800472a:	b662      	cpsie	i
 800472c:	b661      	cpsie	f
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	df00      	svc	0
 8004738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800473a:	bf00      	nop
 800473c:	e000ed08 	.word	0xe000ed08

08004740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004746:	4b46      	ldr	r3, [pc, #280]	; (8004860 <xPortStartScheduler+0x120>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a46      	ldr	r2, [pc, #280]	; (8004864 <xPortStartScheduler+0x124>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10a      	bne.n	8004766 <xPortStartScheduler+0x26>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	613b      	str	r3, [r7, #16]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <xPortStartScheduler+0x120>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a3f      	ldr	r2, [pc, #252]	; (8004868 <xPortStartScheduler+0x128>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10a      	bne.n	8004786 <xPortStartScheduler+0x46>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60fb      	str	r3, [r7, #12]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004786:	4b39      	ldr	r3, [pc, #228]	; (800486c <xPortStartScheduler+0x12c>)
 8004788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	22ff      	movs	r2, #255	; 0xff
 8004796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <xPortStartScheduler+0x130>)
 80047ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ae:	4b31      	ldr	r3, [pc, #196]	; (8004874 <xPortStartScheduler+0x134>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047b4:	e009      	b.n	80047ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047b6:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <xPortStartScheduler+0x134>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	4a2d      	ldr	r2, [pc, #180]	; (8004874 <xPortStartScheduler+0x134>)
 80047be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d0ef      	beq.n	80047b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047d6:	4b27      	ldr	r3, [pc, #156]	; (8004874 <xPortStartScheduler+0x134>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1c3 0307 	rsb	r3, r3, #7
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d00a      	beq.n	80047f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60bb      	str	r3, [r7, #8]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <xPortStartScheduler+0x134>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <xPortStartScheduler+0x134>)
 8004800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <xPortStartScheduler+0x134>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800480a:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <xPortStartScheduler+0x134>)
 800480c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <xPortStartScheduler+0x138>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <xPortStartScheduler+0x138>)
 800481c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <xPortStartScheduler+0x138>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a14      	ldr	r2, [pc, #80]	; (8004878 <xPortStartScheduler+0x138>)
 8004828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800482c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800482e:	f000 f8dd 	bl	80049ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <xPortStartScheduler+0x13c>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004838:	f000 f8fc 	bl	8004a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <xPortStartScheduler+0x140>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <xPortStartScheduler+0x140>)
 8004842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004848:	f7ff ff66 	bl	8004718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800484c:	f7ff f856 	bl	80038fc <vTaskSwitchContext>
	prvTaskExitError();
 8004850:	f7ff ff22 	bl	8004698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	e000ed00 	.word	0xe000ed00
 8004864:	410fc271 	.word	0x410fc271
 8004868:	410fc270 	.word	0x410fc270
 800486c:	e000e400 	.word	0xe000e400
 8004870:	20000da8 	.word	0x20000da8
 8004874:	20000dac 	.word	0x20000dac
 8004878:	e000ed20 	.word	0xe000ed20
 800487c:	2000000c 	.word	0x2000000c
 8004880:	e000ef34 	.word	0xe000ef34

08004884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	607b      	str	r3, [r7, #4]
}
 800489c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <vPortEnterCritical+0x58>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <vPortEnterCritical+0x58>)
 80048a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <vPortEnterCritical+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10f      	bne.n	80048d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortEnterCritical+0x5c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	603b      	str	r3, [r7, #0]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <vPortEnterCritical+0x4a>
	}
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	2000000c 	.word	0x2000000c
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <vPortExitCritical+0x50>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vPortExitCritical+0x24>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <vPortExitCritical+0x50>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <vPortExitCritical+0x50>)
 8004910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <vPortExitCritical+0x50>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <vPortExitCritical+0x42>
 800491a:	2300      	movs	r3, #0
 800491c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f383 8811 	msr	BASEPRI, r3
}
 8004924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	2000000c 	.word	0x2000000c
	...

08004940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004940:	f3ef 8009 	mrs	r0, PSP
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <pxCurrentTCBConst>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f01e 0f10 	tst.w	lr, #16
 8004950:	bf08      	it	eq
 8004952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	6010      	str	r0, [r2, #0]
 800495c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004964:	f380 8811 	msr	BASEPRI, r0
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f7fe ffc4 	bl	80038fc <vTaskSwitchContext>
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f380 8811 	msr	BASEPRI, r0
 800497c:	bc09      	pop	{r0, r3}
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	6808      	ldr	r0, [r1, #0]
 8004982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004986:	f01e 0f10 	tst.w	lr, #16
 800498a:	bf08      	it	eq
 800498c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004990:	f380 8809 	msr	PSP, r0
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst>:
 80049a0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049c2:	f7fe fee1 	bl	8003788 <xTaskIncrementTick>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <xPortSysTickHandler+0x40>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f383 8811 	msr	BASEPRI, r3
}
 80049de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <vPortSetupTimerInterrupt+0x34>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <vPortSetupTimerInterrupt+0x38>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <vPortSetupTimerInterrupt+0x3c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <vPortSetupTimerInterrupt+0x40>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	099b      	lsrs	r3, r3, #6
 8004a08:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <vPortSetupTimerInterrupt+0x44>)
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <vPortSetupTimerInterrupt+0x34>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	e000e010 	.word	0xe000e010
 8004a24:	e000e018 	.word	0xe000e018
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	10624dd3 	.word	0x10624dd3
 8004a30:	e000e014 	.word	0xe000e014

08004a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a44 <vPortEnableVFP+0x10>
 8004a38:	6801      	ldr	r1, [r0, #0]
 8004a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a3e:	6001      	str	r1, [r0, #0]
 8004a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a42:	bf00      	nop
 8004a44:	e000ed88 	.word	0xe000ed88

08004a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a4e:	f3ef 8305 	mrs	r3, IPSR
 8004a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b0f      	cmp	r3, #15
 8004a58:	d914      	bls.n	8004a84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <vPortValidateInterruptPriority+0x70>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <vPortValidateInterruptPriority+0x74>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	7afa      	ldrb	r2, [r7, #11]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d20a      	bcs.n	8004a84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <vPortValidateInterruptPriority+0x78>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <vPortValidateInterruptPriority+0x7c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d90a      	bls.n	8004aaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	603b      	str	r3, [r7, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <vPortValidateInterruptPriority+0x60>
	}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e3f0 	.word	0xe000e3f0
 8004abc:	20000da8 	.word	0x20000da8
 8004ac0:	e000ed0c 	.word	0xe000ed0c
 8004ac4:	20000dac 	.word	0x20000dac

08004ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ad4:	f7fe fd9c 	bl	8003610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ad8:	4b5b      	ldr	r3, [pc, #364]	; (8004c48 <pvPortMalloc+0x180>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ae0:	f000 f920 	bl	8004d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <pvPortMalloc+0x184>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 8093 	bne.w	8004c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01d      	beq.n	8004b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004af8:	2208      	movs	r2, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d014      	beq.n	8004b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f023 0307 	bic.w	r3, r3, #7
 8004b10:	3308      	adds	r3, #8
 8004b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <pvPortMalloc+0x6c>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	617b      	str	r3, [r7, #20]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d06e      	beq.n	8004c18 <pvPortMalloc+0x150>
 8004b3a:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <pvPortMalloc+0x188>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d869      	bhi.n	8004c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b44:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b4e:	e004      	b.n	8004b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d903      	bls.n	8004b6c <pvPortMalloc+0xa4>
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f1      	bne.n	8004b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b6c:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <pvPortMalloc+0x180>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d050      	beq.n	8004c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	2308      	movs	r3, #8
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d91f      	bls.n	8004bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bd2:	69b8      	ldr	r0, [r7, #24]
 8004bd4:	f000 f908 	bl	8004de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <pvPortMalloc+0x188>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <pvPortMalloc+0x188>)
 8004be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004be6:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <pvPortMalloc+0x188>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <pvPortMalloc+0x190>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d203      	bcs.n	8004bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <pvPortMalloc+0x188>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <pvPortMalloc+0x190>)
 8004bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <pvPortMalloc+0x184>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <pvPortMalloc+0x194>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <pvPortMalloc+0x194>)
 8004c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c18:	f7fe fd08 	bl	800362c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <pvPortMalloc+0x174>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60fb      	str	r3, [r7, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <pvPortMalloc+0x172>
	return pvReturn;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200049b8 	.word	0x200049b8
 8004c4c:	200049cc 	.word	0x200049cc
 8004c50:	200049bc 	.word	0x200049bc
 8004c54:	200049b0 	.word	0x200049b0
 8004c58:	200049c0 	.word	0x200049c0
 8004c5c:	200049c4 	.word	0x200049c4

08004c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d04d      	beq.n	8004d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c72:	2308      	movs	r3, #8
 8004c74:	425b      	negs	r3, r3
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <vPortFree+0xb8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <vPortFree+0x44>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60fb      	str	r3, [r7, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <vPortFree+0x62>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60bb      	str	r3, [r7, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <vPortFree+0xb8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01e      	beq.n	8004d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11a      	bne.n	8004d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <vPortFree+0xb8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ce8:	f7fe fc92 	bl	8003610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <vPortFree+0xbc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <vPortFree+0xbc>)
 8004cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cfa:	6938      	ldr	r0, [r7, #16]
 8004cfc:	f000 f874 	bl	8004de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <vPortFree+0xc0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vPortFree+0xc0>)
 8004d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d0a:	f7fe fc8f 	bl	800362c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200049cc 	.word	0x200049cc
 8004d1c:	200049bc 	.word	0x200049bc
 8004d20:	200049c8 	.word	0x200049c8

08004d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <prvHeapInit+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3307      	adds	r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <prvHeapInit+0xac>)
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d70:	2208      	movs	r2, #8
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvHeapInit+0xb4>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <prvHeapInit+0xb8>)
 8004db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <prvHeapInit+0xbc>)
 8004dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <prvHeapInit+0xc0>)
 8004dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	20000db0 	.word	0x20000db0
 8004dd4:	200049b0 	.word	0x200049b0
 8004dd8:	200049b8 	.word	0x200049b8
 8004ddc:	200049c0 	.word	0x200049c0
 8004de0:	200049bc 	.word	0x200049bc
 8004de4:	200049cc 	.word	0x200049cc

08004de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <prvInsertBlockIntoFreeList+0xac>)
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e002      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x14>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d8f7      	bhi.n	8004df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d108      	bne.n	8004e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d118      	bne.n	8004e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d00d      	beq.n	8004e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e008      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e003      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d002      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200049b0 	.word	0x200049b0
 8004e98:	200049b8 	.word	0x200049b8

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <__libc_init_array>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4d0d      	ldr	r5, [pc, #52]	; (8004ee4 <__libc_init_array+0x38>)
 8004eb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ee8 <__libc_init_array+0x3c>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	42a6      	cmp	r6, r4
 8004eba:	d109      	bne.n	8004ed0 <__libc_init_array+0x24>
 8004ebc:	4d0b      	ldr	r5, [pc, #44]	; (8004eec <__libc_init_array+0x40>)
 8004ebe:	4c0c      	ldr	r4, [pc, #48]	; (8004ef0 <__libc_init_array+0x44>)
 8004ec0:	f000 f826 	bl	8004f10 <_init>
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	2600      	movs	r6, #0
 8004eca:	42a6      	cmp	r6, r4
 8004ecc:	d105      	bne.n	8004eda <__libc_init_array+0x2e>
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed4:	4798      	blx	r3
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7ee      	b.n	8004eb8 <__libc_init_array+0xc>
 8004eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ede:	4798      	blx	r3
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7f2      	b.n	8004eca <__libc_init_array+0x1e>
 8004ee4:	08005030 	.word	0x08005030
 8004ee8:	08005030 	.word	0x08005030
 8004eec:	08005030 	.word	0x08005030
 8004ef0:	08005034 	.word	0x08005034

08004ef4 <memcpy>:
 8004ef4:	440a      	add	r2, r1
 8004ef6:	4291      	cmp	r1, r2
 8004ef8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004efc:	d100      	bne.n	8004f00 <memcpy+0xc>
 8004efe:	4770      	bx	lr
 8004f00:	b510      	push	{r4, lr}
 8004f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	d1f9      	bne.n	8004f02 <memcpy+0xe>
 8004f0e:	bd10      	pop	{r4, pc}

08004f10 <_init>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr

08004f1c <_fini>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr
