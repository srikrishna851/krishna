
switch_mercury.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e50  08002e50  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000005c  08002eb4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08002eb4  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008414  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f2  00000000  00000000  000284e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00029bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054e  00000000  00000000  0002a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021107  00000000  00000000  0002a81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000094a6  00000000  00000000  0004b925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8154  00000000  00000000  00054dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002034  00000000  00000000  0011cf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0011ef54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002dd0 	.word	0x08002dd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002dd0 	.word	0x08002dd0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:

void SystemClock_Config(void);
void Error_Handler(void);
void UART_Init(void);

int main(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0
    HAL_Init();
 80005c2:	f000 fa35 	bl	8000a30 <HAL_Init>
    SystemClock_Config();
 80005c6:	f000 f875 	bl	80006b4 <SystemClock_Config>

    // Initialize GPIO for LED and switch
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <main+0xe4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <main+0xe4>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <main+0xe4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <main+0xe4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <main+0xe4>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <main+0xe4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8000600:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LED_PIN;
 8000612:	2320      	movs	r3, #32
 8000614:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000626:	4619      	mov	r1, r3
 8000628:	481e      	ldr	r0, [pc, #120]	; (80006a4 <main+0xe8>)
 800062a:	f000 fb59 	bl	8000ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SWITCH_PIN;
 800062e:	2308      	movs	r3, #8
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000632:	2300      	movs	r3, #0
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
    HAL_GPIO_Init(SWITCH_PORT, &GPIO_InitStruct);
 800063a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800063e:	4619      	mov	r1, r3
 8000640:	4819      	ldr	r0, [pc, #100]	; (80006a8 <main+0xec>)
 8000642:	f000 fb4d 	bl	8000ce0 <HAL_GPIO_Init>

    // Initialize UART
    UART_Init();
 8000646:	f000 f8a7 	bl	8000798 <UART_Init>

    while (1) {
        uint8_t val = HAL_GPIO_ReadPin(SWITCH_PORT, SWITCH_PIN);
 800064a:	2108      	movs	r1, #8
 800064c:	4816      	ldr	r0, [pc, #88]	; (80006a8 <main+0xec>)
 800064e:	f000 fcdb 	bl	8001008 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if (val == GPIO_PIN_SET) {
 8000658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800065c:	2b01      	cmp	r3, #1
 800065e:	d105      	bne.n	800066c <main+0xb0>
            HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2120      	movs	r1, #32
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <main+0xe8>)
 8000666:	f000 fce7 	bl	8001038 <HAL_GPIO_WritePin>
 800066a:	e004      	b.n	8000676 <main+0xba>
        } else {
            HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <main+0xe8>)
 8000672:	f000 fce1 	bl	8001038 <HAL_GPIO_WritePin>
        }

        // Send the value over UART
        char uart_buffer[50];
        snprintf(uart_buffer, sizeof(uart_buffer), "Switch value: %d\r\n", val);
 8000676:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800067a:	1d38      	adds	r0, r7, #4
 800067c:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <main+0xf0>)
 800067e:	2132      	movs	r1, #50	; 0x32
 8000680:	f001 feee 	bl	8002460 <sniprintf>

        // Send the data over UART
        HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fdc2 	bl	8000210 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <main+0xf4>)
 8000698:	f001 fb6d 	bl	8001d76 <HAL_UART_Transmit>
    while (1) {
 800069c:	e7d5      	b.n	800064a <main+0x8e>
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	40020400 	.word	0x40020400
 80006ac:	08002de8 	.word	0x08002de8
 80006b0:	20000078 	.word	0x20000078

080006b4 <SystemClock_Config>:
    }
}

void SystemClock_Config(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 ff00 	bl	80024c8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <SystemClock_Config+0xdc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a2b      	ldr	r2, [pc, #172]	; (8000790 <SystemClock_Config+0xdc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <SystemClock_Config+0xdc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemClock_Config+0xe0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <SystemClock_Config+0xe0>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemClock_Config+0xe0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800072c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000732:	2307      	movs	r3, #7
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f830 	bl	80017a0 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x96>
        Error_Handler();
 8000746:	f000 f863 	bl	8000810 <Error_Handler>
    }

    if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800074a:	f000 fc8f 	bl	800106c <HAL_PWREx_EnableOverDrive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xa4>
        Error_Handler();
 8000754:	f000 f85c 	bl	8000810 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000758:	230f      	movs	r3, #15
 800075a:	60bb      	str	r3, [r7, #8]
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2105      	movs	r1, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fcc8 	bl	800110c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xd2>
        Error_Handler();
 8000782:	f000 f845 	bl	8000810 <Error_Handler>
    }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <UART_Init>:

void UART_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <UART_Init+0x6c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <UART_Init+0x6c>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <UART_Init+0x6c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

    huart1.Instance = USART1;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <UART_Init+0x70>)
 80007bc:	4a13      	ldr	r2, [pc, #76]	; (800080c <UART_Init+0x74>)
 80007be:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = UART_BAUDRATE;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <UART_Init+0x70>)
 80007c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c6:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <UART_Init+0x70>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <UART_Init+0x70>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <UART_Init+0x70>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <UART_Init+0x70>)
 80007dc:	220c      	movs	r2, #12
 80007de:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <UART_Init+0x70>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <UART_Init+0x70>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <UART_Init+0x70>)
 80007ee:	f001 fa75 	bl	8001cdc <HAL_UART_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <UART_Init+0x64>
        Error_Handler();
 80007f8:	f000 f80a 	bl	8000810 <Error_Handler>
    }
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	20000078 	.word	0x20000078
 800080c:	40011000 	.word	0x40011000

08000810 <Error_Handler>:

void Error_Handler(void) {
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
    while (1) {
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x4>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_MspInit+0x4c>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000856:	2007      	movs	r0, #7
 8000858:	f000 fa0e 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_UART_MspInit+0x84>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d12b      	bne.n	80008e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_UART_MspInit+0x88>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x88>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_UART_MspInit+0x88>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c2:	230c      	movs	r3, #12
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_UART_MspInit+0x8c>)
 80008de:	f000 f9ff 	bl	8000ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8c6 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f001 fdac 	bl	80024d8 <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20020000 	.word	0x20020000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	200000bc 	.word	0x200000bc
 80009b4:	20000210 	.word	0x20000210

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e2:	490e      	ldr	r1, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f8:	4c0b      	ldr	r4, [pc, #44]	; (8000a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a06:	f7ff ffd7 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f001 fd6b 	bl	80024e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fdd5 	bl	80005bc <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a20:	08002e58 	.word	0x08002e58
  ldr r2, =_sbss
 8000a24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a28:	2000020c 	.word	0x2000020c

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <HAL_Init+0x40>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_Init+0x40>)
 8000a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x40>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f90d 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff fed8 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f917 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 f8ed 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200000c0 	.word	0x200000c0

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000c0 	.word	0x200000c0

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff47 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff5c 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffb0 	bl	8000c34 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e165      	b.n	8000fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 8154 	bne.w	8000fc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d005      	beq.n	8000d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d130      	bne.n	8000d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	f003 0201 	and.w	r2, r3, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d017      	beq.n	8000dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d123      	bne.n	8000e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0203 	and.w	r2, r3, #3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80ae 	beq.w	8000fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e82:	4a58      	ldr	r2, [pc, #352]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_GPIO_Init+0x308>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d025      	beq.n	8000efa <HAL_GPIO_Init+0x21a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <HAL_GPIO_Init+0x30c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d01f      	beq.n	8000ef6 <HAL_GPIO_Init+0x216>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x310>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x212>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_GPIO_Init+0x314>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x20e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4b      	ldr	r2, [pc, #300]	; (8000ff8 <HAL_GPIO_Init+0x318>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x20a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4a      	ldr	r2, [pc, #296]	; (8000ffc <HAL_GPIO_Init+0x31c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x206>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a49      	ldr	r2, [pc, #292]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x202>
 8000ede:	2306      	movs	r3, #6
 8000ee0:	e00c      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e00a      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	e008      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000eea:	2304      	movs	r3, #4
 8000eec:	e006      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e004      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e002      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000efa:	2300      	movs	r3, #0
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	f002 0203 	and.w	r2, r2, #3
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	4093      	lsls	r3, r2
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f0c:	4935      	ldr	r1, [pc, #212]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f3e:	4a31      	ldr	r2, [pc, #196]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f68:	4a26      	ldr	r2, [pc, #152]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fbc:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	f67f ae96 	bls.w	8000cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40021400 	.word	0x40021400
 8001000:	40021800 	.word	0x40021800
 8001004:	40013c00 	.word	0x40013c00

08001008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e001      	b.n	800102a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_PWREx_EnableOverDrive+0x90>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_PWREx_EnableOverDrive+0x90>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_PWREx_EnableOverDrive+0x90>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_PWREx_EnableOverDrive+0x94>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff fd30 	bl	8000afc <HAL_GetTick>
 800109c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800109e:	e009      	b.n	80010b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010a0:	f7ff fd2c 	bl	8000afc <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ae:	d901      	bls.n	80010b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e01f      	b.n	80010f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_PWREx_EnableOverDrive+0x98>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d1ee      	bne.n	80010a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c8:	f7ff fd18 	bl	8000afc <HAL_GetTick>
 80010cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010ce:	e009      	b.n	80010e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010d0:	f7ff fd14 	bl	8000afc <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010de:	d901      	bls.n	80010e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e007      	b.n	80010f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_PWREx_EnableOverDrive+0x98>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010f0:	d1ee      	bne.n	80010d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	420e0040 	.word	0x420e0040
 8001104:	40007000 	.word	0x40007000
 8001108:	420e0044 	.word	0x420e0044

0800110c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0cc      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d90c      	bls.n	8001148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b65      	ldr	r3, [pc, #404]	; (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001136:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d001      	beq.n	8001148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0b8      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d020      	beq.n	8001196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001160:	4b59      	ldr	r3, [pc, #356]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a58      	ldr	r2, [pc, #352]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800116a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001178:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	494d      	ldr	r1, [pc, #308]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d044      	beq.n	800122c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d107      	bne.n	80011ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d119      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e07f      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d003      	beq.n	80011ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d107      	bne.n	80011da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e06f      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e067      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ea:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f023 0203 	bic.w	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4934      	ldr	r1, [pc, #208]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011fc:	f7ff fc7e 	bl	8000afc <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	e00a      	b.n	800121a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001204:	f7ff fc7a 	bl	8000afc <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e04f      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 020c 	and.w	r2, r3, #12
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	429a      	cmp	r2, r3
 800122a:	d1eb      	bne.n	8001204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d20c      	bcs.n	8001254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e032      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4916      	ldr	r1, [pc, #88]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	4313      	orrs	r3, r2
 8001270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	490e      	ldr	r1, [pc, #56]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001292:	f000 f855 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 8001296:	4602      	mov	r2, r0
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	490a      	ldr	r1, [pc, #40]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	5ccb      	ldrb	r3, [r1, r3]
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCC_ClockConfig+0x1c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fbde 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00
 80012c8:	40023800 	.word	0x40023800
 80012cc:	08002dfc 	.word	0x08002dfc
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_RCC_GetHCLKFreq+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000000 	.word	0x20000000

080012f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012f4:	f7ff fff0 	bl	80012d8 <HAL_RCC_GetHCLKFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	0a9b      	lsrs	r3, r3, #10
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	4903      	ldr	r1, [pc, #12]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	08002e0c 	.word	0x08002e0c

08001318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800131c:	f7ff ffdc 	bl	80012d8 <HAL_RCC_GetHCLKFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	0b5b      	lsrs	r3, r3, #13
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	4903      	ldr	r1, [pc, #12]	; (800133c <HAL_RCC_GetPCLK2Freq+0x24>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	08002e0c 	.word	0x08002e0c

08001340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001344:	b0ae      	sub	sp, #184	; 0xb8
 8001346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001366:	4bcb      	ldr	r3, [pc, #812]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b0c      	cmp	r3, #12
 8001370:	f200 8206 	bhi.w	8001780 <HAL_RCC_GetSysClockFreq+0x440>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	080013b1 	.word	0x080013b1
 8001380:	08001781 	.word	0x08001781
 8001384:	08001781 	.word	0x08001781
 8001388:	08001781 	.word	0x08001781
 800138c:	080013b9 	.word	0x080013b9
 8001390:	08001781 	.word	0x08001781
 8001394:	08001781 	.word	0x08001781
 8001398:	08001781 	.word	0x08001781
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	08001781 	.word	0x08001781
 80013a4:	08001781 	.word	0x08001781
 80013a8:	08001781 	.word	0x08001781
 80013ac:	080015b1 	.word	0x080015b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013b0:	4bb9      	ldr	r3, [pc, #740]	; (8001698 <HAL_RCC_GetSysClockFreq+0x358>)
 80013b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013b6:	e1e7      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b8:	4bb8      	ldr	r3, [pc, #736]	; (800169c <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013be:	e1e3      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c0:	4bb4      	ldr	r3, [pc, #720]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013cc:	4bb1      	ldr	r3, [pc, #708]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d071      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d8:	4bae      	ldr	r3, [pc, #696]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80013e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80013e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80013fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80013fe:	4622      	mov	r2, r4
 8001400:	462b      	mov	r3, r5
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	0159      	lsls	r1, r3, #5
 800140c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001410:	0150      	lsls	r0, r2, #5
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4621      	mov	r1, r4
 8001418:	1a51      	subs	r1, r2, r1
 800141a:	6439      	str	r1, [r7, #64]	; 0x40
 800141c:	4629      	mov	r1, r5
 800141e:	eb63 0301 	sbc.w	r3, r3, r1
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001430:	4649      	mov	r1, r9
 8001432:	018b      	lsls	r3, r1, #6
 8001434:	4641      	mov	r1, r8
 8001436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800143a:	4641      	mov	r1, r8
 800143c:	018a      	lsls	r2, r1, #6
 800143e:	4641      	mov	r1, r8
 8001440:	1a51      	subs	r1, r2, r1
 8001442:	63b9      	str	r1, [r7, #56]	; 0x38
 8001444:	4649      	mov	r1, r9
 8001446:	eb63 0301 	sbc.w	r3, r3, r1
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001458:	4649      	mov	r1, r9
 800145a:	00cb      	lsls	r3, r1, #3
 800145c:	4641      	mov	r1, r8
 800145e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001462:	4641      	mov	r1, r8
 8001464:	00ca      	lsls	r2, r1, #3
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	4603      	mov	r3, r0
 800146c:	4622      	mov	r2, r4
 800146e:	189b      	adds	r3, r3, r2
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
 8001472:	462b      	mov	r3, r5
 8001474:	460a      	mov	r2, r1
 8001476:	eb42 0303 	adc.w	r3, r2, r3
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001488:	4629      	mov	r1, r5
 800148a:	024b      	lsls	r3, r1, #9
 800148c:	4621      	mov	r1, r4
 800148e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001492:	4621      	mov	r1, r4
 8001494:	024a      	lsls	r2, r1, #9
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014ac:	f7fe ff08 	bl	80002c0 <__aeabi_uldivmod>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4613      	mov	r3, r2
 80014b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014ba:	e067      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80014d6:	2300      	movs	r3, #0
 80014d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	0159      	lsls	r1, r3, #5
 80014ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f0:	0150      	lsls	r0, r2, #5
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4621      	mov	r1, r4
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001510:	4649      	mov	r1, r9
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	4641      	mov	r1, r8
 8001516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151a:	4641      	mov	r1, r8
 800151c:	018a      	lsls	r2, r1, #6
 800151e:	4641      	mov	r1, r8
 8001520:	ebb2 0a01 	subs.w	sl, r2, r1
 8001524:	4649      	mov	r1, r9
 8001526:	eb63 0b01 	sbc.w	fp, r3, r1
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001536:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800153a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800153e:	4692      	mov	sl, r2
 8001540:	469b      	mov	fp, r3
 8001542:	4623      	mov	r3, r4
 8001544:	eb1a 0303 	adds.w	r3, sl, r3
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	462b      	mov	r3, r5
 800154c:	eb4b 0303 	adc.w	r3, fp, r3
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800155e:	4629      	mov	r1, r5
 8001560:	028b      	lsls	r3, r1, #10
 8001562:	4621      	mov	r1, r4
 8001564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001568:	4621      	mov	r1, r4
 800156a:	028a      	lsls	r2, r1, #10
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001574:	2200      	movs	r2, #0
 8001576:	673b      	str	r3, [r7, #112]	; 0x70
 8001578:	677a      	str	r2, [r7, #116]	; 0x74
 800157a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800157e:	f7fe fe9f 	bl	80002c0 <__aeabi_uldivmod>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4613      	mov	r3, r2
 8001588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	3301      	adds	r3, #1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800159e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ae:	e0eb      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d06b      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	2200      	movs	r2, #0
 80015d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80015d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015da:	663b      	str	r3, [r7, #96]	; 0x60
 80015dc:	2300      	movs	r3, #0
 80015de:	667b      	str	r3, [r7, #100]	; 0x64
 80015e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015e4:	4622      	mov	r2, r4
 80015e6:	462b      	mov	r3, r5
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	0159      	lsls	r1, r3, #5
 80015f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f6:	0150      	lsls	r0, r2, #5
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4621      	mov	r1, r4
 80015fe:	1a51      	subs	r1, r2, r1
 8001600:	61b9      	str	r1, [r7, #24]
 8001602:	4629      	mov	r1, r5
 8001604:	eb63 0301 	sbc.w	r3, r3, r1
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001616:	4659      	mov	r1, fp
 8001618:	018b      	lsls	r3, r1, #6
 800161a:	4651      	mov	r1, sl
 800161c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001620:	4651      	mov	r1, sl
 8001622:	018a      	lsls	r2, r1, #6
 8001624:	4651      	mov	r1, sl
 8001626:	ebb2 0801 	subs.w	r8, r2, r1
 800162a:	4659      	mov	r1, fp
 800162c:	eb63 0901 	sbc.w	r9, r3, r1
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001644:	4690      	mov	r8, r2
 8001646:	4699      	mov	r9, r3
 8001648:	4623      	mov	r3, r4
 800164a:	eb18 0303 	adds.w	r3, r8, r3
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	462b      	mov	r3, r5
 8001652:	eb49 0303 	adc.w	r3, r9, r3
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001664:	4629      	mov	r1, r5
 8001666:	024b      	lsls	r3, r1, #9
 8001668:	4621      	mov	r1, r4
 800166a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800166e:	4621      	mov	r1, r4
 8001670:	024a      	lsls	r2, r1, #9
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800167a:	2200      	movs	r2, #0
 800167c:	65bb      	str	r3, [r7, #88]	; 0x58
 800167e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001684:	f7fe fe1c 	bl	80002c0 <__aeabi_uldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4613      	mov	r3, r2
 800168e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001692:	e065      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x420>
 8001694:	40023800 	.word	0x40023800
 8001698:	00f42400 	.word	0x00f42400
 800169c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_RCC_GetSysClockFreq+0x458>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	2200      	movs	r2, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	4611      	mov	r1, r2
 80016ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016b0:	653b      	str	r3, [r7, #80]	; 0x50
 80016b2:	2300      	movs	r3, #0
 80016b4:	657b      	str	r3, [r7, #84]	; 0x54
 80016b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016ba:	4642      	mov	r2, r8
 80016bc:	464b      	mov	r3, r9
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0159      	lsls	r1, r3, #5
 80016c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016cc:	0150      	lsls	r0, r2, #5
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4641      	mov	r1, r8
 80016d4:	1a51      	subs	r1, r2, r1
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0301 	sbc.w	r3, r3, r1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016ec:	4659      	mov	r1, fp
 80016ee:	018b      	lsls	r3, r1, #6
 80016f0:	4651      	mov	r1, sl
 80016f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016f6:	4651      	mov	r1, sl
 80016f8:	018a      	lsls	r2, r1, #6
 80016fa:	4651      	mov	r1, sl
 80016fc:	1a54      	subs	r4, r2, r1
 80016fe:	4659      	mov	r1, fp
 8001700:	eb63 0501 	sbc.w	r5, r3, r1
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	00eb      	lsls	r3, r5, #3
 800170e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001712:	00e2      	lsls	r2, r4, #3
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	4643      	mov	r3, r8
 800171a:	18e3      	adds	r3, r4, r3
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	464b      	mov	r3, r9
 8001720:	eb45 0303 	adc.w	r3, r5, r3
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001732:	4629      	mov	r1, r5
 8001734:	028b      	lsls	r3, r1, #10
 8001736:	4621      	mov	r1, r4
 8001738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800173c:	4621      	mov	r1, r4
 800173e:	028a      	lsls	r2, r1, #10
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001748:	2200      	movs	r2, #0
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
 800174c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800174e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001752:	f7fe fdb5 	bl	80002c0 <__aeabi_uldivmod>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4613      	mov	r3, r2
 800175c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_RCC_GetSysClockFreq+0x458>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	0f1b      	lsrs	r3, r3, #28
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800176e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800177e:	e003      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800178c:	4618      	mov	r0, r3
 800178e:	37b8      	adds	r7, #184	; 0xb8
 8001790:	46bd      	mov	sp, r7
 8001792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400

080017a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e28d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8083 	beq.w	80018c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c0:	4b94      	ldr	r3, [pc, #592]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d019      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017cc:	4b91      	ldr	r3, [pc, #580]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d8:	4b8e      	ldr	r3, [pc, #568]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e4:	d00c      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e6:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d112      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017fe:	d10b      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4b84      	ldr	r3, [pc, #528]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d05b      	beq.n	80018c4 <HAL_RCC_OscConfig+0x124>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d157      	bne.n	80018c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e25a      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x90>
 8001822:	4b7c      	ldr	r3, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7b      	ldr	r2, [pc, #492]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0xb4>
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a72      	ldr	r2, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6b      	ldr	r2, [pc, #428]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f942 	bl	8000afc <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f93e 	bl	8000afc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e21f      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xdc>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f92e 	bl	8000afc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff f92a 	bl	8000afc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e20b      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x104>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06f      	beq.n	80019b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1d3      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4937      	ldr	r1, [pc, #220]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f8d7 	bl	8000afc <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff f8d3 	bl	8000afc <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1b4      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4925      	ldr	r1, [pc, #148]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f8b6 	bl	8000afc <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff f8b2 	bl	8000afc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e193      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d036      	beq.n	8001a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f896 	bl	8000afc <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f892 	bl	8000afc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e173      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x234>
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f87f 	bl	8000afc <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	e00e      	b.n	8001a20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f87b 	bl	8000afc <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d907      	bls.n	8001a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e15c      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	42470000 	.word	0x42470000
 8001a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b8a      	ldr	r3, [pc, #552]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ea      	bne.n	8001a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8097 	beq.w	8001b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a7e      	ldr	r2, [pc, #504]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b7c      	ldr	r3, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a75      	ldr	r2, [pc, #468]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7ff f83b 	bl	8000afc <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f837 	bl	8000afc <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e118      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x31e>
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x340>
 8001ac6:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a60      	ldr	r2, [pc, #384]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a5d      	ldr	r2, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a59      	ldr	r2, [pc, #356]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a56      	ldr	r2, [pc, #344]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7fe fffc 	bl	8000afc <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7fe fff8 	bl	8000afc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0d7      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ee      	beq.n	8001b08 <HAL_RCC_OscConfig+0x368>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7fe ffe6 	bl	8000afc <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7fe ffe2 	bl	8000afc <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0c1      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ad 	beq.w	8001ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d060      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d145      	bne.n	8001c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7fe ffb6 	bl	8000afc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe ffb2 	bl	8000afc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e093      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	071b      	lsls	r3, r3, #28
 8001bde:	491b      	ldr	r1, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7fe ff87 	bl	8000afc <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe ff83 	bl	8000afc <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e064      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x452>
 8001c10:	e05c      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe ff70 	bl	8000afc <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ff6c 	bl	8000afc <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e04d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x480>
 8001c3e:	e045      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e040      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_RCC_OscConfig+0x538>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d030      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d129      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d122      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d119      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e03f      	b.n	8001d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fdb0 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	; 0x24
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f929 	bl	8001f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b08a      	sub	sp, #40	; 0x28
 8001d7a:	af02      	add	r7, sp, #8
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d17c      	bne.n	8001e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_UART_Transmit+0x2c>
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e075      	b.n	8001e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_UART_Transmit+0x3e>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e06e      	b.n	8001e92 <HAL_UART_Transmit+0x11c>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2221      	movs	r2, #33	; 0x21
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dca:	f7fe fe97 	bl	8000afc <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	88fa      	ldrh	r2, [r7, #6]
 8001dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de4:	d108      	bne.n	8001df8 <HAL_UART_Transmit+0x82>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d104      	bne.n	8001df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e003      	b.n	8001e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e08:	e02a      	b.n	8001e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f840 	bl	8001e9a <UART_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e036      	b.n	8001e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10b      	bne.n	8001e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	e007      	b.n	8001e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1cf      	bne.n	8001e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2200      	movs	r2, #0
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f810 	bl	8001e9a <UART_WaitOnFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e006      	b.n	8001e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b090      	sub	sp, #64	; 0x40
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eaa:	e050      	b.n	8001f4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb2:	d04c      	beq.n	8001f4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <UART_WaitOnFlagUntilTimeout+0x30>
 8001eba:	f7fe fe1f 	bl	8000afc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d241      	bcs.n	8001f4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	330c      	adds	r3, #12
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	e853 3f00 	ldrex	r3, [r3]
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eea:	637a      	str	r2, [r7, #52]	; 0x34
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef2:	e841 2300 	strex	r3, r2, [r1]
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1e5      	bne.n	8001eca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3314      	adds	r3, #20
 8001f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	e853 3f00 	ldrex	r3, [r3]
 8001f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f1e:	623a      	str	r2, [r7, #32]
 8001f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f22:	69f9      	ldr	r1, [r7, #28]
 8001f24:	6a3a      	ldr	r2, [r7, #32]
 8001f26:	e841 2300 	strex	r3, r2, [r1]
 8001f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1e5      	bne.n	8001efe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e00f      	b.n	8001f6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4013      	ands	r3, r2
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d09f      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3740      	adds	r7, #64	; 0x40
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f7c:	b0c0      	sub	sp, #256	; 0x100
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	68d9      	ldr	r1, [r3, #12]
 8001f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	ea40 0301 	orr.w	r3, r0, r1
 8001fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fd0:	f021 010c 	bic.w	r1, r1, #12
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff2:	6999      	ldr	r1, [r3, #24]
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	ea40 0301 	orr.w	r3, r0, r1
 8001ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b8f      	ldr	r3, [pc, #572]	; (8002244 <UART_SetConfig+0x2cc>)
 8002008:	429a      	cmp	r2, r3
 800200a:	d005      	beq.n	8002018 <UART_SetConfig+0xa0>
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b8d      	ldr	r3, [pc, #564]	; (8002248 <UART_SetConfig+0x2d0>)
 8002014:	429a      	cmp	r2, r3
 8002016:	d104      	bne.n	8002022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002018:	f7ff f97e 	bl	8001318 <HAL_RCC_GetPCLK2Freq>
 800201c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002020:	e003      	b.n	800202a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002022:	f7ff f965 	bl	80012f0 <HAL_RCC_GetPCLK1Freq>
 8002026:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002034:	f040 810c 	bne.w	8002250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800203c:	2200      	movs	r2, #0
 800203e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002042:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800204a:	4622      	mov	r2, r4
 800204c:	462b      	mov	r3, r5
 800204e:	1891      	adds	r1, r2, r2
 8002050:	65b9      	str	r1, [r7, #88]	; 0x58
 8002052:	415b      	adcs	r3, r3
 8002054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800205a:	4621      	mov	r1, r4
 800205c:	eb12 0801 	adds.w	r8, r2, r1
 8002060:	4629      	mov	r1, r5
 8002062:	eb43 0901 	adc.w	r9, r3, r1
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	4623      	mov	r3, r4
 8002080:	eb18 0303 	adds.w	r3, r8, r3
 8002084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002088:	462b      	mov	r3, r5
 800208a:	eb49 0303 	adc.w	r3, r9, r3
 800208e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800209e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020a6:	460b      	mov	r3, r1
 80020a8:	18db      	adds	r3, r3, r3
 80020aa:	653b      	str	r3, [r7, #80]	; 0x50
 80020ac:	4613      	mov	r3, r2
 80020ae:	eb42 0303 	adc.w	r3, r2, r3
 80020b2:	657b      	str	r3, [r7, #84]	; 0x54
 80020b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020bc:	f7fe f900 	bl	80002c0 <__aeabi_uldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4b61      	ldr	r3, [pc, #388]	; (800224c <UART_SetConfig+0x2d4>)
 80020c6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	011c      	lsls	r4, r3, #4
 80020ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d2:	2200      	movs	r2, #0
 80020d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020e0:	4642      	mov	r2, r8
 80020e2:	464b      	mov	r3, r9
 80020e4:	1891      	adds	r1, r2, r2
 80020e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80020e8:	415b      	adcs	r3, r3
 80020ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020f0:	4641      	mov	r1, r8
 80020f2:	eb12 0a01 	adds.w	sl, r2, r1
 80020f6:	4649      	mov	r1, r9
 80020f8:	eb43 0b01 	adc.w	fp, r3, r1
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800210c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002110:	4692      	mov	sl, r2
 8002112:	469b      	mov	fp, r3
 8002114:	4643      	mov	r3, r8
 8002116:	eb1a 0303 	adds.w	r3, sl, r3
 800211a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800211e:	464b      	mov	r3, r9
 8002120:	eb4b 0303 	adc.w	r3, fp, r3
 8002124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002134:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800213c:	460b      	mov	r3, r1
 800213e:	18db      	adds	r3, r3, r3
 8002140:	643b      	str	r3, [r7, #64]	; 0x40
 8002142:	4613      	mov	r3, r2
 8002144:	eb42 0303 	adc.w	r3, r2, r3
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
 800214a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800214e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002152:	f7fe f8b5 	bl	80002c0 <__aeabi_uldivmod>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4611      	mov	r1, r2
 800215c:	4b3b      	ldr	r3, [pc, #236]	; (800224c <UART_SetConfig+0x2d4>)
 800215e:	fba3 2301 	umull	r2, r3, r3, r1
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2264      	movs	r2, #100	; 0x64
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	1acb      	subs	r3, r1, r3
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <UART_SetConfig+0x2d4>)
 8002174:	fba3 2302 	umull	r2, r3, r3, r2
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002180:	441c      	add	r4, r3
 8002182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002186:	2200      	movs	r2, #0
 8002188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800218c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002194:	4642      	mov	r2, r8
 8002196:	464b      	mov	r3, r9
 8002198:	1891      	adds	r1, r2, r2
 800219a:	63b9      	str	r1, [r7, #56]	; 0x38
 800219c:	415b      	adcs	r3, r3
 800219e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021a4:	4641      	mov	r1, r8
 80021a6:	1851      	adds	r1, r2, r1
 80021a8:	6339      	str	r1, [r7, #48]	; 0x30
 80021aa:	4649      	mov	r1, r9
 80021ac:	414b      	adcs	r3, r1
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021bc:	4659      	mov	r1, fp
 80021be:	00cb      	lsls	r3, r1, #3
 80021c0:	4651      	mov	r1, sl
 80021c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021c6:	4651      	mov	r1, sl
 80021c8:	00ca      	lsls	r2, r1, #3
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	4642      	mov	r2, r8
 80021d2:	189b      	adds	r3, r3, r2
 80021d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021d8:	464b      	mov	r3, r9
 80021da:	460a      	mov	r2, r1
 80021dc:	eb42 0303 	adc.w	r3, r2, r3
 80021e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021f8:	460b      	mov	r3, r1
 80021fa:	18db      	adds	r3, r3, r3
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fe:	4613      	mov	r3, r2
 8002200:	eb42 0303 	adc.w	r3, r2, r3
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800220a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800220e:	f7fe f857 	bl	80002c0 <__aeabi_uldivmod>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <UART_SetConfig+0x2d4>)
 8002218:	fba3 1302 	umull	r1, r3, r3, r2
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	2164      	movs	r1, #100	; 0x64
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	3332      	adds	r3, #50	; 0x32
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <UART_SetConfig+0x2d4>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	f003 0207 	and.w	r2, r3, #7
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4422      	add	r2, r4
 800223e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002240:	e106      	b.n	8002450 <UART_SetConfig+0x4d8>
 8002242:	bf00      	nop
 8002244:	40011000 	.word	0x40011000
 8002248:	40011400 	.word	0x40011400
 800224c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002254:	2200      	movs	r2, #0
 8002256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800225a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800225e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002262:	4642      	mov	r2, r8
 8002264:	464b      	mov	r3, r9
 8002266:	1891      	adds	r1, r2, r2
 8002268:	6239      	str	r1, [r7, #32]
 800226a:	415b      	adcs	r3, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002272:	4641      	mov	r1, r8
 8002274:	1854      	adds	r4, r2, r1
 8002276:	4649      	mov	r1, r9
 8002278:	eb43 0501 	adc.w	r5, r3, r1
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	00eb      	lsls	r3, r5, #3
 8002286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800228a:	00e2      	lsls	r2, r4, #3
 800228c:	4614      	mov	r4, r2
 800228e:	461d      	mov	r5, r3
 8002290:	4643      	mov	r3, r8
 8002292:	18e3      	adds	r3, r4, r3
 8002294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002298:	464b      	mov	r3, r9
 800229a:	eb45 0303 	adc.w	r3, r5, r3
 800229e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022be:	4629      	mov	r1, r5
 80022c0:	008b      	lsls	r3, r1, #2
 80022c2:	4621      	mov	r1, r4
 80022c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022c8:	4621      	mov	r1, r4
 80022ca:	008a      	lsls	r2, r1, #2
 80022cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022d0:	f7fd fff6 	bl	80002c0 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4b60      	ldr	r3, [pc, #384]	; (800245c <UART_SetConfig+0x4e4>)
 80022da:	fba3 2302 	umull	r2, r3, r3, r2
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	011c      	lsls	r4, r3, #4
 80022e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022f4:	4642      	mov	r2, r8
 80022f6:	464b      	mov	r3, r9
 80022f8:	1891      	adds	r1, r2, r2
 80022fa:	61b9      	str	r1, [r7, #24]
 80022fc:	415b      	adcs	r3, r3
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002304:	4641      	mov	r1, r8
 8002306:	1851      	adds	r1, r2, r1
 8002308:	6139      	str	r1, [r7, #16]
 800230a:	4649      	mov	r1, r9
 800230c:	414b      	adcs	r3, r1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800231c:	4659      	mov	r1, fp
 800231e:	00cb      	lsls	r3, r1, #3
 8002320:	4651      	mov	r1, sl
 8002322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002326:	4651      	mov	r1, sl
 8002328:	00ca      	lsls	r2, r1, #3
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	4603      	mov	r3, r0
 8002330:	4642      	mov	r2, r8
 8002332:	189b      	adds	r3, r3, r2
 8002334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002338:	464b      	mov	r3, r9
 800233a:	460a      	mov	r2, r1
 800233c:	eb42 0303 	adc.w	r3, r2, r3
 8002340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	67bb      	str	r3, [r7, #120]	; 0x78
 800234e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800235c:	4649      	mov	r1, r9
 800235e:	008b      	lsls	r3, r1, #2
 8002360:	4641      	mov	r1, r8
 8002362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002366:	4641      	mov	r1, r8
 8002368:	008a      	lsls	r2, r1, #2
 800236a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800236e:	f7fd ffa7 	bl	80002c0 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4611      	mov	r1, r2
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <UART_SetConfig+0x4e4>)
 800237a:	fba3 2301 	umull	r2, r3, r3, r1
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2264      	movs	r2, #100	; 0x64
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	1acb      	subs	r3, r1, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a33      	ldr	r2, [pc, #204]	; (800245c <UART_SetConfig+0x4e4>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002398:	441c      	add	r4, r3
 800239a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800239e:	2200      	movs	r2, #0
 80023a0:	673b      	str	r3, [r7, #112]	; 0x70
 80023a2:	677a      	str	r2, [r7, #116]	; 0x74
 80023a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023a8:	4642      	mov	r2, r8
 80023aa:	464b      	mov	r3, r9
 80023ac:	1891      	adds	r1, r2, r2
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	415b      	adcs	r3, r3
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b8:	4641      	mov	r1, r8
 80023ba:	1851      	adds	r1, r2, r1
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	4649      	mov	r1, r9
 80023c0:	414b      	adcs	r3, r1
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023d0:	4659      	mov	r1, fp
 80023d2:	00cb      	lsls	r3, r1, #3
 80023d4:	4651      	mov	r1, sl
 80023d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023da:	4651      	mov	r1, sl
 80023dc:	00ca      	lsls	r2, r1, #3
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	4642      	mov	r2, r8
 80023e6:	189b      	adds	r3, r3, r2
 80023e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80023ea:	464b      	mov	r3, r9
 80023ec:	460a      	mov	r2, r1
 80023ee:	eb42 0303 	adc.w	r3, r2, r3
 80023f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	663b      	str	r3, [r7, #96]	; 0x60
 80023fe:	667a      	str	r2, [r7, #100]	; 0x64
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800240c:	4649      	mov	r1, r9
 800240e:	008b      	lsls	r3, r1, #2
 8002410:	4641      	mov	r1, r8
 8002412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002416:	4641      	mov	r1, r8
 8002418:	008a      	lsls	r2, r1, #2
 800241a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800241e:	f7fd ff4f 	bl	80002c0 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <UART_SetConfig+0x4e4>)
 8002428:	fba3 1302 	umull	r1, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	2164      	movs	r1, #100	; 0x64
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	3332      	adds	r3, #50	; 0x32
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <UART_SetConfig+0x4e4>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4422      	add	r2, r4
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	bf00      	nop
 8002452:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002456:	46bd      	mov	sp, r7
 8002458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245c:	51eb851f 	.word	0x51eb851f

08002460 <sniprintf>:
 8002460:	b40c      	push	{r2, r3}
 8002462:	b530      	push	{r4, r5, lr}
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <sniprintf+0x64>)
 8002466:	1e0c      	subs	r4, r1, #0
 8002468:	681d      	ldr	r5, [r3, #0]
 800246a:	b09d      	sub	sp, #116	; 0x74
 800246c:	da08      	bge.n	8002480 <sniprintf+0x20>
 800246e:	238b      	movs	r3, #139	; 0x8b
 8002470:	602b      	str	r3, [r5, #0]
 8002472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002476:	b01d      	add	sp, #116	; 0x74
 8002478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800247c:	b002      	add	sp, #8
 800247e:	4770      	bx	lr
 8002480:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002484:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002488:	bf14      	ite	ne
 800248a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800248e:	4623      	moveq	r3, r4
 8002490:	9304      	str	r3, [sp, #16]
 8002492:	9307      	str	r3, [sp, #28]
 8002494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002498:	9002      	str	r0, [sp, #8]
 800249a:	9006      	str	r0, [sp, #24]
 800249c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80024a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80024a2:	ab21      	add	r3, sp, #132	; 0x84
 80024a4:	a902      	add	r1, sp, #8
 80024a6:	4628      	mov	r0, r5
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f000 f993 	bl	80027d4 <_svfiprintf_r>
 80024ae:	1c43      	adds	r3, r0, #1
 80024b0:	bfbc      	itt	lt
 80024b2:	238b      	movlt	r3, #139	; 0x8b
 80024b4:	602b      	strlt	r3, [r5, #0]
 80024b6:	2c00      	cmp	r4, #0
 80024b8:	d0dd      	beq.n	8002476 <sniprintf+0x16>
 80024ba:	9b02      	ldr	r3, [sp, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e7d9      	b.n	8002476 <sniprintf+0x16>
 80024c2:	bf00      	nop
 80024c4:	20000058 	.word	0x20000058

080024c8 <memset>:
 80024c8:	4402      	add	r2, r0
 80024ca:	4603      	mov	r3, r0
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d100      	bne.n	80024d2 <memset+0xa>
 80024d0:	4770      	bx	lr
 80024d2:	f803 1b01 	strb.w	r1, [r3], #1
 80024d6:	e7f9      	b.n	80024cc <memset+0x4>

080024d8 <__errno>:
 80024d8:	4b01      	ldr	r3, [pc, #4]	; (80024e0 <__errno+0x8>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000058 	.word	0x20000058

080024e4 <__libc_init_array>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	4d0d      	ldr	r5, [pc, #52]	; (800251c <__libc_init_array+0x38>)
 80024e8:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <__libc_init_array+0x3c>)
 80024ea:	1b64      	subs	r4, r4, r5
 80024ec:	10a4      	asrs	r4, r4, #2
 80024ee:	2600      	movs	r6, #0
 80024f0:	42a6      	cmp	r6, r4
 80024f2:	d109      	bne.n	8002508 <__libc_init_array+0x24>
 80024f4:	4d0b      	ldr	r5, [pc, #44]	; (8002524 <__libc_init_array+0x40>)
 80024f6:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <__libc_init_array+0x44>)
 80024f8:	f000 fc6a 	bl	8002dd0 <_init>
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	2600      	movs	r6, #0
 8002502:	42a6      	cmp	r6, r4
 8002504:	d105      	bne.n	8002512 <__libc_init_array+0x2e>
 8002506:	bd70      	pop	{r4, r5, r6, pc}
 8002508:	f855 3b04 	ldr.w	r3, [r5], #4
 800250c:	4798      	blx	r3
 800250e:	3601      	adds	r6, #1
 8002510:	e7ee      	b.n	80024f0 <__libc_init_array+0xc>
 8002512:	f855 3b04 	ldr.w	r3, [r5], #4
 8002516:	4798      	blx	r3
 8002518:	3601      	adds	r6, #1
 800251a:	e7f2      	b.n	8002502 <__libc_init_array+0x1e>
 800251c:	08002e50 	.word	0x08002e50
 8002520:	08002e50 	.word	0x08002e50
 8002524:	08002e50 	.word	0x08002e50
 8002528:	08002e54 	.word	0x08002e54

0800252c <__retarget_lock_acquire_recursive>:
 800252c:	4770      	bx	lr

0800252e <__retarget_lock_release_recursive>:
 800252e:	4770      	bx	lr

08002530 <_free_r>:
 8002530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002532:	2900      	cmp	r1, #0
 8002534:	d044      	beq.n	80025c0 <_free_r+0x90>
 8002536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800253a:	9001      	str	r0, [sp, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f1a1 0404 	sub.w	r4, r1, #4
 8002542:	bfb8      	it	lt
 8002544:	18e4      	addlt	r4, r4, r3
 8002546:	f000 f8df 	bl	8002708 <__malloc_lock>
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <_free_r+0x94>)
 800254c:	9801      	ldr	r0, [sp, #4]
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	b933      	cbnz	r3, 8002560 <_free_r+0x30>
 8002552:	6063      	str	r3, [r4, #4]
 8002554:	6014      	str	r4, [r2, #0]
 8002556:	b003      	add	sp, #12
 8002558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800255c:	f000 b8da 	b.w	8002714 <__malloc_unlock>
 8002560:	42a3      	cmp	r3, r4
 8002562:	d908      	bls.n	8002576 <_free_r+0x46>
 8002564:	6825      	ldr	r5, [r4, #0]
 8002566:	1961      	adds	r1, r4, r5
 8002568:	428b      	cmp	r3, r1
 800256a:	bf01      	itttt	eq
 800256c:	6819      	ldreq	r1, [r3, #0]
 800256e:	685b      	ldreq	r3, [r3, #4]
 8002570:	1949      	addeq	r1, r1, r5
 8002572:	6021      	streq	r1, [r4, #0]
 8002574:	e7ed      	b.n	8002552 <_free_r+0x22>
 8002576:	461a      	mov	r2, r3
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	b10b      	cbz	r3, 8002580 <_free_r+0x50>
 800257c:	42a3      	cmp	r3, r4
 800257e:	d9fa      	bls.n	8002576 <_free_r+0x46>
 8002580:	6811      	ldr	r1, [r2, #0]
 8002582:	1855      	adds	r5, r2, r1
 8002584:	42a5      	cmp	r5, r4
 8002586:	d10b      	bne.n	80025a0 <_free_r+0x70>
 8002588:	6824      	ldr	r4, [r4, #0]
 800258a:	4421      	add	r1, r4
 800258c:	1854      	adds	r4, r2, r1
 800258e:	42a3      	cmp	r3, r4
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	d1e0      	bne.n	8002556 <_free_r+0x26>
 8002594:	681c      	ldr	r4, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	6053      	str	r3, [r2, #4]
 800259a:	440c      	add	r4, r1
 800259c:	6014      	str	r4, [r2, #0]
 800259e:	e7da      	b.n	8002556 <_free_r+0x26>
 80025a0:	d902      	bls.n	80025a8 <_free_r+0x78>
 80025a2:	230c      	movs	r3, #12
 80025a4:	6003      	str	r3, [r0, #0]
 80025a6:	e7d6      	b.n	8002556 <_free_r+0x26>
 80025a8:	6825      	ldr	r5, [r4, #0]
 80025aa:	1961      	adds	r1, r4, r5
 80025ac:	428b      	cmp	r3, r1
 80025ae:	bf04      	itt	eq
 80025b0:	6819      	ldreq	r1, [r3, #0]
 80025b2:	685b      	ldreq	r3, [r3, #4]
 80025b4:	6063      	str	r3, [r4, #4]
 80025b6:	bf04      	itt	eq
 80025b8:	1949      	addeq	r1, r1, r5
 80025ba:	6021      	streq	r1, [r4, #0]
 80025bc:	6054      	str	r4, [r2, #4]
 80025be:	e7ca      	b.n	8002556 <_free_r+0x26>
 80025c0:	b003      	add	sp, #12
 80025c2:	bd30      	pop	{r4, r5, pc}
 80025c4:	20000204 	.word	0x20000204

080025c8 <sbrk_aligned>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	4e0e      	ldr	r6, [pc, #56]	; (8002604 <sbrk_aligned+0x3c>)
 80025cc:	460c      	mov	r4, r1
 80025ce:	6831      	ldr	r1, [r6, #0]
 80025d0:	4605      	mov	r5, r0
 80025d2:	b911      	cbnz	r1, 80025da <sbrk_aligned+0x12>
 80025d4:	f000 fba6 	bl	8002d24 <_sbrk_r>
 80025d8:	6030      	str	r0, [r6, #0]
 80025da:	4621      	mov	r1, r4
 80025dc:	4628      	mov	r0, r5
 80025de:	f000 fba1 	bl	8002d24 <_sbrk_r>
 80025e2:	1c43      	adds	r3, r0, #1
 80025e4:	d00a      	beq.n	80025fc <sbrk_aligned+0x34>
 80025e6:	1cc4      	adds	r4, r0, #3
 80025e8:	f024 0403 	bic.w	r4, r4, #3
 80025ec:	42a0      	cmp	r0, r4
 80025ee:	d007      	beq.n	8002600 <sbrk_aligned+0x38>
 80025f0:	1a21      	subs	r1, r4, r0
 80025f2:	4628      	mov	r0, r5
 80025f4:	f000 fb96 	bl	8002d24 <_sbrk_r>
 80025f8:	3001      	adds	r0, #1
 80025fa:	d101      	bne.n	8002600 <sbrk_aligned+0x38>
 80025fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002600:	4620      	mov	r0, r4
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	20000208 	.word	0x20000208

08002608 <_malloc_r>:
 8002608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800260c:	1ccd      	adds	r5, r1, #3
 800260e:	f025 0503 	bic.w	r5, r5, #3
 8002612:	3508      	adds	r5, #8
 8002614:	2d0c      	cmp	r5, #12
 8002616:	bf38      	it	cc
 8002618:	250c      	movcc	r5, #12
 800261a:	2d00      	cmp	r5, #0
 800261c:	4607      	mov	r7, r0
 800261e:	db01      	blt.n	8002624 <_malloc_r+0x1c>
 8002620:	42a9      	cmp	r1, r5
 8002622:	d905      	bls.n	8002630 <_malloc_r+0x28>
 8002624:	230c      	movs	r3, #12
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	2600      	movs	r6, #0
 800262a:	4630      	mov	r0, r6
 800262c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002630:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002704 <_malloc_r+0xfc>
 8002634:	f000 f868 	bl	8002708 <__malloc_lock>
 8002638:	f8d8 3000 	ldr.w	r3, [r8]
 800263c:	461c      	mov	r4, r3
 800263e:	bb5c      	cbnz	r4, 8002698 <_malloc_r+0x90>
 8002640:	4629      	mov	r1, r5
 8002642:	4638      	mov	r0, r7
 8002644:	f7ff ffc0 	bl	80025c8 <sbrk_aligned>
 8002648:	1c43      	adds	r3, r0, #1
 800264a:	4604      	mov	r4, r0
 800264c:	d155      	bne.n	80026fa <_malloc_r+0xf2>
 800264e:	f8d8 4000 	ldr.w	r4, [r8]
 8002652:	4626      	mov	r6, r4
 8002654:	2e00      	cmp	r6, #0
 8002656:	d145      	bne.n	80026e4 <_malloc_r+0xdc>
 8002658:	2c00      	cmp	r4, #0
 800265a:	d048      	beq.n	80026ee <_malloc_r+0xe6>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	4631      	mov	r1, r6
 8002660:	4638      	mov	r0, r7
 8002662:	eb04 0903 	add.w	r9, r4, r3
 8002666:	f000 fb5d 	bl	8002d24 <_sbrk_r>
 800266a:	4581      	cmp	r9, r0
 800266c:	d13f      	bne.n	80026ee <_malloc_r+0xe6>
 800266e:	6821      	ldr	r1, [r4, #0]
 8002670:	1a6d      	subs	r5, r5, r1
 8002672:	4629      	mov	r1, r5
 8002674:	4638      	mov	r0, r7
 8002676:	f7ff ffa7 	bl	80025c8 <sbrk_aligned>
 800267a:	3001      	adds	r0, #1
 800267c:	d037      	beq.n	80026ee <_malloc_r+0xe6>
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	442b      	add	r3, r5
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	f8d8 3000 	ldr.w	r3, [r8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d038      	beq.n	80026fe <_malloc_r+0xf6>
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	42a2      	cmp	r2, r4
 8002690:	d12b      	bne.n	80026ea <_malloc_r+0xe2>
 8002692:	2200      	movs	r2, #0
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e00f      	b.n	80026b8 <_malloc_r+0xb0>
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	1b52      	subs	r2, r2, r5
 800269c:	d41f      	bmi.n	80026de <_malloc_r+0xd6>
 800269e:	2a0b      	cmp	r2, #11
 80026a0:	d917      	bls.n	80026d2 <_malloc_r+0xca>
 80026a2:	1961      	adds	r1, r4, r5
 80026a4:	42a3      	cmp	r3, r4
 80026a6:	6025      	str	r5, [r4, #0]
 80026a8:	bf18      	it	ne
 80026aa:	6059      	strne	r1, [r3, #4]
 80026ac:	6863      	ldr	r3, [r4, #4]
 80026ae:	bf08      	it	eq
 80026b0:	f8c8 1000 	streq.w	r1, [r8]
 80026b4:	5162      	str	r2, [r4, r5]
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	4638      	mov	r0, r7
 80026ba:	f104 060b 	add.w	r6, r4, #11
 80026be:	f000 f829 	bl	8002714 <__malloc_unlock>
 80026c2:	f026 0607 	bic.w	r6, r6, #7
 80026c6:	1d23      	adds	r3, r4, #4
 80026c8:	1af2      	subs	r2, r6, r3
 80026ca:	d0ae      	beq.n	800262a <_malloc_r+0x22>
 80026cc:	1b9b      	subs	r3, r3, r6
 80026ce:	50a3      	str	r3, [r4, r2]
 80026d0:	e7ab      	b.n	800262a <_malloc_r+0x22>
 80026d2:	42a3      	cmp	r3, r4
 80026d4:	6862      	ldr	r2, [r4, #4]
 80026d6:	d1dd      	bne.n	8002694 <_malloc_r+0x8c>
 80026d8:	f8c8 2000 	str.w	r2, [r8]
 80026dc:	e7ec      	b.n	80026b8 <_malloc_r+0xb0>
 80026de:	4623      	mov	r3, r4
 80026e0:	6864      	ldr	r4, [r4, #4]
 80026e2:	e7ac      	b.n	800263e <_malloc_r+0x36>
 80026e4:	4634      	mov	r4, r6
 80026e6:	6876      	ldr	r6, [r6, #4]
 80026e8:	e7b4      	b.n	8002654 <_malloc_r+0x4c>
 80026ea:	4613      	mov	r3, r2
 80026ec:	e7cc      	b.n	8002688 <_malloc_r+0x80>
 80026ee:	230c      	movs	r3, #12
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4638      	mov	r0, r7
 80026f4:	f000 f80e 	bl	8002714 <__malloc_unlock>
 80026f8:	e797      	b.n	800262a <_malloc_r+0x22>
 80026fa:	6025      	str	r5, [r4, #0]
 80026fc:	e7dc      	b.n	80026b8 <_malloc_r+0xb0>
 80026fe:	605b      	str	r3, [r3, #4]
 8002700:	deff      	udf	#255	; 0xff
 8002702:	bf00      	nop
 8002704:	20000204 	.word	0x20000204

08002708 <__malloc_lock>:
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <__malloc_lock+0x8>)
 800270a:	f7ff bf0f 	b.w	800252c <__retarget_lock_acquire_recursive>
 800270e:	bf00      	nop
 8002710:	20000200 	.word	0x20000200

08002714 <__malloc_unlock>:
 8002714:	4801      	ldr	r0, [pc, #4]	; (800271c <__malloc_unlock+0x8>)
 8002716:	f7ff bf0a 	b.w	800252e <__retarget_lock_release_recursive>
 800271a:	bf00      	nop
 800271c:	20000200 	.word	0x20000200

08002720 <__ssputs_r>:
 8002720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002724:	688e      	ldr	r6, [r1, #8]
 8002726:	461f      	mov	r7, r3
 8002728:	42be      	cmp	r6, r7
 800272a:	680b      	ldr	r3, [r1, #0]
 800272c:	4682      	mov	sl, r0
 800272e:	460c      	mov	r4, r1
 8002730:	4690      	mov	r8, r2
 8002732:	d82c      	bhi.n	800278e <__ssputs_r+0x6e>
 8002734:	898a      	ldrh	r2, [r1, #12]
 8002736:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800273a:	d026      	beq.n	800278a <__ssputs_r+0x6a>
 800273c:	6965      	ldr	r5, [r4, #20]
 800273e:	6909      	ldr	r1, [r1, #16]
 8002740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002744:	eba3 0901 	sub.w	r9, r3, r1
 8002748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800274c:	1c7b      	adds	r3, r7, #1
 800274e:	444b      	add	r3, r9
 8002750:	106d      	asrs	r5, r5, #1
 8002752:	429d      	cmp	r5, r3
 8002754:	bf38      	it	cc
 8002756:	461d      	movcc	r5, r3
 8002758:	0553      	lsls	r3, r2, #21
 800275a:	d527      	bpl.n	80027ac <__ssputs_r+0x8c>
 800275c:	4629      	mov	r1, r5
 800275e:	f7ff ff53 	bl	8002608 <_malloc_r>
 8002762:	4606      	mov	r6, r0
 8002764:	b360      	cbz	r0, 80027c0 <__ssputs_r+0xa0>
 8002766:	6921      	ldr	r1, [r4, #16]
 8002768:	464a      	mov	r2, r9
 800276a:	f000 faeb 	bl	8002d44 <memcpy>
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002778:	81a3      	strh	r3, [r4, #12]
 800277a:	6126      	str	r6, [r4, #16]
 800277c:	6165      	str	r5, [r4, #20]
 800277e:	444e      	add	r6, r9
 8002780:	eba5 0509 	sub.w	r5, r5, r9
 8002784:	6026      	str	r6, [r4, #0]
 8002786:	60a5      	str	r5, [r4, #8]
 8002788:	463e      	mov	r6, r7
 800278a:	42be      	cmp	r6, r7
 800278c:	d900      	bls.n	8002790 <__ssputs_r+0x70>
 800278e:	463e      	mov	r6, r7
 8002790:	6820      	ldr	r0, [r4, #0]
 8002792:	4632      	mov	r2, r6
 8002794:	4641      	mov	r1, r8
 8002796:	f000 faab 	bl	8002cf0 <memmove>
 800279a:	68a3      	ldr	r3, [r4, #8]
 800279c:	1b9b      	subs	r3, r3, r6
 800279e:	60a3      	str	r3, [r4, #8]
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	4433      	add	r3, r6
 80027a4:	6023      	str	r3, [r4, #0]
 80027a6:	2000      	movs	r0, #0
 80027a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ac:	462a      	mov	r2, r5
 80027ae:	f000 fad7 	bl	8002d60 <_realloc_r>
 80027b2:	4606      	mov	r6, r0
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d1e0      	bne.n	800277a <__ssputs_r+0x5a>
 80027b8:	6921      	ldr	r1, [r4, #16]
 80027ba:	4650      	mov	r0, sl
 80027bc:	f7ff feb8 	bl	8002530 <_free_r>
 80027c0:	230c      	movs	r3, #12
 80027c2:	f8ca 3000 	str.w	r3, [sl]
 80027c6:	89a3      	ldrh	r3, [r4, #12]
 80027c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027cc:	81a3      	strh	r3, [r4, #12]
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d2:	e7e9      	b.n	80027a8 <__ssputs_r+0x88>

080027d4 <_svfiprintf_r>:
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	4698      	mov	r8, r3
 80027da:	898b      	ldrh	r3, [r1, #12]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	b09d      	sub	sp, #116	; 0x74
 80027e0:	4607      	mov	r7, r0
 80027e2:	460d      	mov	r5, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	d50e      	bpl.n	8002806 <_svfiprintf_r+0x32>
 80027e8:	690b      	ldr	r3, [r1, #16]
 80027ea:	b963      	cbnz	r3, 8002806 <_svfiprintf_r+0x32>
 80027ec:	2140      	movs	r1, #64	; 0x40
 80027ee:	f7ff ff0b 	bl	8002608 <_malloc_r>
 80027f2:	6028      	str	r0, [r5, #0]
 80027f4:	6128      	str	r0, [r5, #16]
 80027f6:	b920      	cbnz	r0, 8002802 <_svfiprintf_r+0x2e>
 80027f8:	230c      	movs	r3, #12
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002800:	e0d0      	b.n	80029a4 <_svfiprintf_r+0x1d0>
 8002802:	2340      	movs	r3, #64	; 0x40
 8002804:	616b      	str	r3, [r5, #20]
 8002806:	2300      	movs	r3, #0
 8002808:	9309      	str	r3, [sp, #36]	; 0x24
 800280a:	2320      	movs	r3, #32
 800280c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002810:	f8cd 800c 	str.w	r8, [sp, #12]
 8002814:	2330      	movs	r3, #48	; 0x30
 8002816:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80029bc <_svfiprintf_r+0x1e8>
 800281a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800281e:	f04f 0901 	mov.w	r9, #1
 8002822:	4623      	mov	r3, r4
 8002824:	469a      	mov	sl, r3
 8002826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800282a:	b10a      	cbz	r2, 8002830 <_svfiprintf_r+0x5c>
 800282c:	2a25      	cmp	r2, #37	; 0x25
 800282e:	d1f9      	bne.n	8002824 <_svfiprintf_r+0x50>
 8002830:	ebba 0b04 	subs.w	fp, sl, r4
 8002834:	d00b      	beq.n	800284e <_svfiprintf_r+0x7a>
 8002836:	465b      	mov	r3, fp
 8002838:	4622      	mov	r2, r4
 800283a:	4629      	mov	r1, r5
 800283c:	4638      	mov	r0, r7
 800283e:	f7ff ff6f 	bl	8002720 <__ssputs_r>
 8002842:	3001      	adds	r0, #1
 8002844:	f000 80a9 	beq.w	800299a <_svfiprintf_r+0x1c6>
 8002848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800284a:	445a      	add	r2, fp
 800284c:	9209      	str	r2, [sp, #36]	; 0x24
 800284e:	f89a 3000 	ldrb.w	r3, [sl]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80a1 	beq.w	800299a <_svfiprintf_r+0x1c6>
 8002858:	2300      	movs	r3, #0
 800285a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800285e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002862:	f10a 0a01 	add.w	sl, sl, #1
 8002866:	9304      	str	r3, [sp, #16]
 8002868:	9307      	str	r3, [sp, #28]
 800286a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800286e:	931a      	str	r3, [sp, #104]	; 0x68
 8002870:	4654      	mov	r4, sl
 8002872:	2205      	movs	r2, #5
 8002874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002878:	4850      	ldr	r0, [pc, #320]	; (80029bc <_svfiprintf_r+0x1e8>)
 800287a:	f7fd fcd1 	bl	8000220 <memchr>
 800287e:	9a04      	ldr	r2, [sp, #16]
 8002880:	b9d8      	cbnz	r0, 80028ba <_svfiprintf_r+0xe6>
 8002882:	06d0      	lsls	r0, r2, #27
 8002884:	bf44      	itt	mi
 8002886:	2320      	movmi	r3, #32
 8002888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800288c:	0711      	lsls	r1, r2, #28
 800288e:	bf44      	itt	mi
 8002890:	232b      	movmi	r3, #43	; 0x2b
 8002892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002896:	f89a 3000 	ldrb.w	r3, [sl]
 800289a:	2b2a      	cmp	r3, #42	; 0x2a
 800289c:	d015      	beq.n	80028ca <_svfiprintf_r+0xf6>
 800289e:	9a07      	ldr	r2, [sp, #28]
 80028a0:	4654      	mov	r4, sl
 80028a2:	2000      	movs	r0, #0
 80028a4:	f04f 0c0a 	mov.w	ip, #10
 80028a8:	4621      	mov	r1, r4
 80028aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ae:	3b30      	subs	r3, #48	; 0x30
 80028b0:	2b09      	cmp	r3, #9
 80028b2:	d94d      	bls.n	8002950 <_svfiprintf_r+0x17c>
 80028b4:	b1b0      	cbz	r0, 80028e4 <_svfiprintf_r+0x110>
 80028b6:	9207      	str	r2, [sp, #28]
 80028b8:	e014      	b.n	80028e4 <_svfiprintf_r+0x110>
 80028ba:	eba0 0308 	sub.w	r3, r0, r8
 80028be:	fa09 f303 	lsl.w	r3, r9, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	9304      	str	r3, [sp, #16]
 80028c6:	46a2      	mov	sl, r4
 80028c8:	e7d2      	b.n	8002870 <_svfiprintf_r+0x9c>
 80028ca:	9b03      	ldr	r3, [sp, #12]
 80028cc:	1d19      	adds	r1, r3, #4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	9103      	str	r1, [sp, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bfbb      	ittet	lt
 80028d6:	425b      	neglt	r3, r3
 80028d8:	f042 0202 	orrlt.w	r2, r2, #2
 80028dc:	9307      	strge	r3, [sp, #28]
 80028de:	9307      	strlt	r3, [sp, #28]
 80028e0:	bfb8      	it	lt
 80028e2:	9204      	strlt	r2, [sp, #16]
 80028e4:	7823      	ldrb	r3, [r4, #0]
 80028e6:	2b2e      	cmp	r3, #46	; 0x2e
 80028e8:	d10c      	bne.n	8002904 <_svfiprintf_r+0x130>
 80028ea:	7863      	ldrb	r3, [r4, #1]
 80028ec:	2b2a      	cmp	r3, #42	; 0x2a
 80028ee:	d134      	bne.n	800295a <_svfiprintf_r+0x186>
 80028f0:	9b03      	ldr	r3, [sp, #12]
 80028f2:	1d1a      	adds	r2, r3, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	9203      	str	r2, [sp, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bfb8      	it	lt
 80028fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002900:	3402      	adds	r4, #2
 8002902:	9305      	str	r3, [sp, #20]
 8002904:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80029cc <_svfiprintf_r+0x1f8>
 8002908:	7821      	ldrb	r1, [r4, #0]
 800290a:	2203      	movs	r2, #3
 800290c:	4650      	mov	r0, sl
 800290e:	f7fd fc87 	bl	8000220 <memchr>
 8002912:	b138      	cbz	r0, 8002924 <_svfiprintf_r+0x150>
 8002914:	9b04      	ldr	r3, [sp, #16]
 8002916:	eba0 000a 	sub.w	r0, r0, sl
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	4082      	lsls	r2, r0
 800291e:	4313      	orrs	r3, r2
 8002920:	3401      	adds	r4, #1
 8002922:	9304      	str	r3, [sp, #16]
 8002924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002928:	4825      	ldr	r0, [pc, #148]	; (80029c0 <_svfiprintf_r+0x1ec>)
 800292a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800292e:	2206      	movs	r2, #6
 8002930:	f7fd fc76 	bl	8000220 <memchr>
 8002934:	2800      	cmp	r0, #0
 8002936:	d038      	beq.n	80029aa <_svfiprintf_r+0x1d6>
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <_svfiprintf_r+0x1f0>)
 800293a:	bb1b      	cbnz	r3, 8002984 <_svfiprintf_r+0x1b0>
 800293c:	9b03      	ldr	r3, [sp, #12]
 800293e:	3307      	adds	r3, #7
 8002940:	f023 0307 	bic.w	r3, r3, #7
 8002944:	3308      	adds	r3, #8
 8002946:	9303      	str	r3, [sp, #12]
 8002948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800294a:	4433      	add	r3, r6
 800294c:	9309      	str	r3, [sp, #36]	; 0x24
 800294e:	e768      	b.n	8002822 <_svfiprintf_r+0x4e>
 8002950:	fb0c 3202 	mla	r2, ip, r2, r3
 8002954:	460c      	mov	r4, r1
 8002956:	2001      	movs	r0, #1
 8002958:	e7a6      	b.n	80028a8 <_svfiprintf_r+0xd4>
 800295a:	2300      	movs	r3, #0
 800295c:	3401      	adds	r4, #1
 800295e:	9305      	str	r3, [sp, #20]
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 0c0a 	mov.w	ip, #10
 8002966:	4620      	mov	r0, r4
 8002968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800296c:	3a30      	subs	r2, #48	; 0x30
 800296e:	2a09      	cmp	r2, #9
 8002970:	d903      	bls.n	800297a <_svfiprintf_r+0x1a6>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0c6      	beq.n	8002904 <_svfiprintf_r+0x130>
 8002976:	9105      	str	r1, [sp, #20]
 8002978:	e7c4      	b.n	8002904 <_svfiprintf_r+0x130>
 800297a:	fb0c 2101 	mla	r1, ip, r1, r2
 800297e:	4604      	mov	r4, r0
 8002980:	2301      	movs	r3, #1
 8002982:	e7f0      	b.n	8002966 <_svfiprintf_r+0x192>
 8002984:	ab03      	add	r3, sp, #12
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	462a      	mov	r2, r5
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <_svfiprintf_r+0x1f4>)
 800298c:	a904      	add	r1, sp, #16
 800298e:	4638      	mov	r0, r7
 8002990:	f3af 8000 	nop.w
 8002994:	1c42      	adds	r2, r0, #1
 8002996:	4606      	mov	r6, r0
 8002998:	d1d6      	bne.n	8002948 <_svfiprintf_r+0x174>
 800299a:	89ab      	ldrh	r3, [r5, #12]
 800299c:	065b      	lsls	r3, r3, #25
 800299e:	f53f af2d 	bmi.w	80027fc <_svfiprintf_r+0x28>
 80029a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029a4:	b01d      	add	sp, #116	; 0x74
 80029a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029aa:	ab03      	add	r3, sp, #12
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	462a      	mov	r2, r5
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <_svfiprintf_r+0x1f4>)
 80029b2:	a904      	add	r1, sp, #16
 80029b4:	4638      	mov	r0, r7
 80029b6:	f000 f879 	bl	8002aac <_printf_i>
 80029ba:	e7eb      	b.n	8002994 <_svfiprintf_r+0x1c0>
 80029bc:	08002e14 	.word	0x08002e14
 80029c0:	08002e1e 	.word	0x08002e1e
 80029c4:	00000000 	.word	0x00000000
 80029c8:	08002721 	.word	0x08002721
 80029cc:	08002e1a 	.word	0x08002e1a

080029d0 <_printf_common>:
 80029d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d4:	4616      	mov	r6, r2
 80029d6:	4699      	mov	r9, r3
 80029d8:	688a      	ldr	r2, [r1, #8]
 80029da:	690b      	ldr	r3, [r1, #16]
 80029dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bfb8      	it	lt
 80029e4:	4613      	movlt	r3, r2
 80029e6:	6033      	str	r3, [r6, #0]
 80029e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029ec:	4607      	mov	r7, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	b10a      	cbz	r2, 80029f6 <_printf_common+0x26>
 80029f2:	3301      	adds	r3, #1
 80029f4:	6033      	str	r3, [r6, #0]
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	0699      	lsls	r1, r3, #26
 80029fa:	bf42      	ittt	mi
 80029fc:	6833      	ldrmi	r3, [r6, #0]
 80029fe:	3302      	addmi	r3, #2
 8002a00:	6033      	strmi	r3, [r6, #0]
 8002a02:	6825      	ldr	r5, [r4, #0]
 8002a04:	f015 0506 	ands.w	r5, r5, #6
 8002a08:	d106      	bne.n	8002a18 <_printf_common+0x48>
 8002a0a:	f104 0a19 	add.w	sl, r4, #25
 8002a0e:	68e3      	ldr	r3, [r4, #12]
 8002a10:	6832      	ldr	r2, [r6, #0]
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	42ab      	cmp	r3, r5
 8002a16:	dc26      	bgt.n	8002a66 <_printf_common+0x96>
 8002a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a1c:	1e13      	subs	r3, r2, #0
 8002a1e:	6822      	ldr	r2, [r4, #0]
 8002a20:	bf18      	it	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	0692      	lsls	r2, r2, #26
 8002a26:	d42b      	bmi.n	8002a80 <_printf_common+0xb0>
 8002a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	4638      	mov	r0, r7
 8002a30:	47c0      	blx	r8
 8002a32:	3001      	adds	r0, #1
 8002a34:	d01e      	beq.n	8002a74 <_printf_common+0xa4>
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	6922      	ldr	r2, [r4, #16]
 8002a3a:	f003 0306 	and.w	r3, r3, #6
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	bf02      	ittt	eq
 8002a42:	68e5      	ldreq	r5, [r4, #12]
 8002a44:	6833      	ldreq	r3, [r6, #0]
 8002a46:	1aed      	subeq	r5, r5, r3
 8002a48:	68a3      	ldr	r3, [r4, #8]
 8002a4a:	bf0c      	ite	eq
 8002a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a50:	2500      	movne	r5, #0
 8002a52:	4293      	cmp	r3, r2
 8002a54:	bfc4      	itt	gt
 8002a56:	1a9b      	subgt	r3, r3, r2
 8002a58:	18ed      	addgt	r5, r5, r3
 8002a5a:	2600      	movs	r6, #0
 8002a5c:	341a      	adds	r4, #26
 8002a5e:	42b5      	cmp	r5, r6
 8002a60:	d11a      	bne.n	8002a98 <_printf_common+0xc8>
 8002a62:	2000      	movs	r0, #0
 8002a64:	e008      	b.n	8002a78 <_printf_common+0xa8>
 8002a66:	2301      	movs	r3, #1
 8002a68:	4652      	mov	r2, sl
 8002a6a:	4649      	mov	r1, r9
 8002a6c:	4638      	mov	r0, r7
 8002a6e:	47c0      	blx	r8
 8002a70:	3001      	adds	r0, #1
 8002a72:	d103      	bne.n	8002a7c <_printf_common+0xac>
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7c:	3501      	adds	r5, #1
 8002a7e:	e7c6      	b.n	8002a0e <_printf_common+0x3e>
 8002a80:	18e1      	adds	r1, r4, r3
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	2030      	movs	r0, #48	; 0x30
 8002a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a8a:	4422      	add	r2, r4
 8002a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a94:	3302      	adds	r3, #2
 8002a96:	e7c7      	b.n	8002a28 <_printf_common+0x58>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	4638      	mov	r0, r7
 8002aa0:	47c0      	blx	r8
 8002aa2:	3001      	adds	r0, #1
 8002aa4:	d0e6      	beq.n	8002a74 <_printf_common+0xa4>
 8002aa6:	3601      	adds	r6, #1
 8002aa8:	e7d9      	b.n	8002a5e <_printf_common+0x8e>
	...

08002aac <_printf_i>:
 8002aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab0:	7e0f      	ldrb	r7, [r1, #24]
 8002ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ab4:	2f78      	cmp	r7, #120	; 0x78
 8002ab6:	4691      	mov	r9, r2
 8002ab8:	4680      	mov	r8, r0
 8002aba:	460c      	mov	r4, r1
 8002abc:	469a      	mov	sl, r3
 8002abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ac2:	d807      	bhi.n	8002ad4 <_printf_i+0x28>
 8002ac4:	2f62      	cmp	r7, #98	; 0x62
 8002ac6:	d80a      	bhi.n	8002ade <_printf_i+0x32>
 8002ac8:	2f00      	cmp	r7, #0
 8002aca:	f000 80d4 	beq.w	8002c76 <_printf_i+0x1ca>
 8002ace:	2f58      	cmp	r7, #88	; 0x58
 8002ad0:	f000 80c0 	beq.w	8002c54 <_printf_i+0x1a8>
 8002ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002adc:	e03a      	b.n	8002b54 <_printf_i+0xa8>
 8002ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ae2:	2b15      	cmp	r3, #21
 8002ae4:	d8f6      	bhi.n	8002ad4 <_printf_i+0x28>
 8002ae6:	a101      	add	r1, pc, #4	; (adr r1, 8002aec <_printf_i+0x40>)
 8002ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002aec:	08002b45 	.word	0x08002b45
 8002af0:	08002b59 	.word	0x08002b59
 8002af4:	08002ad5 	.word	0x08002ad5
 8002af8:	08002ad5 	.word	0x08002ad5
 8002afc:	08002ad5 	.word	0x08002ad5
 8002b00:	08002ad5 	.word	0x08002ad5
 8002b04:	08002b59 	.word	0x08002b59
 8002b08:	08002ad5 	.word	0x08002ad5
 8002b0c:	08002ad5 	.word	0x08002ad5
 8002b10:	08002ad5 	.word	0x08002ad5
 8002b14:	08002ad5 	.word	0x08002ad5
 8002b18:	08002c5d 	.word	0x08002c5d
 8002b1c:	08002b85 	.word	0x08002b85
 8002b20:	08002c17 	.word	0x08002c17
 8002b24:	08002ad5 	.word	0x08002ad5
 8002b28:	08002ad5 	.word	0x08002ad5
 8002b2c:	08002c7f 	.word	0x08002c7f
 8002b30:	08002ad5 	.word	0x08002ad5
 8002b34:	08002b85 	.word	0x08002b85
 8002b38:	08002ad5 	.word	0x08002ad5
 8002b3c:	08002ad5 	.word	0x08002ad5
 8002b40:	08002c1f 	.word	0x08002c1f
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	602a      	str	r2, [r5, #0]
 8002b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b54:	2301      	movs	r3, #1
 8002b56:	e09f      	b.n	8002c98 <_printf_i+0x1ec>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	0607      	lsls	r7, r0, #24
 8002b5e:	f103 0104 	add.w	r1, r3, #4
 8002b62:	6029      	str	r1, [r5, #0]
 8002b64:	d501      	bpl.n	8002b6a <_printf_i+0xbe>
 8002b66:	681e      	ldr	r6, [r3, #0]
 8002b68:	e003      	b.n	8002b72 <_printf_i+0xc6>
 8002b6a:	0646      	lsls	r6, r0, #25
 8002b6c:	d5fb      	bpl.n	8002b66 <_printf_i+0xba>
 8002b6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b72:	2e00      	cmp	r6, #0
 8002b74:	da03      	bge.n	8002b7e <_printf_i+0xd2>
 8002b76:	232d      	movs	r3, #45	; 0x2d
 8002b78:	4276      	negs	r6, r6
 8002b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b7e:	485a      	ldr	r0, [pc, #360]	; (8002ce8 <_printf_i+0x23c>)
 8002b80:	230a      	movs	r3, #10
 8002b82:	e012      	b.n	8002baa <_printf_i+0xfe>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	6820      	ldr	r0, [r4, #0]
 8002b88:	1d19      	adds	r1, r3, #4
 8002b8a:	6029      	str	r1, [r5, #0]
 8002b8c:	0605      	lsls	r5, r0, #24
 8002b8e:	d501      	bpl.n	8002b94 <_printf_i+0xe8>
 8002b90:	681e      	ldr	r6, [r3, #0]
 8002b92:	e002      	b.n	8002b9a <_printf_i+0xee>
 8002b94:	0641      	lsls	r1, r0, #25
 8002b96:	d5fb      	bpl.n	8002b90 <_printf_i+0xe4>
 8002b98:	881e      	ldrh	r6, [r3, #0]
 8002b9a:	4853      	ldr	r0, [pc, #332]	; (8002ce8 <_printf_i+0x23c>)
 8002b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2308      	moveq	r3, #8
 8002ba2:	230a      	movne	r3, #10
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002baa:	6865      	ldr	r5, [r4, #4]
 8002bac:	60a5      	str	r5, [r4, #8]
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	bfa2      	ittt	ge
 8002bb2:	6821      	ldrge	r1, [r4, #0]
 8002bb4:	f021 0104 	bicge.w	r1, r1, #4
 8002bb8:	6021      	strge	r1, [r4, #0]
 8002bba:	b90e      	cbnz	r6, 8002bc0 <_printf_i+0x114>
 8002bbc:	2d00      	cmp	r5, #0
 8002bbe:	d04b      	beq.n	8002c58 <_printf_i+0x1ac>
 8002bc0:	4615      	mov	r5, r2
 8002bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8002bca:	5dc7      	ldrb	r7, [r0, r7]
 8002bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bd0:	4637      	mov	r7, r6
 8002bd2:	42bb      	cmp	r3, r7
 8002bd4:	460e      	mov	r6, r1
 8002bd6:	d9f4      	bls.n	8002bc2 <_printf_i+0x116>
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d10b      	bne.n	8002bf4 <_printf_i+0x148>
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	07de      	lsls	r6, r3, #31
 8002be0:	d508      	bpl.n	8002bf4 <_printf_i+0x148>
 8002be2:	6923      	ldr	r3, [r4, #16]
 8002be4:	6861      	ldr	r1, [r4, #4]
 8002be6:	4299      	cmp	r1, r3
 8002be8:	bfde      	ittt	le
 8002bea:	2330      	movle	r3, #48	; 0x30
 8002bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002bf4:	1b52      	subs	r2, r2, r5
 8002bf6:	6122      	str	r2, [r4, #16]
 8002bf8:	f8cd a000 	str.w	sl, [sp]
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	aa03      	add	r2, sp, #12
 8002c00:	4621      	mov	r1, r4
 8002c02:	4640      	mov	r0, r8
 8002c04:	f7ff fee4 	bl	80029d0 <_printf_common>
 8002c08:	3001      	adds	r0, #1
 8002c0a:	d14a      	bne.n	8002ca2 <_printf_i+0x1f6>
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c10:	b004      	add	sp, #16
 8002c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	f043 0320 	orr.w	r3, r3, #32
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	4833      	ldr	r0, [pc, #204]	; (8002cec <_printf_i+0x240>)
 8002c20:	2778      	movs	r7, #120	; 0x78
 8002c22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	6829      	ldr	r1, [r5, #0]
 8002c2a:	061f      	lsls	r7, r3, #24
 8002c2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c30:	d402      	bmi.n	8002c38 <_printf_i+0x18c>
 8002c32:	065f      	lsls	r7, r3, #25
 8002c34:	bf48      	it	mi
 8002c36:	b2b6      	uxthmi	r6, r6
 8002c38:	07df      	lsls	r7, r3, #31
 8002c3a:	bf48      	it	mi
 8002c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8002c40:	6029      	str	r1, [r5, #0]
 8002c42:	bf48      	it	mi
 8002c44:	6023      	strmi	r3, [r4, #0]
 8002c46:	b91e      	cbnz	r6, 8002c50 <_printf_i+0x1a4>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	f023 0320 	bic.w	r3, r3, #32
 8002c4e:	6023      	str	r3, [r4, #0]
 8002c50:	2310      	movs	r3, #16
 8002c52:	e7a7      	b.n	8002ba4 <_printf_i+0xf8>
 8002c54:	4824      	ldr	r0, [pc, #144]	; (8002ce8 <_printf_i+0x23c>)
 8002c56:	e7e4      	b.n	8002c22 <_printf_i+0x176>
 8002c58:	4615      	mov	r5, r2
 8002c5a:	e7bd      	b.n	8002bd8 <_printf_i+0x12c>
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	6826      	ldr	r6, [r4, #0]
 8002c60:	6961      	ldr	r1, [r4, #20]
 8002c62:	1d18      	adds	r0, r3, #4
 8002c64:	6028      	str	r0, [r5, #0]
 8002c66:	0635      	lsls	r5, r6, #24
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	d501      	bpl.n	8002c70 <_printf_i+0x1c4>
 8002c6c:	6019      	str	r1, [r3, #0]
 8002c6e:	e002      	b.n	8002c76 <_printf_i+0x1ca>
 8002c70:	0670      	lsls	r0, r6, #25
 8002c72:	d5fb      	bpl.n	8002c6c <_printf_i+0x1c0>
 8002c74:	8019      	strh	r1, [r3, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	6123      	str	r3, [r4, #16]
 8002c7a:	4615      	mov	r5, r2
 8002c7c:	e7bc      	b.n	8002bf8 <_printf_i+0x14c>
 8002c7e:	682b      	ldr	r3, [r5, #0]
 8002c80:	1d1a      	adds	r2, r3, #4
 8002c82:	602a      	str	r2, [r5, #0]
 8002c84:	681d      	ldr	r5, [r3, #0]
 8002c86:	6862      	ldr	r2, [r4, #4]
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f7fd fac8 	bl	8000220 <memchr>
 8002c90:	b108      	cbz	r0, 8002c96 <_printf_i+0x1ea>
 8002c92:	1b40      	subs	r0, r0, r5
 8002c94:	6060      	str	r0, [r4, #4]
 8002c96:	6863      	ldr	r3, [r4, #4]
 8002c98:	6123      	str	r3, [r4, #16]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ca0:	e7aa      	b.n	8002bf8 <_printf_i+0x14c>
 8002ca2:	6923      	ldr	r3, [r4, #16]
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	4640      	mov	r0, r8
 8002caa:	47d0      	blx	sl
 8002cac:	3001      	adds	r0, #1
 8002cae:	d0ad      	beq.n	8002c0c <_printf_i+0x160>
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	079b      	lsls	r3, r3, #30
 8002cb4:	d413      	bmi.n	8002cde <_printf_i+0x232>
 8002cb6:	68e0      	ldr	r0, [r4, #12]
 8002cb8:	9b03      	ldr	r3, [sp, #12]
 8002cba:	4298      	cmp	r0, r3
 8002cbc:	bfb8      	it	lt
 8002cbe:	4618      	movlt	r0, r3
 8002cc0:	e7a6      	b.n	8002c10 <_printf_i+0x164>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	4640      	mov	r0, r8
 8002cca:	47d0      	blx	sl
 8002ccc:	3001      	adds	r0, #1
 8002cce:	d09d      	beq.n	8002c0c <_printf_i+0x160>
 8002cd0:	3501      	adds	r5, #1
 8002cd2:	68e3      	ldr	r3, [r4, #12]
 8002cd4:	9903      	ldr	r1, [sp, #12]
 8002cd6:	1a5b      	subs	r3, r3, r1
 8002cd8:	42ab      	cmp	r3, r5
 8002cda:	dcf2      	bgt.n	8002cc2 <_printf_i+0x216>
 8002cdc:	e7eb      	b.n	8002cb6 <_printf_i+0x20a>
 8002cde:	2500      	movs	r5, #0
 8002ce0:	f104 0619 	add.w	r6, r4, #25
 8002ce4:	e7f5      	b.n	8002cd2 <_printf_i+0x226>
 8002ce6:	bf00      	nop
 8002ce8:	08002e25 	.word	0x08002e25
 8002cec:	08002e36 	.word	0x08002e36

08002cf0 <memmove>:
 8002cf0:	4288      	cmp	r0, r1
 8002cf2:	b510      	push	{r4, lr}
 8002cf4:	eb01 0402 	add.w	r4, r1, r2
 8002cf8:	d902      	bls.n	8002d00 <memmove+0x10>
 8002cfa:	4284      	cmp	r4, r0
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	d807      	bhi.n	8002d10 <memmove+0x20>
 8002d00:	1e43      	subs	r3, r0, #1
 8002d02:	42a1      	cmp	r1, r4
 8002d04:	d008      	beq.n	8002d18 <memmove+0x28>
 8002d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d0e:	e7f8      	b.n	8002d02 <memmove+0x12>
 8002d10:	4402      	add	r2, r0
 8002d12:	4601      	mov	r1, r0
 8002d14:	428a      	cmp	r2, r1
 8002d16:	d100      	bne.n	8002d1a <memmove+0x2a>
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d22:	e7f7      	b.n	8002d14 <memmove+0x24>

08002d24 <_sbrk_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4d06      	ldr	r5, [pc, #24]	; (8002d40 <_sbrk_r+0x1c>)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	602b      	str	r3, [r5, #0]
 8002d30:	f7fd fe0c 	bl	800094c <_sbrk>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_sbrk_r+0x1a>
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_sbrk_r+0x1a>
 8002d3c:	6023      	str	r3, [r4, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	200001fc 	.word	0x200001fc

08002d44 <memcpy>:
 8002d44:	440a      	add	r2, r1
 8002d46:	4291      	cmp	r1, r2
 8002d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002d4c:	d100      	bne.n	8002d50 <memcpy+0xc>
 8002d4e:	4770      	bx	lr
 8002d50:	b510      	push	{r4, lr}
 8002d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d5a:	4291      	cmp	r1, r2
 8002d5c:	d1f9      	bne.n	8002d52 <memcpy+0xe>
 8002d5e:	bd10      	pop	{r4, pc}

08002d60 <_realloc_r>:
 8002d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d64:	4680      	mov	r8, r0
 8002d66:	4614      	mov	r4, r2
 8002d68:	460e      	mov	r6, r1
 8002d6a:	b921      	cbnz	r1, 8002d76 <_realloc_r+0x16>
 8002d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d70:	4611      	mov	r1, r2
 8002d72:	f7ff bc49 	b.w	8002608 <_malloc_r>
 8002d76:	b92a      	cbnz	r2, 8002d84 <_realloc_r+0x24>
 8002d78:	f7ff fbda 	bl	8002530 <_free_r>
 8002d7c:	4625      	mov	r5, r4
 8002d7e:	4628      	mov	r0, r5
 8002d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d84:	f000 f81b 	bl	8002dbe <_malloc_usable_size_r>
 8002d88:	4284      	cmp	r4, r0
 8002d8a:	4607      	mov	r7, r0
 8002d8c:	d802      	bhi.n	8002d94 <_realloc_r+0x34>
 8002d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d92:	d812      	bhi.n	8002dba <_realloc_r+0x5a>
 8002d94:	4621      	mov	r1, r4
 8002d96:	4640      	mov	r0, r8
 8002d98:	f7ff fc36 	bl	8002608 <_malloc_r>
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d0ed      	beq.n	8002d7e <_realloc_r+0x1e>
 8002da2:	42bc      	cmp	r4, r7
 8002da4:	4622      	mov	r2, r4
 8002da6:	4631      	mov	r1, r6
 8002da8:	bf28      	it	cs
 8002daa:	463a      	movcs	r2, r7
 8002dac:	f7ff ffca 	bl	8002d44 <memcpy>
 8002db0:	4631      	mov	r1, r6
 8002db2:	4640      	mov	r0, r8
 8002db4:	f7ff fbbc 	bl	8002530 <_free_r>
 8002db8:	e7e1      	b.n	8002d7e <_realloc_r+0x1e>
 8002dba:	4635      	mov	r5, r6
 8002dbc:	e7df      	b.n	8002d7e <_realloc_r+0x1e>

08002dbe <_malloc_usable_size_r>:
 8002dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc2:	1f18      	subs	r0, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bfbc      	itt	lt
 8002dc8:	580b      	ldrlt	r3, [r1, r0]
 8002dca:	18c0      	addlt	r0, r0, r3
 8002dcc:	4770      	bx	lr
	...

08002dd0 <_init>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	bf00      	nop
 8002dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd6:	bc08      	pop	{r3}
 8002dd8:	469e      	mov	lr, r3
 8002dda:	4770      	bx	lr

08002ddc <_fini>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	bf00      	nop
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr
