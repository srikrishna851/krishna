
i2c_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000318  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004dc  080004dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004dc  080004dc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004dc  080004dc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004dc  080004dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004dc  080004dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004e4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004e8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004e8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001413  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c6  00000000  00000000  0002148a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00021950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000146  00000000  00000000  00021b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f65b  00000000  00000000  00021c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f05  00000000  00000000  000412c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d1a  00000000  00000000  000431c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000570  00000000  00000000  00105ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00106450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004c4 	.word	0x080004c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004c4 	.word	0x080004c4

08000204 <main>:
#include "stm32f4xx.h"
void delayMs(int n);
void I2C1_init(void);
int I2C1_byteWrite(char saddr, char maddr, char data);
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	I2C1_init();
 8000208:	f000 f806 	bl	8000218 <I2C1_init>
	I2C1_byteWrite(0x38, 0xAC, 0X33);
 800020c:	2233      	movs	r2, #51	; 0x33
 800020e:	21ac      	movs	r1, #172	; 0xac
 8000210:	2038      	movs	r0, #56	; 0x38
 8000212:	f000 f85d 	bl	80002d0 <I2C1_byteWrite>
    while(1)
 8000216:	e7fe      	b.n	8000216 <main+0x12>

08000218 <I2C1_init>:
    {
    }
}
void I2C1_init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 2;
 800021c:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <I2C1_init+0xac>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000220:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <I2C1_init+0xac>)
 8000222:	f043 0302 	orr.w	r3, r3, #2
 8000226:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |=0x00200000;
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <I2C1_init+0xac>)
 800022a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800022c:	4a25      	ldr	r2, [pc, #148]	; (80002c4 <I2C1_init+0xac>)
 800022e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000232:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->AFR[1] &= ~0x000000FF;
 8000234:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <I2C1_init+0xb0>)
 8000236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000238:	4a23      	ldr	r2, [pc, #140]	; (80002c8 <I2C1_init+0xb0>)
 800023a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800023e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x00000044;
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <I2C1_init+0xb0>)
 8000242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000244:	4a20      	ldr	r2, [pc, #128]	; (80002c8 <I2C1_init+0xb0>)
 8000246:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800024a:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->MODER &= ~0x000F0000;
 800024c:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <I2C1_init+0xb0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a1d      	ldr	r2, [pc, #116]	; (80002c8 <I2C1_init+0xb0>)
 8000252:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;
 8000258:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <I2C1_init+0xb0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <I2C1_init+0xb0>)
 800025e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000262:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= 0x00000300;
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <I2C1_init+0xb0>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <I2C1_init+0xb0>)
 800026a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800026e:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR &=~0x000F0000;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <I2C1_init+0xb0>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <I2C1_init+0xb0>)
 8000276:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800027a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= 0x00050000;
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <I2C1_init+0xb0>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <I2C1_init+0xb0>)
 8000282:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000286:	60d3      	str	r3, [r2, #12]


	I2C1->CR1 = 0x8000;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <I2C1_init+0xb4>)
 800028a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800028e:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <I2C1_init+0xb4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <I2C1_init+0xb4>)
 8000296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800029a:	6013      	str	r3, [r2, #0]

	I2C1->CR2 = 0x0010;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <I2C1_init+0xb4>)
 800029e:	2210      	movs	r2, #16
 80002a0:	605a      	str	r2, [r3, #4]
	I2C1->CCR = 80;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <I2C1_init+0xb4>)
 80002a4:	2250      	movs	r2, #80	; 0x50
 80002a6:	61da      	str	r2, [r3, #28]
	I2C1->TRISE =17;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <I2C1_init+0xb4>)
 80002aa:	2211      	movs	r2, #17
 80002ac:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001;
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <I2C1_init+0xb4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a06      	ldr	r2, [pc, #24]	; (80002cc <I2C1_init+0xb4>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]

}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020400 	.word	0x40020400
 80002cc:	40005400 	.word	0x40005400

080002d0 <I2C1_byteWrite>:
volatile int tmp;
int I2C1_byteWrite(char saddr, char maddr, char data)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	460b      	mov	r3, r1
 80002dc:	71bb      	strb	r3, [r7, #6]
 80002de:	4613      	mov	r3, r2
 80002e0:	717b      	strb	r3, [r7, #5]
	while (I2C1->SR2 & 2);
 80002e2:	bf00      	nop
 80002e4:	4b26      	ldr	r3, [pc, #152]	; (8000380 <I2C1_byteWrite+0xb0>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0302 	and.w	r3, r3, #2
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f9      	bne.n	80002e4 <I2C1_byteWrite+0x14>
	I2C1->CR1 |= 0x100;
 80002f0:	4b23      	ldr	r3, [pc, #140]	; (8000380 <I2C1_byteWrite+0xb0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a22      	ldr	r2, [pc, #136]	; (8000380 <I2C1_byteWrite+0xb0>)
 80002f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fa:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & 1));
 80002fc:	bf00      	nop
 80002fe:	4b20      	ldr	r3, [pc, #128]	; (8000380 <I2C1_byteWrite+0xb0>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <I2C1_byteWrite+0x2e>
	I2C1->DR = saddr << 1;
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	005a      	lsls	r2, r3, #1
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <I2C1_byteWrite+0xb0>)
 8000310:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & 2));
 8000312:	bf00      	nop
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <I2C1_byteWrite+0xb0>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f003 0302 	and.w	r3, r3, #2
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f9      	beq.n	8000314 <I2C1_byteWrite+0x44>
	tmp = I2C1->SR2;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <I2C1_byteWrite+0xb0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	461a      	mov	r2, r3
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <I2C1_byteWrite+0xb4>)
 8000328:	601a      	str	r2, [r3, #0]
	while (!(I2C1->SR1 & 0x80));
 800032a:	bf00      	nop
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <I2C1_byteWrite+0xb0>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <I2C1_byteWrite+0x5c>
	I2C1->DR = maddr;
 8000338:	4a11      	ldr	r2, [pc, #68]	; (8000380 <I2C1_byteWrite+0xb0>)
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & 0x80));
 800033e:	bf00      	nop
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <I2C1_byteWrite+0xb0>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <I2C1_byteWrite+0x70>
	tmp=I2C1->DR;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <I2C1_byteWrite+0xb0>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	461a      	mov	r2, r3
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <I2C1_byteWrite+0xb4>)
 8000354:	601a      	str	r2, [r3, #0]
	while (!(I2C1->SR1 & 4));
 8000356:	bf00      	nop
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <I2C1_byteWrite+0xb0>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <I2C1_byteWrite+0x88>
	I2C1->CR1 |= 0x200;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <I2C1_byteWrite+0xb0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a05      	ldr	r2, [pc, #20]	; (8000380 <I2C1_byteWrite+0xb0>)
 800036a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800036e:	6013      	str	r3, [r2, #0]
	return 0;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40005400 	.word	0x40005400
 8000384:	20000020 	.word	0x20000020

08000388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800038c:	e7fe      	b.n	800038c <NMI_Handler+0x4>

0800038e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <HardFault_Handler+0x4>

08000394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <MemManage_Handler+0x4>

0800039a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039e:	e7fe      	b.n	800039e <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d4:	f000 f83e 	bl	8000454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}

080003dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <SystemInit+0x20>)
 80003e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <SystemInit+0x20>)
 80003e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000406:	490e      	ldr	r1, [pc, #56]	; (8000440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000408:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0b      	ldr	r2, [pc, #44]	; (8000448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800041c:	4c0b      	ldr	r4, [pc, #44]	; (800044c <LoopFillZerobss+0x26>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800042a:	f7ff ffd7 	bl	80003dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800042e:	f000 f825 	bl	800047c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000432:	f7ff fee7 	bl	8000204 <main>
  bx  lr    
 8000436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000444:	080004e4 	.word	0x080004e4
  ldr r2, =_sbss
 8000448:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800044c:	20000028 	.word	0x20000028

08000450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC_IRQHandler>
	...

08000454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_IncTick+0x20>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_IncTick+0x24>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4413      	add	r3, r2
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_IncTick+0x24>)
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000000 	.word	0x20000000
 8000478:	20000024 	.word	0x20000024

0800047c <__libc_init_array>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	4d0d      	ldr	r5, [pc, #52]	; (80004b4 <__libc_init_array+0x38>)
 8000480:	4c0d      	ldr	r4, [pc, #52]	; (80004b8 <__libc_init_array+0x3c>)
 8000482:	1b64      	subs	r4, r4, r5
 8000484:	10a4      	asrs	r4, r4, #2
 8000486:	2600      	movs	r6, #0
 8000488:	42a6      	cmp	r6, r4
 800048a:	d109      	bne.n	80004a0 <__libc_init_array+0x24>
 800048c:	4d0b      	ldr	r5, [pc, #44]	; (80004bc <__libc_init_array+0x40>)
 800048e:	4c0c      	ldr	r4, [pc, #48]	; (80004c0 <__libc_init_array+0x44>)
 8000490:	f000 f818 	bl	80004c4 <_init>
 8000494:	1b64      	subs	r4, r4, r5
 8000496:	10a4      	asrs	r4, r4, #2
 8000498:	2600      	movs	r6, #0
 800049a:	42a6      	cmp	r6, r4
 800049c:	d105      	bne.n	80004aa <__libc_init_array+0x2e>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a4:	4798      	blx	r3
 80004a6:	3601      	adds	r6, #1
 80004a8:	e7ee      	b.n	8000488 <__libc_init_array+0xc>
 80004aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ae:	4798      	blx	r3
 80004b0:	3601      	adds	r6, #1
 80004b2:	e7f2      	b.n	800049a <__libc_init_array+0x1e>
 80004b4:	080004dc 	.word	0x080004dc
 80004b8:	080004dc 	.word	0x080004dc
 80004bc:	080004dc 	.word	0x080004dc
 80004c0:	080004e0 	.word	0x080004e0

080004c4 <_init>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr

080004d0 <_fini>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr
