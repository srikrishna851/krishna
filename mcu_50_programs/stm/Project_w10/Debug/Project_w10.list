
Project_w10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  080081d0  080081d0  000181d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800865c  0800865c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008664  08008664  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800866c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001d8  08008844  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  08008844  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8ce  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e4  00000000  00000000  0002fb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00032300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b82  00000000  00000000  000331d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c89  00000000  00000000  00033d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cff  00000000  00000000  000579e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4d4a  00000000  00000000  000696e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e94  00000000  00000000  0013e42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001432c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080081b4 	.word	0x080081b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080081b4 	.word	0x080081b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <vApplicationGetIdleTaskMemory+0x30>)
 8000f9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200001f4 	.word	0x200001f4
 8000fb4:	20000248 	.word	0x20000248

08000fb8 <read_sensor_values>:

/* USER CODE END 0 */
float temperature, humidity;

void read_sensor_values(float *temperature, float *humidity)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t cmd = AHT25_MEASURE_CMD;
 8000fc2:	23ac      	movs	r3, #172	; 0xac
 8000fc4:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c1, AHT25_ADDR,&cmd, 1, HAL_MAX_DELAY);
 8000fc6:	f107 020f 	add.w	r2, r7, #15
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	2170      	movs	r1, #112	; 0x70
 8000fd4:	4836      	ldr	r0, [pc, #216]	; (80010b0 <read_sensor_values+0xf8>)
 8000fd6:	f001 fa31 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f000 fe4c 	bl	8001c78 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1,0x71, data, 6, HAL_MAX_DELAY);
 8000fe0:	f107 0210 	add.w	r2, r7, #16
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2306      	movs	r3, #6
 8000fec:	2171      	movs	r1, #113	; 0x71
 8000fee:	4830      	ldr	r0, [pc, #192]	; (80010b0 <read_sensor_values+0xf8>)
 8000ff0:	f001 fb22 	bl	8002638 <HAL_I2C_Master_Receive>

    *humidity = ((float)((data[1] << 12) | (data[2] << 4) | (data[3] >> 4))) / 1048576.0 * 100.0;
 8000ff4:	7c7b      	ldrb	r3, [r7, #17]
 8000ff6:	031a      	lsls	r2, r3, #12
 8000ff8:	7cbb      	ldrb	r3, [r7, #18]
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	7cfa      	ldrb	r2, [r7, #19]
 8001000:	0912      	lsrs	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	4313      	orrs	r3, r2
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	ee17 0a90 	vmov	r0, s15
 8001012:	f7ff fab9 	bl	8000588 <__aeabi_f2d>
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <read_sensor_values+0xfc>)
 800101c:	f7ff fc36 	bl	800088c <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <read_sensor_values+0x100>)
 800102e:	f7ff fb03 	bl	8000638 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fdd5 	bl	8000be8 <__aeabi_d2f>
 800103e:	4602      	mov	r2, r0
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	601a      	str	r2, [r3, #0]
    *temperature = ((float)(((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5])) / 1048576.0 * 200.0 - 50.0;
 8001044:	7cfb      	ldrb	r3, [r7, #19]
 8001046:	041b      	lsls	r3, r3, #16
 8001048:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4313      	orrs	r3, r2
 8001052:	7d7a      	ldrb	r2, [r7, #21]
 8001054:	4313      	orrs	r3, r2
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fa91 	bl	8000588 <__aeabi_f2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <read_sensor_values+0xfc>)
 800106c:	f7ff fc0e 	bl	800088c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <read_sensor_values+0x104>)
 800107e:	f7ff fadb 	bl	8000638 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <read_sensor_values+0x108>)
 8001090:	f7ff f91a 	bl	80002c8 <__aeabi_dsub>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fda4 	bl	8000be8 <__aeabi_d2f>
 80010a0:	4602      	mov	r2, r0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000448 	.word	0x20000448
 80010b4:	41300000 	.word	0x41300000
 80010b8:	40590000 	.word	0x40590000
 80010bc:	40690000 	.word	0x40690000
 80010c0:	40490000 	.word	0x40490000

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f000 fd64 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 fa34 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 fb1e 	bl	8001710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d4:	f000 faf2 	bl	80016bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010d8:	f000 fa98 	bl	800160c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010dc:	f000 fac4 	bl	8001668 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  WE10_Init("ssk","colorful");
 80010e0:	4906      	ldr	r1, [pc, #24]	; (80010fc <main+0x38>)
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <main+0x3c>)
 80010e4:	f000 f812 	bl	800110c <WE10_Init>
    MQTT_Init();
 80010e8:	f000 f92a 	bl	8001340 <MQTT_Init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
 // read_sensor_values(&temperature, &humidity);
  /* Start scheduler */
  osKernelStart();
 80010ec:	f003 fa44 	bl	8004578 <osKernelStart>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  read_sensor_values(&temperature, &humidity);
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <main+0x40>)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <main+0x44>)
 80010f4:	f7ff ff60 	bl	8000fb8 <read_sensor_values>
 80010f8:	e7fa      	b.n	80010f0 <main+0x2c>
 80010fa:	bf00      	nop
 80010fc:	080081d0 	.word	0x080081d0
 8001100:	080081dc 	.word	0x080081dc
 8001104:	20000528 	.word	0x20000528
 8001108:	20000524 	.word	0x20000524

0800110c <WE10_Init>:
  /* USER CODE END 3 */
}


void WE10_Init (char *SSID, char *PASSWD)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0a2      	sub	sp, #136	; 0x88
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	char buffer[128];
	/********* CMD+RESET **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+RESET\r\n");
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4983      	ldr	r1, [pc, #524]	; (8001328 <WE10_Init+0x21c>)
 800111c:	4618      	mov	r0, r3
 800111e:	f004 feed 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f8c2 	bl	80002b0 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	f107 0108 	add.w	r1, r7, #8
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	487c      	ldr	r0, [pc, #496]	; (800132c <WE10_Init+0x220>)
 800113a:	f002 fe06 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f8b4 	bl	80002b0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	f107 0108 	add.w	r1, r7, #8
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	4876      	ldr	r0, [pc, #472]	; (8001330 <WE10_Init+0x224>)
 8001156:	f002 fdf8 	bl	8003d4a <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f8a6 	bl	80002b0 <strlen>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	f107 0108 	add.w	r1, r7, #8
 800116c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001170:	486e      	ldr	r0, [pc, #440]	; (800132c <WE10_Init+0x220>)
 8001172:	f002 fe7c 	bl	8003e6e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f898 	bl	80002b0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 0108 	add.w	r1, r7, #8
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	4868      	ldr	r0, [pc, #416]	; (8001330 <WE10_Init+0x224>)
 800118e:	f002 fddc 	bl	8003d4a <HAL_UART_Transmit>


	/*********  CMD+WIFIMODE=1  **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+WIFIMODE=1\r\n");
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4967      	ldr	r1, [pc, #412]	; (8001334 <WE10_Init+0x228>)
 8001198:	4618      	mov	r0, r3
 800119a:	f004 feaf 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f884 	bl	80002b0 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f107 0108 	add.w	r1, r7, #8
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	485d      	ldr	r0, [pc, #372]	; (800132c <WE10_Init+0x220>)
 80011b6:	f002 fdc8 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f876 	bl	80002b0 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f107 0108 	add.w	r1, r7, #8
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	4857      	ldr	r0, [pc, #348]	; (8001330 <WE10_Init+0x224>)
 80011d2:	f002 fdba 	bl	8003d4a <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f868 	bl	80002b0 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0108 	add.w	r1, r7, #8
 80011e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ec:	484f      	ldr	r0, [pc, #316]	; (800132c <WE10_Init+0x220>)
 80011ee:	f002 fe3e 	bl	8003e6e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f85a 	bl	80002b0 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f107 0108 	add.w	r1, r7, #8
 8001204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001208:	4849      	ldr	r0, [pc, #292]	; (8001330 <WE10_Init+0x224>)
 800120a:	f002 fd9e 	bl	8003d4a <HAL_UART_Transmit>


	/********* CMD+CONTOAP=SSID,PASSWD **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+CONTOAP=SBCS.2.4.GHz,SBCS@1234\r\n", SSID, PASSWD);
 800120e:	f107 0008 	add.w	r0, r7, #8
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4948      	ldr	r1, [pc, #288]	; (8001338 <WE10_Init+0x22c>)
 8001218:	f004 fe70 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f845 	bl	80002b0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	f107 0108 	add.w	r1, r7, #8
 800122e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001232:	483e      	ldr	r0, [pc, #248]	; (800132c <WE10_Init+0x220>)
 8001234:	f002 fd89 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f837 	bl	80002b0 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	f107 0108 	add.w	r1, r7, #8
 800124a:	f242 7310 	movw	r3, #10000	; 0x2710
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <WE10_Init+0x224>)
 8001250:	f002 fd7b 	bl	8003d4a <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	HAL_Delay(2000);
 8001254:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001258:	f000 fd0e 	bl	8001c78 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f825 	bl	80002b0 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f107 0108 	add.w	r1, r7, #8
 800126e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001272:	482e      	ldr	r0, [pc, #184]	; (800132c <WE10_Init+0x220>)
 8001274:	f002 fdfb 	bl	8003e6e <HAL_UART_Receive>
	HAL_Delay(500);
 8001278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127c:	f000 fcfc 	bl	8001c78 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f813 	bl	80002b0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f107 0108 	add.w	r1, r7, #8
 8001292:	f242 7310 	movw	r3, #10000	; 0x2710
 8001296:	4826      	ldr	r0, [pc, #152]	; (8001330 <WE10_Init+0x224>)
 8001298:	f002 fd57 	bl	8003d4a <HAL_UART_Transmit>

	/********* CMD?WIFI**********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD?WIFI\r\n");
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4926      	ldr	r1, [pc, #152]	; (800133c <WE10_Init+0x230>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fe2a 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ffff 	bl	80002b0 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 0108 	add.w	r1, r7, #8
 80012ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80012be:	481b      	ldr	r0, [pc, #108]	; (800132c <WE10_Init+0x220>)
 80012c0:	f002 fd43 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe fff1 	bl	80002b0 <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f107 0108 	add.w	r1, r7, #8
 80012d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012da:	4815      	ldr	r0, [pc, #84]	; (8001330 <WE10_Init+0x224>)
 80012dc:	f002 fd35 	bl	8003d4a <HAL_UART_Transmit>
//	memset(&buffer[0],0x00,strlen(buffer));
//	HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ffe3 	bl	80002b0 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f107 0108 	add.w	r1, r7, #8
 80012f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <WE10_Init+0x220>)
 80012f8:	f002 fdb9 	bl	8003e6e <HAL_UART_Receive>
	HAL_Delay(500);
 80012fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001300:	f000 fcba 	bl	8001c78 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ffd1 	bl	80002b0 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f107 0108 	add.w	r1, r7, #8
 8001316:	f242 7310 	movw	r3, #10000	; 0x2710
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <WE10_Init+0x224>)
 800131c:	f002 fd15 	bl	8003d4a <HAL_UART_Transmit>


}
 8001320:	bf00      	nop
 8001322:	3788      	adds	r7, #136	; 0x88
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	080081e0 	.word	0x080081e0
 800132c:	2000049c 	.word	0x2000049c
 8001330:	200004e0 	.word	0x200004e0
 8001334:	080081ec 	.word	0x080081ec
 8001338:	08008200 	.word	0x08008200
 800133c:	08008228 	.word	0x08008228

08001340 <MQTT_Init>:

void MQTT_Init()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0a0      	sub	sp, #128	; 0x80
 8001344:	af00      	add	r7, sp, #0

	char buffer[128];

	/*********CMD+MQTTNETCFG **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
 8001346:	463b      	mov	r3, r7
 8001348:	4975      	ldr	r1, [pc, #468]	; (8001520 <MQTT_Init+0x1e0>)
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fdd6 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001350:	463b      	mov	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ffac 	bl	80002b0 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	4639      	mov	r1, r7
 800135e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001362:	4870      	ldr	r0, [pc, #448]	; (8001524 <MQTT_Init+0x1e4>)
 8001364:	f002 fcf1 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001368:	463b      	mov	r3, r7
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe ffa0 	bl	80002b0 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	4639      	mov	r1, r7
 8001376:	f242 7310 	movw	r3, #10000	; 0x2710
 800137a:	486b      	ldr	r0, [pc, #428]	; (8001528 <MQTT_Init+0x1e8>)
 800137c:	f002 fce5 	bl	8003d4a <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001380:	463b      	mov	r3, r7
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe ff94 	bl	80002b0 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	4639      	mov	r1, r7
 800138e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001392:	4864      	ldr	r0, [pc, #400]	; (8001524 <MQTT_Init+0x1e4>)
 8001394:	f002 fd6b 	bl	8003e6e <HAL_UART_Receive>
	HAL_Delay(500);
 8001398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800139c:	f000 fc6c 	bl	8001c78 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff84 	bl	80002b0 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4639      	mov	r1, r7
 80013ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80013b2:	485d      	ldr	r0, [pc, #372]	; (8001528 <MQTT_Init+0x1e8>)
 80013b4:	f002 fcc9 	bl	8003d4a <HAL_UART_Transmit>


	/*********CMD+MQTTCONCFG---->LED **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTCONCFG=3,mqtt-elmanjunath04-8gnaz2,,,,,,,,,\r\n");
 80013b8:	463b      	mov	r3, r7
 80013ba:	495c      	ldr	r1, [pc, #368]	; (800152c <MQTT_Init+0x1ec>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fd9d 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80013c2:	463b      	mov	r3, r7
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff73 	bl	80002b0 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4639      	mov	r1, r7
 80013d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d4:	4853      	ldr	r0, [pc, #332]	; (8001524 <MQTT_Init+0x1e4>)
 80013d6:	f002 fcb8 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80013da:	463b      	mov	r3, r7
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe ff67 	bl	80002b0 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4639      	mov	r1, r7
 80013e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ec:	484e      	ldr	r0, [pc, #312]	; (8001528 <MQTT_Init+0x1e8>)
 80013ee:	f002 fcac 	bl	8003d4a <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80013f2:	463b      	mov	r3, r7
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe ff5b 	bl	80002b0 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4639      	mov	r1, r7
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	4847      	ldr	r0, [pc, #284]	; (8001524 <MQTT_Init+0x1e4>)
 8001406:	f002 fd32 	bl	8003e6e <HAL_UART_Receive>
	HAL_Delay(500);
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f000 fc33 	bl	8001c78 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001412:	463b      	mov	r3, r7
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe ff4b 	bl	80002b0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	4639      	mov	r1, r7
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	4840      	ldr	r0, [pc, #256]	; (8001528 <MQTT_Init+0x1e8>)
 8001426:	f002 fc90 	bl	8003d4a <HAL_UART_Transmit>


	/*********CMD+MQTTSTART **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSTART=1\r\n");
 800142a:	463b      	mov	r3, r7
 800142c:	4940      	ldr	r1, [pc, #256]	; (8001530 <MQTT_Init+0x1f0>)
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fd64 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001434:	463b      	mov	r3, r7
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe ff3a 	bl	80002b0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	4639      	mov	r1, r7
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	4837      	ldr	r0, [pc, #220]	; (8001524 <MQTT_Init+0x1e4>)
 8001448:	f002 fc7f 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800144c:	463b      	mov	r3, r7
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ff2e 	bl	80002b0 <strlen>
 8001454:	4603      	mov	r3, r0
 8001456:	b29a      	uxth	r2, r3
 8001458:	4639      	mov	r1, r7
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	4832      	ldr	r0, [pc, #200]	; (8001528 <MQTT_Init+0x1e8>)
 8001460:	f002 fc73 	bl	8003d4a <HAL_UART_Transmit>
//	memset(&buffer[0],0x00,strlen(buffer));
	HAL_Delay(5000);
 8001464:	f241 3088 	movw	r0, #5000	; 0x1388
 8001468:	f000 fc06 	bl	8001c78 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800146c:	463b      	mov	r3, r7
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff1e 	bl	80002b0 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	4639      	mov	r1, r7
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	4829      	ldr	r0, [pc, #164]	; (8001524 <MQTT_Init+0x1e4>)
 8001480:	f002 fcf5 	bl	8003e6e <HAL_UART_Receive>
	HAL_Delay(500);
 8001484:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001488:	f000 fbf6 	bl	8001c78 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800148c:	463b      	mov	r3, r7
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff0e 	bl	80002b0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	4639      	mov	r1, r7
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	4822      	ldr	r0, [pc, #136]	; (8001528 <MQTT_Init+0x1e8>)
 80014a0:	f002 fc53 	bl	8003d4a <HAL_UART_Transmit>

	/*********CMD+MQTTSUB *********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSUB=base/relay/led1\r\n");
 80014a4:	463b      	mov	r3, r7
 80014a6:	4923      	ldr	r1, [pc, #140]	; (8001534 <MQTT_Init+0x1f4>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 fd27 	bl	8005efc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fefd 	bl	80002b0 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4639      	mov	r1, r7
 80014bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c0:	4818      	ldr	r0, [pc, #96]	; (8001524 <MQTT_Init+0x1e4>)
 80014c2:	f002 fc42 	bl	8003d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe fef1 	bl	80002b0 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4639      	mov	r1, r7
 80014d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <MQTT_Init+0x1e8>)
 80014da:	f002 fc36 	bl	8003d4a <HAL_UART_Transmit>
	HAL_Delay(500);
 80014de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e2:	f000 fbc9 	bl	8001c78 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80014e6:	463b      	mov	r3, r7
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fee1 	bl	80002b0 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4639      	mov	r1, r7
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <MQTT_Init+0x1e4>)
 80014fa:	f002 fcb8 	bl	8003e6e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014fe:	463b      	mov	r3, r7
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fed5 	bl	80002b0 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	4639      	mov	r1, r7
 800150c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MQTT_Init+0x1e8>)
 8001512:	f002 fc1a 	bl	8003d4a <HAL_UART_Transmit>

}
 8001516:	bf00      	nop
 8001518:	3780      	adds	r7, #128	; 0x80
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	08008234 	.word	0x08008234
 8001524:	2000049c 	.word	0x2000049c
 8001528:	200004e0 	.word	0x200004e0
 800152c:	0800825c 	.word	0x0800825c
 8001530:	08008294 	.word	0x08008294
 8001534:	080082a8 	.word	0x080082a8

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	; 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	2234      	movs	r2, #52	; 0x34
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f004 fd3b 	bl	8005fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <SystemClock_Config+0xcc>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <SystemClock_Config+0xd0>)
 8001582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159c:	2310      	movs	r3, #16
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015a8:	2310      	movs	r3, #16
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015b2:	2304      	movs	r3, #4
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b6:	2304      	movs	r3, #4
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 f8d8 	bl	8003774 <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015ca:	f000 f8c9 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2302      	movs	r3, #2
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2102      	movs	r1, #2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fd78 	bl	80030e0 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015f6:	f000 f8b3 	bl	8001760 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	; 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_I2C1_Init+0x50>)
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <MX_I2C1_Init+0x54>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_I2C1_Init+0x50>)
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_I2C1_Init+0x58>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_I2C1_Init+0x50>)
 800162a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_I2C1_Init+0x50>)
 800164a:	f000 fdb3 	bl	80021b4 <HAL_I2C_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001654:	f000 f884 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000448 	.word	0x20000448
 8001660:	40005400 	.word	0x40005400
 8001664:	000186a0 	.word	0x000186a0

08001668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_USART1_UART_Init+0x50>)
 8001670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001674:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 80016a0:	f002 fb06 	bl	8003cb0 <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016aa:	f000 f859 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000049c 	.word	0x2000049c
 80016b8:	40011000 	.word	0x40011000

080016bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f002 fadc 	bl	8003cb0 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 f82f 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200004e0 	.word	0x200004e0
 800170c:	40004400 	.word	0x40004400

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_GPIO_Init+0x4c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <MX_GPIO_Init+0x4c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MX_GPIO_Init+0x4c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_GPIO_Init+0x4c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <MX_GPIO_Init+0x4c>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_GPIO_Init+0x4c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x8>
	...

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_MspInit+0x54>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <HAL_MspInit+0x54>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_MspInit+0x54>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_MspInit+0x54>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_MspInit+0x54>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_MspInit+0x54>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	210f      	movs	r1, #15
 80017ae:	f06f 0001 	mvn.w	r0, #1
 80017b2:	f000 fb42 	bl	8001e3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_I2C_MspInit+0x84>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12b      	bne.n	800183e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_I2C_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_I2C_MspInit+0x88>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_I2C_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001802:	23c0      	movs	r3, #192	; 0xc0
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001806:	2312      	movs	r3, #18
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180a:	2301      	movs	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001812:	2304      	movs	r3, #4
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <HAL_I2C_MspInit+0x8c>)
 800181e:	f000 fb35 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_I2C_MspInit+0x88>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_I2C_MspInit+0x88>)
 800182c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_I2C_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40005400 	.word	0x40005400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020400 	.word	0x40020400

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_UART_MspInit+0xe8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d12d      	bne.n	80018d2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_UART_MspInit+0xec>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a30      	ldr	r2, [pc, #192]	; (8001940 <HAL_UART_MspInit+0xec>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_UART_MspInit+0xec>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_UART_MspInit+0xec>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a29      	ldr	r2, [pc, #164]	; (8001940 <HAL_UART_MspInit+0xec>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_UART_MspInit+0xec>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c0:	2307      	movs	r3, #7
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	481e      	ldr	r0, [pc, #120]	; (8001944 <HAL_UART_MspInit+0xf0>)
 80018cc:	f000 fade 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d0:	e030      	b.n	8001934 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_UART_MspInit+0xf4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d12b      	bne.n	8001934 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_UART_MspInit+0xec>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <HAL_UART_MspInit+0xec>)
 80018e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_UART_MspInit+0xec>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_UART_MspInit+0xec>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_UART_MspInit+0xec>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_UART_MspInit+0xec>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001914:	230c      	movs	r3, #12
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001924:	2307      	movs	r3, #7
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_UART_MspInit+0xf0>)
 8001930:	f000 faac 	bl	8001e8c <HAL_GPIO_Init>
}
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40011000 	.word	0x40011000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000
 8001948:	40004400 	.word	0x40004400

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 f95c 	bl	8001c38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001980:	f003 fabe 	bl	8004f00 <xTaskGetSchedulerState>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800198a:	f003 fc95 	bl	80052b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}

08001992 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  return 1;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_kill>:

int _kill(int pid, int sig)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ac:	f004 fb5c 	bl	8006068 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2216      	movs	r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_exit>:

void _exit (int status)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffe7 	bl	80019a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d4:	e7fe      	b.n	80019d4 <_exit+0x12>

080019d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e00a      	b.n	80019fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e8:	f3af 8000 	nop.w
 80019ec:	4601      	mov	r1, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	60ba      	str	r2, [r7, #8]
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf0      	blt.n	80019e8 <_read+0x12>
  }

  return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e009      	b.n	8001a36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbf1      	blt.n	8001a22 <_write+0x12>
  }
  return len;
 8001a3e:	687b      	ldr	r3, [r7, #4]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_close>:

int _close(int file)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a70:	605a      	str	r2, [r3, #4]
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_isatty>:

int _isatty(int file)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f004 fac2 	bl	8006068 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20020000 	.word	0x20020000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	2000052c 	.word	0x2000052c
 8001b18:	200007d0 	.word	0x200007d0

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b46:	490e      	ldr	r1, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b5c:	4c0b      	ldr	r4, [pc, #44]	; (8001b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6a:	f7ff ffd7 	bl	8001b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f004 fa81 	bl	8006074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff faa7 	bl	80010c4 <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b84:	0800866c 	.word	0x0800866c
  ldr r2, =_sbss
 8001b88:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b8c:	200007cc 	.word	0x200007cc

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_Init+0x40>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_Init+0x40>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x40>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f931 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fdd0 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f93b 	bl	8001e72 <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c14:	f000 f911 	bl	8001e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000530 	.word	0x20000530

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000530 	.word	0x20000530

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e04:	f7ff ff8e 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff47 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff5c 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff8e 	bl	8001d78 <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5d 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffb0 	bl	8001de0 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e165      	b.n	8002174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8154 	bne.w	800216e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d005      	beq.n	8001ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d130      	bne.n	8001f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 0201 	and.w	r2, r3, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d017      	beq.n	8001f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d123      	bne.n	8001fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	69b9      	ldr	r1, [r7, #24]
 8001fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80ae 	beq.w	800216e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b5d      	ldr	r3, [pc, #372]	; (800218c <HAL_GPIO_Init+0x300>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a5c      	ldr	r2, [pc, #368]	; (800218c <HAL_GPIO_Init+0x300>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b5a      	ldr	r3, [pc, #360]	; (800218c <HAL_GPIO_Init+0x300>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202e:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_GPIO_Init+0x304>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4f      	ldr	r2, [pc, #316]	; (8002194 <HAL_GPIO_Init+0x308>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x21a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <HAL_GPIO_Init+0x30c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x216>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4d      	ldr	r2, [pc, #308]	; (800219c <HAL_GPIO_Init+0x310>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x212>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <HAL_GPIO_Init+0x314>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x20e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_GPIO_Init+0x318>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x20a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_GPIO_Init+0x31c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x206>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x320>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x202>
 800208a:	2306      	movs	r3, #6
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800208e:	2307      	movs	r3, #7
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	; (8002190 <HAL_GPIO_Init+0x304>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <HAL_GPIO_Init+0x324>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a31      	ldr	r2, [pc, #196]	; (80021b0 <HAL_GPIO_Init+0x324>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <HAL_GPIO_Init+0x324>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_GPIO_Init+0x324>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_GPIO_Init+0x324>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_GPIO_Init+0x324>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_GPIO_Init+0x324>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_GPIO_Init+0x324>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f ae96 	bls.w	8001ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e12b      	b.n	800241e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff faf2 	bl	80017c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002218:	f001 f854 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a81      	ldr	r2, [pc, #516]	; (8002428 <HAL_I2C_Init+0x274>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d807      	bhi.n	8002238 <HAL_I2C_Init+0x84>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a80      	ldr	r2, [pc, #512]	; (800242c <HAL_I2C_Init+0x278>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e006      	b.n	8002246 <HAL_I2C_Init+0x92>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a7d      	ldr	r2, [pc, #500]	; (8002430 <HAL_I2C_Init+0x27c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0e7      	b.n	800241e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a78      	ldr	r2, [pc, #480]	; (8002434 <HAL_I2C_Init+0x280>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_I2C_Init+0x274>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d802      	bhi.n	8002288 <HAL_I2C_Init+0xd4>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	e009      	b.n	800229c <HAL_I2C_Init+0xe8>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	4a69      	ldr	r2, [pc, #420]	; (8002438 <HAL_I2C_Init+0x284>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	3301      	adds	r3, #1
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	495c      	ldr	r1, [pc, #368]	; (8002428 <HAL_I2C_Init+0x274>)
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d819      	bhi.n	80022f0 <HAL_I2C_Init+0x13c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e59      	subs	r1, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ca:	1c59      	adds	r1, r3, #1
 80022cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d0:	400b      	ands	r3, r1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_I2C_Init+0x138>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e59      	subs	r1, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	e051      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 80022ec:	2304      	movs	r3, #4
 80022ee:	e04f      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_I2C_Init+0x168>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e012      	b.n	8002342 <HAL_I2C_Init+0x18e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x196>
 8002346:	2301      	movs	r3, #1
 8002348:	e022      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10e      	bne.n	8002370 <HAL_I2C_Init+0x1bc>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e58      	subs	r0, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	440b      	add	r3, r1
 8002360:	fbb0 f3f3 	udiv	r3, r0, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	e00f      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	6809      	ldr	r1, [r1, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6911      	ldr	r1, [r2, #16]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68d2      	ldr	r2, [r2, #12]
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	000186a0 	.word	0x000186a0
 800242c:	001e847f 	.word	0x001e847f
 8002430:	003d08ff 	.word	0x003d08ff
 8002434:	431bde83 	.word	0x431bde83
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	461a      	mov	r2, r3
 8002448:	460b      	mov	r3, r1
 800244a:	817b      	strh	r3, [r7, #10]
 800244c:	4613      	mov	r3, r2
 800244e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff fc06 	bl	8001c60 <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b20      	cmp	r3, #32
 8002460:	f040 80e0 	bne.w	8002624 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2319      	movs	r3, #25
 800246a:	2201      	movs	r2, #1
 800246c:	4970      	ldr	r1, [pc, #448]	; (8002630 <HAL_I2C_Master_Transmit+0x1f4>)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fc58 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	e0d3      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_I2C_Master_Transmit+0x50>
 8002488:	2302      	movs	r3, #2
 800248a:	e0cc      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d007      	beq.n	80024b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	; 0x21
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2210      	movs	r2, #16
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	893a      	ldrh	r2, [r7, #8]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a50      	ldr	r2, [pc, #320]	; (8002634 <HAL_I2C_Master_Transmit+0x1f8>)
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fac2 	bl	8002a84 <I2C_MasterRequestWrite>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e08d      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002520:	e066      	b.n	80025f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6a39      	ldr	r1, [r7, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fcd2 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b04      	cmp	r3, #4
 8002538:	d107      	bne.n	800254a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d11b      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0x188>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	d017      	beq.n	80025c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6a39      	ldr	r1, [r7, #32]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fcc2 	bl	8002f52 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e01a      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d194      	bne.n	8002522 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	00100002 	.word	0x00100002
 8002634:	ffff0000 	.word	0xffff0000

08002638 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	817b      	strh	r3, [r7, #10]
 8002648:	4613      	mov	r3, r2
 800264a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff fb08 	bl	8001c60 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	f040 820b 	bne.w	8002a76 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2319      	movs	r3, #25
 8002666:	2201      	movs	r2, #1
 8002668:	497c      	ldr	r1, [pc, #496]	; (800285c <HAL_I2C_Master_Receive+0x224>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fb5a 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
 8002678:	e1fe      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_I2C_Master_Receive+0x50>
 8002684:	2302      	movs	r3, #2
 8002686:	e1f7      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d007      	beq.n	80026ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2222      	movs	r2, #34	; 0x22
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2210      	movs	r2, #16
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	893a      	ldrh	r2, [r7, #8]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <HAL_I2C_Master_Receive+0x228>)
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa46 	bl	8002b88 <I2C_MasterRequestRead>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1b8      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d113      	bne.n	8002736 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e18c      	b.n	8002a50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	2b01      	cmp	r3, #1
 800273c:	d11b      	bne.n	8002776 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e16c      	b.n	8002a50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b02      	cmp	r3, #2
 800277c:	d11b      	bne.n	80027b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	e14c      	b.n	8002a50 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027dc:	e138      	b.n	8002a50 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	f200 80f1 	bhi.w	80029ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d123      	bne.n	8002838 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fbed 	bl	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e139      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002836:	e10b      	b.n	8002a50 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b02      	cmp	r3, #2
 800283e:	d14e      	bne.n	80028de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	2200      	movs	r2, #0
 8002848:	4906      	ldr	r1, [pc, #24]	; (8002864 <HAL_I2C_Master_Receive+0x22c>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa6a 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e10e      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000
 8002864:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028dc:	e0b8      	b.n	8002a50 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	2200      	movs	r2, #0
 80028e6:	4966      	ldr	r1, [pc, #408]	; (8002a80 <HAL_I2C_Master_Receive+0x448>)
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fa1b 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0bf      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	2200      	movs	r2, #0
 8002942:	494f      	ldr	r1, [pc, #316]	; (8002a80 <HAL_I2C_Master_Receive+0x448>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f9ed 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e091      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c8:	e042      	b.n	8002a50 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fb00 	bl	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04c      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d118      	bne.n	8002a50 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f aec2 	bne.w	80027de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	00010004 	.word	0x00010004

08002a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	460b      	mov	r3, r1
 8002a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d006      	beq.n	8002aae <I2C_MasterRequestWrite+0x2a>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d003      	beq.n	8002aae <I2C_MasterRequestWrite+0x2a>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aac:	d108      	bne.n	8002ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e00b      	b.n	8002ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	2b12      	cmp	r3, #18
 8002ac6:	d107      	bne.n	8002ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f91d 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afe:	d103      	bne.n	8002b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e035      	b.n	8002b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b14:	d108      	bne.n	8002b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	e01b      	b.n	8002b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b28:	897b      	ldrh	r3, [r7, #10]
 8002b2a:	11db      	asrs	r3, r3, #7
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0306 	and.w	r3, r3, #6
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f063 030f 	orn	r3, r3, #15
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	490e      	ldr	r1, [pc, #56]	; (8002b80 <I2C_MasterRequestWrite+0xfc>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f943 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e010      	b.n	8002b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <I2C_MasterRequestWrite+0x100>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f933 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	00010008 	.word	0x00010008
 8002b84:	00010002 	.word	0x00010002

08002b88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	460b      	mov	r3, r1
 8002b96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d006      	beq.n	8002bc2 <I2C_MasterRequestRead+0x3a>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d003      	beq.n	8002bc2 <I2C_MasterRequestRead+0x3a>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e00b      	b.n	8002bec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	2b11      	cmp	r3, #17
 8002bda:	d107      	bne.n	8002bec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f893 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00d      	beq.n	8002c20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c12:	d103      	bne.n	8002c1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e079      	b.n	8002d14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c28:	d108      	bne.n	8002c3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	611a      	str	r2, [r3, #16]
 8002c3a:	e05f      	b.n	8002cfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	11db      	asrs	r3, r3, #7
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0306 	and.w	r3, r3, #6
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f063 030f 	orn	r3, r3, #15
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4930      	ldr	r1, [pc, #192]	; (8002d1c <I2C_MasterRequestRead+0x194>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8b9 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e054      	b.n	8002d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4929      	ldr	r1, [pc, #164]	; (8002d20 <I2C_MasterRequestRead+0x198>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8a9 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e044      	b.n	8002d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f831 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00d      	beq.n	8002ce4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd6:	d103      	bne.n	8002ce0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e017      	b.n	8002d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ce4:	897b      	ldrh	r3, [r7, #10]
 8002ce6:	11db      	asrs	r3, r3, #7
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 0306 	and.w	r3, r3, #6
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f063 030e 	orn	r3, r3, #14
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4907      	ldr	r1, [pc, #28]	; (8002d20 <I2C_MasterRequestRead+0x198>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f865 	bl	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	00010008 	.word	0x00010008
 8002d20:	00010002 	.word	0x00010002

08002d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d34:	e025      	b.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d3c:	d021      	beq.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fe ff8f 	bl	8001c60 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e023      	b.n	8002dca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10d      	bne.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	e00c      	b.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d0b6      	beq.n	8002d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002de0:	e051      	b.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df0:	d123      	bne.n	8002e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e046      	b.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e40:	d021      	beq.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7fe ff0d 	bl	8001c60 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d116      	bne.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e020      	b.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10c      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e00b      	b.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d18d      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002edc:	e02d      	b.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8ce 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e02d      	b.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef4:	d021      	beq.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe feb3 	bl	8001c60 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e007      	b.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d1ca      	bne.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f5e:	e02d      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f88d 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e02d      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f76:	d021      	beq.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f78:	f7fe fe72 	bl	8001c60 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d302      	bcc.n	8002f8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e007      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d1ca      	bne.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe0:	e042      	b.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d119      	bne.n	8003024 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0210 	mvn.w	r2, #16
 8002ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e029      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fe fe1c 	bl	8001c60 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d116      	bne.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e007      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d1b5      	bne.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003096:	d11b      	bne.n	80030d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0cc      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d90c      	bls.n	800311c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b65      	ldr	r3, [pc, #404]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b63      	ldr	r3, [pc, #396]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0b8      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d044      	beq.n	8003200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d119      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d003      	beq.n	800319e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319a:	2b03      	cmp	r3, #3
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e067      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4934      	ldr	r1, [pc, #208]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fe fd46 	bl	8001c60 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe fd42 	bl	8001c60 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e04f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d20c      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e032      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4916      	ldr	r1, [pc, #88]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	490e      	ldr	r1, [pc, #56]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003266:	f000 f855 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490a      	ldr	r1, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fca6 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00
 800329c:	40023800 	.word	0x40023800
 80032a0:	080082d0 	.word	0x080082d0
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff0 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	080082e0 	.word	0x080082e0

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f0:	f7ff ffdc 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0b5b      	lsrs	r3, r3, #13
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	080082e0 	.word	0x080082e0

08003314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b0ae      	sub	sp, #184	; 0xb8
 800331a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800333a:	4bcb      	ldr	r3, [pc, #812]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b0c      	cmp	r3, #12
 8003344:	f200 8206 	bhi.w	8003754 <HAL_RCC_GetSysClockFreq+0x440>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <HAL_RCC_GetSysClockFreq+0x3c>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003385 	.word	0x08003385
 8003354:	08003755 	.word	0x08003755
 8003358:	08003755 	.word	0x08003755
 800335c:	08003755 	.word	0x08003755
 8003360:	0800338d 	.word	0x0800338d
 8003364:	08003755 	.word	0x08003755
 8003368:	08003755 	.word	0x08003755
 800336c:	08003755 	.word	0x08003755
 8003370:	08003395 	.word	0x08003395
 8003374:	08003755 	.word	0x08003755
 8003378:	08003755 	.word	0x08003755
 800337c:	08003755 	.word	0x08003755
 8003380:	08003585 	.word	0x08003585
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4bb9      	ldr	r3, [pc, #740]	; (800366c <HAL_RCC_GetSysClockFreq+0x358>)
 8003386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800338a:	e1e7      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338c:	4bb8      	ldr	r3, [pc, #736]	; (8003670 <HAL_RCC_GetSysClockFreq+0x35c>)
 800338e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003392:	e1e3      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003394:	4bb4      	ldr	r3, [pc, #720]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a0:	4bb1      	ldr	r3, [pc, #708]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d071      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	4bae      	ldr	r3, [pc, #696]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80033bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	f04f 0000 	mov.w	r0, #0
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	0159      	lsls	r1, r3, #5
 80033e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e4:	0150      	lsls	r0, r2, #5
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4621      	mov	r1, r4
 80033ec:	1a51      	subs	r1, r2, r1
 80033ee:	6439      	str	r1, [r7, #64]	; 0x40
 80033f0:	4629      	mov	r1, r5
 80033f2:	eb63 0301 	sbc.w	r3, r3, r1
 80033f6:	647b      	str	r3, [r7, #68]	; 0x44
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003404:	4649      	mov	r1, r9
 8003406:	018b      	lsls	r3, r1, #6
 8003408:	4641      	mov	r1, r8
 800340a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340e:	4641      	mov	r1, r8
 8003410:	018a      	lsls	r2, r1, #6
 8003412:	4641      	mov	r1, r8
 8003414:	1a51      	subs	r1, r2, r1
 8003416:	63b9      	str	r1, [r7, #56]	; 0x38
 8003418:	4649      	mov	r1, r9
 800341a:	eb63 0301 	sbc.w	r3, r3, r1
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800342c:	4649      	mov	r1, r9
 800342e:	00cb      	lsls	r3, r1, #3
 8003430:	4641      	mov	r1, r8
 8003432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003436:	4641      	mov	r1, r8
 8003438:	00ca      	lsls	r2, r1, #3
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	4603      	mov	r3, r0
 8003440:	4622      	mov	r2, r4
 8003442:	189b      	adds	r3, r3, r2
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
 8003446:	462b      	mov	r3, r5
 8003448:	460a      	mov	r2, r1
 800344a:	eb42 0303 	adc.w	r3, r2, r3
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800345c:	4629      	mov	r1, r5
 800345e:	024b      	lsls	r3, r1, #9
 8003460:	4621      	mov	r1, r4
 8003462:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003466:	4621      	mov	r1, r4
 8003468:	024a      	lsls	r2, r1, #9
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800347c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003480:	f7fd fc02 	bl	8000c88 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800348e:	e067      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003490:	4b75      	ldr	r3, [pc, #468]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	2200      	movs	r2, #0
 8003498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800349c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034aa:	2300      	movs	r3, #0
 80034ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80034b2:	4622      	mov	r2, r4
 80034b4:	462b      	mov	r3, r5
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c4:	0150      	lsls	r0, r2, #5
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4621      	mov	r1, r4
 80034cc:	1a51      	subs	r1, r2, r1
 80034ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80034d0:	4629      	mov	r1, r5
 80034d2:	eb63 0301 	sbc.w	r3, r3, r1
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80034e4:	4649      	mov	r1, r9
 80034e6:	018b      	lsls	r3, r1, #6
 80034e8:	4641      	mov	r1, r8
 80034ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ee:	4641      	mov	r1, r8
 80034f0:	018a      	lsls	r2, r1, #6
 80034f2:	4641      	mov	r1, r8
 80034f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80034f8:	4649      	mov	r1, r9
 80034fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800350a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800350e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003512:	4692      	mov	sl, r2
 8003514:	469b      	mov	fp, r3
 8003516:	4623      	mov	r3, r4
 8003518:	eb1a 0303 	adds.w	r3, sl, r3
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	462b      	mov	r3, r5
 8003520:	eb4b 0303 	adc.w	r3, fp, r3
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003532:	4629      	mov	r1, r5
 8003534:	028b      	lsls	r3, r1, #10
 8003536:	4621      	mov	r1, r4
 8003538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800353c:	4621      	mov	r1, r4
 800353e:	028a      	lsls	r2, r1, #10
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003548:	2200      	movs	r2, #0
 800354a:	673b      	str	r3, [r7, #112]	; 0x70
 800354c:	677a      	str	r2, [r7, #116]	; 0x74
 800354e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003552:	f7fd fb99 	bl	8000c88 <__aeabi_uldivmod>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4613      	mov	r3, r2
 800355c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003560:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003582:	e0eb      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800358c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003590:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d06b      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_GetSysClockFreq+0x354>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ae:	663b      	str	r3, [r7, #96]	; 0x60
 80035b0:	2300      	movs	r3, #0
 80035b2:	667b      	str	r3, [r7, #100]	; 0x64
 80035b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80035b8:	4622      	mov	r2, r4
 80035ba:	462b      	mov	r3, r5
 80035bc:	f04f 0000 	mov.w	r0, #0
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	0159      	lsls	r1, r3, #5
 80035c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ca:	0150      	lsls	r0, r2, #5
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4621      	mov	r1, r4
 80035d2:	1a51      	subs	r1, r2, r1
 80035d4:	61b9      	str	r1, [r7, #24]
 80035d6:	4629      	mov	r1, r5
 80035d8:	eb63 0301 	sbc.w	r3, r3, r1
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035ea:	4659      	mov	r1, fp
 80035ec:	018b      	lsls	r3, r1, #6
 80035ee:	4651      	mov	r1, sl
 80035f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035f4:	4651      	mov	r1, sl
 80035f6:	018a      	lsls	r2, r1, #6
 80035f8:	4651      	mov	r1, sl
 80035fa:	ebb2 0801 	subs.w	r8, r2, r1
 80035fe:	4659      	mov	r1, fp
 8003600:	eb63 0901 	sbc.w	r9, r3, r1
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003610:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003614:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003618:	4690      	mov	r8, r2
 800361a:	4699      	mov	r9, r3
 800361c:	4623      	mov	r3, r4
 800361e:	eb18 0303 	adds.w	r3, r8, r3
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	462b      	mov	r3, r5
 8003626:	eb49 0303 	adc.w	r3, r9, r3
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003638:	4629      	mov	r1, r5
 800363a:	024b      	lsls	r3, r1, #9
 800363c:	4621      	mov	r1, r4
 800363e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003642:	4621      	mov	r1, r4
 8003644:	024a      	lsls	r2, r1, #9
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800364e:	2200      	movs	r2, #0
 8003650:	65bb      	str	r3, [r7, #88]	; 0x58
 8003652:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003654:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003658:	f7fd fb16 	bl	8000c88 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003666:	e065      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x420>
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400
 8003670:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003674:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_RCC_GetSysClockFreq+0x458>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	2200      	movs	r2, #0
 800367c:	4618      	mov	r0, r3
 800367e:	4611      	mov	r1, r2
 8003680:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003684:	653b      	str	r3, [r7, #80]	; 0x50
 8003686:	2300      	movs	r3, #0
 8003688:	657b      	str	r3, [r7, #84]	; 0x54
 800368a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	f04f 0000 	mov.w	r0, #0
 8003696:	f04f 0100 	mov.w	r1, #0
 800369a:	0159      	lsls	r1, r3, #5
 800369c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a0:	0150      	lsls	r0, r2, #5
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4641      	mov	r1, r8
 80036a8:	1a51      	subs	r1, r2, r1
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	4649      	mov	r1, r9
 80036ae:	eb63 0301 	sbc.w	r3, r3, r1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036c0:	4659      	mov	r1, fp
 80036c2:	018b      	lsls	r3, r1, #6
 80036c4:	4651      	mov	r1, sl
 80036c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ca:	4651      	mov	r1, sl
 80036cc:	018a      	lsls	r2, r1, #6
 80036ce:	4651      	mov	r1, sl
 80036d0:	1a54      	subs	r4, r2, r1
 80036d2:	4659      	mov	r1, fp
 80036d4:	eb63 0501 	sbc.w	r5, r3, r1
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	00eb      	lsls	r3, r5, #3
 80036e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e6:	00e2      	lsls	r2, r4, #3
 80036e8:	4614      	mov	r4, r2
 80036ea:	461d      	mov	r5, r3
 80036ec:	4643      	mov	r3, r8
 80036ee:	18e3      	adds	r3, r4, r3
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	464b      	mov	r3, r9
 80036f4:	eb45 0303 	adc.w	r3, r5, r3
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003706:	4629      	mov	r1, r5
 8003708:	028b      	lsls	r3, r1, #10
 800370a:	4621      	mov	r1, r4
 800370c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003710:	4621      	mov	r1, r4
 8003712:	028a      	lsls	r2, r1, #10
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800371c:	2200      	movs	r2, #0
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003720:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003722:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003726:	f7fd faaf 	bl	8000c88 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4613      	mov	r3, r2
 8003730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <HAL_RCC_GetSysClockFreq+0x458>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0f1b      	lsrs	r3, r3, #28
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003752:	e003      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800375a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003760:	4618      	mov	r0, r3
 8003762:	37b8      	adds	r7, #184	; 0xb8
 8003764:	46bd      	mov	sp, r7
 8003766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	00f42400 	.word	0x00f42400

08003774 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e28d      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8083 	beq.w	800389a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003794:	4b94      	ldr	r3, [pc, #592]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b04      	cmp	r3, #4
 800379e:	d019      	beq.n	80037d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037a0:	4b91      	ldr	r3, [pc, #580]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037ac:	4b8e      	ldr	r3, [pc, #568]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b8:	d00c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ba:	4b8b      	ldr	r3, [pc, #556]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d112      	bne.n	80037ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d2:	d10b      	bne.n	80037ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	4b84      	ldr	r3, [pc, #528]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05b      	beq.n	8003898 <HAL_RCC_OscConfig+0x124>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d157      	bne.n	8003898 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e25a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d106      	bne.n	8003804 <HAL_RCC_OscConfig+0x90>
 80037f6:	4b7c      	ldr	r3, [pc, #496]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7b      	ldr	r2, [pc, #492]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e01d      	b.n	8003840 <HAL_RCC_OscConfig+0xcc>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0xb4>
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b73      	ldr	r3, [pc, #460]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a72      	ldr	r2, [pc, #456]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0xcc>
 8003828:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe fa0a 	bl	8001c60 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fe fa06 	bl	8001c60 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e21f      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0xdc>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe f9f6 	bl	8001c60 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe f9f2 	bl	8001c60 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e20b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x104>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d06f      	beq.n	8003986 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038a6:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038b2:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d105      	bne.n	80038ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x186>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1d3      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4937      	ldr	r1, [pc, #220]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x278>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe f99f 	bl	8001c60 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003926:	f7fe f99b 	bl	8001c60 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1b4      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4925      	ldr	r1, [pc, #148]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCC_OscConfig+0x278>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe f97e 	bl	8001c60 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fe f97a 	bl	8001c60 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e193      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d036      	beq.n	8003a00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x27c>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fe f95e 	bl	8001c60 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fe f95a 	bl	8001c60 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e173      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x234>
 80039c6:	e01b      	b.n	8003a00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fe f947 	bl	8001c60 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	e00e      	b.n	80039f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe f943 	bl	8001c60 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d907      	bls.n	80039f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e15c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	42470000 	.word	0x42470000
 80039f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b8a      	ldr	r3, [pc, #552]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ea      	bne.n	80039d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8097 	beq.w	8003b3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b83      	ldr	r3, [pc, #524]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b7f      	ldr	r3, [pc, #508]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a7e      	ldr	r2, [pc, #504]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b7c      	ldr	r3, [pc, #496]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <HAL_RCC_OscConfig+0x4b0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d118      	bne.n	8003a7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x4b0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x4b0>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fe f903 	bl	8001c60 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fe f8ff 	bl	8001c60 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e118      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x4b0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x31e>
 8003a84:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0x358>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x340>
 8003a9a:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a60      	ldr	r2, [pc, #384]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	4b5e      	ldr	r3, [pc, #376]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a5d      	ldr	r2, [pc, #372]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0x358>
 8003ab4:	4b5a      	ldr	r3, [pc, #360]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a59      	ldr	r2, [pc, #356]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	4b57      	ldr	r3, [pc, #348]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a56      	ldr	r2, [pc, #344]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe f8c4 	bl	8001c60 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fe f8c0 	bl	8001c60 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0d7      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ee      	beq.n	8003adc <HAL_RCC_OscConfig+0x368>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe f8ae 	bl	8001c60 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe f8aa 	bl	8001c60 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0c1      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ee      	bne.n	8003b08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80ad 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d060      	beq.n	8003c14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d145      	bne.n	8003be6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <HAL_RCC_OscConfig+0x4b4>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe f87e 	bl	8001c60 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fe f87a 	bl	8001c60 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e093      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	491b      	ldr	r1, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x4b4>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f84f 	bl	8001c60 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fe f84b 	bl	8001c60 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e064      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd8:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x452>
 8003be4:	e05c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_RCC_OscConfig+0x4b4>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe f838 	bl	8001c60 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fe f834 	bl	8001c60 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e04d      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x480>
 8003c12:	e045      	b.n	8003ca0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e040      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000
 8003c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <HAL_RCC_OscConfig+0x538>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d030      	beq.n	8003c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d129      	bne.n	8003c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d122      	bne.n	8003c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d119      	bne.n	8003c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d10f      	bne.n	8003c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800

08003cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e03f      	b.n	8003d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fdbc 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2224      	movs	r2, #36	; 0x24
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f9cb 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08a      	sub	sp, #40	; 0x28
 8003d4e:	af02      	add	r7, sp, #8
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d17c      	bne.n	8003e64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_UART_Transmit+0x2c>
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e075      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Transmit+0x3e>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e06e      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9e:	f7fd ff5f 	bl	8001c60 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db8:	d108      	bne.n	8003dcc <HAL_UART_Transmit+0x82>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e003      	b.n	8003dd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ddc:	e02a      	b.n	8003e34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f8e2 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e036      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3302      	adds	r3, #2
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e007      	b.n	8003e26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	3301      	adds	r3, #1
 8003e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1cf      	bne.n	8003dde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2140      	movs	r1, #64	; 0x40
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f8b2 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e006      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08a      	sub	sp, #40	; 0x28
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f040 808c 	bne.w	8003fa8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Receive+0x2e>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e084      	b.n	8003faa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Receive+0x40>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e07d      	b.n	8003faa <HAL_UART_Receive+0x13c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2222      	movs	r2, #34	; 0x22
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fec9 	bl	8001c60 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d108      	bne.n	8003ef8 <HAL_UART_Receive+0x8a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e003      	b.n	8003f00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f08:	e043      	b.n	8003f92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2120      	movs	r1, #32
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f84c 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e042      	b.n	8003faa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	3302      	adds	r3, #2
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e01f      	b.n	8003f84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d007      	beq.n	8003f5e <HAL_UART_Receive+0xf0>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_UART_Receive+0xfe>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e008      	b.n	8003f7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3301      	adds	r3, #1
 8003f82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1b6      	bne.n	8003f0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b090      	sub	sp, #64	; 0x40
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc2:	e050      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fca:	d04c      	beq.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	f7fd fe45 	bl	8001c60 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d241      	bcs.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004002:	637a      	str	r2, [r7, #52]	; 0x34
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004036:	623a      	str	r2, [r7, #32]
 8004038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	61bb      	str	r3, [r7, #24]
   return(result);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e00f      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	429a      	cmp	r2, r3
 8004082:	d09f      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3740      	adds	r7, #64	; 0x40
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b0c0      	sub	sp, #256	; 0x100
 8004096:	af00      	add	r7, sp, #0
 8004098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	ea40 0301 	orr.w	r3, r0, r1
 80040b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040e8:	f021 010c 	bic.w	r1, r1, #12
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040f6:	430b      	orrs	r3, r1
 80040f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	6999      	ldr	r1, [r3, #24]
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	ea40 0301 	orr.w	r3, r0, r1
 8004116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b8f      	ldr	r3, [pc, #572]	; (800435c <UART_SetConfig+0x2cc>)
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <UART_SetConfig+0xa0>
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8d      	ldr	r3, [pc, #564]	; (8004360 <UART_SetConfig+0x2d0>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d104      	bne.n	800413a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7ff f8dc 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8004134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004138:	e003      	b.n	8004142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800413a:	f7ff f8c3 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 800413e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	f040 810c 	bne.w	8004368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800415a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800415e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004162:	4622      	mov	r2, r4
 8004164:	462b      	mov	r3, r5
 8004166:	1891      	adds	r1, r2, r2
 8004168:	65b9      	str	r1, [r7, #88]	; 0x58
 800416a:	415b      	adcs	r3, r3
 800416c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004172:	4621      	mov	r1, r4
 8004174:	eb12 0801 	adds.w	r8, r2, r1
 8004178:	4629      	mov	r1, r5
 800417a:	eb43 0901 	adc.w	r9, r3, r1
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004192:	4690      	mov	r8, r2
 8004194:	4699      	mov	r9, r3
 8004196:	4623      	mov	r3, r4
 8004198:	eb18 0303 	adds.w	r3, r8, r3
 800419c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a0:	462b      	mov	r3, r5
 80041a2:	eb49 0303 	adc.w	r3, r9, r3
 80041a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041be:	460b      	mov	r3, r1
 80041c0:	18db      	adds	r3, r3, r3
 80041c2:	653b      	str	r3, [r7, #80]	; 0x50
 80041c4:	4613      	mov	r3, r2
 80041c6:	eb42 0303 	adc.w	r3, r2, r3
 80041ca:	657b      	str	r3, [r7, #84]	; 0x54
 80041cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041d4:	f7fc fd58 	bl	8000c88 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <UART_SetConfig+0x2d4>)
 80041de:	fba3 2302 	umull	r2, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	011c      	lsls	r4, r3, #4
 80041e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004200:	415b      	adcs	r3, r3
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004208:	4641      	mov	r1, r8
 800420a:	eb12 0a01 	adds.w	sl, r2, r1
 800420e:	4649      	mov	r1, r9
 8004210:	eb43 0b01 	adc.w	fp, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004228:	4692      	mov	sl, r2
 800422a:	469b      	mov	fp, r3
 800422c:	4643      	mov	r3, r8
 800422e:	eb1a 0303 	adds.w	r3, sl, r3
 8004232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004236:	464b      	mov	r3, r9
 8004238:	eb4b 0303 	adc.w	r3, fp, r3
 800423c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800424c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004254:	460b      	mov	r3, r1
 8004256:	18db      	adds	r3, r3, r3
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
 800425a:	4613      	mov	r3, r2
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	647b      	str	r3, [r7, #68]	; 0x44
 8004262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800426a:	f7fc fd0d 	bl	8000c88 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4611      	mov	r1, r2
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <UART_SetConfig+0x2d4>)
 8004276:	fba3 2301 	umull	r2, r3, r3, r1
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2264      	movs	r2, #100	; 0x64
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	1acb      	subs	r3, r1, r3
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <UART_SetConfig+0x2d4>)
 800428c:	fba3 2302 	umull	r2, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004298:	441c      	add	r4, r3
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042b4:	415b      	adcs	r3, r3
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042bc:	4641      	mov	r1, r8
 80042be:	1851      	adds	r1, r2, r1
 80042c0:	6339      	str	r1, [r7, #48]	; 0x30
 80042c2:	4649      	mov	r1, r9
 80042c4:	414b      	adcs	r3, r1
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042d4:	4659      	mov	r1, fp
 80042d6:	00cb      	lsls	r3, r1, #3
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042de:	4651      	mov	r1, sl
 80042e0:	00ca      	lsls	r2, r1, #3
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	4642      	mov	r2, r8
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f0:	464b      	mov	r3, r9
 80042f2:	460a      	mov	r2, r1
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800430c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004310:	460b      	mov	r3, r1
 8004312:	18db      	adds	r3, r3, r3
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
 8004316:	4613      	mov	r3, r2
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004326:	f7fc fcaf 	bl	8000c88 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <UART_SetConfig+0x2d4>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <UART_SetConfig+0x2d4>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4422      	add	r2, r4
 8004356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004358:	e106      	b.n	8004568 <UART_SetConfig+0x4d8>
 800435a:	bf00      	nop
 800435c:	40011000 	.word	0x40011000
 8004360:	40011400 	.word	0x40011400
 8004364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436c:	2200      	movs	r2, #0
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800437a:	4642      	mov	r2, r8
 800437c:	464b      	mov	r3, r9
 800437e:	1891      	adds	r1, r2, r2
 8004380:	6239      	str	r1, [r7, #32]
 8004382:	415b      	adcs	r3, r3
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800438a:	4641      	mov	r1, r8
 800438c:	1854      	adds	r4, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb43 0501 	adc.w	r5, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	00eb      	lsls	r3, r5, #3
 800439e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a2:	00e2      	lsls	r2, r4, #3
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	18e3      	adds	r3, r4, r3
 80043ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043b0:	464b      	mov	r3, r9
 80043b2:	eb45 0303 	adc.w	r3, r5, r3
 80043b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043d6:	4629      	mov	r1, r5
 80043d8:	008b      	lsls	r3, r1, #2
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e0:	4621      	mov	r1, r4
 80043e2:	008a      	lsls	r2, r1, #2
 80043e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043e8:	f7fc fc4e 	bl	8000c88 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4b60      	ldr	r3, [pc, #384]	; (8004574 <UART_SetConfig+0x4e4>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011c      	lsls	r4, r3, #4
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	61b9      	str	r1, [r7, #24]
 8004414:	415b      	adcs	r3, r3
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441c:	4641      	mov	r1, r8
 800441e:	1851      	adds	r1, r2, r1
 8004420:	6139      	str	r1, [r7, #16]
 8004422:	4649      	mov	r1, r9
 8004424:	414b      	adcs	r3, r1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004434:	4659      	mov	r1, fp
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4651      	mov	r1, sl
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4642      	mov	r2, r8
 800444a:	189b      	adds	r3, r3, r2
 800444c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004450:	464b      	mov	r3, r9
 8004452:	460a      	mov	r2, r1
 8004454:	eb42 0303 	adc.w	r3, r2, r3
 8004458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	67bb      	str	r3, [r7, #120]	; 0x78
 8004466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004474:	4649      	mov	r1, r9
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	4641      	mov	r1, r8
 800447a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447e:	4641      	mov	r1, r8
 8004480:	008a      	lsls	r2, r1, #2
 8004482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004486:	f7fc fbff 	bl	8000c88 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4611      	mov	r1, r2
 8004490:	4b38      	ldr	r3, [pc, #224]	; (8004574 <UART_SetConfig+0x4e4>)
 8004492:	fba3 2301 	umull	r2, r3, r3, r1
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2264      	movs	r2, #100	; 0x64
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	1acb      	subs	r3, r1, r3
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	3332      	adds	r3, #50	; 0x32
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <UART_SetConfig+0x4e4>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b0:	441c      	add	r4, r3
 80044b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b6:	2200      	movs	r2, #0
 80044b8:	673b      	str	r3, [r7, #112]	; 0x70
 80044ba:	677a      	str	r2, [r7, #116]	; 0x74
 80044bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	66bb      	str	r3, [r7, #104]	; 0x68
 8004502:	464b      	mov	r3, r9
 8004504:	460a      	mov	r2, r1
 8004506:	eb42 0303 	adc.w	r3, r2, r3
 800450a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	663b      	str	r3, [r7, #96]	; 0x60
 8004516:	667a      	str	r2, [r7, #100]	; 0x64
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004524:	4649      	mov	r1, r9
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	4641      	mov	r1, r8
 800452a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452e:	4641      	mov	r1, r8
 8004530:	008a      	lsls	r2, r1, #2
 8004532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004536:	f7fc fba7 	bl	8000c88 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <UART_SetConfig+0x4e4>)
 8004540:	fba3 1302 	umull	r1, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	2164      	movs	r1, #100	; 0x64
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <UART_SetConfig+0x4e4>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4422      	add	r2, r4
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004574:	51eb851f 	.word	0x51eb851f

08004578 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800457c:	f000 f9cc 	bl	8004918 <vTaskStartScheduler>
  
  return osOK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	bd80      	pop	{r7, pc}

08004586 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f103 0208 	add.w	r2, r3, #8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800459e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f103 0208 	add.w	r2, r3, #8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f103 0208 	add.w	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
}
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6892      	ldr	r2, [r2, #8]
 800463e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6852      	ldr	r2, [r2, #4]
 8004648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d103      	bne.n	800465c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1e5a      	subs	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	; 0x38
 8004680:	af04      	add	r7, sp, #16
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61fb      	str	r3, [r7, #28]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046c2:	2354      	movs	r3, #84	; 0x54
 80046c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b54      	cmp	r3, #84	; 0x54
 80046ca:	d00a      	beq.n	80046e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	61bb      	str	r3, [r7, #24]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01e      	beq.n	8004728 <xTaskCreateStatic+0xac>
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004702:	2300      	movs	r3, #0
 8004704:	9303      	str	r3, [sp, #12]
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	9302      	str	r3, [sp, #8]
 800470a:	f107 0314 	add.w	r3, r7, #20
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f80b 	bl	8004736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004722:	f000 f88f 	bl	8004844 <prvAddNewTaskToReadyList>
 8004726:	e001      	b.n	800472c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800472c:	697b      	ldr	r3, [r7, #20]
	}
 800472e:	4618      	mov	r0, r3
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b088      	sub	sp, #32
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800474e:	3b01      	subs	r3, #1
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f023 0307 	bic.w	r3, r3, #7
 800475c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <prvInitialiseNewTask+0x48>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	617b      	str	r3, [r7, #20]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01f      	beq.n	80047c4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	e012      	b.n	80047b0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	7819      	ldrb	r1, [r3, #0]
 8004792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	3334      	adds	r3, #52	; 0x34
 800479a:	460a      	mov	r2, r1
 800479c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d006      	beq.n	80047b8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	d9e9      	bls.n	800478a <prvInitialiseNewTask+0x54>
 80047b6:	e000      	b.n	80047ba <prvInitialiseNewTask+0x84>
			{
				break;
 80047b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c2:	e003      	b.n	80047cc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d901      	bls.n	80047d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047d2:	2306      	movs	r3, #6
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	2200      	movs	r2, #0
 80047e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	3304      	adds	r3, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff feea 	bl	80045c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	3318      	adds	r3, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fee5 	bl	80045c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004800:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	f1c3 0207 	rsb	r2, r3, #7
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2200      	movs	r2, #0
 8004816:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	69b8      	ldr	r0, [r7, #24]
 8004826:	f000 fb89 	bl	8004f3c <pxPortInitialiseStack>
 800482a:	4602      	mov	r2, r0
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800484c:	f000 fca2 	bl	8005194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004850:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <prvAddNewTaskToReadyList+0xb8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	4a29      	ldr	r2, [pc, #164]	; (80048fc <prvAddNewTaskToReadyList+0xb8>)
 8004858:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800485a:	4b29      	ldr	r3, [pc, #164]	; (8004900 <prvAddNewTaskToReadyList+0xbc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004862:	4a27      	ldr	r2, [pc, #156]	; (8004900 <prvAddNewTaskToReadyList+0xbc>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <prvAddNewTaskToReadyList+0xb8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d110      	bne.n	8004892 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004870:	f000 fa88 	bl	8004d84 <prvInitialiseTaskLists>
 8004874:	e00d      	b.n	8004892 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004876:	4b23      	ldr	r3, [pc, #140]	; (8004904 <prvAddNewTaskToReadyList+0xc0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <prvAddNewTaskToReadyList+0xbc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	429a      	cmp	r2, r3
 800488a:	d802      	bhi.n	8004892 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800488c:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <prvAddNewTaskToReadyList+0xbc>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004892:	4b1d      	ldr	r3, [pc, #116]	; (8004908 <prvAddNewTaskToReadyList+0xc4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3301      	adds	r3, #1
 8004898:	4a1b      	ldr	r2, [pc, #108]	; (8004908 <prvAddNewTaskToReadyList+0xc4>)
 800489a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2201      	movs	r2, #1
 80048a2:	409a      	lsls	r2, r3
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <prvAddNewTaskToReadyList+0xc8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <prvAddNewTaskToReadyList+0xc8>)
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a15      	ldr	r2, [pc, #84]	; (8004910 <prvAddNewTaskToReadyList+0xcc>)
 80048bc:	441a      	add	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7ff fe8b 	bl	80045e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048ca:	f000 fc93 	bl	80051f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <prvAddNewTaskToReadyList+0xc0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00e      	beq.n	80048f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <prvAddNewTaskToReadyList+0xbc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d207      	bcs.n	80048f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <prvAddNewTaskToReadyList+0xd0>)
 80048e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000634 	.word	0x20000634
 8004900:	20000534 	.word	0x20000534
 8004904:	20000640 	.word	0x20000640
 8004908:	20000650 	.word	0x20000650
 800490c:	2000063c 	.word	0x2000063c
 8004910:	20000538 	.word	0x20000538
 8004914:	e000ed04 	.word	0xe000ed04

08004918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004926:	463a      	mov	r2, r7
 8004928:	1d39      	adds	r1, r7, #4
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	4618      	mov	r0, r3
 8004930:	f7fc fb28 	bl	8000f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	9202      	str	r2, [sp, #8]
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	460a      	mov	r2, r1
 8004946:	491e      	ldr	r1, [pc, #120]	; (80049c0 <vTaskStartScheduler+0xa8>)
 8004948:	481e      	ldr	r0, [pc, #120]	; (80049c4 <vTaskStartScheduler+0xac>)
 800494a:	f7ff fe97 	bl	800467c <xTaskCreateStatic>
 800494e:	4603      	mov	r3, r0
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <vTaskStartScheduler+0xb0>)
 8004952:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004954:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <vTaskStartScheduler+0xb0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e001      	b.n	8004966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d116      	bne.n	800499a <vTaskStartScheduler+0x82>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	613b      	str	r3, [r7, #16]
}
 800497e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004980:	4b12      	ldr	r3, [pc, #72]	; (80049cc <vTaskStartScheduler+0xb4>)
 8004982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004986:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <vTaskStartScheduler+0xb8>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <vTaskStartScheduler+0xbc>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004994:	f000 fb5c 	bl	8005050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004998:	e00e      	b.n	80049b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a0:	d10a      	bne.n	80049b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	60fb      	str	r3, [r7, #12]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vTaskStartScheduler+0x9e>
}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	080082c8 	.word	0x080082c8
 80049c4:	08004d55 	.word	0x08004d55
 80049c8:	20000658 	.word	0x20000658
 80049cc:	20000654 	.word	0x20000654
 80049d0:	20000640 	.word	0x20000640
 80049d4:	20000638 	.word	0x20000638

080049d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <vTaskSuspendAll+0x18>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	4a03      	ldr	r2, [pc, #12]	; (80049f0 <vTaskSuspendAll+0x18>)
 80049e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	2000065c 	.word	0x2000065c

080049f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a02:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <xTaskResumeAll+0x114>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	603b      	str	r3, [r7, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a20:	f000 fbb8 	bl	8005194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a24:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <xTaskResumeAll+0x114>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	4a37      	ldr	r2, [pc, #220]	; (8004b08 <xTaskResumeAll+0x114>)
 8004a2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a2e:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <xTaskResumeAll+0x114>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d161      	bne.n	8004afa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a36:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <xTaskResumeAll+0x118>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d05d      	beq.n	8004afa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a3e:	e02e      	b.n	8004a9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a40:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <xTaskResumeAll+0x11c>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fdeb 	bl	8004628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fde6 	bl	8004628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	2201      	movs	r2, #1
 8004a62:	409a      	lsls	r2, r3
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <xTaskResumeAll+0x120>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <xTaskResumeAll+0x120>)
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4a27      	ldr	r2, [pc, #156]	; (8004b18 <xTaskResumeAll+0x124>)
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f7ff fdab 	bl	80045e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8e:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <xTaskResumeAll+0x128>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a98:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <xTaskResumeAll+0x12c>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <xTaskResumeAll+0x11c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1cc      	bne.n	8004a40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004aac:	f000 fa08 	bl	8004ec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ab0:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <xTaskResumeAll+0x130>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d010      	beq.n	8004ade <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004abc:	f000 f836 	bl	8004b2c <xTaskIncrementTick>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004ac6:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <xTaskResumeAll+0x12c>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f1      	bne.n	8004abc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ad8:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <xTaskResumeAll+0x130>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <xTaskResumeAll+0x12c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aea:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <xTaskResumeAll+0x134>)
 8004aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004afa:	f000 fb7b 	bl	80051f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004afe:	68bb      	ldr	r3, [r7, #8]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	2000065c 	.word	0x2000065c
 8004b0c:	20000634 	.word	0x20000634
 8004b10:	200005f4 	.word	0x200005f4
 8004b14:	2000063c 	.word	0x2000063c
 8004b18:	20000538 	.word	0x20000538
 8004b1c:	20000534 	.word	0x20000534
 8004b20:	20000648 	.word	0x20000648
 8004b24:	20000644 	.word	0x20000644
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b36:	4b4e      	ldr	r3, [pc, #312]	; (8004c70 <xTaskIncrementTick+0x144>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 808e 	bne.w	8004c5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b40:	4b4c      	ldr	r3, [pc, #304]	; (8004c74 <xTaskIncrementTick+0x148>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b48:	4a4a      	ldr	r2, [pc, #296]	; (8004c74 <xTaskIncrementTick+0x148>)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d120      	bne.n	8004b96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b54:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <xTaskIncrementTick+0x14c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	603b      	str	r3, [r7, #0]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <xTaskIncrementTick+0x46>
 8004b74:	4b40      	ldr	r3, [pc, #256]	; (8004c78 <xTaskIncrementTick+0x14c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	4b40      	ldr	r3, [pc, #256]	; (8004c7c <xTaskIncrementTick+0x150>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3e      	ldr	r2, [pc, #248]	; (8004c78 <xTaskIncrementTick+0x14c>)
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4a3e      	ldr	r2, [pc, #248]	; (8004c7c <xTaskIncrementTick+0x150>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	f000 f995 	bl	8004ec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b96:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d348      	bcc.n	8004c32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba0:	4b35      	ldr	r3, [pc, #212]	; (8004c78 <xTaskIncrementTick+0x14c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb0:	601a      	str	r2, [r3, #0]
					break;
 8004bb2:	e03e      	b.n	8004c32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <xTaskIncrementTick+0x14c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d203      	bcs.n	8004bd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bd2:	e02e      	b.n	8004c32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fd25 	bl	8004628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	3318      	adds	r3, #24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fd1c 	bl	8004628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	4b23      	ldr	r3, [pc, #140]	; (8004c88 <xTaskIncrementTick+0x15c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <xTaskIncrementTick+0x15c>)
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <xTaskIncrementTick+0x160>)
 8004c10:	441a      	add	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7ff fce1 	bl	80045e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <xTaskIncrementTick+0x164>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3b9      	bcc.n	8004ba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c30:	e7b6      	b.n	8004ba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <xTaskIncrementTick+0x164>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	4914      	ldr	r1, [pc, #80]	; (8004c8c <xTaskIncrementTick+0x160>)
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d901      	bls.n	8004c4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <xTaskIncrementTick+0x168>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e004      	b.n	8004c66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <xTaskIncrementTick+0x16c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <xTaskIncrementTick+0x16c>)
 8004c64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c66:	697b      	ldr	r3, [r7, #20]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	2000065c 	.word	0x2000065c
 8004c74:	20000638 	.word	0x20000638
 8004c78:	200005ec 	.word	0x200005ec
 8004c7c:	200005f0 	.word	0x200005f0
 8004c80:	2000064c 	.word	0x2000064c
 8004c84:	20000654 	.word	0x20000654
 8004c88:	2000063c 	.word	0x2000063c
 8004c8c:	20000538 	.word	0x20000538
 8004c90:	20000534 	.word	0x20000534
 8004c94:	20000648 	.word	0x20000648
 8004c98:	20000644 	.word	0x20000644

08004c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ca2:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <vTaskSwitchContext+0xa4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <vTaskSwitchContext+0xa8>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cb0:	e03f      	b.n	8004d32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <vTaskSwitchContext+0xa8>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb8:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <vTaskSwitchContext+0xac>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	fab3 f383 	clz	r3, r3
 8004cc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	f1c3 031f 	rsb	r3, r3, #31
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	491f      	ldr	r1, [pc, #124]	; (8004d4c <vTaskSwitchContext+0xb0>)
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	607b      	str	r3, [r7, #4]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <vTaskSwitchContext+0x5a>
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <vTaskSwitchContext+0xb0>)
 8004d04:	4413      	add	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d104      	bne.n	8004d28 <vTaskSwitchContext+0x8c>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <vTaskSwitchContext+0xb4>)
 8004d30:	6013      	str	r3, [r2, #0]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	2000065c 	.word	0x2000065c
 8004d44:	20000648 	.word	0x20000648
 8004d48:	2000063c 	.word	0x2000063c
 8004d4c:	20000538 	.word	0x20000538
 8004d50:	20000534 	.word	0x20000534

08004d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d5c:	f000 f852 	bl	8004e04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <prvIdleTask+0x28>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d9f9      	bls.n	8004d5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <prvIdleTask+0x2c>)
 8004d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d78:	e7f0      	b.n	8004d5c <prvIdleTask+0x8>
 8004d7a:	bf00      	nop
 8004d7c:	20000538 	.word	0x20000538
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	e00c      	b.n	8004daa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <prvInitialiseTaskLists+0x60>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fbf1 	bl	8004586 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3301      	adds	r3, #1
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b06      	cmp	r3, #6
 8004dae:	d9ef      	bls.n	8004d90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004db0:	480d      	ldr	r0, [pc, #52]	; (8004de8 <prvInitialiseTaskLists+0x64>)
 8004db2:	f7ff fbe8 	bl	8004586 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004db6:	480d      	ldr	r0, [pc, #52]	; (8004dec <prvInitialiseTaskLists+0x68>)
 8004db8:	f7ff fbe5 	bl	8004586 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dbc:	480c      	ldr	r0, [pc, #48]	; (8004df0 <prvInitialiseTaskLists+0x6c>)
 8004dbe:	f7ff fbe2 	bl	8004586 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dc2:	480c      	ldr	r0, [pc, #48]	; (8004df4 <prvInitialiseTaskLists+0x70>)
 8004dc4:	f7ff fbdf 	bl	8004586 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dc8:	480b      	ldr	r0, [pc, #44]	; (8004df8 <prvInitialiseTaskLists+0x74>)
 8004dca:	f7ff fbdc 	bl	8004586 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <prvInitialiseTaskLists+0x78>)
 8004dd0:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <prvInitialiseTaskLists+0x64>)
 8004dd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <prvInitialiseTaskLists+0x7c>)
 8004dd6:	4a05      	ldr	r2, [pc, #20]	; (8004dec <prvInitialiseTaskLists+0x68>)
 8004dd8:	601a      	str	r2, [r3, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000538 	.word	0x20000538
 8004de8:	200005c4 	.word	0x200005c4
 8004dec:	200005d8 	.word	0x200005d8
 8004df0:	200005f4 	.word	0x200005f4
 8004df4:	20000608 	.word	0x20000608
 8004df8:	20000620 	.word	0x20000620
 8004dfc:	200005ec 	.word	0x200005ec
 8004e00:	200005f0 	.word	0x200005f0

08004e04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e0a:	e019      	b.n	8004e40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e0c:	f000 f9c2 	bl	8005194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e10:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <prvCheckTasksWaitingTermination+0x50>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fc03 	bl	8004628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <prvCheckTasksWaitingTermination+0x54>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	4a0b      	ldr	r2, [pc, #44]	; (8004e58 <prvCheckTasksWaitingTermination+0x54>)
 8004e2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <prvCheckTasksWaitingTermination+0x58>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <prvCheckTasksWaitingTermination+0x58>)
 8004e34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e36:	f000 f9dd 	bl	80051f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f810 	bl	8004e60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <prvCheckTasksWaitingTermination+0x58>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e1      	bne.n	8004e0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000608 	.word	0x20000608
 8004e58:	20000634 	.word	0x20000634
 8004e5c:	2000061c 	.word	0x2000061c

08004e60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d108      	bne.n	8004e84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fa6e 	bl	8005358 <vPortFree>
				vPortFree( pxTCB );
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fa6b 	bl	8005358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e82:	e018      	b.n	8004eb6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d103      	bne.n	8004e96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa62 	bl	8005358 <vPortFree>
	}
 8004e94:	e00f      	b.n	8004eb6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d00a      	beq.n	8004eb6 <prvDeleteTCB+0x56>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <prvDeleteTCB+0x54>
	}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec6:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <prvResetNextTaskUnblockTime+0x38>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvResetNextTaskUnblockTime+0x3c>)
 8004ed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ed8:	e008      	b.n	8004eec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <prvResetNextTaskUnblockTime+0x38>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a04      	ldr	r2, [pc, #16]	; (8004efc <prvResetNextTaskUnblockTime+0x3c>)
 8004eea:	6013      	str	r3, [r2, #0]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	200005ec 	.word	0x200005ec
 8004efc:	20000654 	.word	0x20000654

08004f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <xTaskGetSchedulerState+0x34>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	e008      	b.n	8004f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f14:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <xTaskGetSchedulerState+0x38>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	e001      	b.n	8004f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f26:	687b      	ldr	r3, [r7, #4]
	}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000640 	.word	0x20000640
 8004f38:	2000065c 	.word	0x2000065c

08004f3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f6c:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <pxPortInitialiseStack+0x64>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b14      	subs	r3, #20
 8004f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f06f 0202 	mvn.w	r2, #2
 8004f8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3b20      	subs	r3, #32
 8004f90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	08004fa5 	.word	0x08004fa5

08004fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <prvTaskExitError+0x54>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb6:	d00a      	beq.n	8004fce <prvTaskExitError+0x2a>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	60fb      	str	r3, [r7, #12]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <prvTaskExitError+0x28>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60bb      	str	r3, [r7, #8]
}
 8004fe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fe2:	bf00      	nop
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0fc      	beq.n	8004fe4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	00000000 	.word	0x00000000

08005000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <pxCurrentTCBConst2>)
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6808      	ldr	r0, [r1, #0]
 8005006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	f380 8809 	msr	PSP, r0
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	4770      	bx	lr
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst2>:
 8005020:	20000534 	.word	0x20000534
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005028:	4808      	ldr	r0, [pc, #32]	; (800504c <prvPortStartFirstTask+0x24>)
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f380 8808 	msr	MSP, r0
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8814 	msr	CONTROL, r0
 800503a:	b662      	cpsie	i
 800503c:	b661      	cpsie	f
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	df00      	svc	0
 8005048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800504a:	bf00      	nop
 800504c:	e000ed08 	.word	0xe000ed08

08005050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005056:	4b46      	ldr	r3, [pc, #280]	; (8005170 <xPortStartScheduler+0x120>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a46      	ldr	r2, [pc, #280]	; (8005174 <xPortStartScheduler+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10a      	bne.n	8005076 <xPortStartScheduler+0x26>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005076:	4b3e      	ldr	r3, [pc, #248]	; (8005170 <xPortStartScheduler+0x120>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <xPortStartScheduler+0x128>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10a      	bne.n	8005096 <xPortStartScheduler+0x46>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005096:	4b39      	ldr	r3, [pc, #228]	; (800517c <xPortStartScheduler+0x12c>)
 8005098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4b31      	ldr	r3, [pc, #196]	; (8005180 <xPortStartScheduler+0x130>)
 80050bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <xPortStartScheduler+0x134>)
 80050c0:	2207      	movs	r2, #7
 80050c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050c4:	e009      	b.n	80050da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <xPortStartScheduler+0x134>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	4a2d      	ldr	r2, [pc, #180]	; (8005184 <xPortStartScheduler+0x134>)
 80050ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d0ef      	beq.n	80050c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <xPortStartScheduler+0x134>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f1c3 0307 	rsb	r3, r3, #7
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d00a      	beq.n	8005108 <xPortStartScheduler+0xb8>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	60bb      	str	r3, [r7, #8]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <xPortStartScheduler+0x134>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <xPortStartScheduler+0x134>)
 8005110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005112:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <xPortStartScheduler+0x134>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800511a:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <xPortStartScheduler+0x134>)
 800511c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005126:	4b18      	ldr	r3, [pc, #96]	; (8005188 <xPortStartScheduler+0x138>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <xPortStartScheduler+0x138>)
 800512c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <xPortStartScheduler+0x138>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a14      	ldr	r2, [pc, #80]	; (8005188 <xPortStartScheduler+0x138>)
 8005138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800513c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800513e:	f000 f8dd 	bl	80052fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <xPortStartScheduler+0x13c>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005148:	f000 f8fc 	bl	8005344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800514c:	4b10      	ldr	r3, [pc, #64]	; (8005190 <xPortStartScheduler+0x140>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0f      	ldr	r2, [pc, #60]	; (8005190 <xPortStartScheduler+0x140>)
 8005152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005158:	f7ff ff66 	bl	8005028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800515c:	f7ff fd9e 	bl	8004c9c <vTaskSwitchContext>
	prvTaskExitError();
 8005160:	f7ff ff20 	bl	8004fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	e000ed00 	.word	0xe000ed00
 8005174:	410fc271 	.word	0x410fc271
 8005178:	410fc270 	.word	0x410fc270
 800517c:	e000e400 	.word	0xe000e400
 8005180:	20000660 	.word	0x20000660
 8005184:	20000664 	.word	0x20000664
 8005188:	e000ed20 	.word	0xe000ed20
 800518c:	2000000c 	.word	0x2000000c
 8005190:	e000ef34 	.word	0xe000ef34

08005194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
}
 80051ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051ae:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <vPortEnterCritical+0x58>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <vPortEnterCritical+0x58>)
 80051b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <vPortEnterCritical+0x58>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d10f      	bne.n	80051e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <vPortEnterCritical+0x5c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	603b      	str	r3, [r7, #0]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <vPortEnterCritical+0x4a>
	}
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	2000000c 	.word	0x2000000c
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <vPortExitCritical+0x50>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <vPortExitCritical+0x24>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	607b      	str	r3, [r7, #4]
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <vPortExitCritical+0x50>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	4a09      	ldr	r2, [pc, #36]	; (8005244 <vPortExitCritical+0x50>)
 8005220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005222:	4b08      	ldr	r3, [pc, #32]	; (8005244 <vPortExitCritical+0x50>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d105      	bne.n	8005236 <vPortExitCritical+0x42>
 800522a:	2300      	movs	r3, #0
 800522c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	2000000c 	.word	0x2000000c
	...

08005250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005250:	f3ef 8009 	mrs	r0, PSP
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <pxCurrentTCBConst>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f01e 0f10 	tst.w	lr, #16
 8005260:	bf08      	it	eq
 8005262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	6010      	str	r0, [r2, #0]
 800526c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005274:	f380 8811 	msr	BASEPRI, r0
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f7ff fd0c 	bl	8004c9c <vTaskSwitchContext>
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f380 8811 	msr	BASEPRI, r0
 800528c:	bc09      	pop	{r0, r3}
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	6808      	ldr	r0, [r1, #0]
 8005292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005296:	f01e 0f10 	tst.w	lr, #16
 800529a:	bf08      	it	eq
 800529c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052a0:	f380 8809 	msr	PSP, r0
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w

080052b0 <pxCurrentTCBConst>:
 80052b0:	20000534 	.word	0x20000534
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052d2:	f7ff fc2b 	bl	8004b2c <xTaskIncrementTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <xPortSysTickHandler+0x40>)
 80052de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f383 8811 	msr	BASEPRI, r3
}
 80052ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <vPortSetupTimerInterrupt+0x38>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <vPortSetupTimerInterrupt+0x3c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <vPortSetupTimerInterrupt+0x40>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <vPortSetupTimerInterrupt+0x44>)
 800531a:	3b01      	subs	r3, #1
 800531c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800531e:	4b04      	ldr	r3, [pc, #16]	; (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e010 	.word	0xe000e010
 8005334:	e000e018 	.word	0xe000e018
 8005338:	20000000 	.word	0x20000000
 800533c:	10624dd3 	.word	0x10624dd3
 8005340:	e000e014 	.word	0xe000e014

08005344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005354 <vPortEnableVFP+0x10>
 8005348:	6801      	ldr	r1, [r0, #0]
 800534a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800534e:	6001      	str	r1, [r0, #0]
 8005350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005352:	bf00      	nop
 8005354:	e000ed88 	.word	0xe000ed88

08005358 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04d      	beq.n	8005406 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800536a:	2308      	movs	r3, #8
 800536c:	425b      	negs	r3, r3
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b24      	ldr	r3, [pc, #144]	; (8005410 <vPortFree+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <vPortFree+0x44>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60fb      	str	r3, [r7, #12]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <vPortFree+0x62>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60bb      	str	r3, [r7, #8]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <vPortFree+0xb8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01e      	beq.n	8005406 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11a      	bne.n	8005406 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <vPortFree+0xb8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053e0:	f7ff fafa 	bl	80049d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <vPortFree+0xbc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	4a09      	ldr	r2, [pc, #36]	; (8005414 <vPortFree+0xbc>)
 80053f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053f2:	6938      	ldr	r0, [r7, #16]
 80053f4:	f000 f812 	bl	800541c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <vPortFree+0xc0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	4a06      	ldr	r2, [pc, #24]	; (8005418 <vPortFree+0xc0>)
 8005400:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005402:	f7ff faf7 	bl	80049f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	2000067c 	.word	0x2000067c
 8005414:	20000674 	.word	0x20000674
 8005418:	20000678 	.word	0x20000678

0800541c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <prvInsertBlockIntoFreeList+0xac>)
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e002      	b.n	8005430 <prvInsertBlockIntoFreeList+0x14>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d8f7      	bhi.n	800542a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d108      	bne.n	800545e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	441a      	add	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	441a      	add	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d118      	bne.n	80054a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <prvInsertBlockIntoFreeList+0xb0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d00d      	beq.n	800549a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e008      	b.n	80054ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <prvInsertBlockIntoFreeList+0xb0>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e003      	b.n	80054ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d002      	beq.n	80054ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000668 	.word	0x20000668
 80054cc:	20000670 	.word	0x20000670

080054d0 <__cvt>:
 80054d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	ec55 4b10 	vmov	r4, r5, d0
 80054d8:	2d00      	cmp	r5, #0
 80054da:	460e      	mov	r6, r1
 80054dc:	4619      	mov	r1, r3
 80054de:	462b      	mov	r3, r5
 80054e0:	bfbb      	ittet	lt
 80054e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054e6:	461d      	movlt	r5, r3
 80054e8:	2300      	movge	r3, #0
 80054ea:	232d      	movlt	r3, #45	; 0x2d
 80054ec:	700b      	strb	r3, [r1, #0]
 80054ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054f4:	4691      	mov	r9, r2
 80054f6:	f023 0820 	bic.w	r8, r3, #32
 80054fa:	bfbc      	itt	lt
 80054fc:	4622      	movlt	r2, r4
 80054fe:	4614      	movlt	r4, r2
 8005500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005504:	d005      	beq.n	8005512 <__cvt+0x42>
 8005506:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800550a:	d100      	bne.n	800550e <__cvt+0x3e>
 800550c:	3601      	adds	r6, #1
 800550e:	2102      	movs	r1, #2
 8005510:	e000      	b.n	8005514 <__cvt+0x44>
 8005512:	2103      	movs	r1, #3
 8005514:	ab03      	add	r3, sp, #12
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	ab02      	add	r3, sp, #8
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	ec45 4b10 	vmov	d0, r4, r5
 8005520:	4653      	mov	r3, sl
 8005522:	4632      	mov	r2, r6
 8005524:	f000 fe64 	bl	80061f0 <_dtoa_r>
 8005528:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800552c:	4607      	mov	r7, r0
 800552e:	d102      	bne.n	8005536 <__cvt+0x66>
 8005530:	f019 0f01 	tst.w	r9, #1
 8005534:	d022      	beq.n	800557c <__cvt+0xac>
 8005536:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800553a:	eb07 0906 	add.w	r9, r7, r6
 800553e:	d110      	bne.n	8005562 <__cvt+0x92>
 8005540:	783b      	ldrb	r3, [r7, #0]
 8005542:	2b30      	cmp	r3, #48	; 0x30
 8005544:	d10a      	bne.n	800555c <__cvt+0x8c>
 8005546:	2200      	movs	r2, #0
 8005548:	2300      	movs	r3, #0
 800554a:	4620      	mov	r0, r4
 800554c:	4629      	mov	r1, r5
 800554e:	f7fb fadb 	bl	8000b08 <__aeabi_dcmpeq>
 8005552:	b918      	cbnz	r0, 800555c <__cvt+0x8c>
 8005554:	f1c6 0601 	rsb	r6, r6, #1
 8005558:	f8ca 6000 	str.w	r6, [sl]
 800555c:	f8da 3000 	ldr.w	r3, [sl]
 8005560:	4499      	add	r9, r3
 8005562:	2200      	movs	r2, #0
 8005564:	2300      	movs	r3, #0
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fb facd 	bl	8000b08 <__aeabi_dcmpeq>
 800556e:	b108      	cbz	r0, 8005574 <__cvt+0xa4>
 8005570:	f8cd 900c 	str.w	r9, [sp, #12]
 8005574:	2230      	movs	r2, #48	; 0x30
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	454b      	cmp	r3, r9
 800557a:	d307      	bcc.n	800558c <__cvt+0xbc>
 800557c:	9b03      	ldr	r3, [sp, #12]
 800557e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005580:	1bdb      	subs	r3, r3, r7
 8005582:	4638      	mov	r0, r7
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	b004      	add	sp, #16
 8005588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558c:	1c59      	adds	r1, r3, #1
 800558e:	9103      	str	r1, [sp, #12]
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e7f0      	b.n	8005576 <__cvt+0xa6>

08005594 <__exponent>:
 8005594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005596:	4603      	mov	r3, r0
 8005598:	2900      	cmp	r1, #0
 800559a:	bfb8      	it	lt
 800559c:	4249      	neglt	r1, r1
 800559e:	f803 2b02 	strb.w	r2, [r3], #2
 80055a2:	bfb4      	ite	lt
 80055a4:	222d      	movlt	r2, #45	; 0x2d
 80055a6:	222b      	movge	r2, #43	; 0x2b
 80055a8:	2909      	cmp	r1, #9
 80055aa:	7042      	strb	r2, [r0, #1]
 80055ac:	dd2a      	ble.n	8005604 <__exponent+0x70>
 80055ae:	f10d 0207 	add.w	r2, sp, #7
 80055b2:	4617      	mov	r7, r2
 80055b4:	260a      	movs	r6, #10
 80055b6:	4694      	mov	ip, r2
 80055b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80055bc:	fb06 1415 	mls	r4, r6, r5, r1
 80055c0:	3430      	adds	r4, #48	; 0x30
 80055c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80055c6:	460c      	mov	r4, r1
 80055c8:	2c63      	cmp	r4, #99	; 0x63
 80055ca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80055ce:	4629      	mov	r1, r5
 80055d0:	dcf1      	bgt.n	80055b6 <__exponent+0x22>
 80055d2:	3130      	adds	r1, #48	; 0x30
 80055d4:	f1ac 0402 	sub.w	r4, ip, #2
 80055d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055dc:	1c41      	adds	r1, r0, #1
 80055de:	4622      	mov	r2, r4
 80055e0:	42ba      	cmp	r2, r7
 80055e2:	d30a      	bcc.n	80055fa <__exponent+0x66>
 80055e4:	f10d 0209 	add.w	r2, sp, #9
 80055e8:	eba2 020c 	sub.w	r2, r2, ip
 80055ec:	42bc      	cmp	r4, r7
 80055ee:	bf88      	it	hi
 80055f0:	2200      	movhi	r2, #0
 80055f2:	4413      	add	r3, r2
 80055f4:	1a18      	subs	r0, r3, r0
 80055f6:	b003      	add	sp, #12
 80055f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80055fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005602:	e7ed      	b.n	80055e0 <__exponent+0x4c>
 8005604:	2330      	movs	r3, #48	; 0x30
 8005606:	3130      	adds	r1, #48	; 0x30
 8005608:	7083      	strb	r3, [r0, #2]
 800560a:	70c1      	strb	r1, [r0, #3]
 800560c:	1d03      	adds	r3, r0, #4
 800560e:	e7f1      	b.n	80055f4 <__exponent+0x60>

08005610 <_printf_float>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	ed2d 8b02 	vpush	{d8}
 8005618:	b08d      	sub	sp, #52	; 0x34
 800561a:	460c      	mov	r4, r1
 800561c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005620:	4616      	mov	r6, r2
 8005622:	461f      	mov	r7, r3
 8005624:	4605      	mov	r5, r0
 8005626:	f000 fcd5 	bl	8005fd4 <_localeconv_r>
 800562a:	f8d0 a000 	ldr.w	sl, [r0]
 800562e:	4650      	mov	r0, sl
 8005630:	f7fa fe3e 	bl	80002b0 <strlen>
 8005634:	2300      	movs	r3, #0
 8005636:	930a      	str	r3, [sp, #40]	; 0x28
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	f8d8 3000 	ldr.w	r3, [r8]
 8005640:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005644:	3307      	adds	r3, #7
 8005646:	f023 0307 	bic.w	r3, r3, #7
 800564a:	f103 0208 	add.w	r2, r3, #8
 800564e:	f8c8 2000 	str.w	r2, [r8]
 8005652:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005656:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800565a:	9307      	str	r3, [sp, #28]
 800565c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005660:	ee08 0a10 	vmov	s16, r0
 8005664:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800566c:	4b9e      	ldr	r3, [pc, #632]	; (80058e8 <_printf_float+0x2d8>)
 800566e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005672:	f7fb fa7b 	bl	8000b6c <__aeabi_dcmpun>
 8005676:	bb88      	cbnz	r0, 80056dc <_printf_float+0xcc>
 8005678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800567c:	4b9a      	ldr	r3, [pc, #616]	; (80058e8 <_printf_float+0x2d8>)
 800567e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005682:	f7fb fa55 	bl	8000b30 <__aeabi_dcmple>
 8005686:	bb48      	cbnz	r0, 80056dc <_printf_float+0xcc>
 8005688:	2200      	movs	r2, #0
 800568a:	2300      	movs	r3, #0
 800568c:	4640      	mov	r0, r8
 800568e:	4649      	mov	r1, r9
 8005690:	f7fb fa44 	bl	8000b1c <__aeabi_dcmplt>
 8005694:	b110      	cbz	r0, 800569c <_printf_float+0x8c>
 8005696:	232d      	movs	r3, #45	; 0x2d
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569c:	4a93      	ldr	r2, [pc, #588]	; (80058ec <_printf_float+0x2dc>)
 800569e:	4b94      	ldr	r3, [pc, #592]	; (80058f0 <_printf_float+0x2e0>)
 80056a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056a4:	bf94      	ite	ls
 80056a6:	4690      	movls	r8, r2
 80056a8:	4698      	movhi	r8, r3
 80056aa:	2303      	movs	r3, #3
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	9b05      	ldr	r3, [sp, #20]
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	f04f 0900 	mov.w	r9, #0
 80056ba:	9700      	str	r7, [sp, #0]
 80056bc:	4633      	mov	r3, r6
 80056be:	aa0b      	add	r2, sp, #44	; 0x2c
 80056c0:	4621      	mov	r1, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 f9da 	bl	8005a7c <_printf_common>
 80056c8:	3001      	adds	r0, #1
 80056ca:	f040 8090 	bne.w	80057ee <_printf_float+0x1de>
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056d2:	b00d      	add	sp, #52	; 0x34
 80056d4:	ecbd 8b02 	vpop	{d8}
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	4642      	mov	r2, r8
 80056de:	464b      	mov	r3, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fb fa42 	bl	8000b6c <__aeabi_dcmpun>
 80056e8:	b140      	cbz	r0, 80056fc <_printf_float+0xec>
 80056ea:	464b      	mov	r3, r9
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfbc      	itt	lt
 80056f0:	232d      	movlt	r3, #45	; 0x2d
 80056f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056f6:	4a7f      	ldr	r2, [pc, #508]	; (80058f4 <_printf_float+0x2e4>)
 80056f8:	4b7f      	ldr	r3, [pc, #508]	; (80058f8 <_printf_float+0x2e8>)
 80056fa:	e7d1      	b.n	80056a0 <_printf_float+0x90>
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005702:	9206      	str	r2, [sp, #24]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	d13f      	bne.n	8005788 <_printf_float+0x178>
 8005708:	2306      	movs	r3, #6
 800570a:	6063      	str	r3, [r4, #4]
 800570c:	9b05      	ldr	r3, [sp, #20]
 800570e:	6861      	ldr	r1, [r4, #4]
 8005710:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005714:	2300      	movs	r3, #0
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	ab0a      	add	r3, sp, #40	; 0x28
 800571a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800571e:	ab09      	add	r3, sp, #36	; 0x24
 8005720:	ec49 8b10 	vmov	d0, r8, r9
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	6022      	str	r2, [r4, #0]
 8005728:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff fecf 	bl	80054d0 <__cvt>
 8005732:	9b06      	ldr	r3, [sp, #24]
 8005734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005736:	2b47      	cmp	r3, #71	; 0x47
 8005738:	4680      	mov	r8, r0
 800573a:	d108      	bne.n	800574e <_printf_float+0x13e>
 800573c:	1cc8      	adds	r0, r1, #3
 800573e:	db02      	blt.n	8005746 <_printf_float+0x136>
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	4299      	cmp	r1, r3
 8005744:	dd41      	ble.n	80057ca <_printf_float+0x1ba>
 8005746:	f1ab 0302 	sub.w	r3, fp, #2
 800574a:	fa5f fb83 	uxtb.w	fp, r3
 800574e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005752:	d820      	bhi.n	8005796 <_printf_float+0x186>
 8005754:	3901      	subs	r1, #1
 8005756:	465a      	mov	r2, fp
 8005758:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800575c:	9109      	str	r1, [sp, #36]	; 0x24
 800575e:	f7ff ff19 	bl	8005594 <__exponent>
 8005762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005764:	1813      	adds	r3, r2, r0
 8005766:	2a01      	cmp	r2, #1
 8005768:	4681      	mov	r9, r0
 800576a:	6123      	str	r3, [r4, #16]
 800576c:	dc02      	bgt.n	8005774 <_printf_float+0x164>
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	07d2      	lsls	r2, r2, #31
 8005772:	d501      	bpl.n	8005778 <_printf_float+0x168>
 8005774:	3301      	adds	r3, #1
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800577c:	2b00      	cmp	r3, #0
 800577e:	d09c      	beq.n	80056ba <_printf_float+0xaa>
 8005780:	232d      	movs	r3, #45	; 0x2d
 8005782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005786:	e798      	b.n	80056ba <_printf_float+0xaa>
 8005788:	9a06      	ldr	r2, [sp, #24]
 800578a:	2a47      	cmp	r2, #71	; 0x47
 800578c:	d1be      	bne.n	800570c <_printf_float+0xfc>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1bc      	bne.n	800570c <_printf_float+0xfc>
 8005792:	2301      	movs	r3, #1
 8005794:	e7b9      	b.n	800570a <_printf_float+0xfa>
 8005796:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800579a:	d118      	bne.n	80057ce <_printf_float+0x1be>
 800579c:	2900      	cmp	r1, #0
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	dd0b      	ble.n	80057ba <_printf_float+0x1aa>
 80057a2:	6121      	str	r1, [r4, #16]
 80057a4:	b913      	cbnz	r3, 80057ac <_printf_float+0x19c>
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	07d0      	lsls	r0, r2, #31
 80057aa:	d502      	bpl.n	80057b2 <_printf_float+0x1a2>
 80057ac:	3301      	adds	r3, #1
 80057ae:	440b      	add	r3, r1
 80057b0:	6123      	str	r3, [r4, #16]
 80057b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80057b4:	f04f 0900 	mov.w	r9, #0
 80057b8:	e7de      	b.n	8005778 <_printf_float+0x168>
 80057ba:	b913      	cbnz	r3, 80057c2 <_printf_float+0x1b2>
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	07d2      	lsls	r2, r2, #31
 80057c0:	d501      	bpl.n	80057c6 <_printf_float+0x1b6>
 80057c2:	3302      	adds	r3, #2
 80057c4:	e7f4      	b.n	80057b0 <_printf_float+0x1a0>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e7f2      	b.n	80057b0 <_printf_float+0x1a0>
 80057ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d0:	4299      	cmp	r1, r3
 80057d2:	db05      	blt.n	80057e0 <_printf_float+0x1d0>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	6121      	str	r1, [r4, #16]
 80057d8:	07d8      	lsls	r0, r3, #31
 80057da:	d5ea      	bpl.n	80057b2 <_printf_float+0x1a2>
 80057dc:	1c4b      	adds	r3, r1, #1
 80057de:	e7e7      	b.n	80057b0 <_printf_float+0x1a0>
 80057e0:	2900      	cmp	r1, #0
 80057e2:	bfd4      	ite	le
 80057e4:	f1c1 0202 	rsble	r2, r1, #2
 80057e8:	2201      	movgt	r2, #1
 80057ea:	4413      	add	r3, r2
 80057ec:	e7e0      	b.n	80057b0 <_printf_float+0x1a0>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	055a      	lsls	r2, r3, #21
 80057f2:	d407      	bmi.n	8005804 <_printf_float+0x1f4>
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	4642      	mov	r2, r8
 80057f8:	4631      	mov	r1, r6
 80057fa:	4628      	mov	r0, r5
 80057fc:	47b8      	blx	r7
 80057fe:	3001      	adds	r0, #1
 8005800:	d12c      	bne.n	800585c <_printf_float+0x24c>
 8005802:	e764      	b.n	80056ce <_printf_float+0xbe>
 8005804:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005808:	f240 80e0 	bls.w	80059cc <_printf_float+0x3bc>
 800580c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005810:	2200      	movs	r2, #0
 8005812:	2300      	movs	r3, #0
 8005814:	f7fb f978 	bl	8000b08 <__aeabi_dcmpeq>
 8005818:	2800      	cmp	r0, #0
 800581a:	d034      	beq.n	8005886 <_printf_float+0x276>
 800581c:	4a37      	ldr	r2, [pc, #220]	; (80058fc <_printf_float+0x2ec>)
 800581e:	2301      	movs	r3, #1
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f af51 	beq.w	80056ce <_printf_float+0xbe>
 800582c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005830:	429a      	cmp	r2, r3
 8005832:	db02      	blt.n	800583a <_printf_float+0x22a>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	07d8      	lsls	r0, r3, #31
 8005838:	d510      	bpl.n	800585c <_printf_float+0x24c>
 800583a:	ee18 3a10 	vmov	r3, s16
 800583e:	4652      	mov	r2, sl
 8005840:	4631      	mov	r1, r6
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	f43f af41 	beq.w	80056ce <_printf_float+0xbe>
 800584c:	f04f 0800 	mov.w	r8, #0
 8005850:	f104 091a 	add.w	r9, r4, #26
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	3b01      	subs	r3, #1
 8005858:	4543      	cmp	r3, r8
 800585a:	dc09      	bgt.n	8005870 <_printf_float+0x260>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	079b      	lsls	r3, r3, #30
 8005860:	f100 8107 	bmi.w	8005a72 <_printf_float+0x462>
 8005864:	68e0      	ldr	r0, [r4, #12]
 8005866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005868:	4298      	cmp	r0, r3
 800586a:	bfb8      	it	lt
 800586c:	4618      	movlt	r0, r3
 800586e:	e730      	b.n	80056d2 <_printf_float+0xc2>
 8005870:	2301      	movs	r3, #1
 8005872:	464a      	mov	r2, r9
 8005874:	4631      	mov	r1, r6
 8005876:	4628      	mov	r0, r5
 8005878:	47b8      	blx	r7
 800587a:	3001      	adds	r0, #1
 800587c:	f43f af27 	beq.w	80056ce <_printf_float+0xbe>
 8005880:	f108 0801 	add.w	r8, r8, #1
 8005884:	e7e6      	b.n	8005854 <_printf_float+0x244>
 8005886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	dc39      	bgt.n	8005900 <_printf_float+0x2f0>
 800588c:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <_printf_float+0x2ec>)
 800588e:	2301      	movs	r3, #1
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f af19 	beq.w	80056ce <_printf_float+0xbe>
 800589c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058a0:	4313      	orrs	r3, r2
 80058a2:	d102      	bne.n	80058aa <_printf_float+0x29a>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	07d9      	lsls	r1, r3, #31
 80058a8:	d5d8      	bpl.n	800585c <_printf_float+0x24c>
 80058aa:	ee18 3a10 	vmov	r3, s16
 80058ae:	4652      	mov	r2, sl
 80058b0:	4631      	mov	r1, r6
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b8      	blx	r7
 80058b6:	3001      	adds	r0, #1
 80058b8:	f43f af09 	beq.w	80056ce <_printf_float+0xbe>
 80058bc:	f04f 0900 	mov.w	r9, #0
 80058c0:	f104 0a1a 	add.w	sl, r4, #26
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	425b      	negs	r3, r3
 80058c8:	454b      	cmp	r3, r9
 80058ca:	dc01      	bgt.n	80058d0 <_printf_float+0x2c0>
 80058cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ce:	e792      	b.n	80057f6 <_printf_float+0x1e6>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4652      	mov	r2, sl
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f aef7 	beq.w	80056ce <_printf_float+0xbe>
 80058e0:	f109 0901 	add.w	r9, r9, #1
 80058e4:	e7ee      	b.n	80058c4 <_printf_float+0x2b4>
 80058e6:	bf00      	nop
 80058e8:	7fefffff 	.word	0x7fefffff
 80058ec:	080082e8 	.word	0x080082e8
 80058f0:	080082ec 	.word	0x080082ec
 80058f4:	080082f0 	.word	0x080082f0
 80058f8:	080082f4 	.word	0x080082f4
 80058fc:	080082f8 	.word	0x080082f8
 8005900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005904:	429a      	cmp	r2, r3
 8005906:	bfa8      	it	ge
 8005908:	461a      	movge	r2, r3
 800590a:	2a00      	cmp	r2, #0
 800590c:	4691      	mov	r9, r2
 800590e:	dc37      	bgt.n	8005980 <_printf_float+0x370>
 8005910:	f04f 0b00 	mov.w	fp, #0
 8005914:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005918:	f104 021a 	add.w	r2, r4, #26
 800591c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800591e:	9305      	str	r3, [sp, #20]
 8005920:	eba3 0309 	sub.w	r3, r3, r9
 8005924:	455b      	cmp	r3, fp
 8005926:	dc33      	bgt.n	8005990 <_printf_float+0x380>
 8005928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800592c:	429a      	cmp	r2, r3
 800592e:	db3b      	blt.n	80059a8 <_printf_float+0x398>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	07da      	lsls	r2, r3, #31
 8005934:	d438      	bmi.n	80059a8 <_printf_float+0x398>
 8005936:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800593a:	eba2 0903 	sub.w	r9, r2, r3
 800593e:	9b05      	ldr	r3, [sp, #20]
 8005940:	1ad2      	subs	r2, r2, r3
 8005942:	4591      	cmp	r9, r2
 8005944:	bfa8      	it	ge
 8005946:	4691      	movge	r9, r2
 8005948:	f1b9 0f00 	cmp.w	r9, #0
 800594c:	dc35      	bgt.n	80059ba <_printf_float+0x3aa>
 800594e:	f04f 0800 	mov.w	r8, #0
 8005952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005956:	f104 0a1a 	add.w	sl, r4, #26
 800595a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	eba3 0309 	sub.w	r3, r3, r9
 8005964:	4543      	cmp	r3, r8
 8005966:	f77f af79 	ble.w	800585c <_printf_float+0x24c>
 800596a:	2301      	movs	r3, #1
 800596c:	4652      	mov	r2, sl
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	f43f aeaa 	beq.w	80056ce <_printf_float+0xbe>
 800597a:	f108 0801 	add.w	r8, r8, #1
 800597e:	e7ec      	b.n	800595a <_printf_float+0x34a>
 8005980:	4613      	mov	r3, r2
 8005982:	4631      	mov	r1, r6
 8005984:	4642      	mov	r2, r8
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	d1c0      	bne.n	8005910 <_printf_float+0x300>
 800598e:	e69e      	b.n	80056ce <_printf_float+0xbe>
 8005990:	2301      	movs	r3, #1
 8005992:	4631      	mov	r1, r6
 8005994:	4628      	mov	r0, r5
 8005996:	9205      	str	r2, [sp, #20]
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	f43f ae97 	beq.w	80056ce <_printf_float+0xbe>
 80059a0:	9a05      	ldr	r2, [sp, #20]
 80059a2:	f10b 0b01 	add.w	fp, fp, #1
 80059a6:	e7b9      	b.n	800591c <_printf_float+0x30c>
 80059a8:	ee18 3a10 	vmov	r3, s16
 80059ac:	4652      	mov	r2, sl
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	d1be      	bne.n	8005936 <_printf_float+0x326>
 80059b8:	e689      	b.n	80056ce <_printf_float+0xbe>
 80059ba:	9a05      	ldr	r2, [sp, #20]
 80059bc:	464b      	mov	r3, r9
 80059be:	4442      	add	r2, r8
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	d1c1      	bne.n	800594e <_printf_float+0x33e>
 80059ca:	e680      	b.n	80056ce <_printf_float+0xbe>
 80059cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ce:	2a01      	cmp	r2, #1
 80059d0:	dc01      	bgt.n	80059d6 <_printf_float+0x3c6>
 80059d2:	07db      	lsls	r3, r3, #31
 80059d4:	d53a      	bpl.n	8005a4c <_printf_float+0x43c>
 80059d6:	2301      	movs	r3, #1
 80059d8:	4642      	mov	r2, r8
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f ae74 	beq.w	80056ce <_printf_float+0xbe>
 80059e6:	ee18 3a10 	vmov	r3, s16
 80059ea:	4652      	mov	r2, sl
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f ae6b 	beq.w	80056ce <_printf_float+0xbe>
 80059f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059fc:	2200      	movs	r2, #0
 80059fe:	2300      	movs	r3, #0
 8005a00:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a04:	f7fb f880 	bl	8000b08 <__aeabi_dcmpeq>
 8005a08:	b9d8      	cbnz	r0, 8005a42 <_printf_float+0x432>
 8005a0a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005a0e:	f108 0201 	add.w	r2, r8, #1
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d10e      	bne.n	8005a3a <_printf_float+0x42a>
 8005a1c:	e657      	b.n	80056ce <_printf_float+0xbe>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4652      	mov	r2, sl
 8005a22:	4631      	mov	r1, r6
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b8      	blx	r7
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f43f ae50 	beq.w	80056ce <_printf_float+0xbe>
 8005a2e:	f108 0801 	add.w	r8, r8, #1
 8005a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a34:	3b01      	subs	r3, #1
 8005a36:	4543      	cmp	r3, r8
 8005a38:	dcf1      	bgt.n	8005a1e <_printf_float+0x40e>
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a40:	e6da      	b.n	80057f8 <_printf_float+0x1e8>
 8005a42:	f04f 0800 	mov.w	r8, #0
 8005a46:	f104 0a1a 	add.w	sl, r4, #26
 8005a4a:	e7f2      	b.n	8005a32 <_printf_float+0x422>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4642      	mov	r2, r8
 8005a50:	e7df      	b.n	8005a12 <_printf_float+0x402>
 8005a52:	2301      	movs	r3, #1
 8005a54:	464a      	mov	r2, r9
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f ae36 	beq.w	80056ce <_printf_float+0xbe>
 8005a62:	f108 0801 	add.w	r8, r8, #1
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a6a:	1a5b      	subs	r3, r3, r1
 8005a6c:	4543      	cmp	r3, r8
 8005a6e:	dcf0      	bgt.n	8005a52 <_printf_float+0x442>
 8005a70:	e6f8      	b.n	8005864 <_printf_float+0x254>
 8005a72:	f04f 0800 	mov.w	r8, #0
 8005a76:	f104 0919 	add.w	r9, r4, #25
 8005a7a:	e7f4      	b.n	8005a66 <_printf_float+0x456>

08005a7c <_printf_common>:
 8005a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a80:	4616      	mov	r6, r2
 8005a82:	4699      	mov	r9, r3
 8005a84:	688a      	ldr	r2, [r1, #8]
 8005a86:	690b      	ldr	r3, [r1, #16]
 8005a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	bfb8      	it	lt
 8005a90:	4613      	movlt	r3, r2
 8005a92:	6033      	str	r3, [r6, #0]
 8005a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a98:	4607      	mov	r7, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	b10a      	cbz	r2, 8005aa2 <_printf_common+0x26>
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	6033      	str	r3, [r6, #0]
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	0699      	lsls	r1, r3, #26
 8005aa6:	bf42      	ittt	mi
 8005aa8:	6833      	ldrmi	r3, [r6, #0]
 8005aaa:	3302      	addmi	r3, #2
 8005aac:	6033      	strmi	r3, [r6, #0]
 8005aae:	6825      	ldr	r5, [r4, #0]
 8005ab0:	f015 0506 	ands.w	r5, r5, #6
 8005ab4:	d106      	bne.n	8005ac4 <_printf_common+0x48>
 8005ab6:	f104 0a19 	add.w	sl, r4, #25
 8005aba:	68e3      	ldr	r3, [r4, #12]
 8005abc:	6832      	ldr	r2, [r6, #0]
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	42ab      	cmp	r3, r5
 8005ac2:	dc26      	bgt.n	8005b12 <_printf_common+0x96>
 8005ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ac8:	1e13      	subs	r3, r2, #0
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	bf18      	it	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	0692      	lsls	r2, r2, #26
 8005ad2:	d42b      	bmi.n	8005b2c <_printf_common+0xb0>
 8005ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad8:	4649      	mov	r1, r9
 8005ada:	4638      	mov	r0, r7
 8005adc:	47c0      	blx	r8
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d01e      	beq.n	8005b20 <_printf_common+0xa4>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	6922      	ldr	r2, [r4, #16]
 8005ae6:	f003 0306 	and.w	r3, r3, #6
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	bf02      	ittt	eq
 8005aee:	68e5      	ldreq	r5, [r4, #12]
 8005af0:	6833      	ldreq	r3, [r6, #0]
 8005af2:	1aed      	subeq	r5, r5, r3
 8005af4:	68a3      	ldr	r3, [r4, #8]
 8005af6:	bf0c      	ite	eq
 8005af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005afc:	2500      	movne	r5, #0
 8005afe:	4293      	cmp	r3, r2
 8005b00:	bfc4      	itt	gt
 8005b02:	1a9b      	subgt	r3, r3, r2
 8005b04:	18ed      	addgt	r5, r5, r3
 8005b06:	2600      	movs	r6, #0
 8005b08:	341a      	adds	r4, #26
 8005b0a:	42b5      	cmp	r5, r6
 8005b0c:	d11a      	bne.n	8005b44 <_printf_common+0xc8>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	e008      	b.n	8005b24 <_printf_common+0xa8>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4652      	mov	r2, sl
 8005b16:	4649      	mov	r1, r9
 8005b18:	4638      	mov	r0, r7
 8005b1a:	47c0      	blx	r8
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d103      	bne.n	8005b28 <_printf_common+0xac>
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b28:	3501      	adds	r5, #1
 8005b2a:	e7c6      	b.n	8005aba <_printf_common+0x3e>
 8005b2c:	18e1      	adds	r1, r4, r3
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	2030      	movs	r0, #48	; 0x30
 8005b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b36:	4422      	add	r2, r4
 8005b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b40:	3302      	adds	r3, #2
 8005b42:	e7c7      	b.n	8005ad4 <_printf_common+0x58>
 8005b44:	2301      	movs	r3, #1
 8005b46:	4622      	mov	r2, r4
 8005b48:	4649      	mov	r1, r9
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	47c0      	blx	r8
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d0e6      	beq.n	8005b20 <_printf_common+0xa4>
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7d9      	b.n	8005b0a <_printf_common+0x8e>
	...

08005b58 <_printf_i>:
 8005b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b5c:	7e0f      	ldrb	r7, [r1, #24]
 8005b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b60:	2f78      	cmp	r7, #120	; 0x78
 8005b62:	4691      	mov	r9, r2
 8005b64:	4680      	mov	r8, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	469a      	mov	sl, r3
 8005b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b6e:	d807      	bhi.n	8005b80 <_printf_i+0x28>
 8005b70:	2f62      	cmp	r7, #98	; 0x62
 8005b72:	d80a      	bhi.n	8005b8a <_printf_i+0x32>
 8005b74:	2f00      	cmp	r7, #0
 8005b76:	f000 80d4 	beq.w	8005d22 <_printf_i+0x1ca>
 8005b7a:	2f58      	cmp	r7, #88	; 0x58
 8005b7c:	f000 80c0 	beq.w	8005d00 <_printf_i+0x1a8>
 8005b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b88:	e03a      	b.n	8005c00 <_printf_i+0xa8>
 8005b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b8e:	2b15      	cmp	r3, #21
 8005b90:	d8f6      	bhi.n	8005b80 <_printf_i+0x28>
 8005b92:	a101      	add	r1, pc, #4	; (adr r1, 8005b98 <_printf_i+0x40>)
 8005b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005c05 	.word	0x08005c05
 8005ba0:	08005b81 	.word	0x08005b81
 8005ba4:	08005b81 	.word	0x08005b81
 8005ba8:	08005b81 	.word	0x08005b81
 8005bac:	08005b81 	.word	0x08005b81
 8005bb0:	08005c05 	.word	0x08005c05
 8005bb4:	08005b81 	.word	0x08005b81
 8005bb8:	08005b81 	.word	0x08005b81
 8005bbc:	08005b81 	.word	0x08005b81
 8005bc0:	08005b81 	.word	0x08005b81
 8005bc4:	08005d09 	.word	0x08005d09
 8005bc8:	08005c31 	.word	0x08005c31
 8005bcc:	08005cc3 	.word	0x08005cc3
 8005bd0:	08005b81 	.word	0x08005b81
 8005bd4:	08005b81 	.word	0x08005b81
 8005bd8:	08005d2b 	.word	0x08005d2b
 8005bdc:	08005b81 	.word	0x08005b81
 8005be0:	08005c31 	.word	0x08005c31
 8005be4:	08005b81 	.word	0x08005b81
 8005be8:	08005b81 	.word	0x08005b81
 8005bec:	08005ccb 	.word	0x08005ccb
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	1d1a      	adds	r2, r3, #4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	602a      	str	r2, [r5, #0]
 8005bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c00:	2301      	movs	r3, #1
 8005c02:	e09f      	b.n	8005d44 <_printf_i+0x1ec>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	682b      	ldr	r3, [r5, #0]
 8005c08:	0607      	lsls	r7, r0, #24
 8005c0a:	f103 0104 	add.w	r1, r3, #4
 8005c0e:	6029      	str	r1, [r5, #0]
 8005c10:	d501      	bpl.n	8005c16 <_printf_i+0xbe>
 8005c12:	681e      	ldr	r6, [r3, #0]
 8005c14:	e003      	b.n	8005c1e <_printf_i+0xc6>
 8005c16:	0646      	lsls	r6, r0, #25
 8005c18:	d5fb      	bpl.n	8005c12 <_printf_i+0xba>
 8005c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	da03      	bge.n	8005c2a <_printf_i+0xd2>
 8005c22:	232d      	movs	r3, #45	; 0x2d
 8005c24:	4276      	negs	r6, r6
 8005c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c2a:	485a      	ldr	r0, [pc, #360]	; (8005d94 <_printf_i+0x23c>)
 8005c2c:	230a      	movs	r3, #10
 8005c2e:	e012      	b.n	8005c56 <_printf_i+0xfe>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	1d19      	adds	r1, r3, #4
 8005c36:	6029      	str	r1, [r5, #0]
 8005c38:	0605      	lsls	r5, r0, #24
 8005c3a:	d501      	bpl.n	8005c40 <_printf_i+0xe8>
 8005c3c:	681e      	ldr	r6, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <_printf_i+0xee>
 8005c40:	0641      	lsls	r1, r0, #25
 8005c42:	d5fb      	bpl.n	8005c3c <_printf_i+0xe4>
 8005c44:	881e      	ldrh	r6, [r3, #0]
 8005c46:	4853      	ldr	r0, [pc, #332]	; (8005d94 <_printf_i+0x23c>)
 8005c48:	2f6f      	cmp	r7, #111	; 0x6f
 8005c4a:	bf0c      	ite	eq
 8005c4c:	2308      	moveq	r3, #8
 8005c4e:	230a      	movne	r3, #10
 8005c50:	2100      	movs	r1, #0
 8005c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c56:	6865      	ldr	r5, [r4, #4]
 8005c58:	60a5      	str	r5, [r4, #8]
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	bfa2      	ittt	ge
 8005c5e:	6821      	ldrge	r1, [r4, #0]
 8005c60:	f021 0104 	bicge.w	r1, r1, #4
 8005c64:	6021      	strge	r1, [r4, #0]
 8005c66:	b90e      	cbnz	r6, 8005c6c <_printf_i+0x114>
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	d04b      	beq.n	8005d04 <_printf_i+0x1ac>
 8005c6c:	4615      	mov	r5, r2
 8005c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c72:	fb03 6711 	mls	r7, r3, r1, r6
 8005c76:	5dc7      	ldrb	r7, [r0, r7]
 8005c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c7c:	4637      	mov	r7, r6
 8005c7e:	42bb      	cmp	r3, r7
 8005c80:	460e      	mov	r6, r1
 8005c82:	d9f4      	bls.n	8005c6e <_printf_i+0x116>
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d10b      	bne.n	8005ca0 <_printf_i+0x148>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	07de      	lsls	r6, r3, #31
 8005c8c:	d508      	bpl.n	8005ca0 <_printf_i+0x148>
 8005c8e:	6923      	ldr	r3, [r4, #16]
 8005c90:	6861      	ldr	r1, [r4, #4]
 8005c92:	4299      	cmp	r1, r3
 8005c94:	bfde      	ittt	le
 8005c96:	2330      	movle	r3, #48	; 0x30
 8005c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ca0:	1b52      	subs	r2, r2, r5
 8005ca2:	6122      	str	r2, [r4, #16]
 8005ca4:	f8cd a000 	str.w	sl, [sp]
 8005ca8:	464b      	mov	r3, r9
 8005caa:	aa03      	add	r2, sp, #12
 8005cac:	4621      	mov	r1, r4
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f7ff fee4 	bl	8005a7c <_printf_common>
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d14a      	bne.n	8005d4e <_printf_i+0x1f6>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cbc:	b004      	add	sp, #16
 8005cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	f043 0320 	orr.w	r3, r3, #32
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	4833      	ldr	r0, [pc, #204]	; (8005d98 <_printf_i+0x240>)
 8005ccc:	2778      	movs	r7, #120	; 0x78
 8005cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	6829      	ldr	r1, [r5, #0]
 8005cd6:	061f      	lsls	r7, r3, #24
 8005cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cdc:	d402      	bmi.n	8005ce4 <_printf_i+0x18c>
 8005cde:	065f      	lsls	r7, r3, #25
 8005ce0:	bf48      	it	mi
 8005ce2:	b2b6      	uxthmi	r6, r6
 8005ce4:	07df      	lsls	r7, r3, #31
 8005ce6:	bf48      	it	mi
 8005ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8005cec:	6029      	str	r1, [r5, #0]
 8005cee:	bf48      	it	mi
 8005cf0:	6023      	strmi	r3, [r4, #0]
 8005cf2:	b91e      	cbnz	r6, 8005cfc <_printf_i+0x1a4>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	f023 0320 	bic.w	r3, r3, #32
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	e7a7      	b.n	8005c50 <_printf_i+0xf8>
 8005d00:	4824      	ldr	r0, [pc, #144]	; (8005d94 <_printf_i+0x23c>)
 8005d02:	e7e4      	b.n	8005cce <_printf_i+0x176>
 8005d04:	4615      	mov	r5, r2
 8005d06:	e7bd      	b.n	8005c84 <_printf_i+0x12c>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	6826      	ldr	r6, [r4, #0]
 8005d0c:	6961      	ldr	r1, [r4, #20]
 8005d0e:	1d18      	adds	r0, r3, #4
 8005d10:	6028      	str	r0, [r5, #0]
 8005d12:	0635      	lsls	r5, r6, #24
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	d501      	bpl.n	8005d1c <_printf_i+0x1c4>
 8005d18:	6019      	str	r1, [r3, #0]
 8005d1a:	e002      	b.n	8005d22 <_printf_i+0x1ca>
 8005d1c:	0670      	lsls	r0, r6, #25
 8005d1e:	d5fb      	bpl.n	8005d18 <_printf_i+0x1c0>
 8005d20:	8019      	strh	r1, [r3, #0]
 8005d22:	2300      	movs	r3, #0
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	4615      	mov	r5, r2
 8005d28:	e7bc      	b.n	8005ca4 <_printf_i+0x14c>
 8005d2a:	682b      	ldr	r3, [r5, #0]
 8005d2c:	1d1a      	adds	r2, r3, #4
 8005d2e:	602a      	str	r2, [r5, #0]
 8005d30:	681d      	ldr	r5, [r3, #0]
 8005d32:	6862      	ldr	r2, [r4, #4]
 8005d34:	2100      	movs	r1, #0
 8005d36:	4628      	mov	r0, r5
 8005d38:	f7fa fa6a 	bl	8000210 <memchr>
 8005d3c:	b108      	cbz	r0, 8005d42 <_printf_i+0x1ea>
 8005d3e:	1b40      	subs	r0, r0, r5
 8005d40:	6060      	str	r0, [r4, #4]
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	2300      	movs	r3, #0
 8005d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4c:	e7aa      	b.n	8005ca4 <_printf_i+0x14c>
 8005d4e:	6923      	ldr	r3, [r4, #16]
 8005d50:	462a      	mov	r2, r5
 8005d52:	4649      	mov	r1, r9
 8005d54:	4640      	mov	r0, r8
 8005d56:	47d0      	blx	sl
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d0ad      	beq.n	8005cb8 <_printf_i+0x160>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	079b      	lsls	r3, r3, #30
 8005d60:	d413      	bmi.n	8005d8a <_printf_i+0x232>
 8005d62:	68e0      	ldr	r0, [r4, #12]
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	4298      	cmp	r0, r3
 8005d68:	bfb8      	it	lt
 8005d6a:	4618      	movlt	r0, r3
 8005d6c:	e7a6      	b.n	8005cbc <_printf_i+0x164>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4632      	mov	r2, r6
 8005d72:	4649      	mov	r1, r9
 8005d74:	4640      	mov	r0, r8
 8005d76:	47d0      	blx	sl
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d09d      	beq.n	8005cb8 <_printf_i+0x160>
 8005d7c:	3501      	adds	r5, #1
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	9903      	ldr	r1, [sp, #12]
 8005d82:	1a5b      	subs	r3, r3, r1
 8005d84:	42ab      	cmp	r3, r5
 8005d86:	dcf2      	bgt.n	8005d6e <_printf_i+0x216>
 8005d88:	e7eb      	b.n	8005d62 <_printf_i+0x20a>
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	f104 0619 	add.w	r6, r4, #25
 8005d90:	e7f5      	b.n	8005d7e <_printf_i+0x226>
 8005d92:	bf00      	nop
 8005d94:	080082fa 	.word	0x080082fa
 8005d98:	0800830b 	.word	0x0800830b

08005d9c <std>:
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	4604      	mov	r4, r0
 8005da2:	e9c0 3300 	strd	r3, r3, [r0]
 8005da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005daa:	6083      	str	r3, [r0, #8]
 8005dac:	8181      	strh	r1, [r0, #12]
 8005dae:	6643      	str	r3, [r0, #100]	; 0x64
 8005db0:	81c2      	strh	r2, [r0, #14]
 8005db2:	6183      	str	r3, [r0, #24]
 8005db4:	4619      	mov	r1, r3
 8005db6:	2208      	movs	r2, #8
 8005db8:	305c      	adds	r0, #92	; 0x5c
 8005dba:	f000 f902 	bl	8005fc2 <memset>
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <std+0x38>)
 8005dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <std+0x3c>)
 8005dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <std+0x40>)
 8005dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <std+0x44>)
 8005dcc:	6224      	str	r4, [r4, #32]
 8005dce:	6323      	str	r3, [r4, #48]	; 0x30
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08005f3d 	.word	0x08005f3d
 8005dd8:	08005f5f 	.word	0x08005f5f
 8005ddc:	08005f97 	.word	0x08005f97
 8005de0:	08005fbb 	.word	0x08005fbb

08005de4 <stdio_exit_handler>:
 8005de4:	4a02      	ldr	r2, [pc, #8]	; (8005df0 <stdio_exit_handler+0xc>)
 8005de6:	4903      	ldr	r1, [pc, #12]	; (8005df4 <stdio_exit_handler+0x10>)
 8005de8:	4803      	ldr	r0, [pc, #12]	; (8005df8 <stdio_exit_handler+0x14>)
 8005dea:	f000 b869 	b.w	8005ec0 <_fwalk_sglue>
 8005dee:	bf00      	nop
 8005df0:	20000010 	.word	0x20000010
 8005df4:	08007a89 	.word	0x08007a89
 8005df8:	2000001c 	.word	0x2000001c

08005dfc <cleanup_stdio>:
 8005dfc:	6841      	ldr	r1, [r0, #4]
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <cleanup_stdio+0x34>)
 8005e00:	4299      	cmp	r1, r3
 8005e02:	b510      	push	{r4, lr}
 8005e04:	4604      	mov	r4, r0
 8005e06:	d001      	beq.n	8005e0c <cleanup_stdio+0x10>
 8005e08:	f001 fe3e 	bl	8007a88 <_fflush_r>
 8005e0c:	68a1      	ldr	r1, [r4, #8]
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <cleanup_stdio+0x38>)
 8005e10:	4299      	cmp	r1, r3
 8005e12:	d002      	beq.n	8005e1a <cleanup_stdio+0x1e>
 8005e14:	4620      	mov	r0, r4
 8005e16:	f001 fe37 	bl	8007a88 <_fflush_r>
 8005e1a:	68e1      	ldr	r1, [r4, #12]
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <cleanup_stdio+0x3c>)
 8005e1e:	4299      	cmp	r1, r3
 8005e20:	d004      	beq.n	8005e2c <cleanup_stdio+0x30>
 8005e22:	4620      	mov	r0, r4
 8005e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e28:	f001 be2e 	b.w	8007a88 <_fflush_r>
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000680 	.word	0x20000680
 8005e34:	200006e8 	.word	0x200006e8
 8005e38:	20000750 	.word	0x20000750

08005e3c <global_stdio_init.part.0>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <global_stdio_init.part.0+0x30>)
 8005e40:	4c0b      	ldr	r4, [pc, #44]	; (8005e70 <global_stdio_init.part.0+0x34>)
 8005e42:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <global_stdio_init.part.0+0x38>)
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	4620      	mov	r0, r4
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2104      	movs	r1, #4
 8005e4c:	f7ff ffa6 	bl	8005d9c <std>
 8005e50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e54:	2201      	movs	r2, #1
 8005e56:	2109      	movs	r1, #9
 8005e58:	f7ff ffa0 	bl	8005d9c <std>
 8005e5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e60:	2202      	movs	r2, #2
 8005e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e66:	2112      	movs	r1, #18
 8005e68:	f7ff bf98 	b.w	8005d9c <std>
 8005e6c:	200007b8 	.word	0x200007b8
 8005e70:	20000680 	.word	0x20000680
 8005e74:	08005de5 	.word	0x08005de5

08005e78 <__sfp_lock_acquire>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__sfp_lock_acquire+0x8>)
 8005e7a:	f000 b91f 	b.w	80060bc <__retarget_lock_acquire_recursive>
 8005e7e:	bf00      	nop
 8005e80:	200007c1 	.word	0x200007c1

08005e84 <__sfp_lock_release>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__sfp_lock_release+0x8>)
 8005e86:	f000 b91a 	b.w	80060be <__retarget_lock_release_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	200007c1 	.word	0x200007c1

08005e90 <__sinit>:
 8005e90:	b510      	push	{r4, lr}
 8005e92:	4604      	mov	r4, r0
 8005e94:	f7ff fff0 	bl	8005e78 <__sfp_lock_acquire>
 8005e98:	6a23      	ldr	r3, [r4, #32]
 8005e9a:	b11b      	cbz	r3, 8005ea4 <__sinit+0x14>
 8005e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea0:	f7ff bff0 	b.w	8005e84 <__sfp_lock_release>
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <__sinit+0x28>)
 8005ea6:	6223      	str	r3, [r4, #32]
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <__sinit+0x2c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f5      	bne.n	8005e9c <__sinit+0xc>
 8005eb0:	f7ff ffc4 	bl	8005e3c <global_stdio_init.part.0>
 8005eb4:	e7f2      	b.n	8005e9c <__sinit+0xc>
 8005eb6:	bf00      	nop
 8005eb8:	08005dfd 	.word	0x08005dfd
 8005ebc:	200007b8 	.word	0x200007b8

08005ec0 <_fwalk_sglue>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	4688      	mov	r8, r1
 8005ec8:	4614      	mov	r4, r2
 8005eca:	2600      	movs	r6, #0
 8005ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed4:	d505      	bpl.n	8005ee2 <_fwalk_sglue+0x22>
 8005ed6:	6824      	ldr	r4, [r4, #0]
 8005ed8:	2c00      	cmp	r4, #0
 8005eda:	d1f7      	bne.n	8005ecc <_fwalk_sglue+0xc>
 8005edc:	4630      	mov	r0, r6
 8005ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee2:	89ab      	ldrh	r3, [r5, #12]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d907      	bls.n	8005ef8 <_fwalk_sglue+0x38>
 8005ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eec:	3301      	adds	r3, #1
 8005eee:	d003      	beq.n	8005ef8 <_fwalk_sglue+0x38>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	47c0      	blx	r8
 8005ef6:	4306      	orrs	r6, r0
 8005ef8:	3568      	adds	r5, #104	; 0x68
 8005efa:	e7e9      	b.n	8005ed0 <_fwalk_sglue+0x10>

08005efc <siprintf>:
 8005efc:	b40e      	push	{r1, r2, r3}
 8005efe:	b500      	push	{lr}
 8005f00:	b09c      	sub	sp, #112	; 0x70
 8005f02:	ab1d      	add	r3, sp, #116	; 0x74
 8005f04:	9002      	str	r0, [sp, #8]
 8005f06:	9006      	str	r0, [sp, #24]
 8005f08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f0c:	4809      	ldr	r0, [pc, #36]	; (8005f34 <siprintf+0x38>)
 8005f0e:	9107      	str	r1, [sp, #28]
 8005f10:	9104      	str	r1, [sp, #16]
 8005f12:	4909      	ldr	r1, [pc, #36]	; (8005f38 <siprintf+0x3c>)
 8005f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f18:	9105      	str	r1, [sp, #20]
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	a902      	add	r1, sp, #8
 8005f20:	f001 fc2e 	bl	8007780 <_svfiprintf_r>
 8005f24:	9b02      	ldr	r3, [sp, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	b01c      	add	sp, #112	; 0x70
 8005f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f30:	b003      	add	sp, #12
 8005f32:	4770      	bx	lr
 8005f34:	20000068 	.word	0x20000068
 8005f38:	ffff0208 	.word	0xffff0208

08005f3c <__sread>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	460c      	mov	r4, r1
 8005f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f44:	f000 f86c 	bl	8006020 <_read_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	bfab      	itete	ge
 8005f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f50:	181b      	addge	r3, r3, r0
 8005f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f56:	bfac      	ite	ge
 8005f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f5a:	81a3      	strhlt	r3, [r4, #12]
 8005f5c:	bd10      	pop	{r4, pc}

08005f5e <__swrite>:
 8005f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f62:	461f      	mov	r7, r3
 8005f64:	898b      	ldrh	r3, [r1, #12]
 8005f66:	05db      	lsls	r3, r3, #23
 8005f68:	4605      	mov	r5, r0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	d505      	bpl.n	8005f7c <__swrite+0x1e>
 8005f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f74:	2302      	movs	r3, #2
 8005f76:	2200      	movs	r2, #0
 8005f78:	f000 f840 	bl	8005ffc <_lseek_r>
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	4632      	mov	r2, r6
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f92:	f000 b857 	b.w	8006044 <_write_r>

08005f96 <__sseek>:
 8005f96:	b510      	push	{r4, lr}
 8005f98:	460c      	mov	r4, r1
 8005f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9e:	f000 f82d 	bl	8005ffc <_lseek_r>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	bf15      	itete	ne
 8005fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fb2:	81a3      	strheq	r3, [r4, #12]
 8005fb4:	bf18      	it	ne
 8005fb6:	81a3      	strhne	r3, [r4, #12]
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <__sclose>:
 8005fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbe:	f000 b80d 	b.w	8005fdc <_close_r>

08005fc2 <memset>:
 8005fc2:	4402      	add	r2, r0
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d100      	bne.n	8005fcc <memset+0xa>
 8005fca:	4770      	bx	lr
 8005fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd0:	e7f9      	b.n	8005fc6 <memset+0x4>
	...

08005fd4 <_localeconv_r>:
 8005fd4:	4800      	ldr	r0, [pc, #0]	; (8005fd8 <_localeconv_r+0x4>)
 8005fd6:	4770      	bx	lr
 8005fd8:	2000015c 	.word	0x2000015c

08005fdc <_close_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d06      	ldr	r5, [pc, #24]	; (8005ff8 <_close_r+0x1c>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	f7fb fd2e 	bl	8001a48 <_close>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_close_r+0x1a>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_close_r+0x1a>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	200007bc 	.word	0x200007bc

08005ffc <_lseek_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d07      	ldr	r5, [pc, #28]	; (800601c <_lseek_r+0x20>)
 8006000:	4604      	mov	r4, r0
 8006002:	4608      	mov	r0, r1
 8006004:	4611      	mov	r1, r2
 8006006:	2200      	movs	r2, #0
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fb fd43 	bl	8001a96 <_lseek>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_lseek_r+0x1e>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_lseek_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	200007bc 	.word	0x200007bc

08006020 <_read_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d07      	ldr	r5, [pc, #28]	; (8006040 <_read_r+0x20>)
 8006024:	4604      	mov	r4, r0
 8006026:	4608      	mov	r0, r1
 8006028:	4611      	mov	r1, r2
 800602a:	2200      	movs	r2, #0
 800602c:	602a      	str	r2, [r5, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	f7fb fcd1 	bl	80019d6 <_read>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d102      	bne.n	800603e <_read_r+0x1e>
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	b103      	cbz	r3, 800603e <_read_r+0x1e>
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	bd38      	pop	{r3, r4, r5, pc}
 8006040:	200007bc 	.word	0x200007bc

08006044 <_write_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d07      	ldr	r5, [pc, #28]	; (8006064 <_write_r+0x20>)
 8006048:	4604      	mov	r4, r0
 800604a:	4608      	mov	r0, r1
 800604c:	4611      	mov	r1, r2
 800604e:	2200      	movs	r2, #0
 8006050:	602a      	str	r2, [r5, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	f7fb fcdc 	bl	8001a10 <_write>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_write_r+0x1e>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	b103      	cbz	r3, 8006062 <_write_r+0x1e>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	200007bc 	.word	0x200007bc

08006068 <__errno>:
 8006068:	4b01      	ldr	r3, [pc, #4]	; (8006070 <__errno+0x8>)
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000068 	.word	0x20000068

08006074 <__libc_init_array>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	4d0d      	ldr	r5, [pc, #52]	; (80060ac <__libc_init_array+0x38>)
 8006078:	4c0d      	ldr	r4, [pc, #52]	; (80060b0 <__libc_init_array+0x3c>)
 800607a:	1b64      	subs	r4, r4, r5
 800607c:	10a4      	asrs	r4, r4, #2
 800607e:	2600      	movs	r6, #0
 8006080:	42a6      	cmp	r6, r4
 8006082:	d109      	bne.n	8006098 <__libc_init_array+0x24>
 8006084:	4d0b      	ldr	r5, [pc, #44]	; (80060b4 <__libc_init_array+0x40>)
 8006086:	4c0c      	ldr	r4, [pc, #48]	; (80060b8 <__libc_init_array+0x44>)
 8006088:	f002 f894 	bl	80081b4 <_init>
 800608c:	1b64      	subs	r4, r4, r5
 800608e:	10a4      	asrs	r4, r4, #2
 8006090:	2600      	movs	r6, #0
 8006092:	42a6      	cmp	r6, r4
 8006094:	d105      	bne.n	80060a2 <__libc_init_array+0x2e>
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	f855 3b04 	ldr.w	r3, [r5], #4
 800609c:	4798      	blx	r3
 800609e:	3601      	adds	r6, #1
 80060a0:	e7ee      	b.n	8006080 <__libc_init_array+0xc>
 80060a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a6:	4798      	blx	r3
 80060a8:	3601      	adds	r6, #1
 80060aa:	e7f2      	b.n	8006092 <__libc_init_array+0x1e>
 80060ac:	08008664 	.word	0x08008664
 80060b0:	08008664 	.word	0x08008664
 80060b4:	08008664 	.word	0x08008664
 80060b8:	08008668 	.word	0x08008668

080060bc <__retarget_lock_acquire_recursive>:
 80060bc:	4770      	bx	lr

080060be <__retarget_lock_release_recursive>:
 80060be:	4770      	bx	lr

080060c0 <memcpy>:
 80060c0:	440a      	add	r2, r1
 80060c2:	4291      	cmp	r1, r2
 80060c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060c8:	d100      	bne.n	80060cc <memcpy+0xc>
 80060ca:	4770      	bx	lr
 80060cc:	b510      	push	{r4, lr}
 80060ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d6:	4291      	cmp	r1, r2
 80060d8:	d1f9      	bne.n	80060ce <memcpy+0xe>
 80060da:	bd10      	pop	{r4, pc}

080060dc <quorem>:
 80060dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	6903      	ldr	r3, [r0, #16]
 80060e2:	690c      	ldr	r4, [r1, #16]
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	4607      	mov	r7, r0
 80060e8:	db7e      	blt.n	80061e8 <quorem+0x10c>
 80060ea:	3c01      	subs	r4, #1
 80060ec:	f101 0814 	add.w	r8, r1, #20
 80060f0:	f100 0514 	add.w	r5, r0, #20
 80060f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006102:	3301      	adds	r3, #1
 8006104:	429a      	cmp	r2, r3
 8006106:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800610a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800610e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006112:	d331      	bcc.n	8006178 <quorem+0x9c>
 8006114:	f04f 0e00 	mov.w	lr, #0
 8006118:	4640      	mov	r0, r8
 800611a:	46ac      	mov	ip, r5
 800611c:	46f2      	mov	sl, lr
 800611e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006122:	b293      	uxth	r3, r2
 8006124:	fb06 e303 	mla	r3, r6, r3, lr
 8006128:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800612c:	0c1a      	lsrs	r2, r3, #16
 800612e:	b29b      	uxth	r3, r3
 8006130:	ebaa 0303 	sub.w	r3, sl, r3
 8006134:	f8dc a000 	ldr.w	sl, [ip]
 8006138:	fa13 f38a 	uxtah	r3, r3, sl
 800613c:	fb06 220e 	mla	r2, r6, lr, r2
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	9b00      	ldr	r3, [sp, #0]
 8006144:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006148:	b292      	uxth	r2, r2
 800614a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800614e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006152:	f8bd 3000 	ldrh.w	r3, [sp]
 8006156:	4581      	cmp	r9, r0
 8006158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800615c:	f84c 3b04 	str.w	r3, [ip], #4
 8006160:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006164:	d2db      	bcs.n	800611e <quorem+0x42>
 8006166:	f855 300b 	ldr.w	r3, [r5, fp]
 800616a:	b92b      	cbnz	r3, 8006178 <quorem+0x9c>
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	3b04      	subs	r3, #4
 8006170:	429d      	cmp	r5, r3
 8006172:	461a      	mov	r2, r3
 8006174:	d32c      	bcc.n	80061d0 <quorem+0xf4>
 8006176:	613c      	str	r4, [r7, #16]
 8006178:	4638      	mov	r0, r7
 800617a:	f001 f9a7 	bl	80074cc <__mcmp>
 800617e:	2800      	cmp	r0, #0
 8006180:	db22      	blt.n	80061c8 <quorem+0xec>
 8006182:	3601      	adds	r6, #1
 8006184:	4629      	mov	r1, r5
 8006186:	2000      	movs	r0, #0
 8006188:	f858 2b04 	ldr.w	r2, [r8], #4
 800618c:	f8d1 c000 	ldr.w	ip, [r1]
 8006190:	b293      	uxth	r3, r2
 8006192:	1ac3      	subs	r3, r0, r3
 8006194:	0c12      	lsrs	r2, r2, #16
 8006196:	fa13 f38c 	uxtah	r3, r3, ip
 800619a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800619e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a8:	45c1      	cmp	r9, r8
 80061aa:	f841 3b04 	str.w	r3, [r1], #4
 80061ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061b2:	d2e9      	bcs.n	8006188 <quorem+0xac>
 80061b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061bc:	b922      	cbnz	r2, 80061c8 <quorem+0xec>
 80061be:	3b04      	subs	r3, #4
 80061c0:	429d      	cmp	r5, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	d30a      	bcc.n	80061dc <quorem+0x100>
 80061c6:	613c      	str	r4, [r7, #16]
 80061c8:	4630      	mov	r0, r6
 80061ca:	b003      	add	sp, #12
 80061cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	3b04      	subs	r3, #4
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	d1ce      	bne.n	8006176 <quorem+0x9a>
 80061d8:	3c01      	subs	r4, #1
 80061da:	e7c9      	b.n	8006170 <quorem+0x94>
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	3b04      	subs	r3, #4
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d1f0      	bne.n	80061c6 <quorem+0xea>
 80061e4:	3c01      	subs	r4, #1
 80061e6:	e7eb      	b.n	80061c0 <quorem+0xe4>
 80061e8:	2000      	movs	r0, #0
 80061ea:	e7ee      	b.n	80061ca <quorem+0xee>
 80061ec:	0000      	movs	r0, r0
	...

080061f0 <_dtoa_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ed2d 8b04 	vpush	{d8-d9}
 80061f8:	69c5      	ldr	r5, [r0, #28]
 80061fa:	b093      	sub	sp, #76	; 0x4c
 80061fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006200:	ec57 6b10 	vmov	r6, r7, d0
 8006204:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006208:	9107      	str	r1, [sp, #28]
 800620a:	4604      	mov	r4, r0
 800620c:	920a      	str	r2, [sp, #40]	; 0x28
 800620e:	930d      	str	r3, [sp, #52]	; 0x34
 8006210:	b975      	cbnz	r5, 8006230 <_dtoa_r+0x40>
 8006212:	2010      	movs	r0, #16
 8006214:	f000 fe2a 	bl	8006e6c <malloc>
 8006218:	4602      	mov	r2, r0
 800621a:	61e0      	str	r0, [r4, #28]
 800621c:	b920      	cbnz	r0, 8006228 <_dtoa_r+0x38>
 800621e:	4bae      	ldr	r3, [pc, #696]	; (80064d8 <_dtoa_r+0x2e8>)
 8006220:	21ef      	movs	r1, #239	; 0xef
 8006222:	48ae      	ldr	r0, [pc, #696]	; (80064dc <_dtoa_r+0x2ec>)
 8006224:	f001 fc82 	bl	8007b2c <__assert_func>
 8006228:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800622c:	6005      	str	r5, [r0, #0]
 800622e:	60c5      	str	r5, [r0, #12]
 8006230:	69e3      	ldr	r3, [r4, #28]
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	b151      	cbz	r1, 800624c <_dtoa_r+0x5c>
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	604a      	str	r2, [r1, #4]
 800623a:	2301      	movs	r3, #1
 800623c:	4093      	lsls	r3, r2
 800623e:	608b      	str	r3, [r1, #8]
 8006240:	4620      	mov	r0, r4
 8006242:	f000 ff07 	bl	8007054 <_Bfree>
 8006246:	69e3      	ldr	r3, [r4, #28]
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	1e3b      	subs	r3, r7, #0
 800624e:	bfbb      	ittet	lt
 8006250:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006254:	9303      	strlt	r3, [sp, #12]
 8006256:	2300      	movge	r3, #0
 8006258:	2201      	movlt	r2, #1
 800625a:	bfac      	ite	ge
 800625c:	f8c8 3000 	strge.w	r3, [r8]
 8006260:	f8c8 2000 	strlt.w	r2, [r8]
 8006264:	4b9e      	ldr	r3, [pc, #632]	; (80064e0 <_dtoa_r+0x2f0>)
 8006266:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800626a:	ea33 0308 	bics.w	r3, r3, r8
 800626e:	d11b      	bne.n	80062a8 <_dtoa_r+0xb8>
 8006270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006272:	f242 730f 	movw	r3, #9999	; 0x270f
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800627c:	4333      	orrs	r3, r6
 800627e:	f000 8593 	beq.w	8006da8 <_dtoa_r+0xbb8>
 8006282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006284:	b963      	cbnz	r3, 80062a0 <_dtoa_r+0xb0>
 8006286:	4b97      	ldr	r3, [pc, #604]	; (80064e4 <_dtoa_r+0x2f4>)
 8006288:	e027      	b.n	80062da <_dtoa_r+0xea>
 800628a:	4b97      	ldr	r3, [pc, #604]	; (80064e8 <_dtoa_r+0x2f8>)
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	3308      	adds	r3, #8
 8006290:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	9800      	ldr	r0, [sp, #0]
 8006296:	b013      	add	sp, #76	; 0x4c
 8006298:	ecbd 8b04 	vpop	{d8-d9}
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a0:	4b90      	ldr	r3, [pc, #576]	; (80064e4 <_dtoa_r+0x2f4>)
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	3303      	adds	r3, #3
 80062a6:	e7f3      	b.n	8006290 <_dtoa_r+0xa0>
 80062a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	ec51 0b17 	vmov	r0, r1, d7
 80062b2:	eeb0 8a47 	vmov.f32	s16, s14
 80062b6:	eef0 8a67 	vmov.f32	s17, s15
 80062ba:	2300      	movs	r3, #0
 80062bc:	f7fa fc24 	bl	8000b08 <__aeabi_dcmpeq>
 80062c0:	4681      	mov	r9, r0
 80062c2:	b160      	cbz	r0, 80062de <_dtoa_r+0xee>
 80062c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062c6:	2301      	movs	r3, #1
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8568 	beq.w	8006da2 <_dtoa_r+0xbb2>
 80062d2:	4b86      	ldr	r3, [pc, #536]	; (80064ec <_dtoa_r+0x2fc>)
 80062d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	3b01      	subs	r3, #1
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	e7da      	b.n	8006294 <_dtoa_r+0xa4>
 80062de:	aa10      	add	r2, sp, #64	; 0x40
 80062e0:	a911      	add	r1, sp, #68	; 0x44
 80062e2:	4620      	mov	r0, r4
 80062e4:	eeb0 0a48 	vmov.f32	s0, s16
 80062e8:	eef0 0a68 	vmov.f32	s1, s17
 80062ec:	f001 f994 	bl	8007618 <__d2b>
 80062f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062f4:	4682      	mov	sl, r0
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	d07f      	beq.n	80063fa <_dtoa_r+0x20a>
 80062fa:	ee18 3a90 	vmov	r3, s17
 80062fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006302:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006306:	ec51 0b18 	vmov	r0, r1, d8
 800630a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800630e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006312:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006316:	4619      	mov	r1, r3
 8006318:	2200      	movs	r2, #0
 800631a:	4b75      	ldr	r3, [pc, #468]	; (80064f0 <_dtoa_r+0x300>)
 800631c:	f7f9 ffd4 	bl	80002c8 <__aeabi_dsub>
 8006320:	a367      	add	r3, pc, #412	; (adr r3, 80064c0 <_dtoa_r+0x2d0>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f7fa f987 	bl	8000638 <__aeabi_dmul>
 800632a:	a367      	add	r3, pc, #412	; (adr r3, 80064c8 <_dtoa_r+0x2d8>)
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f7f9 ffcc 	bl	80002cc <__adddf3>
 8006334:	4606      	mov	r6, r0
 8006336:	4628      	mov	r0, r5
 8006338:	460f      	mov	r7, r1
 800633a:	f7fa f913 	bl	8000564 <__aeabi_i2d>
 800633e:	a364      	add	r3, pc, #400	; (adr r3, 80064d0 <_dtoa_r+0x2e0>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f7fa f978 	bl	8000638 <__aeabi_dmul>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4630      	mov	r0, r6
 800634e:	4639      	mov	r1, r7
 8006350:	f7f9 ffbc 	bl	80002cc <__adddf3>
 8006354:	4606      	mov	r6, r0
 8006356:	460f      	mov	r7, r1
 8006358:	f7fa fc1e 	bl	8000b98 <__aeabi_d2iz>
 800635c:	2200      	movs	r2, #0
 800635e:	4683      	mov	fp, r0
 8006360:	2300      	movs	r3, #0
 8006362:	4630      	mov	r0, r6
 8006364:	4639      	mov	r1, r7
 8006366:	f7fa fbd9 	bl	8000b1c <__aeabi_dcmplt>
 800636a:	b148      	cbz	r0, 8006380 <_dtoa_r+0x190>
 800636c:	4658      	mov	r0, fp
 800636e:	f7fa f8f9 	bl	8000564 <__aeabi_i2d>
 8006372:	4632      	mov	r2, r6
 8006374:	463b      	mov	r3, r7
 8006376:	f7fa fbc7 	bl	8000b08 <__aeabi_dcmpeq>
 800637a:	b908      	cbnz	r0, 8006380 <_dtoa_r+0x190>
 800637c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006380:	f1bb 0f16 	cmp.w	fp, #22
 8006384:	d857      	bhi.n	8006436 <_dtoa_r+0x246>
 8006386:	4b5b      	ldr	r3, [pc, #364]	; (80064f4 <_dtoa_r+0x304>)
 8006388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	ec51 0b18 	vmov	r0, r1, d8
 8006394:	f7fa fbc2 	bl	8000b1c <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	d04e      	beq.n	800643a <_dtoa_r+0x24a>
 800639c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80063a0:	2300      	movs	r3, #0
 80063a2:	930c      	str	r3, [sp, #48]	; 0x30
 80063a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063a6:	1b5b      	subs	r3, r3, r5
 80063a8:	1e5a      	subs	r2, r3, #1
 80063aa:	bf45      	ittet	mi
 80063ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80063b0:	9305      	strmi	r3, [sp, #20]
 80063b2:	2300      	movpl	r3, #0
 80063b4:	2300      	movmi	r3, #0
 80063b6:	9206      	str	r2, [sp, #24]
 80063b8:	bf54      	ite	pl
 80063ba:	9305      	strpl	r3, [sp, #20]
 80063bc:	9306      	strmi	r3, [sp, #24]
 80063be:	f1bb 0f00 	cmp.w	fp, #0
 80063c2:	db3c      	blt.n	800643e <_dtoa_r+0x24e>
 80063c4:	9b06      	ldr	r3, [sp, #24]
 80063c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80063ca:	445b      	add	r3, fp
 80063cc:	9306      	str	r3, [sp, #24]
 80063ce:	2300      	movs	r3, #0
 80063d0:	9308      	str	r3, [sp, #32]
 80063d2:	9b07      	ldr	r3, [sp, #28]
 80063d4:	2b09      	cmp	r3, #9
 80063d6:	d868      	bhi.n	80064aa <_dtoa_r+0x2ba>
 80063d8:	2b05      	cmp	r3, #5
 80063da:	bfc4      	itt	gt
 80063dc:	3b04      	subgt	r3, #4
 80063de:	9307      	strgt	r3, [sp, #28]
 80063e0:	9b07      	ldr	r3, [sp, #28]
 80063e2:	f1a3 0302 	sub.w	r3, r3, #2
 80063e6:	bfcc      	ite	gt
 80063e8:	2500      	movgt	r5, #0
 80063ea:	2501      	movle	r5, #1
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	f200 8085 	bhi.w	80064fc <_dtoa_r+0x30c>
 80063f2:	e8df f003 	tbb	[pc, r3]
 80063f6:	3b2e      	.short	0x3b2e
 80063f8:	5839      	.short	0x5839
 80063fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80063fe:	441d      	add	r5, r3
 8006400:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006404:	2b20      	cmp	r3, #32
 8006406:	bfc1      	itttt	gt
 8006408:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800640c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006410:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006414:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006418:	bfd6      	itet	le
 800641a:	f1c3 0320 	rsble	r3, r3, #32
 800641e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006422:	fa06 f003 	lslle.w	r0, r6, r3
 8006426:	f7fa f88d 	bl	8000544 <__aeabi_ui2d>
 800642a:	2201      	movs	r2, #1
 800642c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006430:	3d01      	subs	r5, #1
 8006432:	920e      	str	r2, [sp, #56]	; 0x38
 8006434:	e76f      	b.n	8006316 <_dtoa_r+0x126>
 8006436:	2301      	movs	r3, #1
 8006438:	e7b3      	b.n	80063a2 <_dtoa_r+0x1b2>
 800643a:	900c      	str	r0, [sp, #48]	; 0x30
 800643c:	e7b2      	b.n	80063a4 <_dtoa_r+0x1b4>
 800643e:	9b05      	ldr	r3, [sp, #20]
 8006440:	eba3 030b 	sub.w	r3, r3, fp
 8006444:	9305      	str	r3, [sp, #20]
 8006446:	f1cb 0300 	rsb	r3, fp, #0
 800644a:	9308      	str	r3, [sp, #32]
 800644c:	2300      	movs	r3, #0
 800644e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006450:	e7bf      	b.n	80063d2 <_dtoa_r+0x1e2>
 8006452:	2300      	movs	r3, #0
 8006454:	9309      	str	r3, [sp, #36]	; 0x24
 8006456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	dc52      	bgt.n	8006502 <_dtoa_r+0x312>
 800645c:	2301      	movs	r3, #1
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	9304      	str	r3, [sp, #16]
 8006462:	461a      	mov	r2, r3
 8006464:	920a      	str	r2, [sp, #40]	; 0x28
 8006466:	e00b      	b.n	8006480 <_dtoa_r+0x290>
 8006468:	2301      	movs	r3, #1
 800646a:	e7f3      	b.n	8006454 <_dtoa_r+0x264>
 800646c:	2300      	movs	r3, #0
 800646e:	9309      	str	r3, [sp, #36]	; 0x24
 8006470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006472:	445b      	add	r3, fp
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	3301      	adds	r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	bfb8      	it	lt
 800647e:	2301      	movlt	r3, #1
 8006480:	69e0      	ldr	r0, [r4, #28]
 8006482:	2100      	movs	r1, #0
 8006484:	2204      	movs	r2, #4
 8006486:	f102 0614 	add.w	r6, r2, #20
 800648a:	429e      	cmp	r6, r3
 800648c:	d93d      	bls.n	800650a <_dtoa_r+0x31a>
 800648e:	6041      	str	r1, [r0, #4]
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fd9f 	bl	8006fd4 <_Balloc>
 8006496:	9000      	str	r0, [sp, #0]
 8006498:	2800      	cmp	r0, #0
 800649a:	d139      	bne.n	8006510 <_dtoa_r+0x320>
 800649c:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <_dtoa_r+0x308>)
 800649e:	4602      	mov	r2, r0
 80064a0:	f240 11af 	movw	r1, #431	; 0x1af
 80064a4:	e6bd      	b.n	8006222 <_dtoa_r+0x32>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e7e1      	b.n	800646e <_dtoa_r+0x27e>
 80064aa:	2501      	movs	r5, #1
 80064ac:	2300      	movs	r3, #0
 80064ae:	9307      	str	r3, [sp, #28]
 80064b0:	9509      	str	r5, [sp, #36]	; 0x24
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2312      	movs	r3, #18
 80064be:	e7d1      	b.n	8006464 <_dtoa_r+0x274>
 80064c0:	636f4361 	.word	0x636f4361
 80064c4:	3fd287a7 	.word	0x3fd287a7
 80064c8:	8b60c8b3 	.word	0x8b60c8b3
 80064cc:	3fc68a28 	.word	0x3fc68a28
 80064d0:	509f79fb 	.word	0x509f79fb
 80064d4:	3fd34413 	.word	0x3fd34413
 80064d8:	08008329 	.word	0x08008329
 80064dc:	08008340 	.word	0x08008340
 80064e0:	7ff00000 	.word	0x7ff00000
 80064e4:	08008325 	.word	0x08008325
 80064e8:	0800831c 	.word	0x0800831c
 80064ec:	080082f9 	.word	0x080082f9
 80064f0:	3ff80000 	.word	0x3ff80000
 80064f4:	08008430 	.word	0x08008430
 80064f8:	08008398 	.word	0x08008398
 80064fc:	2301      	movs	r3, #1
 80064fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006500:	e7d7      	b.n	80064b2 <_dtoa_r+0x2c2>
 8006502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	e7ba      	b.n	8006480 <_dtoa_r+0x290>
 800650a:	3101      	adds	r1, #1
 800650c:	0052      	lsls	r2, r2, #1
 800650e:	e7ba      	b.n	8006486 <_dtoa_r+0x296>
 8006510:	69e3      	ldr	r3, [r4, #28]
 8006512:	9a00      	ldr	r2, [sp, #0]
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	9b04      	ldr	r3, [sp, #16]
 8006518:	2b0e      	cmp	r3, #14
 800651a:	f200 80a8 	bhi.w	800666e <_dtoa_r+0x47e>
 800651e:	2d00      	cmp	r5, #0
 8006520:	f000 80a5 	beq.w	800666e <_dtoa_r+0x47e>
 8006524:	f1bb 0f00 	cmp.w	fp, #0
 8006528:	dd38      	ble.n	800659c <_dtoa_r+0x3ac>
 800652a:	4bc0      	ldr	r3, [pc, #768]	; (800682c <_dtoa_r+0x63c>)
 800652c:	f00b 020f 	and.w	r2, fp, #15
 8006530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006534:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006538:	e9d3 6700 	ldrd	r6, r7, [r3]
 800653c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006540:	d019      	beq.n	8006576 <_dtoa_r+0x386>
 8006542:	4bbb      	ldr	r3, [pc, #748]	; (8006830 <_dtoa_r+0x640>)
 8006544:	ec51 0b18 	vmov	r0, r1, d8
 8006548:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800654c:	f7fa f99e 	bl	800088c <__aeabi_ddiv>
 8006550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006554:	f008 080f 	and.w	r8, r8, #15
 8006558:	2503      	movs	r5, #3
 800655a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006830 <_dtoa_r+0x640>
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	d10a      	bne.n	800657a <_dtoa_r+0x38a>
 8006564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006568:	4632      	mov	r2, r6
 800656a:	463b      	mov	r3, r7
 800656c:	f7fa f98e 	bl	800088c <__aeabi_ddiv>
 8006570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006574:	e02b      	b.n	80065ce <_dtoa_r+0x3de>
 8006576:	2502      	movs	r5, #2
 8006578:	e7ef      	b.n	800655a <_dtoa_r+0x36a>
 800657a:	f018 0f01 	tst.w	r8, #1
 800657e:	d008      	beq.n	8006592 <_dtoa_r+0x3a2>
 8006580:	4630      	mov	r0, r6
 8006582:	4639      	mov	r1, r7
 8006584:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006588:	f7fa f856 	bl	8000638 <__aeabi_dmul>
 800658c:	3501      	adds	r5, #1
 800658e:	4606      	mov	r6, r0
 8006590:	460f      	mov	r7, r1
 8006592:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006596:	f109 0908 	add.w	r9, r9, #8
 800659a:	e7e0      	b.n	800655e <_dtoa_r+0x36e>
 800659c:	f000 809f 	beq.w	80066de <_dtoa_r+0x4ee>
 80065a0:	f1cb 0600 	rsb	r6, fp, #0
 80065a4:	4ba1      	ldr	r3, [pc, #644]	; (800682c <_dtoa_r+0x63c>)
 80065a6:	4fa2      	ldr	r7, [pc, #648]	; (8006830 <_dtoa_r+0x640>)
 80065a8:	f006 020f 	and.w	r2, r6, #15
 80065ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	ec51 0b18 	vmov	r0, r1, d8
 80065b8:	f7fa f83e 	bl	8000638 <__aeabi_dmul>
 80065bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c0:	1136      	asrs	r6, r6, #4
 80065c2:	2300      	movs	r3, #0
 80065c4:	2502      	movs	r5, #2
 80065c6:	2e00      	cmp	r6, #0
 80065c8:	d17e      	bne.n	80066c8 <_dtoa_r+0x4d8>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1d0      	bne.n	8006570 <_dtoa_r+0x380>
 80065ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8084 	beq.w	80066e2 <_dtoa_r+0x4f2>
 80065da:	4b96      	ldr	r3, [pc, #600]	; (8006834 <_dtoa_r+0x644>)
 80065dc:	2200      	movs	r2, #0
 80065de:	4640      	mov	r0, r8
 80065e0:	4649      	mov	r1, r9
 80065e2:	f7fa fa9b 	bl	8000b1c <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d07b      	beq.n	80066e2 <_dtoa_r+0x4f2>
 80065ea:	9b04      	ldr	r3, [sp, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d078      	beq.n	80066e2 <_dtoa_r+0x4f2>
 80065f0:	9b01      	ldr	r3, [sp, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dd39      	ble.n	800666a <_dtoa_r+0x47a>
 80065f6:	4b90      	ldr	r3, [pc, #576]	; (8006838 <_dtoa_r+0x648>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	4640      	mov	r0, r8
 80065fc:	4649      	mov	r1, r9
 80065fe:	f7fa f81b 	bl	8000638 <__aeabi_dmul>
 8006602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006606:	9e01      	ldr	r6, [sp, #4]
 8006608:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800660c:	3501      	adds	r5, #1
 800660e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006612:	4628      	mov	r0, r5
 8006614:	f7f9 ffa6 	bl	8000564 <__aeabi_i2d>
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	f7fa f80c 	bl	8000638 <__aeabi_dmul>
 8006620:	4b86      	ldr	r3, [pc, #536]	; (800683c <_dtoa_r+0x64c>)
 8006622:	2200      	movs	r2, #0
 8006624:	f7f9 fe52 	bl	80002cc <__adddf3>
 8006628:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800662c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006630:	9303      	str	r3, [sp, #12]
 8006632:	2e00      	cmp	r6, #0
 8006634:	d158      	bne.n	80066e8 <_dtoa_r+0x4f8>
 8006636:	4b82      	ldr	r3, [pc, #520]	; (8006840 <_dtoa_r+0x650>)
 8006638:	2200      	movs	r2, #0
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	f7f9 fe43 	bl	80002c8 <__aeabi_dsub>
 8006642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006646:	4680      	mov	r8, r0
 8006648:	4689      	mov	r9, r1
 800664a:	f7fa fa85 	bl	8000b58 <__aeabi_dcmpgt>
 800664e:	2800      	cmp	r0, #0
 8006650:	f040 8296 	bne.w	8006b80 <_dtoa_r+0x990>
 8006654:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006658:	4640      	mov	r0, r8
 800665a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa fa5c 	bl	8000b1c <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	f040 8289 	bne.w	8006b7c <_dtoa_r+0x98c>
 800666a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800666e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006670:	2b00      	cmp	r3, #0
 8006672:	f2c0 814e 	blt.w	8006912 <_dtoa_r+0x722>
 8006676:	f1bb 0f0e 	cmp.w	fp, #14
 800667a:	f300 814a 	bgt.w	8006912 <_dtoa_r+0x722>
 800667e:	4b6b      	ldr	r3, [pc, #428]	; (800682c <_dtoa_r+0x63c>)
 8006680:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668a:	2b00      	cmp	r3, #0
 800668c:	f280 80dc 	bge.w	8006848 <_dtoa_r+0x658>
 8006690:	9b04      	ldr	r3, [sp, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f300 80d8 	bgt.w	8006848 <_dtoa_r+0x658>
 8006698:	f040 826f 	bne.w	8006b7a <_dtoa_r+0x98a>
 800669c:	4b68      	ldr	r3, [pc, #416]	; (8006840 <_dtoa_r+0x650>)
 800669e:	2200      	movs	r2, #0
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7f9 ffc8 	bl	8000638 <__aeabi_dmul>
 80066a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066ac:	f7fa fa4a 	bl	8000b44 <__aeabi_dcmpge>
 80066b0:	9e04      	ldr	r6, [sp, #16]
 80066b2:	4637      	mov	r7, r6
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f040 8245 	bne.w	8006b44 <_dtoa_r+0x954>
 80066ba:	9d00      	ldr	r5, [sp, #0]
 80066bc:	2331      	movs	r3, #49	; 0x31
 80066be:	f805 3b01 	strb.w	r3, [r5], #1
 80066c2:	f10b 0b01 	add.w	fp, fp, #1
 80066c6:	e241      	b.n	8006b4c <_dtoa_r+0x95c>
 80066c8:	07f2      	lsls	r2, r6, #31
 80066ca:	d505      	bpl.n	80066d8 <_dtoa_r+0x4e8>
 80066cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d0:	f7f9 ffb2 	bl	8000638 <__aeabi_dmul>
 80066d4:	3501      	adds	r5, #1
 80066d6:	2301      	movs	r3, #1
 80066d8:	1076      	asrs	r6, r6, #1
 80066da:	3708      	adds	r7, #8
 80066dc:	e773      	b.n	80065c6 <_dtoa_r+0x3d6>
 80066de:	2502      	movs	r5, #2
 80066e0:	e775      	b.n	80065ce <_dtoa_r+0x3de>
 80066e2:	9e04      	ldr	r6, [sp, #16]
 80066e4:	465f      	mov	r7, fp
 80066e6:	e792      	b.n	800660e <_dtoa_r+0x41e>
 80066e8:	9900      	ldr	r1, [sp, #0]
 80066ea:	4b50      	ldr	r3, [pc, #320]	; (800682c <_dtoa_r+0x63c>)
 80066ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066f0:	4431      	add	r1, r6
 80066f2:	9102      	str	r1, [sp, #8]
 80066f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f6:	eeb0 9a47 	vmov.f32	s18, s14
 80066fa:	eef0 9a67 	vmov.f32	s19, s15
 80066fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006706:	2900      	cmp	r1, #0
 8006708:	d044      	beq.n	8006794 <_dtoa_r+0x5a4>
 800670a:	494e      	ldr	r1, [pc, #312]	; (8006844 <_dtoa_r+0x654>)
 800670c:	2000      	movs	r0, #0
 800670e:	f7fa f8bd 	bl	800088c <__aeabi_ddiv>
 8006712:	ec53 2b19 	vmov	r2, r3, d9
 8006716:	f7f9 fdd7 	bl	80002c8 <__aeabi_dsub>
 800671a:	9d00      	ldr	r5, [sp, #0]
 800671c:	ec41 0b19 	vmov	d9, r0, r1
 8006720:	4649      	mov	r1, r9
 8006722:	4640      	mov	r0, r8
 8006724:	f7fa fa38 	bl	8000b98 <__aeabi_d2iz>
 8006728:	4606      	mov	r6, r0
 800672a:	f7f9 ff1b 	bl	8000564 <__aeabi_i2d>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4640      	mov	r0, r8
 8006734:	4649      	mov	r1, r9
 8006736:	f7f9 fdc7 	bl	80002c8 <__aeabi_dsub>
 800673a:	3630      	adds	r6, #48	; 0x30
 800673c:	f805 6b01 	strb.w	r6, [r5], #1
 8006740:	ec53 2b19 	vmov	r2, r3, d9
 8006744:	4680      	mov	r8, r0
 8006746:	4689      	mov	r9, r1
 8006748:	f7fa f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800674c:	2800      	cmp	r0, #0
 800674e:	d164      	bne.n	800681a <_dtoa_r+0x62a>
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	4937      	ldr	r1, [pc, #220]	; (8006834 <_dtoa_r+0x644>)
 8006756:	2000      	movs	r0, #0
 8006758:	f7f9 fdb6 	bl	80002c8 <__aeabi_dsub>
 800675c:	ec53 2b19 	vmov	r2, r3, d9
 8006760:	f7fa f9dc 	bl	8000b1c <__aeabi_dcmplt>
 8006764:	2800      	cmp	r0, #0
 8006766:	f040 80b6 	bne.w	80068d6 <_dtoa_r+0x6e6>
 800676a:	9b02      	ldr	r3, [sp, #8]
 800676c:	429d      	cmp	r5, r3
 800676e:	f43f af7c 	beq.w	800666a <_dtoa_r+0x47a>
 8006772:	4b31      	ldr	r3, [pc, #196]	; (8006838 <_dtoa_r+0x648>)
 8006774:	ec51 0b19 	vmov	r0, r1, d9
 8006778:	2200      	movs	r2, #0
 800677a:	f7f9 ff5d 	bl	8000638 <__aeabi_dmul>
 800677e:	4b2e      	ldr	r3, [pc, #184]	; (8006838 <_dtoa_r+0x648>)
 8006780:	ec41 0b19 	vmov	d9, r0, r1
 8006784:	2200      	movs	r2, #0
 8006786:	4640      	mov	r0, r8
 8006788:	4649      	mov	r1, r9
 800678a:	f7f9 ff55 	bl	8000638 <__aeabi_dmul>
 800678e:	4680      	mov	r8, r0
 8006790:	4689      	mov	r9, r1
 8006792:	e7c5      	b.n	8006720 <_dtoa_r+0x530>
 8006794:	ec51 0b17 	vmov	r0, r1, d7
 8006798:	f7f9 ff4e 	bl	8000638 <__aeabi_dmul>
 800679c:	9b02      	ldr	r3, [sp, #8]
 800679e:	9d00      	ldr	r5, [sp, #0]
 80067a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80067a2:	ec41 0b19 	vmov	d9, r0, r1
 80067a6:	4649      	mov	r1, r9
 80067a8:	4640      	mov	r0, r8
 80067aa:	f7fa f9f5 	bl	8000b98 <__aeabi_d2iz>
 80067ae:	4606      	mov	r6, r0
 80067b0:	f7f9 fed8 	bl	8000564 <__aeabi_i2d>
 80067b4:	3630      	adds	r6, #48	; 0x30
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4640      	mov	r0, r8
 80067bc:	4649      	mov	r1, r9
 80067be:	f7f9 fd83 	bl	80002c8 <__aeabi_dsub>
 80067c2:	f805 6b01 	strb.w	r6, [r5], #1
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	429d      	cmp	r5, r3
 80067ca:	4680      	mov	r8, r0
 80067cc:	4689      	mov	r9, r1
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	d124      	bne.n	800681e <_dtoa_r+0x62e>
 80067d4:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <_dtoa_r+0x654>)
 80067d6:	ec51 0b19 	vmov	r0, r1, d9
 80067da:	f7f9 fd77 	bl	80002cc <__adddf3>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4640      	mov	r0, r8
 80067e4:	4649      	mov	r1, r9
 80067e6:	f7fa f9b7 	bl	8000b58 <__aeabi_dcmpgt>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d173      	bne.n	80068d6 <_dtoa_r+0x6e6>
 80067ee:	ec53 2b19 	vmov	r2, r3, d9
 80067f2:	4914      	ldr	r1, [pc, #80]	; (8006844 <_dtoa_r+0x654>)
 80067f4:	2000      	movs	r0, #0
 80067f6:	f7f9 fd67 	bl	80002c8 <__aeabi_dsub>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4640      	mov	r0, r8
 8006800:	4649      	mov	r1, r9
 8006802:	f7fa f98b 	bl	8000b1c <__aeabi_dcmplt>
 8006806:	2800      	cmp	r0, #0
 8006808:	f43f af2f 	beq.w	800666a <_dtoa_r+0x47a>
 800680c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800680e:	1e6b      	subs	r3, r5, #1
 8006810:	930f      	str	r3, [sp, #60]	; 0x3c
 8006812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006816:	2b30      	cmp	r3, #48	; 0x30
 8006818:	d0f8      	beq.n	800680c <_dtoa_r+0x61c>
 800681a:	46bb      	mov	fp, r7
 800681c:	e04a      	b.n	80068b4 <_dtoa_r+0x6c4>
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <_dtoa_r+0x648>)
 8006820:	f7f9 ff0a 	bl	8000638 <__aeabi_dmul>
 8006824:	4680      	mov	r8, r0
 8006826:	4689      	mov	r9, r1
 8006828:	e7bd      	b.n	80067a6 <_dtoa_r+0x5b6>
 800682a:	bf00      	nop
 800682c:	08008430 	.word	0x08008430
 8006830:	08008408 	.word	0x08008408
 8006834:	3ff00000 	.word	0x3ff00000
 8006838:	40240000 	.word	0x40240000
 800683c:	401c0000 	.word	0x401c0000
 8006840:	40140000 	.word	0x40140000
 8006844:	3fe00000 	.word	0x3fe00000
 8006848:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800684c:	9d00      	ldr	r5, [sp, #0]
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	4630      	mov	r0, r6
 8006854:	4639      	mov	r1, r7
 8006856:	f7fa f819 	bl	800088c <__aeabi_ddiv>
 800685a:	f7fa f99d 	bl	8000b98 <__aeabi_d2iz>
 800685e:	9001      	str	r0, [sp, #4]
 8006860:	f7f9 fe80 	bl	8000564 <__aeabi_i2d>
 8006864:	4642      	mov	r2, r8
 8006866:	464b      	mov	r3, r9
 8006868:	f7f9 fee6 	bl	8000638 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fd28 	bl	80002c8 <__aeabi_dsub>
 8006878:	9e01      	ldr	r6, [sp, #4]
 800687a:	9f04      	ldr	r7, [sp, #16]
 800687c:	3630      	adds	r6, #48	; 0x30
 800687e:	f805 6b01 	strb.w	r6, [r5], #1
 8006882:	9e00      	ldr	r6, [sp, #0]
 8006884:	1bae      	subs	r6, r5, r6
 8006886:	42b7      	cmp	r7, r6
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	d134      	bne.n	80068f8 <_dtoa_r+0x708>
 800688e:	f7f9 fd1d 	bl	80002cc <__adddf3>
 8006892:	4642      	mov	r2, r8
 8006894:	464b      	mov	r3, r9
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	f7fa f95d 	bl	8000b58 <__aeabi_dcmpgt>
 800689e:	b9c8      	cbnz	r0, 80068d4 <_dtoa_r+0x6e4>
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	4630      	mov	r0, r6
 80068a6:	4639      	mov	r1, r7
 80068a8:	f7fa f92e 	bl	8000b08 <__aeabi_dcmpeq>
 80068ac:	b110      	cbz	r0, 80068b4 <_dtoa_r+0x6c4>
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	07db      	lsls	r3, r3, #31
 80068b2:	d40f      	bmi.n	80068d4 <_dtoa_r+0x6e4>
 80068b4:	4651      	mov	r1, sl
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 fbcc 	bl	8007054 <_Bfree>
 80068bc:	2300      	movs	r3, #0
 80068be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068c0:	702b      	strb	r3, [r5, #0]
 80068c2:	f10b 0301 	add.w	r3, fp, #1
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f43f ace2 	beq.w	8006294 <_dtoa_r+0xa4>
 80068d0:	601d      	str	r5, [r3, #0]
 80068d2:	e4df      	b.n	8006294 <_dtoa_r+0xa4>
 80068d4:	465f      	mov	r7, fp
 80068d6:	462b      	mov	r3, r5
 80068d8:	461d      	mov	r5, r3
 80068da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068de:	2a39      	cmp	r2, #57	; 0x39
 80068e0:	d106      	bne.n	80068f0 <_dtoa_r+0x700>
 80068e2:	9a00      	ldr	r2, [sp, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d1f7      	bne.n	80068d8 <_dtoa_r+0x6e8>
 80068e8:	9900      	ldr	r1, [sp, #0]
 80068ea:	2230      	movs	r2, #48	; 0x30
 80068ec:	3701      	adds	r7, #1
 80068ee:	700a      	strb	r2, [r1, #0]
 80068f0:	781a      	ldrb	r2, [r3, #0]
 80068f2:	3201      	adds	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e790      	b.n	800681a <_dtoa_r+0x62a>
 80068f8:	4ba3      	ldr	r3, [pc, #652]	; (8006b88 <_dtoa_r+0x998>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	f7f9 fe9c 	bl	8000638 <__aeabi_dmul>
 8006900:	2200      	movs	r2, #0
 8006902:	2300      	movs	r3, #0
 8006904:	4606      	mov	r6, r0
 8006906:	460f      	mov	r7, r1
 8006908:	f7fa f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800690c:	2800      	cmp	r0, #0
 800690e:	d09e      	beq.n	800684e <_dtoa_r+0x65e>
 8006910:	e7d0      	b.n	80068b4 <_dtoa_r+0x6c4>
 8006912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006914:	2a00      	cmp	r2, #0
 8006916:	f000 80ca 	beq.w	8006aae <_dtoa_r+0x8be>
 800691a:	9a07      	ldr	r2, [sp, #28]
 800691c:	2a01      	cmp	r2, #1
 800691e:	f300 80ad 	bgt.w	8006a7c <_dtoa_r+0x88c>
 8006922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006924:	2a00      	cmp	r2, #0
 8006926:	f000 80a5 	beq.w	8006a74 <_dtoa_r+0x884>
 800692a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800692e:	9e08      	ldr	r6, [sp, #32]
 8006930:	9d05      	ldr	r5, [sp, #20]
 8006932:	9a05      	ldr	r2, [sp, #20]
 8006934:	441a      	add	r2, r3
 8006936:	9205      	str	r2, [sp, #20]
 8006938:	9a06      	ldr	r2, [sp, #24]
 800693a:	2101      	movs	r1, #1
 800693c:	441a      	add	r2, r3
 800693e:	4620      	mov	r0, r4
 8006940:	9206      	str	r2, [sp, #24]
 8006942:	f000 fc3d 	bl	80071c0 <__i2b>
 8006946:	4607      	mov	r7, r0
 8006948:	b165      	cbz	r5, 8006964 <_dtoa_r+0x774>
 800694a:	9b06      	ldr	r3, [sp, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd09      	ble.n	8006964 <_dtoa_r+0x774>
 8006950:	42ab      	cmp	r3, r5
 8006952:	9a05      	ldr	r2, [sp, #20]
 8006954:	bfa8      	it	ge
 8006956:	462b      	movge	r3, r5
 8006958:	1ad2      	subs	r2, r2, r3
 800695a:	9205      	str	r2, [sp, #20]
 800695c:	9a06      	ldr	r2, [sp, #24]
 800695e:	1aed      	subs	r5, r5, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	9306      	str	r3, [sp, #24]
 8006964:	9b08      	ldr	r3, [sp, #32]
 8006966:	b1f3      	cbz	r3, 80069a6 <_dtoa_r+0x7b6>
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80a3 	beq.w	8006ab6 <_dtoa_r+0x8c6>
 8006970:	2e00      	cmp	r6, #0
 8006972:	dd10      	ble.n	8006996 <_dtoa_r+0x7a6>
 8006974:	4639      	mov	r1, r7
 8006976:	4632      	mov	r2, r6
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fce1 	bl	8007340 <__pow5mult>
 800697e:	4652      	mov	r2, sl
 8006980:	4601      	mov	r1, r0
 8006982:	4607      	mov	r7, r0
 8006984:	4620      	mov	r0, r4
 8006986:	f000 fc31 	bl	80071ec <__multiply>
 800698a:	4651      	mov	r1, sl
 800698c:	4680      	mov	r8, r0
 800698e:	4620      	mov	r0, r4
 8006990:	f000 fb60 	bl	8007054 <_Bfree>
 8006994:	46c2      	mov	sl, r8
 8006996:	9b08      	ldr	r3, [sp, #32]
 8006998:	1b9a      	subs	r2, r3, r6
 800699a:	d004      	beq.n	80069a6 <_dtoa_r+0x7b6>
 800699c:	4651      	mov	r1, sl
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fcce 	bl	8007340 <__pow5mult>
 80069a4:	4682      	mov	sl, r0
 80069a6:	2101      	movs	r1, #1
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fc09 	bl	80071c0 <__i2b>
 80069ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	4606      	mov	r6, r0
 80069b4:	f340 8081 	ble.w	8006aba <_dtoa_r+0x8ca>
 80069b8:	461a      	mov	r2, r3
 80069ba:	4601      	mov	r1, r0
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 fcbf 	bl	8007340 <__pow5mult>
 80069c2:	9b07      	ldr	r3, [sp, #28]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	4606      	mov	r6, r0
 80069c8:	dd7a      	ble.n	8006ac0 <_dtoa_r+0x8d0>
 80069ca:	f04f 0800 	mov.w	r8, #0
 80069ce:	6933      	ldr	r3, [r6, #16]
 80069d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069d4:	6918      	ldr	r0, [r3, #16]
 80069d6:	f000 fba5 	bl	8007124 <__hi0bits>
 80069da:	f1c0 0020 	rsb	r0, r0, #32
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	4418      	add	r0, r3
 80069e2:	f010 001f 	ands.w	r0, r0, #31
 80069e6:	f000 8094 	beq.w	8006b12 <_dtoa_r+0x922>
 80069ea:	f1c0 0320 	rsb	r3, r0, #32
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	f340 8085 	ble.w	8006afe <_dtoa_r+0x90e>
 80069f4:	9b05      	ldr	r3, [sp, #20]
 80069f6:	f1c0 001c 	rsb	r0, r0, #28
 80069fa:	4403      	add	r3, r0
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	9b06      	ldr	r3, [sp, #24]
 8006a00:	4403      	add	r3, r0
 8006a02:	4405      	add	r5, r0
 8006a04:	9306      	str	r3, [sp, #24]
 8006a06:	9b05      	ldr	r3, [sp, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dd05      	ble.n	8006a18 <_dtoa_r+0x828>
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fcef 	bl	80073f4 <__lshift>
 8006a16:	4682      	mov	sl, r0
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd05      	ble.n	8006a2a <_dtoa_r+0x83a>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	461a      	mov	r2, r3
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fce6 	bl	80073f4 <__lshift>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d072      	beq.n	8006b16 <_dtoa_r+0x926>
 8006a30:	4631      	mov	r1, r6
 8006a32:	4650      	mov	r0, sl
 8006a34:	f000 fd4a 	bl	80074cc <__mcmp>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	da6c      	bge.n	8006b16 <_dtoa_r+0x926>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4651      	mov	r1, sl
 8006a40:	220a      	movs	r2, #10
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 fb28 	bl	8007098 <__multadd>
 8006a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a4e:	4682      	mov	sl, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 81b0 	beq.w	8006db6 <_dtoa_r+0xbc6>
 8006a56:	2300      	movs	r3, #0
 8006a58:	4639      	mov	r1, r7
 8006a5a:	220a      	movs	r2, #10
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fb1b 	bl	8007098 <__multadd>
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	4607      	mov	r7, r0
 8006a68:	f300 8096 	bgt.w	8006b98 <_dtoa_r+0x9a8>
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	dc59      	bgt.n	8006b26 <_dtoa_r+0x936>
 8006a72:	e091      	b.n	8006b98 <_dtoa_r+0x9a8>
 8006a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a7a:	e758      	b.n	800692e <_dtoa_r+0x73e>
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	1e5e      	subs	r6, r3, #1
 8006a80:	9b08      	ldr	r3, [sp, #32]
 8006a82:	42b3      	cmp	r3, r6
 8006a84:	bfbf      	itttt	lt
 8006a86:	9b08      	ldrlt	r3, [sp, #32]
 8006a88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006a8a:	9608      	strlt	r6, [sp, #32]
 8006a8c:	1af3      	sublt	r3, r6, r3
 8006a8e:	bfb4      	ite	lt
 8006a90:	18d2      	addlt	r2, r2, r3
 8006a92:	1b9e      	subge	r6, r3, r6
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	bfbc      	itt	lt
 8006a98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006a9a:	2600      	movlt	r6, #0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bfb7      	itett	lt
 8006aa0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006aa4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006aa8:	1a9d      	sublt	r5, r3, r2
 8006aaa:	2300      	movlt	r3, #0
 8006aac:	e741      	b.n	8006932 <_dtoa_r+0x742>
 8006aae:	9e08      	ldr	r6, [sp, #32]
 8006ab0:	9d05      	ldr	r5, [sp, #20]
 8006ab2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ab4:	e748      	b.n	8006948 <_dtoa_r+0x758>
 8006ab6:	9a08      	ldr	r2, [sp, #32]
 8006ab8:	e770      	b.n	800699c <_dtoa_r+0x7ac>
 8006aba:	9b07      	ldr	r3, [sp, #28]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	dc19      	bgt.n	8006af4 <_dtoa_r+0x904>
 8006ac0:	9b02      	ldr	r3, [sp, #8]
 8006ac2:	b9bb      	cbnz	r3, 8006af4 <_dtoa_r+0x904>
 8006ac4:	9b03      	ldr	r3, [sp, #12]
 8006ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aca:	b99b      	cbnz	r3, 8006af4 <_dtoa_r+0x904>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad2:	0d1b      	lsrs	r3, r3, #20
 8006ad4:	051b      	lsls	r3, r3, #20
 8006ad6:	b183      	cbz	r3, 8006afa <_dtoa_r+0x90a>
 8006ad8:	9b05      	ldr	r3, [sp, #20]
 8006ada:	3301      	adds	r3, #1
 8006adc:	9305      	str	r3, [sp, #20]
 8006ade:	9b06      	ldr	r3, [sp, #24]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	9306      	str	r3, [sp, #24]
 8006ae4:	f04f 0801 	mov.w	r8, #1
 8006ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f af6f 	bne.w	80069ce <_dtoa_r+0x7de>
 8006af0:	2001      	movs	r0, #1
 8006af2:	e774      	b.n	80069de <_dtoa_r+0x7ee>
 8006af4:	f04f 0800 	mov.w	r8, #0
 8006af8:	e7f6      	b.n	8006ae8 <_dtoa_r+0x8f8>
 8006afa:	4698      	mov	r8, r3
 8006afc:	e7f4      	b.n	8006ae8 <_dtoa_r+0x8f8>
 8006afe:	d082      	beq.n	8006a06 <_dtoa_r+0x816>
 8006b00:	9a05      	ldr	r2, [sp, #20]
 8006b02:	331c      	adds	r3, #28
 8006b04:	441a      	add	r2, r3
 8006b06:	9205      	str	r2, [sp, #20]
 8006b08:	9a06      	ldr	r2, [sp, #24]
 8006b0a:	441a      	add	r2, r3
 8006b0c:	441d      	add	r5, r3
 8006b0e:	9206      	str	r2, [sp, #24]
 8006b10:	e779      	b.n	8006a06 <_dtoa_r+0x816>
 8006b12:	4603      	mov	r3, r0
 8006b14:	e7f4      	b.n	8006b00 <_dtoa_r+0x910>
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dc37      	bgt.n	8006b8c <_dtoa_r+0x99c>
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	dd34      	ble.n	8006b8c <_dtoa_r+0x99c>
 8006b22:	9b04      	ldr	r3, [sp, #16]
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	b963      	cbnz	r3, 8006b44 <_dtoa_r+0x954>
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 fab2 	bl	8007098 <__multadd>
 8006b34:	4601      	mov	r1, r0
 8006b36:	4606      	mov	r6, r0
 8006b38:	4650      	mov	r0, sl
 8006b3a:	f000 fcc7 	bl	80074cc <__mcmp>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f73f adbb 	bgt.w	80066ba <_dtoa_r+0x4ca>
 8006b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b46:	9d00      	ldr	r5, [sp, #0]
 8006b48:	ea6f 0b03 	mvn.w	fp, r3
 8006b4c:	f04f 0800 	mov.w	r8, #0
 8006b50:	4631      	mov	r1, r6
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 fa7e 	bl	8007054 <_Bfree>
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	f43f aeab 	beq.w	80068b4 <_dtoa_r+0x6c4>
 8006b5e:	f1b8 0f00 	cmp.w	r8, #0
 8006b62:	d005      	beq.n	8006b70 <_dtoa_r+0x980>
 8006b64:	45b8      	cmp	r8, r7
 8006b66:	d003      	beq.n	8006b70 <_dtoa_r+0x980>
 8006b68:	4641      	mov	r1, r8
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 fa72 	bl	8007054 <_Bfree>
 8006b70:	4639      	mov	r1, r7
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 fa6e 	bl	8007054 <_Bfree>
 8006b78:	e69c      	b.n	80068b4 <_dtoa_r+0x6c4>
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	4637      	mov	r7, r6
 8006b7e:	e7e1      	b.n	8006b44 <_dtoa_r+0x954>
 8006b80:	46bb      	mov	fp, r7
 8006b82:	4637      	mov	r7, r6
 8006b84:	e599      	b.n	80066ba <_dtoa_r+0x4ca>
 8006b86:	bf00      	nop
 8006b88:	40240000 	.word	0x40240000
 8006b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80c8 	beq.w	8006d24 <_dtoa_r+0xb34>
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	dd05      	ble.n	8006ba8 <_dtoa_r+0x9b8>
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	462a      	mov	r2, r5
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 fc27 	bl	80073f4 <__lshift>
 8006ba6:	4607      	mov	r7, r0
 8006ba8:	f1b8 0f00 	cmp.w	r8, #0
 8006bac:	d05b      	beq.n	8006c66 <_dtoa_r+0xa76>
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fa0f 	bl	8006fd4 <_Balloc>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b928      	cbnz	r0, 8006bc6 <_dtoa_r+0x9d6>
 8006bba:	4b83      	ldr	r3, [pc, #524]	; (8006dc8 <_dtoa_r+0xbd8>)
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006bc2:	f7ff bb2e 	b.w	8006222 <_dtoa_r+0x32>
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	3202      	adds	r2, #2
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	f107 010c 	add.w	r1, r7, #12
 8006bd0:	300c      	adds	r0, #12
 8006bd2:	f7ff fa75 	bl	80060c0 <memcpy>
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fc0a 	bl	80073f4 <__lshift>
 8006be0:	9b00      	ldr	r3, [sp, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bea:	4413      	add	r3, r2
 8006bec:	9308      	str	r3, [sp, #32]
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	46b8      	mov	r8, r7
 8006bf6:	9306      	str	r3, [sp, #24]
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	4650      	mov	r0, sl
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	f7ff fa6a 	bl	80060dc <quorem>
 8006c08:	4641      	mov	r1, r8
 8006c0a:	9002      	str	r0, [sp, #8]
 8006c0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c10:	4650      	mov	r0, sl
 8006c12:	f000 fc5b 	bl	80074cc <__mcmp>
 8006c16:	463a      	mov	r2, r7
 8006c18:	9005      	str	r0, [sp, #20]
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 fc71 	bl	8007504 <__mdiff>
 8006c22:	68c2      	ldr	r2, [r0, #12]
 8006c24:	4605      	mov	r5, r0
 8006c26:	bb02      	cbnz	r2, 8006c6a <_dtoa_r+0xa7a>
 8006c28:	4601      	mov	r1, r0
 8006c2a:	4650      	mov	r0, sl
 8006c2c:	f000 fc4e 	bl	80074cc <__mcmp>
 8006c30:	4602      	mov	r2, r0
 8006c32:	4629      	mov	r1, r5
 8006c34:	4620      	mov	r0, r4
 8006c36:	9209      	str	r2, [sp, #36]	; 0x24
 8006c38:	f000 fa0c 	bl	8007054 <_Bfree>
 8006c3c:	9b07      	ldr	r3, [sp, #28]
 8006c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c40:	9d04      	ldr	r5, [sp, #16]
 8006c42:	ea43 0102 	orr.w	r1, r3, r2
 8006c46:	9b06      	ldr	r3, [sp, #24]
 8006c48:	4319      	orrs	r1, r3
 8006c4a:	d110      	bne.n	8006c6e <_dtoa_r+0xa7e>
 8006c4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c50:	d029      	beq.n	8006ca6 <_dtoa_r+0xab6>
 8006c52:	9b05      	ldr	r3, [sp, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dd02      	ble.n	8006c5e <_dtoa_r+0xa6e>
 8006c58:	9b02      	ldr	r3, [sp, #8]
 8006c5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	f883 9000 	strb.w	r9, [r3]
 8006c64:	e774      	b.n	8006b50 <_dtoa_r+0x960>
 8006c66:	4638      	mov	r0, r7
 8006c68:	e7ba      	b.n	8006be0 <_dtoa_r+0x9f0>
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	e7e1      	b.n	8006c32 <_dtoa_r+0xa42>
 8006c6e:	9b05      	ldr	r3, [sp, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db04      	blt.n	8006c7e <_dtoa_r+0xa8e>
 8006c74:	9907      	ldr	r1, [sp, #28]
 8006c76:	430b      	orrs	r3, r1
 8006c78:	9906      	ldr	r1, [sp, #24]
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	d120      	bne.n	8006cc0 <_dtoa_r+0xad0>
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	dded      	ble.n	8006c5e <_dtoa_r+0xa6e>
 8006c82:	4651      	mov	r1, sl
 8006c84:	2201      	movs	r2, #1
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 fbb4 	bl	80073f4 <__lshift>
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4682      	mov	sl, r0
 8006c90:	f000 fc1c 	bl	80074cc <__mcmp>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	dc03      	bgt.n	8006ca0 <_dtoa_r+0xab0>
 8006c98:	d1e1      	bne.n	8006c5e <_dtoa_r+0xa6e>
 8006c9a:	f019 0f01 	tst.w	r9, #1
 8006c9e:	d0de      	beq.n	8006c5e <_dtoa_r+0xa6e>
 8006ca0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ca4:	d1d8      	bne.n	8006c58 <_dtoa_r+0xa68>
 8006ca6:	9a01      	ldr	r2, [sp, #4]
 8006ca8:	2339      	movs	r3, #57	; 0x39
 8006caa:	7013      	strb	r3, [r2, #0]
 8006cac:	462b      	mov	r3, r5
 8006cae:	461d      	mov	r5, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cb6:	2a39      	cmp	r2, #57	; 0x39
 8006cb8:	d06c      	beq.n	8006d94 <_dtoa_r+0xba4>
 8006cba:	3201      	adds	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e747      	b.n	8006b50 <_dtoa_r+0x960>
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	dd07      	ble.n	8006cd4 <_dtoa_r+0xae4>
 8006cc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cc8:	d0ed      	beq.n	8006ca6 <_dtoa_r+0xab6>
 8006cca:	9a01      	ldr	r2, [sp, #4]
 8006ccc:	f109 0301 	add.w	r3, r9, #1
 8006cd0:	7013      	strb	r3, [r2, #0]
 8006cd2:	e73d      	b.n	8006b50 <_dtoa_r+0x960>
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	9a08      	ldr	r2, [sp, #32]
 8006cd8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d043      	beq.n	8006d68 <_dtoa_r+0xb78>
 8006ce0:	4651      	mov	r1, sl
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f9d6 	bl	8007098 <__multadd>
 8006cec:	45b8      	cmp	r8, r7
 8006cee:	4682      	mov	sl, r0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	f04f 020a 	mov.w	r2, #10
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	d107      	bne.n	8006d0e <_dtoa_r+0xb1e>
 8006cfe:	f000 f9cb 	bl	8007098 <__multadd>
 8006d02:	4680      	mov	r8, r0
 8006d04:	4607      	mov	r7, r0
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	e775      	b.n	8006bfa <_dtoa_r+0xa0a>
 8006d0e:	f000 f9c3 	bl	8007098 <__multadd>
 8006d12:	4639      	mov	r1, r7
 8006d14:	4680      	mov	r8, r0
 8006d16:	2300      	movs	r3, #0
 8006d18:	220a      	movs	r2, #10
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 f9bc 	bl	8007098 <__multadd>
 8006d20:	4607      	mov	r7, r0
 8006d22:	e7f0      	b.n	8006d06 <_dtoa_r+0xb16>
 8006d24:	9b04      	ldr	r3, [sp, #16]
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	9d00      	ldr	r5, [sp, #0]
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	f7ff f9d5 	bl	80060dc <quorem>
 8006d32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d36:	9b00      	ldr	r3, [sp, #0]
 8006d38:	f805 9b01 	strb.w	r9, [r5], #1
 8006d3c:	1aea      	subs	r2, r5, r3
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	dd07      	ble.n	8006d54 <_dtoa_r+0xb64>
 8006d44:	4651      	mov	r1, sl
 8006d46:	2300      	movs	r3, #0
 8006d48:	220a      	movs	r2, #10
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 f9a4 	bl	8007098 <__multadd>
 8006d50:	4682      	mov	sl, r0
 8006d52:	e7ea      	b.n	8006d2a <_dtoa_r+0xb3a>
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bfc8      	it	gt
 8006d5a:	461d      	movgt	r5, r3
 8006d5c:	9b00      	ldr	r3, [sp, #0]
 8006d5e:	bfd8      	it	le
 8006d60:	2501      	movle	r5, #1
 8006d62:	441d      	add	r5, r3
 8006d64:	f04f 0800 	mov.w	r8, #0
 8006d68:	4651      	mov	r1, sl
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fb41 	bl	80073f4 <__lshift>
 8006d72:	4631      	mov	r1, r6
 8006d74:	4682      	mov	sl, r0
 8006d76:	f000 fba9 	bl	80074cc <__mcmp>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	dc96      	bgt.n	8006cac <_dtoa_r+0xabc>
 8006d7e:	d102      	bne.n	8006d86 <_dtoa_r+0xb96>
 8006d80:	f019 0f01 	tst.w	r9, #1
 8006d84:	d192      	bne.n	8006cac <_dtoa_r+0xabc>
 8006d86:	462b      	mov	r3, r5
 8006d88:	461d      	mov	r5, r3
 8006d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d8e:	2a30      	cmp	r2, #48	; 0x30
 8006d90:	d0fa      	beq.n	8006d88 <_dtoa_r+0xb98>
 8006d92:	e6dd      	b.n	8006b50 <_dtoa_r+0x960>
 8006d94:	9a00      	ldr	r2, [sp, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d189      	bne.n	8006cae <_dtoa_r+0xabe>
 8006d9a:	f10b 0b01 	add.w	fp, fp, #1
 8006d9e:	2331      	movs	r3, #49	; 0x31
 8006da0:	e796      	b.n	8006cd0 <_dtoa_r+0xae0>
 8006da2:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <_dtoa_r+0xbdc>)
 8006da4:	f7ff ba99 	b.w	80062da <_dtoa_r+0xea>
 8006da8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f47f aa6d 	bne.w	800628a <_dtoa_r+0x9a>
 8006db0:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <_dtoa_r+0xbe0>)
 8006db2:	f7ff ba92 	b.w	80062da <_dtoa_r+0xea>
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dcb5      	bgt.n	8006d28 <_dtoa_r+0xb38>
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	f73f aeb1 	bgt.w	8006b26 <_dtoa_r+0x936>
 8006dc4:	e7b0      	b.n	8006d28 <_dtoa_r+0xb38>
 8006dc6:	bf00      	nop
 8006dc8:	08008398 	.word	0x08008398
 8006dcc:	080082f8 	.word	0x080082f8
 8006dd0:	0800831c 	.word	0x0800831c

08006dd4 <_free_r>:
 8006dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d044      	beq.n	8006e64 <_free_r+0x90>
 8006dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dde:	9001      	str	r0, [sp, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f1a1 0404 	sub.w	r4, r1, #4
 8006de6:	bfb8      	it	lt
 8006de8:	18e4      	addlt	r4, r4, r3
 8006dea:	f000 f8e7 	bl	8006fbc <__malloc_lock>
 8006dee:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <_free_r+0x94>)
 8006df0:	9801      	ldr	r0, [sp, #4]
 8006df2:	6813      	ldr	r3, [r2, #0]
 8006df4:	b933      	cbnz	r3, 8006e04 <_free_r+0x30>
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	6014      	str	r4, [r2, #0]
 8006dfa:	b003      	add	sp, #12
 8006dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e00:	f000 b8e2 	b.w	8006fc8 <__malloc_unlock>
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	d908      	bls.n	8006e1a <_free_r+0x46>
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	1961      	adds	r1, r4, r5
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	bf01      	itttt	eq
 8006e10:	6819      	ldreq	r1, [r3, #0]
 8006e12:	685b      	ldreq	r3, [r3, #4]
 8006e14:	1949      	addeq	r1, r1, r5
 8006e16:	6021      	streq	r1, [r4, #0]
 8006e18:	e7ed      	b.n	8006df6 <_free_r+0x22>
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	b10b      	cbz	r3, 8006e24 <_free_r+0x50>
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d9fa      	bls.n	8006e1a <_free_r+0x46>
 8006e24:	6811      	ldr	r1, [r2, #0]
 8006e26:	1855      	adds	r5, r2, r1
 8006e28:	42a5      	cmp	r5, r4
 8006e2a:	d10b      	bne.n	8006e44 <_free_r+0x70>
 8006e2c:	6824      	ldr	r4, [r4, #0]
 8006e2e:	4421      	add	r1, r4
 8006e30:	1854      	adds	r4, r2, r1
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	6011      	str	r1, [r2, #0]
 8006e36:	d1e0      	bne.n	8006dfa <_free_r+0x26>
 8006e38:	681c      	ldr	r4, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	6053      	str	r3, [r2, #4]
 8006e3e:	440c      	add	r4, r1
 8006e40:	6014      	str	r4, [r2, #0]
 8006e42:	e7da      	b.n	8006dfa <_free_r+0x26>
 8006e44:	d902      	bls.n	8006e4c <_free_r+0x78>
 8006e46:	230c      	movs	r3, #12
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	e7d6      	b.n	8006dfa <_free_r+0x26>
 8006e4c:	6825      	ldr	r5, [r4, #0]
 8006e4e:	1961      	adds	r1, r4, r5
 8006e50:	428b      	cmp	r3, r1
 8006e52:	bf04      	itt	eq
 8006e54:	6819      	ldreq	r1, [r3, #0]
 8006e56:	685b      	ldreq	r3, [r3, #4]
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	bf04      	itt	eq
 8006e5c:	1949      	addeq	r1, r1, r5
 8006e5e:	6021      	streq	r1, [r4, #0]
 8006e60:	6054      	str	r4, [r2, #4]
 8006e62:	e7ca      	b.n	8006dfa <_free_r+0x26>
 8006e64:	b003      	add	sp, #12
 8006e66:	bd30      	pop	{r4, r5, pc}
 8006e68:	200007c4 	.word	0x200007c4

08006e6c <malloc>:
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <malloc+0xc>)
 8006e6e:	4601      	mov	r1, r0
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f000 b823 	b.w	8006ebc <_malloc_r>
 8006e76:	bf00      	nop
 8006e78:	20000068 	.word	0x20000068

08006e7c <sbrk_aligned>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4e0e      	ldr	r6, [pc, #56]	; (8006eb8 <sbrk_aligned+0x3c>)
 8006e80:	460c      	mov	r4, r1
 8006e82:	6831      	ldr	r1, [r6, #0]
 8006e84:	4605      	mov	r5, r0
 8006e86:	b911      	cbnz	r1, 8006e8e <sbrk_aligned+0x12>
 8006e88:	f000 fe40 	bl	8007b0c <_sbrk_r>
 8006e8c:	6030      	str	r0, [r6, #0]
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 fe3b 	bl	8007b0c <_sbrk_r>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	d00a      	beq.n	8006eb0 <sbrk_aligned+0x34>
 8006e9a:	1cc4      	adds	r4, r0, #3
 8006e9c:	f024 0403 	bic.w	r4, r4, #3
 8006ea0:	42a0      	cmp	r0, r4
 8006ea2:	d007      	beq.n	8006eb4 <sbrk_aligned+0x38>
 8006ea4:	1a21      	subs	r1, r4, r0
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 fe30 	bl	8007b0c <_sbrk_r>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d101      	bne.n	8006eb4 <sbrk_aligned+0x38>
 8006eb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	200007c8 	.word	0x200007c8

08006ebc <_malloc_r>:
 8006ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	1ccd      	adds	r5, r1, #3
 8006ec2:	f025 0503 	bic.w	r5, r5, #3
 8006ec6:	3508      	adds	r5, #8
 8006ec8:	2d0c      	cmp	r5, #12
 8006eca:	bf38      	it	cc
 8006ecc:	250c      	movcc	r5, #12
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	db01      	blt.n	8006ed8 <_malloc_r+0x1c>
 8006ed4:	42a9      	cmp	r1, r5
 8006ed6:	d905      	bls.n	8006ee4 <_malloc_r+0x28>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	2600      	movs	r6, #0
 8006ede:	4630      	mov	r0, r6
 8006ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fb8 <_malloc_r+0xfc>
 8006ee8:	f000 f868 	bl	8006fbc <__malloc_lock>
 8006eec:	f8d8 3000 	ldr.w	r3, [r8]
 8006ef0:	461c      	mov	r4, r3
 8006ef2:	bb5c      	cbnz	r4, 8006f4c <_malloc_r+0x90>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	f7ff ffc0 	bl	8006e7c <sbrk_aligned>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	4604      	mov	r4, r0
 8006f00:	d155      	bne.n	8006fae <_malloc_r+0xf2>
 8006f02:	f8d8 4000 	ldr.w	r4, [r8]
 8006f06:	4626      	mov	r6, r4
 8006f08:	2e00      	cmp	r6, #0
 8006f0a:	d145      	bne.n	8006f98 <_malloc_r+0xdc>
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	d048      	beq.n	8006fa2 <_malloc_r+0xe6>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	4631      	mov	r1, r6
 8006f14:	4638      	mov	r0, r7
 8006f16:	eb04 0903 	add.w	r9, r4, r3
 8006f1a:	f000 fdf7 	bl	8007b0c <_sbrk_r>
 8006f1e:	4581      	cmp	r9, r0
 8006f20:	d13f      	bne.n	8006fa2 <_malloc_r+0xe6>
 8006f22:	6821      	ldr	r1, [r4, #0]
 8006f24:	1a6d      	subs	r5, r5, r1
 8006f26:	4629      	mov	r1, r5
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7ff ffa7 	bl	8006e7c <sbrk_aligned>
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d037      	beq.n	8006fa2 <_malloc_r+0xe6>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	442b      	add	r3, r5
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	f8d8 3000 	ldr.w	r3, [r8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d038      	beq.n	8006fb2 <_malloc_r+0xf6>
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	42a2      	cmp	r2, r4
 8006f44:	d12b      	bne.n	8006f9e <_malloc_r+0xe2>
 8006f46:	2200      	movs	r2, #0
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	e00f      	b.n	8006f6c <_malloc_r+0xb0>
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	1b52      	subs	r2, r2, r5
 8006f50:	d41f      	bmi.n	8006f92 <_malloc_r+0xd6>
 8006f52:	2a0b      	cmp	r2, #11
 8006f54:	d917      	bls.n	8006f86 <_malloc_r+0xca>
 8006f56:	1961      	adds	r1, r4, r5
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	6025      	str	r5, [r4, #0]
 8006f5c:	bf18      	it	ne
 8006f5e:	6059      	strne	r1, [r3, #4]
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	bf08      	it	eq
 8006f64:	f8c8 1000 	streq.w	r1, [r8]
 8006f68:	5162      	str	r2, [r4, r5]
 8006f6a:	604b      	str	r3, [r1, #4]
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f104 060b 	add.w	r6, r4, #11
 8006f72:	f000 f829 	bl	8006fc8 <__malloc_unlock>
 8006f76:	f026 0607 	bic.w	r6, r6, #7
 8006f7a:	1d23      	adds	r3, r4, #4
 8006f7c:	1af2      	subs	r2, r6, r3
 8006f7e:	d0ae      	beq.n	8006ede <_malloc_r+0x22>
 8006f80:	1b9b      	subs	r3, r3, r6
 8006f82:	50a3      	str	r3, [r4, r2]
 8006f84:	e7ab      	b.n	8006ede <_malloc_r+0x22>
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	6862      	ldr	r2, [r4, #4]
 8006f8a:	d1dd      	bne.n	8006f48 <_malloc_r+0x8c>
 8006f8c:	f8c8 2000 	str.w	r2, [r8]
 8006f90:	e7ec      	b.n	8006f6c <_malloc_r+0xb0>
 8006f92:	4623      	mov	r3, r4
 8006f94:	6864      	ldr	r4, [r4, #4]
 8006f96:	e7ac      	b.n	8006ef2 <_malloc_r+0x36>
 8006f98:	4634      	mov	r4, r6
 8006f9a:	6876      	ldr	r6, [r6, #4]
 8006f9c:	e7b4      	b.n	8006f08 <_malloc_r+0x4c>
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	e7cc      	b.n	8006f3c <_malloc_r+0x80>
 8006fa2:	230c      	movs	r3, #12
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f000 f80e 	bl	8006fc8 <__malloc_unlock>
 8006fac:	e797      	b.n	8006ede <_malloc_r+0x22>
 8006fae:	6025      	str	r5, [r4, #0]
 8006fb0:	e7dc      	b.n	8006f6c <_malloc_r+0xb0>
 8006fb2:	605b      	str	r3, [r3, #4]
 8006fb4:	deff      	udf	#255	; 0xff
 8006fb6:	bf00      	nop
 8006fb8:	200007c4 	.word	0x200007c4

08006fbc <__malloc_lock>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__malloc_lock+0x8>)
 8006fbe:	f7ff b87d 	b.w	80060bc <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	200007c0 	.word	0x200007c0

08006fc8 <__malloc_unlock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__malloc_unlock+0x8>)
 8006fca:	f7ff b878 	b.w	80060be <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	200007c0 	.word	0x200007c0

08006fd4 <_Balloc>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	69c6      	ldr	r6, [r0, #28]
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	b976      	cbnz	r6, 8006ffc <_Balloc+0x28>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ff44 	bl	8006e6c <malloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	61e0      	str	r0, [r4, #28]
 8006fe8:	b920      	cbnz	r0, 8006ff4 <_Balloc+0x20>
 8006fea:	4b18      	ldr	r3, [pc, #96]	; (800704c <_Balloc+0x78>)
 8006fec:	4818      	ldr	r0, [pc, #96]	; (8007050 <_Balloc+0x7c>)
 8006fee:	216b      	movs	r1, #107	; 0x6b
 8006ff0:	f000 fd9c 	bl	8007b2c <__assert_func>
 8006ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff8:	6006      	str	r6, [r0, #0]
 8006ffa:	60c6      	str	r6, [r0, #12]
 8006ffc:	69e6      	ldr	r6, [r4, #28]
 8006ffe:	68f3      	ldr	r3, [r6, #12]
 8007000:	b183      	cbz	r3, 8007024 <_Balloc+0x50>
 8007002:	69e3      	ldr	r3, [r4, #28]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800700a:	b9b8      	cbnz	r0, 800703c <_Balloc+0x68>
 800700c:	2101      	movs	r1, #1
 800700e:	fa01 f605 	lsl.w	r6, r1, r5
 8007012:	1d72      	adds	r2, r6, #5
 8007014:	0092      	lsls	r2, r2, #2
 8007016:	4620      	mov	r0, r4
 8007018:	f000 fda6 	bl	8007b68 <_calloc_r>
 800701c:	b160      	cbz	r0, 8007038 <_Balloc+0x64>
 800701e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007022:	e00e      	b.n	8007042 <_Balloc+0x6e>
 8007024:	2221      	movs	r2, #33	; 0x21
 8007026:	2104      	movs	r1, #4
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fd9d 	bl	8007b68 <_calloc_r>
 800702e:	69e3      	ldr	r3, [r4, #28]
 8007030:	60f0      	str	r0, [r6, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e4      	bne.n	8007002 <_Balloc+0x2e>
 8007038:	2000      	movs	r0, #0
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	6802      	ldr	r2, [r0, #0]
 800703e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007042:	2300      	movs	r3, #0
 8007044:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007048:	e7f7      	b.n	800703a <_Balloc+0x66>
 800704a:	bf00      	nop
 800704c:	08008329 	.word	0x08008329
 8007050:	080083a9 	.word	0x080083a9

08007054 <_Bfree>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	69c6      	ldr	r6, [r0, #28]
 8007058:	4605      	mov	r5, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b976      	cbnz	r6, 800707c <_Bfree+0x28>
 800705e:	2010      	movs	r0, #16
 8007060:	f7ff ff04 	bl	8006e6c <malloc>
 8007064:	4602      	mov	r2, r0
 8007066:	61e8      	str	r0, [r5, #28]
 8007068:	b920      	cbnz	r0, 8007074 <_Bfree+0x20>
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <_Bfree+0x3c>)
 800706c:	4809      	ldr	r0, [pc, #36]	; (8007094 <_Bfree+0x40>)
 800706e:	218f      	movs	r1, #143	; 0x8f
 8007070:	f000 fd5c 	bl	8007b2c <__assert_func>
 8007074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007078:	6006      	str	r6, [r0, #0]
 800707a:	60c6      	str	r6, [r0, #12]
 800707c:	b13c      	cbz	r4, 800708e <_Bfree+0x3a>
 800707e:	69eb      	ldr	r3, [r5, #28]
 8007080:	6862      	ldr	r2, [r4, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007088:	6021      	str	r1, [r4, #0]
 800708a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	08008329 	.word	0x08008329
 8007094:	080083a9 	.word	0x080083a9

08007098 <__multadd>:
 8007098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800709c:	690d      	ldr	r5, [r1, #16]
 800709e:	4607      	mov	r7, r0
 80070a0:	460c      	mov	r4, r1
 80070a2:	461e      	mov	r6, r3
 80070a4:	f101 0c14 	add.w	ip, r1, #20
 80070a8:	2000      	movs	r0, #0
 80070aa:	f8dc 3000 	ldr.w	r3, [ip]
 80070ae:	b299      	uxth	r1, r3
 80070b0:	fb02 6101 	mla	r1, r2, r1, r6
 80070b4:	0c1e      	lsrs	r6, r3, #16
 80070b6:	0c0b      	lsrs	r3, r1, #16
 80070b8:	fb02 3306 	mla	r3, r2, r6, r3
 80070bc:	b289      	uxth	r1, r1
 80070be:	3001      	adds	r0, #1
 80070c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070c4:	4285      	cmp	r5, r0
 80070c6:	f84c 1b04 	str.w	r1, [ip], #4
 80070ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070ce:	dcec      	bgt.n	80070aa <__multadd+0x12>
 80070d0:	b30e      	cbz	r6, 8007116 <__multadd+0x7e>
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	dc19      	bgt.n	800710c <__multadd+0x74>
 80070d8:	6861      	ldr	r1, [r4, #4]
 80070da:	4638      	mov	r0, r7
 80070dc:	3101      	adds	r1, #1
 80070de:	f7ff ff79 	bl	8006fd4 <_Balloc>
 80070e2:	4680      	mov	r8, r0
 80070e4:	b928      	cbnz	r0, 80070f2 <__multadd+0x5a>
 80070e6:	4602      	mov	r2, r0
 80070e8:	4b0c      	ldr	r3, [pc, #48]	; (800711c <__multadd+0x84>)
 80070ea:	480d      	ldr	r0, [pc, #52]	; (8007120 <__multadd+0x88>)
 80070ec:	21ba      	movs	r1, #186	; 0xba
 80070ee:	f000 fd1d 	bl	8007b2c <__assert_func>
 80070f2:	6922      	ldr	r2, [r4, #16]
 80070f4:	3202      	adds	r2, #2
 80070f6:	f104 010c 	add.w	r1, r4, #12
 80070fa:	0092      	lsls	r2, r2, #2
 80070fc:	300c      	adds	r0, #12
 80070fe:	f7fe ffdf 	bl	80060c0 <memcpy>
 8007102:	4621      	mov	r1, r4
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff ffa5 	bl	8007054 <_Bfree>
 800710a:	4644      	mov	r4, r8
 800710c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007110:	3501      	adds	r5, #1
 8007112:	615e      	str	r6, [r3, #20]
 8007114:	6125      	str	r5, [r4, #16]
 8007116:	4620      	mov	r0, r4
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800711c:	08008398 	.word	0x08008398
 8007120:	080083a9 	.word	0x080083a9

08007124 <__hi0bits>:
 8007124:	0c03      	lsrs	r3, r0, #16
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	b9d3      	cbnz	r3, 8007160 <__hi0bits+0x3c>
 800712a:	0400      	lsls	r0, r0, #16
 800712c:	2310      	movs	r3, #16
 800712e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007132:	bf04      	itt	eq
 8007134:	0200      	lsleq	r0, r0, #8
 8007136:	3308      	addeq	r3, #8
 8007138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800713c:	bf04      	itt	eq
 800713e:	0100      	lsleq	r0, r0, #4
 8007140:	3304      	addeq	r3, #4
 8007142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007146:	bf04      	itt	eq
 8007148:	0080      	lsleq	r0, r0, #2
 800714a:	3302      	addeq	r3, #2
 800714c:	2800      	cmp	r0, #0
 800714e:	db05      	blt.n	800715c <__hi0bits+0x38>
 8007150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007154:	f103 0301 	add.w	r3, r3, #1
 8007158:	bf08      	it	eq
 800715a:	2320      	moveq	r3, #32
 800715c:	4618      	mov	r0, r3
 800715e:	4770      	bx	lr
 8007160:	2300      	movs	r3, #0
 8007162:	e7e4      	b.n	800712e <__hi0bits+0xa>

08007164 <__lo0bits>:
 8007164:	6803      	ldr	r3, [r0, #0]
 8007166:	f013 0207 	ands.w	r2, r3, #7
 800716a:	d00c      	beq.n	8007186 <__lo0bits+0x22>
 800716c:	07d9      	lsls	r1, r3, #31
 800716e:	d422      	bmi.n	80071b6 <__lo0bits+0x52>
 8007170:	079a      	lsls	r2, r3, #30
 8007172:	bf49      	itett	mi
 8007174:	085b      	lsrmi	r3, r3, #1
 8007176:	089b      	lsrpl	r3, r3, #2
 8007178:	6003      	strmi	r3, [r0, #0]
 800717a:	2201      	movmi	r2, #1
 800717c:	bf5c      	itt	pl
 800717e:	6003      	strpl	r3, [r0, #0]
 8007180:	2202      	movpl	r2, #2
 8007182:	4610      	mov	r0, r2
 8007184:	4770      	bx	lr
 8007186:	b299      	uxth	r1, r3
 8007188:	b909      	cbnz	r1, 800718e <__lo0bits+0x2a>
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	2210      	movs	r2, #16
 800718e:	b2d9      	uxtb	r1, r3
 8007190:	b909      	cbnz	r1, 8007196 <__lo0bits+0x32>
 8007192:	3208      	adds	r2, #8
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	0719      	lsls	r1, r3, #28
 8007198:	bf04      	itt	eq
 800719a:	091b      	lsreq	r3, r3, #4
 800719c:	3204      	addeq	r2, #4
 800719e:	0799      	lsls	r1, r3, #30
 80071a0:	bf04      	itt	eq
 80071a2:	089b      	lsreq	r3, r3, #2
 80071a4:	3202      	addeq	r2, #2
 80071a6:	07d9      	lsls	r1, r3, #31
 80071a8:	d403      	bmi.n	80071b2 <__lo0bits+0x4e>
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	f102 0201 	add.w	r2, r2, #1
 80071b0:	d003      	beq.n	80071ba <__lo0bits+0x56>
 80071b2:	6003      	str	r3, [r0, #0]
 80071b4:	e7e5      	b.n	8007182 <__lo0bits+0x1e>
 80071b6:	2200      	movs	r2, #0
 80071b8:	e7e3      	b.n	8007182 <__lo0bits+0x1e>
 80071ba:	2220      	movs	r2, #32
 80071bc:	e7e1      	b.n	8007182 <__lo0bits+0x1e>
	...

080071c0 <__i2b>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	460c      	mov	r4, r1
 80071c4:	2101      	movs	r1, #1
 80071c6:	f7ff ff05 	bl	8006fd4 <_Balloc>
 80071ca:	4602      	mov	r2, r0
 80071cc:	b928      	cbnz	r0, 80071da <__i2b+0x1a>
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <__i2b+0x24>)
 80071d0:	4805      	ldr	r0, [pc, #20]	; (80071e8 <__i2b+0x28>)
 80071d2:	f240 1145 	movw	r1, #325	; 0x145
 80071d6:	f000 fca9 	bl	8007b2c <__assert_func>
 80071da:	2301      	movs	r3, #1
 80071dc:	6144      	str	r4, [r0, #20]
 80071de:	6103      	str	r3, [r0, #16]
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	bf00      	nop
 80071e4:	08008398 	.word	0x08008398
 80071e8:	080083a9 	.word	0x080083a9

080071ec <__multiply>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	4691      	mov	r9, r2
 80071f2:	690a      	ldr	r2, [r1, #16]
 80071f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	bfb8      	it	lt
 80071fc:	460b      	movlt	r3, r1
 80071fe:	460c      	mov	r4, r1
 8007200:	bfbc      	itt	lt
 8007202:	464c      	movlt	r4, r9
 8007204:	4699      	movlt	r9, r3
 8007206:	6927      	ldr	r7, [r4, #16]
 8007208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	eb07 060a 	add.w	r6, r7, sl
 8007214:	42b3      	cmp	r3, r6
 8007216:	b085      	sub	sp, #20
 8007218:	bfb8      	it	lt
 800721a:	3101      	addlt	r1, #1
 800721c:	f7ff feda 	bl	8006fd4 <_Balloc>
 8007220:	b930      	cbnz	r0, 8007230 <__multiply+0x44>
 8007222:	4602      	mov	r2, r0
 8007224:	4b44      	ldr	r3, [pc, #272]	; (8007338 <__multiply+0x14c>)
 8007226:	4845      	ldr	r0, [pc, #276]	; (800733c <__multiply+0x150>)
 8007228:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800722c:	f000 fc7e 	bl	8007b2c <__assert_func>
 8007230:	f100 0514 	add.w	r5, r0, #20
 8007234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007238:	462b      	mov	r3, r5
 800723a:	2200      	movs	r2, #0
 800723c:	4543      	cmp	r3, r8
 800723e:	d321      	bcc.n	8007284 <__multiply+0x98>
 8007240:	f104 0314 	add.w	r3, r4, #20
 8007244:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007248:	f109 0314 	add.w	r3, r9, #20
 800724c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	1b3a      	subs	r2, r7, r4
 8007254:	3a15      	subs	r2, #21
 8007256:	f022 0203 	bic.w	r2, r2, #3
 800725a:	3204      	adds	r2, #4
 800725c:	f104 0115 	add.w	r1, r4, #21
 8007260:	428f      	cmp	r7, r1
 8007262:	bf38      	it	cc
 8007264:	2204      	movcc	r2, #4
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9a02      	ldr	r2, [sp, #8]
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d80c      	bhi.n	800728a <__multiply+0x9e>
 8007270:	2e00      	cmp	r6, #0
 8007272:	dd03      	ble.n	800727c <__multiply+0x90>
 8007274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007278:	2b00      	cmp	r3, #0
 800727a:	d05b      	beq.n	8007334 <__multiply+0x148>
 800727c:	6106      	str	r6, [r0, #16]
 800727e:	b005      	add	sp, #20
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	f843 2b04 	str.w	r2, [r3], #4
 8007288:	e7d8      	b.n	800723c <__multiply+0x50>
 800728a:	f8b3 a000 	ldrh.w	sl, [r3]
 800728e:	f1ba 0f00 	cmp.w	sl, #0
 8007292:	d024      	beq.n	80072de <__multiply+0xf2>
 8007294:	f104 0e14 	add.w	lr, r4, #20
 8007298:	46a9      	mov	r9, r5
 800729a:	f04f 0c00 	mov.w	ip, #0
 800729e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072a2:	f8d9 1000 	ldr.w	r1, [r9]
 80072a6:	fa1f fb82 	uxth.w	fp, r2
 80072aa:	b289      	uxth	r1, r1
 80072ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80072b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072b4:	f8d9 2000 	ldr.w	r2, [r9]
 80072b8:	4461      	add	r1, ip
 80072ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072be:	fb0a c20b 	mla	r2, sl, fp, ip
 80072c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072c6:	b289      	uxth	r1, r1
 80072c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072cc:	4577      	cmp	r7, lr
 80072ce:	f849 1b04 	str.w	r1, [r9], #4
 80072d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072d6:	d8e2      	bhi.n	800729e <__multiply+0xb2>
 80072d8:	9a01      	ldr	r2, [sp, #4]
 80072da:	f845 c002 	str.w	ip, [r5, r2]
 80072de:	9a03      	ldr	r2, [sp, #12]
 80072e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072e4:	3304      	adds	r3, #4
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	d021      	beq.n	8007330 <__multiply+0x144>
 80072ec:	6829      	ldr	r1, [r5, #0]
 80072ee:	f104 0c14 	add.w	ip, r4, #20
 80072f2:	46ae      	mov	lr, r5
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	f8bc b000 	ldrh.w	fp, [ip]
 80072fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007300:	fb09 220b 	mla	r2, r9, fp, r2
 8007304:	4452      	add	r2, sl
 8007306:	b289      	uxth	r1, r1
 8007308:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800730c:	f84e 1b04 	str.w	r1, [lr], #4
 8007310:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007314:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007318:	f8be 1000 	ldrh.w	r1, [lr]
 800731c:	fb09 110a 	mla	r1, r9, sl, r1
 8007320:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007324:	4567      	cmp	r7, ip
 8007326:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800732a:	d8e5      	bhi.n	80072f8 <__multiply+0x10c>
 800732c:	9a01      	ldr	r2, [sp, #4]
 800732e:	50a9      	str	r1, [r5, r2]
 8007330:	3504      	adds	r5, #4
 8007332:	e799      	b.n	8007268 <__multiply+0x7c>
 8007334:	3e01      	subs	r6, #1
 8007336:	e79b      	b.n	8007270 <__multiply+0x84>
 8007338:	08008398 	.word	0x08008398
 800733c:	080083a9 	.word	0x080083a9

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	; (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fe9d 	bl	8007098 <__multadd>
 800735e:	4607      	mov	r7, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	69f4      	ldr	r4, [r6, #28]
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fd7f 	bl	8006e6c <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	61f0      	str	r0, [r6, #28]
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <__pow5mult+0xac>)
 8007376:	481e      	ldr	r0, [pc, #120]	; (80073f0 <__pow5mult+0xb0>)
 8007378:	f240 11b3 	movw	r1, #435	; 0x1b3
 800737c:	f000 fbd6 	bl	8007b2c <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	; 0x271
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ff12 	bl	80071c0 <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a2:	4604      	mov	r4, r0
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4639      	mov	r1, r7
 80073b0:	4622      	mov	r2, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ff1a 	bl	80071ec <__multiply>
 80073b8:	4639      	mov	r1, r7
 80073ba:	4680      	mov	r8, r0
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff fe49 	bl	8007054 <_Bfree>
 80073c2:	4647      	mov	r7, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7ff ff0b 	bl	80071ec <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4638      	mov	r0, r7
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	080084f8 	.word	0x080084f8
 80073ec:	08008329 	.word	0x08008329
 80073f0:	080083a9 	.word	0x080083a9

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	6849      	ldr	r1, [r1, #4]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	4607      	mov	r7, r0
 8007406:	4691      	mov	r9, r2
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fddd 	bl	8006fd4 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <__lshift+0xd0>)
 8007422:	4829      	ldr	r0, [pc, #164]	; (80074c8 <__lshift+0xd4>)
 8007424:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007428:	f000 fb80 	bl	8007b2c <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db33      	blt.n	80074aa <__lshift+0xb6>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007458:	d02b      	beq.n	80074b2 <__lshift+0xbe>
 800745a:	f1c9 0e20 	rsb	lr, r9, #32
 800745e:	468a      	mov	sl, r1
 8007460:	2200      	movs	r2, #0
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	fa00 f009 	lsl.w	r0, r0, r9
 8007468:	4310      	orrs	r0, r2
 800746a:	f84a 0b04 	str.w	r0, [sl], #4
 800746e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007472:	459c      	cmp	ip, r3
 8007474:	fa22 f20e 	lsr.w	r2, r2, lr
 8007478:	d8f3      	bhi.n	8007462 <__lshift+0x6e>
 800747a:	ebac 0304 	sub.w	r3, ip, r4
 800747e:	3b15      	subs	r3, #21
 8007480:	f023 0303 	bic.w	r3, r3, #3
 8007484:	3304      	adds	r3, #4
 8007486:	f104 0015 	add.w	r0, r4, #21
 800748a:	4584      	cmp	ip, r0
 800748c:	bf38      	it	cc
 800748e:	2304      	movcc	r3, #4
 8007490:	50ca      	str	r2, [r1, r3]
 8007492:	b10a      	cbz	r2, 8007498 <__lshift+0xa4>
 8007494:	f108 0602 	add.w	r6, r8, #2
 8007498:	3e01      	subs	r6, #1
 800749a:	4638      	mov	r0, r7
 800749c:	612e      	str	r6, [r5, #16]
 800749e:	4621      	mov	r1, r4
 80074a0:	f7ff fdd8 	bl	8007054 <_Bfree>
 80074a4:	4628      	mov	r0, r5
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80074ae:	3301      	adds	r3, #1
 80074b0:	e7c5      	b.n	800743e <__lshift+0x4a>
 80074b2:	3904      	subs	r1, #4
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80074bc:	459c      	cmp	ip, r3
 80074be:	d8f9      	bhi.n	80074b4 <__lshift+0xc0>
 80074c0:	e7ea      	b.n	8007498 <__lshift+0xa4>
 80074c2:	bf00      	nop
 80074c4:	08008398 	.word	0x08008398
 80074c8:	080083a9 	.word	0x080083a9

080074cc <__mcmp>:
 80074cc:	b530      	push	{r4, r5, lr}
 80074ce:	6902      	ldr	r2, [r0, #16]
 80074d0:	690c      	ldr	r4, [r1, #16]
 80074d2:	1b12      	subs	r2, r2, r4
 80074d4:	d10e      	bne.n	80074f4 <__mcmp+0x28>
 80074d6:	f100 0314 	add.w	r3, r0, #20
 80074da:	3114      	adds	r1, #20
 80074dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074ec:	42a5      	cmp	r5, r4
 80074ee:	d003      	beq.n	80074f8 <__mcmp+0x2c>
 80074f0:	d305      	bcc.n	80074fe <__mcmp+0x32>
 80074f2:	2201      	movs	r2, #1
 80074f4:	4610      	mov	r0, r2
 80074f6:	bd30      	pop	{r4, r5, pc}
 80074f8:	4283      	cmp	r3, r0
 80074fa:	d3f3      	bcc.n	80074e4 <__mcmp+0x18>
 80074fc:	e7fa      	b.n	80074f4 <__mcmp+0x28>
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007502:	e7f7      	b.n	80074f4 <__mcmp+0x28>

08007504 <__mdiff>:
 8007504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	4606      	mov	r6, r0
 800750c:	4611      	mov	r1, r2
 800750e:	4620      	mov	r0, r4
 8007510:	4690      	mov	r8, r2
 8007512:	f7ff ffdb 	bl	80074cc <__mcmp>
 8007516:	1e05      	subs	r5, r0, #0
 8007518:	d110      	bne.n	800753c <__mdiff+0x38>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff fd59 	bl	8006fd4 <_Balloc>
 8007522:	b930      	cbnz	r0, 8007532 <__mdiff+0x2e>
 8007524:	4b3a      	ldr	r3, [pc, #232]	; (8007610 <__mdiff+0x10c>)
 8007526:	4602      	mov	r2, r0
 8007528:	f240 2137 	movw	r1, #567	; 0x237
 800752c:	4839      	ldr	r0, [pc, #228]	; (8007614 <__mdiff+0x110>)
 800752e:	f000 fafd 	bl	8007b2c <__assert_func>
 8007532:	2301      	movs	r3, #1
 8007534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	bfa4      	itt	ge
 800753e:	4643      	movge	r3, r8
 8007540:	46a0      	movge	r8, r4
 8007542:	4630      	mov	r0, r6
 8007544:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007548:	bfa6      	itte	ge
 800754a:	461c      	movge	r4, r3
 800754c:	2500      	movge	r5, #0
 800754e:	2501      	movlt	r5, #1
 8007550:	f7ff fd40 	bl	8006fd4 <_Balloc>
 8007554:	b920      	cbnz	r0, 8007560 <__mdiff+0x5c>
 8007556:	4b2e      	ldr	r3, [pc, #184]	; (8007610 <__mdiff+0x10c>)
 8007558:	4602      	mov	r2, r0
 800755a:	f240 2145 	movw	r1, #581	; 0x245
 800755e:	e7e5      	b.n	800752c <__mdiff+0x28>
 8007560:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007564:	6926      	ldr	r6, [r4, #16]
 8007566:	60c5      	str	r5, [r0, #12]
 8007568:	f104 0914 	add.w	r9, r4, #20
 800756c:	f108 0514 	add.w	r5, r8, #20
 8007570:	f100 0e14 	add.w	lr, r0, #20
 8007574:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007578:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800757c:	f108 0210 	add.w	r2, r8, #16
 8007580:	46f2      	mov	sl, lr
 8007582:	2100      	movs	r1, #0
 8007584:	f859 3b04 	ldr.w	r3, [r9], #4
 8007588:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800758c:	fa11 f88b 	uxtah	r8, r1, fp
 8007590:	b299      	uxth	r1, r3
 8007592:	0c1b      	lsrs	r3, r3, #16
 8007594:	eba8 0801 	sub.w	r8, r8, r1
 8007598:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800759c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075a0:	fa1f f888 	uxth.w	r8, r8
 80075a4:	1419      	asrs	r1, r3, #16
 80075a6:	454e      	cmp	r6, r9
 80075a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075ac:	f84a 3b04 	str.w	r3, [sl], #4
 80075b0:	d8e8      	bhi.n	8007584 <__mdiff+0x80>
 80075b2:	1b33      	subs	r3, r6, r4
 80075b4:	3b15      	subs	r3, #21
 80075b6:	f023 0303 	bic.w	r3, r3, #3
 80075ba:	3304      	adds	r3, #4
 80075bc:	3415      	adds	r4, #21
 80075be:	42a6      	cmp	r6, r4
 80075c0:	bf38      	it	cc
 80075c2:	2304      	movcc	r3, #4
 80075c4:	441d      	add	r5, r3
 80075c6:	4473      	add	r3, lr
 80075c8:	469e      	mov	lr, r3
 80075ca:	462e      	mov	r6, r5
 80075cc:	4566      	cmp	r6, ip
 80075ce:	d30e      	bcc.n	80075ee <__mdiff+0xea>
 80075d0:	f10c 0203 	add.w	r2, ip, #3
 80075d4:	1b52      	subs	r2, r2, r5
 80075d6:	f022 0203 	bic.w	r2, r2, #3
 80075da:	3d03      	subs	r5, #3
 80075dc:	45ac      	cmp	ip, r5
 80075de:	bf38      	it	cc
 80075e0:	2200      	movcc	r2, #0
 80075e2:	4413      	add	r3, r2
 80075e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80075e8:	b17a      	cbz	r2, 800760a <__mdiff+0x106>
 80075ea:	6107      	str	r7, [r0, #16]
 80075ec:	e7a4      	b.n	8007538 <__mdiff+0x34>
 80075ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80075f2:	fa11 f288 	uxtah	r2, r1, r8
 80075f6:	1414      	asrs	r4, r2, #16
 80075f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075fc:	b292      	uxth	r2, r2
 80075fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007602:	f84e 2b04 	str.w	r2, [lr], #4
 8007606:	1421      	asrs	r1, r4, #16
 8007608:	e7e0      	b.n	80075cc <__mdiff+0xc8>
 800760a:	3f01      	subs	r7, #1
 800760c:	e7ea      	b.n	80075e4 <__mdiff+0xe0>
 800760e:	bf00      	nop
 8007610:	08008398 	.word	0x08008398
 8007614:	080083a9 	.word	0x080083a9

08007618 <__d2b>:
 8007618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800761c:	460f      	mov	r7, r1
 800761e:	2101      	movs	r1, #1
 8007620:	ec59 8b10 	vmov	r8, r9, d0
 8007624:	4616      	mov	r6, r2
 8007626:	f7ff fcd5 	bl	8006fd4 <_Balloc>
 800762a:	4604      	mov	r4, r0
 800762c:	b930      	cbnz	r0, 800763c <__d2b+0x24>
 800762e:	4602      	mov	r2, r0
 8007630:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <__d2b+0xac>)
 8007632:	4825      	ldr	r0, [pc, #148]	; (80076c8 <__d2b+0xb0>)
 8007634:	f240 310f 	movw	r1, #783	; 0x30f
 8007638:	f000 fa78 	bl	8007b2c <__assert_func>
 800763c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007644:	bb2d      	cbnz	r5, 8007692 <__d2b+0x7a>
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	f1b8 0300 	subs.w	r3, r8, #0
 800764c:	d026      	beq.n	800769c <__d2b+0x84>
 800764e:	4668      	mov	r0, sp
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	f7ff fd87 	bl	8007164 <__lo0bits>
 8007656:	e9dd 1200 	ldrd	r1, r2, [sp]
 800765a:	b1e8      	cbz	r0, 8007698 <__d2b+0x80>
 800765c:	f1c0 0320 	rsb	r3, r0, #32
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	430b      	orrs	r3, r1
 8007666:	40c2      	lsrs	r2, r0
 8007668:	6163      	str	r3, [r4, #20]
 800766a:	9201      	str	r2, [sp, #4]
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	61a3      	str	r3, [r4, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	bf14      	ite	ne
 8007674:	2202      	movne	r2, #2
 8007676:	2201      	moveq	r2, #1
 8007678:	6122      	str	r2, [r4, #16]
 800767a:	b1bd      	cbz	r5, 80076ac <__d2b+0x94>
 800767c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007680:	4405      	add	r5, r0
 8007682:	603d      	str	r5, [r7, #0]
 8007684:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007688:	6030      	str	r0, [r6, #0]
 800768a:	4620      	mov	r0, r4
 800768c:	b003      	add	sp, #12
 800768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007696:	e7d6      	b.n	8007646 <__d2b+0x2e>
 8007698:	6161      	str	r1, [r4, #20]
 800769a:	e7e7      	b.n	800766c <__d2b+0x54>
 800769c:	a801      	add	r0, sp, #4
 800769e:	f7ff fd61 	bl	8007164 <__lo0bits>
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	6163      	str	r3, [r4, #20]
 80076a6:	3020      	adds	r0, #32
 80076a8:	2201      	movs	r2, #1
 80076aa:	e7e5      	b.n	8007678 <__d2b+0x60>
 80076ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076b4:	6038      	str	r0, [r7, #0]
 80076b6:	6918      	ldr	r0, [r3, #16]
 80076b8:	f7ff fd34 	bl	8007124 <__hi0bits>
 80076bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076c0:	e7e2      	b.n	8007688 <__d2b+0x70>
 80076c2:	bf00      	nop
 80076c4:	08008398 	.word	0x08008398
 80076c8:	080083a9 	.word	0x080083a9

080076cc <__ssputs_r>:
 80076cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	688e      	ldr	r6, [r1, #8]
 80076d2:	461f      	mov	r7, r3
 80076d4:	42be      	cmp	r6, r7
 80076d6:	680b      	ldr	r3, [r1, #0]
 80076d8:	4682      	mov	sl, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	4690      	mov	r8, r2
 80076de:	d82c      	bhi.n	800773a <__ssputs_r+0x6e>
 80076e0:	898a      	ldrh	r2, [r1, #12]
 80076e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076e6:	d026      	beq.n	8007736 <__ssputs_r+0x6a>
 80076e8:	6965      	ldr	r5, [r4, #20]
 80076ea:	6909      	ldr	r1, [r1, #16]
 80076ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076f0:	eba3 0901 	sub.w	r9, r3, r1
 80076f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076f8:	1c7b      	adds	r3, r7, #1
 80076fa:	444b      	add	r3, r9
 80076fc:	106d      	asrs	r5, r5, #1
 80076fe:	429d      	cmp	r5, r3
 8007700:	bf38      	it	cc
 8007702:	461d      	movcc	r5, r3
 8007704:	0553      	lsls	r3, r2, #21
 8007706:	d527      	bpl.n	8007758 <__ssputs_r+0x8c>
 8007708:	4629      	mov	r1, r5
 800770a:	f7ff fbd7 	bl	8006ebc <_malloc_r>
 800770e:	4606      	mov	r6, r0
 8007710:	b360      	cbz	r0, 800776c <__ssputs_r+0xa0>
 8007712:	6921      	ldr	r1, [r4, #16]
 8007714:	464a      	mov	r2, r9
 8007716:	f7fe fcd3 	bl	80060c0 <memcpy>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	6126      	str	r6, [r4, #16]
 8007728:	6165      	str	r5, [r4, #20]
 800772a:	444e      	add	r6, r9
 800772c:	eba5 0509 	sub.w	r5, r5, r9
 8007730:	6026      	str	r6, [r4, #0]
 8007732:	60a5      	str	r5, [r4, #8]
 8007734:	463e      	mov	r6, r7
 8007736:	42be      	cmp	r6, r7
 8007738:	d900      	bls.n	800773c <__ssputs_r+0x70>
 800773a:	463e      	mov	r6, r7
 800773c:	6820      	ldr	r0, [r4, #0]
 800773e:	4632      	mov	r2, r6
 8007740:	4641      	mov	r1, r8
 8007742:	f000 f9c9 	bl	8007ad8 <memmove>
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	1b9b      	subs	r3, r3, r6
 800774a:	60a3      	str	r3, [r4, #8]
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	4433      	add	r3, r6
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	2000      	movs	r0, #0
 8007754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007758:	462a      	mov	r2, r5
 800775a:	f000 fa2d 	bl	8007bb8 <_realloc_r>
 800775e:	4606      	mov	r6, r0
 8007760:	2800      	cmp	r0, #0
 8007762:	d1e0      	bne.n	8007726 <__ssputs_r+0x5a>
 8007764:	6921      	ldr	r1, [r4, #16]
 8007766:	4650      	mov	r0, sl
 8007768:	f7ff fb34 	bl	8006dd4 <_free_r>
 800776c:	230c      	movs	r3, #12
 800776e:	f8ca 3000 	str.w	r3, [sl]
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800777e:	e7e9      	b.n	8007754 <__ssputs_r+0x88>

08007780 <_svfiprintf_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	4698      	mov	r8, r3
 8007786:	898b      	ldrh	r3, [r1, #12]
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	b09d      	sub	sp, #116	; 0x74
 800778c:	4607      	mov	r7, r0
 800778e:	460d      	mov	r5, r1
 8007790:	4614      	mov	r4, r2
 8007792:	d50e      	bpl.n	80077b2 <_svfiprintf_r+0x32>
 8007794:	690b      	ldr	r3, [r1, #16]
 8007796:	b963      	cbnz	r3, 80077b2 <_svfiprintf_r+0x32>
 8007798:	2140      	movs	r1, #64	; 0x40
 800779a:	f7ff fb8f 	bl	8006ebc <_malloc_r>
 800779e:	6028      	str	r0, [r5, #0]
 80077a0:	6128      	str	r0, [r5, #16]
 80077a2:	b920      	cbnz	r0, 80077ae <_svfiprintf_r+0x2e>
 80077a4:	230c      	movs	r3, #12
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ac:	e0d0      	b.n	8007950 <_svfiprintf_r+0x1d0>
 80077ae:	2340      	movs	r3, #64	; 0x40
 80077b0:	616b      	str	r3, [r5, #20]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	2320      	movs	r3, #32
 80077b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c0:	2330      	movs	r3, #48	; 0x30
 80077c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007968 <_svfiprintf_r+0x1e8>
 80077c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ca:	f04f 0901 	mov.w	r9, #1
 80077ce:	4623      	mov	r3, r4
 80077d0:	469a      	mov	sl, r3
 80077d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d6:	b10a      	cbz	r2, 80077dc <_svfiprintf_r+0x5c>
 80077d8:	2a25      	cmp	r2, #37	; 0x25
 80077da:	d1f9      	bne.n	80077d0 <_svfiprintf_r+0x50>
 80077dc:	ebba 0b04 	subs.w	fp, sl, r4
 80077e0:	d00b      	beq.n	80077fa <_svfiprintf_r+0x7a>
 80077e2:	465b      	mov	r3, fp
 80077e4:	4622      	mov	r2, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff ff6f 	bl	80076cc <__ssputs_r>
 80077ee:	3001      	adds	r0, #1
 80077f0:	f000 80a9 	beq.w	8007946 <_svfiprintf_r+0x1c6>
 80077f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f6:	445a      	add	r2, fp
 80077f8:	9209      	str	r2, [sp, #36]	; 0x24
 80077fa:	f89a 3000 	ldrb.w	r3, [sl]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80a1 	beq.w	8007946 <_svfiprintf_r+0x1c6>
 8007804:	2300      	movs	r3, #0
 8007806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800780a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780e:	f10a 0a01 	add.w	sl, sl, #1
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	9307      	str	r3, [sp, #28]
 8007816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800781a:	931a      	str	r3, [sp, #104]	; 0x68
 800781c:	4654      	mov	r4, sl
 800781e:	2205      	movs	r2, #5
 8007820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007824:	4850      	ldr	r0, [pc, #320]	; (8007968 <_svfiprintf_r+0x1e8>)
 8007826:	f7f8 fcf3 	bl	8000210 <memchr>
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	b9d8      	cbnz	r0, 8007866 <_svfiprintf_r+0xe6>
 800782e:	06d0      	lsls	r0, r2, #27
 8007830:	bf44      	itt	mi
 8007832:	2320      	movmi	r3, #32
 8007834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007838:	0711      	lsls	r1, r2, #28
 800783a:	bf44      	itt	mi
 800783c:	232b      	movmi	r3, #43	; 0x2b
 800783e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007842:	f89a 3000 	ldrb.w	r3, [sl]
 8007846:	2b2a      	cmp	r3, #42	; 0x2a
 8007848:	d015      	beq.n	8007876 <_svfiprintf_r+0xf6>
 800784a:	9a07      	ldr	r2, [sp, #28]
 800784c:	4654      	mov	r4, sl
 800784e:	2000      	movs	r0, #0
 8007850:	f04f 0c0a 	mov.w	ip, #10
 8007854:	4621      	mov	r1, r4
 8007856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800785a:	3b30      	subs	r3, #48	; 0x30
 800785c:	2b09      	cmp	r3, #9
 800785e:	d94d      	bls.n	80078fc <_svfiprintf_r+0x17c>
 8007860:	b1b0      	cbz	r0, 8007890 <_svfiprintf_r+0x110>
 8007862:	9207      	str	r2, [sp, #28]
 8007864:	e014      	b.n	8007890 <_svfiprintf_r+0x110>
 8007866:	eba0 0308 	sub.w	r3, r0, r8
 800786a:	fa09 f303 	lsl.w	r3, r9, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	46a2      	mov	sl, r4
 8007874:	e7d2      	b.n	800781c <_svfiprintf_r+0x9c>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	1d19      	adds	r1, r3, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	9103      	str	r1, [sp, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfbb      	ittet	lt
 8007882:	425b      	neglt	r3, r3
 8007884:	f042 0202 	orrlt.w	r2, r2, #2
 8007888:	9307      	strge	r3, [sp, #28]
 800788a:	9307      	strlt	r3, [sp, #28]
 800788c:	bfb8      	it	lt
 800788e:	9204      	strlt	r2, [sp, #16]
 8007890:	7823      	ldrb	r3, [r4, #0]
 8007892:	2b2e      	cmp	r3, #46	; 0x2e
 8007894:	d10c      	bne.n	80078b0 <_svfiprintf_r+0x130>
 8007896:	7863      	ldrb	r3, [r4, #1]
 8007898:	2b2a      	cmp	r3, #42	; 0x2a
 800789a:	d134      	bne.n	8007906 <_svfiprintf_r+0x186>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	1d1a      	adds	r2, r3, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	9203      	str	r2, [sp, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfb8      	it	lt
 80078a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078ac:	3402      	adds	r4, #2
 80078ae:	9305      	str	r3, [sp, #20]
 80078b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007978 <_svfiprintf_r+0x1f8>
 80078b4:	7821      	ldrb	r1, [r4, #0]
 80078b6:	2203      	movs	r2, #3
 80078b8:	4650      	mov	r0, sl
 80078ba:	f7f8 fca9 	bl	8000210 <memchr>
 80078be:	b138      	cbz	r0, 80078d0 <_svfiprintf_r+0x150>
 80078c0:	9b04      	ldr	r3, [sp, #16]
 80078c2:	eba0 000a 	sub.w	r0, r0, sl
 80078c6:	2240      	movs	r2, #64	; 0x40
 80078c8:	4082      	lsls	r2, r0
 80078ca:	4313      	orrs	r3, r2
 80078cc:	3401      	adds	r4, #1
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d4:	4825      	ldr	r0, [pc, #148]	; (800796c <_svfiprintf_r+0x1ec>)
 80078d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078da:	2206      	movs	r2, #6
 80078dc:	f7f8 fc98 	bl	8000210 <memchr>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d038      	beq.n	8007956 <_svfiprintf_r+0x1d6>
 80078e4:	4b22      	ldr	r3, [pc, #136]	; (8007970 <_svfiprintf_r+0x1f0>)
 80078e6:	bb1b      	cbnz	r3, 8007930 <_svfiprintf_r+0x1b0>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	3307      	adds	r3, #7
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f6:	4433      	add	r3, r6
 80078f8:	9309      	str	r3, [sp, #36]	; 0x24
 80078fa:	e768      	b.n	80077ce <_svfiprintf_r+0x4e>
 80078fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007900:	460c      	mov	r4, r1
 8007902:	2001      	movs	r0, #1
 8007904:	e7a6      	b.n	8007854 <_svfiprintf_r+0xd4>
 8007906:	2300      	movs	r3, #0
 8007908:	3401      	adds	r4, #1
 800790a:	9305      	str	r3, [sp, #20]
 800790c:	4619      	mov	r1, r3
 800790e:	f04f 0c0a 	mov.w	ip, #10
 8007912:	4620      	mov	r0, r4
 8007914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007918:	3a30      	subs	r2, #48	; 0x30
 800791a:	2a09      	cmp	r2, #9
 800791c:	d903      	bls.n	8007926 <_svfiprintf_r+0x1a6>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0c6      	beq.n	80078b0 <_svfiprintf_r+0x130>
 8007922:	9105      	str	r1, [sp, #20]
 8007924:	e7c4      	b.n	80078b0 <_svfiprintf_r+0x130>
 8007926:	fb0c 2101 	mla	r1, ip, r1, r2
 800792a:	4604      	mov	r4, r0
 800792c:	2301      	movs	r3, #1
 800792e:	e7f0      	b.n	8007912 <_svfiprintf_r+0x192>
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <_svfiprintf_r+0x1f4>)
 8007938:	a904      	add	r1, sp, #16
 800793a:	4638      	mov	r0, r7
 800793c:	f7fd fe68 	bl	8005610 <_printf_float>
 8007940:	1c42      	adds	r2, r0, #1
 8007942:	4606      	mov	r6, r0
 8007944:	d1d6      	bne.n	80078f4 <_svfiprintf_r+0x174>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	065b      	lsls	r3, r3, #25
 800794a:	f53f af2d 	bmi.w	80077a8 <_svfiprintf_r+0x28>
 800794e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007950:	b01d      	add	sp, #116	; 0x74
 8007952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007956:	ab03      	add	r3, sp, #12
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	462a      	mov	r2, r5
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <_svfiprintf_r+0x1f4>)
 800795e:	a904      	add	r1, sp, #16
 8007960:	4638      	mov	r0, r7
 8007962:	f7fe f8f9 	bl	8005b58 <_printf_i>
 8007966:	e7eb      	b.n	8007940 <_svfiprintf_r+0x1c0>
 8007968:	08008504 	.word	0x08008504
 800796c:	0800850e 	.word	0x0800850e
 8007970:	08005611 	.word	0x08005611
 8007974:	080076cd 	.word	0x080076cd
 8007978:	0800850a 	.word	0x0800850a

0800797c <__sflush_r>:
 800797c:	898a      	ldrh	r2, [r1, #12]
 800797e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	4605      	mov	r5, r0
 8007984:	0710      	lsls	r0, r2, #28
 8007986:	460c      	mov	r4, r1
 8007988:	d458      	bmi.n	8007a3c <__sflush_r+0xc0>
 800798a:	684b      	ldr	r3, [r1, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	dc05      	bgt.n	800799c <__sflush_r+0x20>
 8007990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	dc02      	bgt.n	800799c <__sflush_r+0x20>
 8007996:	2000      	movs	r0, #0
 8007998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800799c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d0f9      	beq.n	8007996 <__sflush_r+0x1a>
 80079a2:	2300      	movs	r3, #0
 80079a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079a8:	682f      	ldr	r7, [r5, #0]
 80079aa:	6a21      	ldr	r1, [r4, #32]
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	d032      	beq.n	8007a16 <__sflush_r+0x9a>
 80079b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	075a      	lsls	r2, r3, #29
 80079b6:	d505      	bpl.n	80079c4 <__sflush_r+0x48>
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	1ac0      	subs	r0, r0, r3
 80079bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079be:	b10b      	cbz	r3, 80079c4 <__sflush_r+0x48>
 80079c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079c2:	1ac0      	subs	r0, r0, r3
 80079c4:	2300      	movs	r3, #0
 80079c6:	4602      	mov	r2, r0
 80079c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ca:	6a21      	ldr	r1, [r4, #32]
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b0      	blx	r6
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	d106      	bne.n	80079e4 <__sflush_r+0x68>
 80079d6:	6829      	ldr	r1, [r5, #0]
 80079d8:	291d      	cmp	r1, #29
 80079da:	d82b      	bhi.n	8007a34 <__sflush_r+0xb8>
 80079dc:	4a29      	ldr	r2, [pc, #164]	; (8007a84 <__sflush_r+0x108>)
 80079de:	410a      	asrs	r2, r1
 80079e0:	07d6      	lsls	r6, r2, #31
 80079e2:	d427      	bmi.n	8007a34 <__sflush_r+0xb8>
 80079e4:	2200      	movs	r2, #0
 80079e6:	6062      	str	r2, [r4, #4]
 80079e8:	04d9      	lsls	r1, r3, #19
 80079ea:	6922      	ldr	r2, [r4, #16]
 80079ec:	6022      	str	r2, [r4, #0]
 80079ee:	d504      	bpl.n	80079fa <__sflush_r+0x7e>
 80079f0:	1c42      	adds	r2, r0, #1
 80079f2:	d101      	bne.n	80079f8 <__sflush_r+0x7c>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b903      	cbnz	r3, 80079fa <__sflush_r+0x7e>
 80079f8:	6560      	str	r0, [r4, #84]	; 0x54
 80079fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079fc:	602f      	str	r7, [r5, #0]
 80079fe:	2900      	cmp	r1, #0
 8007a00:	d0c9      	beq.n	8007996 <__sflush_r+0x1a>
 8007a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a06:	4299      	cmp	r1, r3
 8007a08:	d002      	beq.n	8007a10 <__sflush_r+0x94>
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f7ff f9e2 	bl	8006dd4 <_free_r>
 8007a10:	2000      	movs	r0, #0
 8007a12:	6360      	str	r0, [r4, #52]	; 0x34
 8007a14:	e7c0      	b.n	8007998 <__sflush_r+0x1c>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b0      	blx	r6
 8007a1c:	1c41      	adds	r1, r0, #1
 8007a1e:	d1c8      	bne.n	80079b2 <__sflush_r+0x36>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0c5      	beq.n	80079b2 <__sflush_r+0x36>
 8007a26:	2b1d      	cmp	r3, #29
 8007a28:	d001      	beq.n	8007a2e <__sflush_r+0xb2>
 8007a2a:	2b16      	cmp	r3, #22
 8007a2c:	d101      	bne.n	8007a32 <__sflush_r+0xb6>
 8007a2e:	602f      	str	r7, [r5, #0]
 8007a30:	e7b1      	b.n	8007996 <__sflush_r+0x1a>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	e7ad      	b.n	8007998 <__sflush_r+0x1c>
 8007a3c:	690f      	ldr	r7, [r1, #16]
 8007a3e:	2f00      	cmp	r7, #0
 8007a40:	d0a9      	beq.n	8007996 <__sflush_r+0x1a>
 8007a42:	0793      	lsls	r3, r2, #30
 8007a44:	680e      	ldr	r6, [r1, #0]
 8007a46:	bf08      	it	eq
 8007a48:	694b      	ldreq	r3, [r1, #20]
 8007a4a:	600f      	str	r7, [r1, #0]
 8007a4c:	bf18      	it	ne
 8007a4e:	2300      	movne	r3, #0
 8007a50:	eba6 0807 	sub.w	r8, r6, r7
 8007a54:	608b      	str	r3, [r1, #8]
 8007a56:	f1b8 0f00 	cmp.w	r8, #0
 8007a5a:	dd9c      	ble.n	8007996 <__sflush_r+0x1a>
 8007a5c:	6a21      	ldr	r1, [r4, #32]
 8007a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a60:	4643      	mov	r3, r8
 8007a62:	463a      	mov	r2, r7
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b0      	blx	r6
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	dc06      	bgt.n	8007a7a <__sflush_r+0xfe>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a78:	e78e      	b.n	8007998 <__sflush_r+0x1c>
 8007a7a:	4407      	add	r7, r0
 8007a7c:	eba8 0800 	sub.w	r8, r8, r0
 8007a80:	e7e9      	b.n	8007a56 <__sflush_r+0xda>
 8007a82:	bf00      	nop
 8007a84:	dfbffffe 	.word	0xdfbffffe

08007a88 <_fflush_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b913      	cbnz	r3, 8007a98 <_fflush_r+0x10>
 8007a92:	2500      	movs	r5, #0
 8007a94:	4628      	mov	r0, r5
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	b118      	cbz	r0, 8007aa2 <_fflush_r+0x1a>
 8007a9a:	6a03      	ldr	r3, [r0, #32]
 8007a9c:	b90b      	cbnz	r3, 8007aa2 <_fflush_r+0x1a>
 8007a9e:	f7fe f9f7 	bl	8005e90 <__sinit>
 8007aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0f3      	beq.n	8007a92 <_fflush_r+0xa>
 8007aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aac:	07d0      	lsls	r0, r2, #31
 8007aae:	d404      	bmi.n	8007aba <_fflush_r+0x32>
 8007ab0:	0599      	lsls	r1, r3, #22
 8007ab2:	d402      	bmi.n	8007aba <_fflush_r+0x32>
 8007ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ab6:	f7fe fb01 	bl	80060bc <__retarget_lock_acquire_recursive>
 8007aba:	4628      	mov	r0, r5
 8007abc:	4621      	mov	r1, r4
 8007abe:	f7ff ff5d 	bl	800797c <__sflush_r>
 8007ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ac4:	07da      	lsls	r2, r3, #31
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	d4e4      	bmi.n	8007a94 <_fflush_r+0xc>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	059b      	lsls	r3, r3, #22
 8007ace:	d4e1      	bmi.n	8007a94 <_fflush_r+0xc>
 8007ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ad2:	f7fe faf4 	bl	80060be <__retarget_lock_release_recursive>
 8007ad6:	e7dd      	b.n	8007a94 <_fflush_r+0xc>

08007ad8 <memmove>:
 8007ad8:	4288      	cmp	r0, r1
 8007ada:	b510      	push	{r4, lr}
 8007adc:	eb01 0402 	add.w	r4, r1, r2
 8007ae0:	d902      	bls.n	8007ae8 <memmove+0x10>
 8007ae2:	4284      	cmp	r4, r0
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	d807      	bhi.n	8007af8 <memmove+0x20>
 8007ae8:	1e43      	subs	r3, r0, #1
 8007aea:	42a1      	cmp	r1, r4
 8007aec:	d008      	beq.n	8007b00 <memmove+0x28>
 8007aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007af6:	e7f8      	b.n	8007aea <memmove+0x12>
 8007af8:	4402      	add	r2, r0
 8007afa:	4601      	mov	r1, r0
 8007afc:	428a      	cmp	r2, r1
 8007afe:	d100      	bne.n	8007b02 <memmove+0x2a>
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b0a:	e7f7      	b.n	8007afc <memmove+0x24>

08007b0c <_sbrk_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d06      	ldr	r5, [pc, #24]	; (8007b28 <_sbrk_r+0x1c>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	602b      	str	r3, [r5, #0]
 8007b18:	f7f9 ffca 	bl	8001ab0 <_sbrk>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_sbrk_r+0x1a>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_sbrk_r+0x1a>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	200007bc 	.word	0x200007bc

08007b2c <__assert_func>:
 8007b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b2e:	4614      	mov	r4, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <__assert_func+0x2c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4605      	mov	r5, r0
 8007b38:	68d8      	ldr	r0, [r3, #12]
 8007b3a:	b14c      	cbz	r4, 8007b50 <__assert_func+0x24>
 8007b3c:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <__assert_func+0x30>)
 8007b3e:	9100      	str	r1, [sp, #0]
 8007b40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b44:	4906      	ldr	r1, [pc, #24]	; (8007b60 <__assert_func+0x34>)
 8007b46:	462b      	mov	r3, r5
 8007b48:	f000 f872 	bl	8007c30 <fiprintf>
 8007b4c:	f000 f882 	bl	8007c54 <abort>
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <__assert_func+0x38>)
 8007b52:	461c      	mov	r4, r3
 8007b54:	e7f3      	b.n	8007b3e <__assert_func+0x12>
 8007b56:	bf00      	nop
 8007b58:	20000068 	.word	0x20000068
 8007b5c:	0800851f 	.word	0x0800851f
 8007b60:	0800852c 	.word	0x0800852c
 8007b64:	0800855a 	.word	0x0800855a

08007b68 <_calloc_r>:
 8007b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b6a:	fba1 2402 	umull	r2, r4, r1, r2
 8007b6e:	b94c      	cbnz	r4, 8007b84 <_calloc_r+0x1c>
 8007b70:	4611      	mov	r1, r2
 8007b72:	9201      	str	r2, [sp, #4]
 8007b74:	f7ff f9a2 	bl	8006ebc <_malloc_r>
 8007b78:	9a01      	ldr	r2, [sp, #4]
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	b930      	cbnz	r0, 8007b8c <_calloc_r+0x24>
 8007b7e:	4628      	mov	r0, r5
 8007b80:	b003      	add	sp, #12
 8007b82:	bd30      	pop	{r4, r5, pc}
 8007b84:	220c      	movs	r2, #12
 8007b86:	6002      	str	r2, [r0, #0]
 8007b88:	2500      	movs	r5, #0
 8007b8a:	e7f8      	b.n	8007b7e <_calloc_r+0x16>
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	f7fe fa18 	bl	8005fc2 <memset>
 8007b92:	e7f4      	b.n	8007b7e <_calloc_r+0x16>

08007b94 <__ascii_mbtowc>:
 8007b94:	b082      	sub	sp, #8
 8007b96:	b901      	cbnz	r1, 8007b9a <__ascii_mbtowc+0x6>
 8007b98:	a901      	add	r1, sp, #4
 8007b9a:	b142      	cbz	r2, 8007bae <__ascii_mbtowc+0x1a>
 8007b9c:	b14b      	cbz	r3, 8007bb2 <__ascii_mbtowc+0x1e>
 8007b9e:	7813      	ldrb	r3, [r2, #0]
 8007ba0:	600b      	str	r3, [r1, #0]
 8007ba2:	7812      	ldrb	r2, [r2, #0]
 8007ba4:	1e10      	subs	r0, r2, #0
 8007ba6:	bf18      	it	ne
 8007ba8:	2001      	movne	r0, #1
 8007baa:	b002      	add	sp, #8
 8007bac:	4770      	bx	lr
 8007bae:	4610      	mov	r0, r2
 8007bb0:	e7fb      	b.n	8007baa <__ascii_mbtowc+0x16>
 8007bb2:	f06f 0001 	mvn.w	r0, #1
 8007bb6:	e7f8      	b.n	8007baa <__ascii_mbtowc+0x16>

08007bb8 <_realloc_r>:
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	4614      	mov	r4, r2
 8007bc0:	460e      	mov	r6, r1
 8007bc2:	b921      	cbnz	r1, 8007bce <_realloc_r+0x16>
 8007bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc8:	4611      	mov	r1, r2
 8007bca:	f7ff b977 	b.w	8006ebc <_malloc_r>
 8007bce:	b92a      	cbnz	r2, 8007bdc <_realloc_r+0x24>
 8007bd0:	f7ff f900 	bl	8006dd4 <_free_r>
 8007bd4:	4625      	mov	r5, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	f000 f841 	bl	8007c62 <_malloc_usable_size_r>
 8007be0:	4284      	cmp	r4, r0
 8007be2:	4607      	mov	r7, r0
 8007be4:	d802      	bhi.n	8007bec <_realloc_r+0x34>
 8007be6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bea:	d812      	bhi.n	8007c12 <_realloc_r+0x5a>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f7ff f964 	bl	8006ebc <_malloc_r>
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d0ed      	beq.n	8007bd6 <_realloc_r+0x1e>
 8007bfa:	42bc      	cmp	r4, r7
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4631      	mov	r1, r6
 8007c00:	bf28      	it	cs
 8007c02:	463a      	movcs	r2, r7
 8007c04:	f7fe fa5c 	bl	80060c0 <memcpy>
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f7ff f8e2 	bl	8006dd4 <_free_r>
 8007c10:	e7e1      	b.n	8007bd6 <_realloc_r+0x1e>
 8007c12:	4635      	mov	r5, r6
 8007c14:	e7df      	b.n	8007bd6 <_realloc_r+0x1e>

08007c16 <__ascii_wctomb>:
 8007c16:	b149      	cbz	r1, 8007c2c <__ascii_wctomb+0x16>
 8007c18:	2aff      	cmp	r2, #255	; 0xff
 8007c1a:	bf85      	ittet	hi
 8007c1c:	238a      	movhi	r3, #138	; 0x8a
 8007c1e:	6003      	strhi	r3, [r0, #0]
 8007c20:	700a      	strbls	r2, [r1, #0]
 8007c22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007c26:	bf98      	it	ls
 8007c28:	2001      	movls	r0, #1
 8007c2a:	4770      	bx	lr
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4770      	bx	lr

08007c30 <fiprintf>:
 8007c30:	b40e      	push	{r1, r2, r3}
 8007c32:	b503      	push	{r0, r1, lr}
 8007c34:	4601      	mov	r1, r0
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	4805      	ldr	r0, [pc, #20]	; (8007c50 <fiprintf+0x20>)
 8007c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	f000 f83f 	bl	8007cc4 <_vfiprintf_r>
 8007c46:	b002      	add	sp, #8
 8007c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c4c:	b003      	add	sp, #12
 8007c4e:	4770      	bx	lr
 8007c50:	20000068 	.word	0x20000068

08007c54 <abort>:
 8007c54:	b508      	push	{r3, lr}
 8007c56:	2006      	movs	r0, #6
 8007c58:	f000 fa0c 	bl	8008074 <raise>
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	f7f9 feb0 	bl	80019c2 <_exit>

08007c62 <_malloc_usable_size_r>:
 8007c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c66:	1f18      	subs	r0, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfbc      	itt	lt
 8007c6c:	580b      	ldrlt	r3, [r1, r0]
 8007c6e:	18c0      	addlt	r0, r0, r3
 8007c70:	4770      	bx	lr

08007c72 <__sfputc_r>:
 8007c72:	6893      	ldr	r3, [r2, #8]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	b410      	push	{r4}
 8007c7a:	6093      	str	r3, [r2, #8]
 8007c7c:	da08      	bge.n	8007c90 <__sfputc_r+0x1e>
 8007c7e:	6994      	ldr	r4, [r2, #24]
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	db01      	blt.n	8007c88 <__sfputc_r+0x16>
 8007c84:	290a      	cmp	r1, #10
 8007c86:	d103      	bne.n	8007c90 <__sfputc_r+0x1e>
 8007c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c8c:	f000 b934 	b.w	8007ef8 <__swbuf_r>
 8007c90:	6813      	ldr	r3, [r2, #0]
 8007c92:	1c58      	adds	r0, r3, #1
 8007c94:	6010      	str	r0, [r2, #0]
 8007c96:	7019      	strb	r1, [r3, #0]
 8007c98:	4608      	mov	r0, r1
 8007c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <__sfputs_r>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	18d5      	adds	r5, r2, r3
 8007caa:	42ac      	cmp	r4, r5
 8007cac:	d101      	bne.n	8007cb2 <__sfputs_r+0x12>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e007      	b.n	8007cc2 <__sfputs_r+0x22>
 8007cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb6:	463a      	mov	r2, r7
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7ff ffda 	bl	8007c72 <__sfputc_r>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d1f3      	bne.n	8007caa <__sfputs_r+0xa>
 8007cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cc4 <_vfiprintf_r>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	460d      	mov	r5, r1
 8007cca:	b09d      	sub	sp, #116	; 0x74
 8007ccc:	4614      	mov	r4, r2
 8007cce:	4698      	mov	r8, r3
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	b118      	cbz	r0, 8007cdc <_vfiprintf_r+0x18>
 8007cd4:	6a03      	ldr	r3, [r0, #32]
 8007cd6:	b90b      	cbnz	r3, 8007cdc <_vfiprintf_r+0x18>
 8007cd8:	f7fe f8da 	bl	8005e90 <__sinit>
 8007cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_vfiprintf_r+0x2a>
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	059a      	lsls	r2, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_vfiprintf_r+0x2a>
 8007ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cea:	f7fe f9e7 	bl	80060bc <__retarget_lock_acquire_recursive>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	d501      	bpl.n	8007cf8 <_vfiprintf_r+0x34>
 8007cf4:	692b      	ldr	r3, [r5, #16]
 8007cf6:	b99b      	cbnz	r3, 8007d20 <_vfiprintf_r+0x5c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f93a 	bl	8007f74 <__swsetup_r>
 8007d00:	b170      	cbz	r0, 8007d20 <_vfiprintf_r+0x5c>
 8007d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d04:	07dc      	lsls	r4, r3, #31
 8007d06:	d504      	bpl.n	8007d12 <_vfiprintf_r+0x4e>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d0c:	b01d      	add	sp, #116	; 0x74
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	0598      	lsls	r0, r3, #22
 8007d16:	d4f7      	bmi.n	8007d08 <_vfiprintf_r+0x44>
 8007d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1a:	f7fe f9d0 	bl	80060be <__retarget_lock_release_recursive>
 8007d1e:	e7f3      	b.n	8007d08 <_vfiprintf_r+0x44>
 8007d20:	2300      	movs	r3, #0
 8007d22:	9309      	str	r3, [sp, #36]	; 0x24
 8007d24:	2320      	movs	r3, #32
 8007d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d2e:	2330      	movs	r3, #48	; 0x30
 8007d30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ee4 <_vfiprintf_r+0x220>
 8007d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d38:	f04f 0901 	mov.w	r9, #1
 8007d3c:	4623      	mov	r3, r4
 8007d3e:	469a      	mov	sl, r3
 8007d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d44:	b10a      	cbz	r2, 8007d4a <_vfiprintf_r+0x86>
 8007d46:	2a25      	cmp	r2, #37	; 0x25
 8007d48:	d1f9      	bne.n	8007d3e <_vfiprintf_r+0x7a>
 8007d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d4e:	d00b      	beq.n	8007d68 <_vfiprintf_r+0xa4>
 8007d50:	465b      	mov	r3, fp
 8007d52:	4622      	mov	r2, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ffa2 	bl	8007ca0 <__sfputs_r>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f000 80a9 	beq.w	8007eb4 <_vfiprintf_r+0x1f0>
 8007d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d64:	445a      	add	r2, fp
 8007d66:	9209      	str	r2, [sp, #36]	; 0x24
 8007d68:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80a1 	beq.w	8007eb4 <_vfiprintf_r+0x1f0>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7c:	f10a 0a01 	add.w	sl, sl, #1
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d88:	931a      	str	r3, [sp, #104]	; 0x68
 8007d8a:	4654      	mov	r4, sl
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d92:	4854      	ldr	r0, [pc, #336]	; (8007ee4 <_vfiprintf_r+0x220>)
 8007d94:	f7f8 fa3c 	bl	8000210 <memchr>
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	b9d8      	cbnz	r0, 8007dd4 <_vfiprintf_r+0x110>
 8007d9c:	06d1      	lsls	r1, r2, #27
 8007d9e:	bf44      	itt	mi
 8007da0:	2320      	movmi	r3, #32
 8007da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da6:	0713      	lsls	r3, r2, #28
 8007da8:	bf44      	itt	mi
 8007daa:	232b      	movmi	r3, #43	; 0x2b
 8007dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db0:	f89a 3000 	ldrb.w	r3, [sl]
 8007db4:	2b2a      	cmp	r3, #42	; 0x2a
 8007db6:	d015      	beq.n	8007de4 <_vfiprintf_r+0x120>
 8007db8:	9a07      	ldr	r2, [sp, #28]
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f04f 0c0a 	mov.w	ip, #10
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc8:	3b30      	subs	r3, #48	; 0x30
 8007dca:	2b09      	cmp	r3, #9
 8007dcc:	d94d      	bls.n	8007e6a <_vfiprintf_r+0x1a6>
 8007dce:	b1b0      	cbz	r0, 8007dfe <_vfiprintf_r+0x13a>
 8007dd0:	9207      	str	r2, [sp, #28]
 8007dd2:	e014      	b.n	8007dfe <_vfiprintf_r+0x13a>
 8007dd4:	eba0 0308 	sub.w	r3, r0, r8
 8007dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	46a2      	mov	sl, r4
 8007de2:	e7d2      	b.n	8007d8a <_vfiprintf_r+0xc6>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d19      	adds	r1, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9103      	str	r1, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfbb      	ittet	lt
 8007df0:	425b      	neglt	r3, r3
 8007df2:	f042 0202 	orrlt.w	r2, r2, #2
 8007df6:	9307      	strge	r3, [sp, #28]
 8007df8:	9307      	strlt	r3, [sp, #28]
 8007dfa:	bfb8      	it	lt
 8007dfc:	9204      	strlt	r2, [sp, #16]
 8007dfe:	7823      	ldrb	r3, [r4, #0]
 8007e00:	2b2e      	cmp	r3, #46	; 0x2e
 8007e02:	d10c      	bne.n	8007e1e <_vfiprintf_r+0x15a>
 8007e04:	7863      	ldrb	r3, [r4, #1]
 8007e06:	2b2a      	cmp	r3, #42	; 0x2a
 8007e08:	d134      	bne.n	8007e74 <_vfiprintf_r+0x1b0>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9203      	str	r2, [sp, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfb8      	it	lt
 8007e16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e1a:	3402      	adds	r4, #2
 8007e1c:	9305      	str	r3, [sp, #20]
 8007e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ef4 <_vfiprintf_r+0x230>
 8007e22:	7821      	ldrb	r1, [r4, #0]
 8007e24:	2203      	movs	r2, #3
 8007e26:	4650      	mov	r0, sl
 8007e28:	f7f8 f9f2 	bl	8000210 <memchr>
 8007e2c:	b138      	cbz	r0, 8007e3e <_vfiprintf_r+0x17a>
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	eba0 000a 	sub.w	r0, r0, sl
 8007e34:	2240      	movs	r2, #64	; 0x40
 8007e36:	4082      	lsls	r2, r0
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	3401      	adds	r4, #1
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e42:	4829      	ldr	r0, [pc, #164]	; (8007ee8 <_vfiprintf_r+0x224>)
 8007e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e48:	2206      	movs	r2, #6
 8007e4a:	f7f8 f9e1 	bl	8000210 <memchr>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d03f      	beq.n	8007ed2 <_vfiprintf_r+0x20e>
 8007e52:	4b26      	ldr	r3, [pc, #152]	; (8007eec <_vfiprintf_r+0x228>)
 8007e54:	bb1b      	cbnz	r3, 8007e9e <_vfiprintf_r+0x1da>
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	3307      	adds	r3, #7
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	3308      	adds	r3, #8
 8007e60:	9303      	str	r3, [sp, #12]
 8007e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e64:	443b      	add	r3, r7
 8007e66:	9309      	str	r3, [sp, #36]	; 0x24
 8007e68:	e768      	b.n	8007d3c <_vfiprintf_r+0x78>
 8007e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e6e:	460c      	mov	r4, r1
 8007e70:	2001      	movs	r0, #1
 8007e72:	e7a6      	b.n	8007dc2 <_vfiprintf_r+0xfe>
 8007e74:	2300      	movs	r3, #0
 8007e76:	3401      	adds	r4, #1
 8007e78:	9305      	str	r3, [sp, #20]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f04f 0c0a 	mov.w	ip, #10
 8007e80:	4620      	mov	r0, r4
 8007e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e86:	3a30      	subs	r2, #48	; 0x30
 8007e88:	2a09      	cmp	r2, #9
 8007e8a:	d903      	bls.n	8007e94 <_vfiprintf_r+0x1d0>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0c6      	beq.n	8007e1e <_vfiprintf_r+0x15a>
 8007e90:	9105      	str	r1, [sp, #20]
 8007e92:	e7c4      	b.n	8007e1e <_vfiprintf_r+0x15a>
 8007e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e98:	4604      	mov	r4, r0
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e7f0      	b.n	8007e80 <_vfiprintf_r+0x1bc>
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4b12      	ldr	r3, [pc, #72]	; (8007ef0 <_vfiprintf_r+0x22c>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7fd fbb1 	bl	8005610 <_printf_float>
 8007eae:	4607      	mov	r7, r0
 8007eb0:	1c78      	adds	r0, r7, #1
 8007eb2:	d1d6      	bne.n	8007e62 <_vfiprintf_r+0x19e>
 8007eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eb6:	07d9      	lsls	r1, r3, #31
 8007eb8:	d405      	bmi.n	8007ec6 <_vfiprintf_r+0x202>
 8007eba:	89ab      	ldrh	r3, [r5, #12]
 8007ebc:	059a      	lsls	r2, r3, #22
 8007ebe:	d402      	bmi.n	8007ec6 <_vfiprintf_r+0x202>
 8007ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ec2:	f7fe f8fc 	bl	80060be <__retarget_lock_release_recursive>
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	065b      	lsls	r3, r3, #25
 8007eca:	f53f af1d 	bmi.w	8007d08 <_vfiprintf_r+0x44>
 8007ece:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed0:	e71c      	b.n	8007d0c <_vfiprintf_r+0x48>
 8007ed2:	ab03      	add	r3, sp, #12
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <_vfiprintf_r+0x22c>)
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7fd fe3b 	bl	8005b58 <_printf_i>
 8007ee2:	e7e4      	b.n	8007eae <_vfiprintf_r+0x1ea>
 8007ee4:	08008504 	.word	0x08008504
 8007ee8:	0800850e 	.word	0x0800850e
 8007eec:	08005611 	.word	0x08005611
 8007ef0:	08007ca1 	.word	0x08007ca1
 8007ef4:	0800850a 	.word	0x0800850a

08007ef8 <__swbuf_r>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	460e      	mov	r6, r1
 8007efc:	4614      	mov	r4, r2
 8007efe:	4605      	mov	r5, r0
 8007f00:	b118      	cbz	r0, 8007f0a <__swbuf_r+0x12>
 8007f02:	6a03      	ldr	r3, [r0, #32]
 8007f04:	b90b      	cbnz	r3, 8007f0a <__swbuf_r+0x12>
 8007f06:	f7fd ffc3 	bl	8005e90 <__sinit>
 8007f0a:	69a3      	ldr	r3, [r4, #24]
 8007f0c:	60a3      	str	r3, [r4, #8]
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	071a      	lsls	r2, r3, #28
 8007f12:	d525      	bpl.n	8007f60 <__swbuf_r+0x68>
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	b31b      	cbz	r3, 8007f60 <__swbuf_r+0x68>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	6922      	ldr	r2, [r4, #16]
 8007f1c:	1a98      	subs	r0, r3, r2
 8007f1e:	6963      	ldr	r3, [r4, #20]
 8007f20:	b2f6      	uxtb	r6, r6
 8007f22:	4283      	cmp	r3, r0
 8007f24:	4637      	mov	r7, r6
 8007f26:	dc04      	bgt.n	8007f32 <__swbuf_r+0x3a>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f7ff fdac 	bl	8007a88 <_fflush_r>
 8007f30:	b9e0      	cbnz	r0, 8007f6c <__swbuf_r+0x74>
 8007f32:	68a3      	ldr	r3, [r4, #8]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	60a3      	str	r3, [r4, #8]
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	701e      	strb	r6, [r3, #0]
 8007f40:	6962      	ldr	r2, [r4, #20]
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d004      	beq.n	8007f52 <__swbuf_r+0x5a>
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	07db      	lsls	r3, r3, #31
 8007f4c:	d506      	bpl.n	8007f5c <__swbuf_r+0x64>
 8007f4e:	2e0a      	cmp	r6, #10
 8007f50:	d104      	bne.n	8007f5c <__swbuf_r+0x64>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f7ff fd97 	bl	8007a88 <_fflush_r>
 8007f5a:	b938      	cbnz	r0, 8007f6c <__swbuf_r+0x74>
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f60:	4621      	mov	r1, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 f806 	bl	8007f74 <__swsetup_r>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d0d5      	beq.n	8007f18 <__swbuf_r+0x20>
 8007f6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f70:	e7f4      	b.n	8007f5c <__swbuf_r+0x64>
	...

08007f74 <__swsetup_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4b2a      	ldr	r3, [pc, #168]	; (8008020 <__swsetup_r+0xac>)
 8007f78:	4605      	mov	r5, r0
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	b118      	cbz	r0, 8007f88 <__swsetup_r+0x14>
 8007f80:	6a03      	ldr	r3, [r0, #32]
 8007f82:	b90b      	cbnz	r3, 8007f88 <__swsetup_r+0x14>
 8007f84:	f7fd ff84 	bl	8005e90 <__sinit>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f8e:	0718      	lsls	r0, r3, #28
 8007f90:	d422      	bmi.n	8007fd8 <__swsetup_r+0x64>
 8007f92:	06d9      	lsls	r1, r3, #27
 8007f94:	d407      	bmi.n	8007fa6 <__swsetup_r+0x32>
 8007f96:	2309      	movs	r3, #9
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f9e:	81a3      	strh	r3, [r4, #12]
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa4:	e034      	b.n	8008010 <__swsetup_r+0x9c>
 8007fa6:	0758      	lsls	r0, r3, #29
 8007fa8:	d512      	bpl.n	8007fd0 <__swsetup_r+0x5c>
 8007faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fac:	b141      	cbz	r1, 8007fc0 <__swsetup_r+0x4c>
 8007fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	d002      	beq.n	8007fbc <__swsetup_r+0x48>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7fe ff0c 	bl	8006dd4 <_free_r>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6363      	str	r3, [r4, #52]	; 0x34
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6063      	str	r3, [r4, #4]
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	f043 0308 	orr.w	r3, r3, #8
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	b94b      	cbnz	r3, 8007ff0 <__swsetup_r+0x7c>
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe6:	d003      	beq.n	8007ff0 <__swsetup_r+0x7c>
 8007fe8:	4621      	mov	r1, r4
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f884 	bl	80080f8 <__smakebuf_r>
 8007ff0:	89a0      	ldrh	r0, [r4, #12]
 8007ff2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ff6:	f010 0301 	ands.w	r3, r0, #1
 8007ffa:	d00a      	beq.n	8008012 <__swsetup_r+0x9e>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60a3      	str	r3, [r4, #8]
 8008000:	6963      	ldr	r3, [r4, #20]
 8008002:	425b      	negs	r3, r3
 8008004:	61a3      	str	r3, [r4, #24]
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	b943      	cbnz	r3, 800801c <__swsetup_r+0xa8>
 800800a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800800e:	d1c4      	bne.n	8007f9a <__swsetup_r+0x26>
 8008010:	bd38      	pop	{r3, r4, r5, pc}
 8008012:	0781      	lsls	r1, r0, #30
 8008014:	bf58      	it	pl
 8008016:	6963      	ldrpl	r3, [r4, #20]
 8008018:	60a3      	str	r3, [r4, #8]
 800801a:	e7f4      	b.n	8008006 <__swsetup_r+0x92>
 800801c:	2000      	movs	r0, #0
 800801e:	e7f7      	b.n	8008010 <__swsetup_r+0x9c>
 8008020:	20000068 	.word	0x20000068

08008024 <_raise_r>:
 8008024:	291f      	cmp	r1, #31
 8008026:	b538      	push	{r3, r4, r5, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	460d      	mov	r5, r1
 800802c:	d904      	bls.n	8008038 <_raise_r+0x14>
 800802e:	2316      	movs	r3, #22
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800803a:	b112      	cbz	r2, 8008042 <_raise_r+0x1e>
 800803c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008040:	b94b      	cbnz	r3, 8008056 <_raise_r+0x32>
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f830 	bl	80080a8 <_getpid_r>
 8008048:	462a      	mov	r2, r5
 800804a:	4601      	mov	r1, r0
 800804c:	4620      	mov	r0, r4
 800804e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008052:	f000 b817 	b.w	8008084 <_kill_r>
 8008056:	2b01      	cmp	r3, #1
 8008058:	d00a      	beq.n	8008070 <_raise_r+0x4c>
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	d103      	bne.n	8008066 <_raise_r+0x42>
 800805e:	2316      	movs	r3, #22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	2001      	movs	r0, #1
 8008064:	e7e7      	b.n	8008036 <_raise_r+0x12>
 8008066:	2400      	movs	r4, #0
 8008068:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800806c:	4628      	mov	r0, r5
 800806e:	4798      	blx	r3
 8008070:	2000      	movs	r0, #0
 8008072:	e7e0      	b.n	8008036 <_raise_r+0x12>

08008074 <raise>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <raise+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f7ff bfd3 	b.w	8008024 <_raise_r>
 800807e:	bf00      	nop
 8008080:	20000068 	.word	0x20000068

08008084 <_kill_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d07      	ldr	r5, [pc, #28]	; (80080a4 <_kill_r+0x20>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	f7f9 fc86 	bl	80019a2 <_kill>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d102      	bne.n	80080a0 <_kill_r+0x1c>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	b103      	cbz	r3, 80080a0 <_kill_r+0x1c>
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	200007bc 	.word	0x200007bc

080080a8 <_getpid_r>:
 80080a8:	f7f9 bc73 	b.w	8001992 <_getpid>

080080ac <__swhatbuf_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	460c      	mov	r4, r1
 80080b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b4:	2900      	cmp	r1, #0
 80080b6:	b096      	sub	sp, #88	; 0x58
 80080b8:	4615      	mov	r5, r2
 80080ba:	461e      	mov	r6, r3
 80080bc:	da0d      	bge.n	80080da <__swhatbuf_r+0x2e>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080c4:	f04f 0100 	mov.w	r1, #0
 80080c8:	bf0c      	ite	eq
 80080ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080ce:	2340      	movne	r3, #64	; 0x40
 80080d0:	2000      	movs	r0, #0
 80080d2:	6031      	str	r1, [r6, #0]
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	b016      	add	sp, #88	; 0x58
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	466a      	mov	r2, sp
 80080dc:	f000 f848 	bl	8008170 <_fstat_r>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	dbec      	blt.n	80080be <__swhatbuf_r+0x12>
 80080e4:	9901      	ldr	r1, [sp, #4]
 80080e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080ee:	4259      	negs	r1, r3
 80080f0:	4159      	adcs	r1, r3
 80080f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f6:	e7eb      	b.n	80080d0 <__swhatbuf_r+0x24>

080080f8 <__smakebuf_r>:
 80080f8:	898b      	ldrh	r3, [r1, #12]
 80080fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080fc:	079d      	lsls	r5, r3, #30
 80080fe:	4606      	mov	r6, r0
 8008100:	460c      	mov	r4, r1
 8008102:	d507      	bpl.n	8008114 <__smakebuf_r+0x1c>
 8008104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	2301      	movs	r3, #1
 800810e:	6163      	str	r3, [r4, #20]
 8008110:	b002      	add	sp, #8
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	ab01      	add	r3, sp, #4
 8008116:	466a      	mov	r2, sp
 8008118:	f7ff ffc8 	bl	80080ac <__swhatbuf_r>
 800811c:	9900      	ldr	r1, [sp, #0]
 800811e:	4605      	mov	r5, r0
 8008120:	4630      	mov	r0, r6
 8008122:	f7fe fecb 	bl	8006ebc <_malloc_r>
 8008126:	b948      	cbnz	r0, 800813c <__smakebuf_r+0x44>
 8008128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812c:	059a      	lsls	r2, r3, #22
 800812e:	d4ef      	bmi.n	8008110 <__smakebuf_r+0x18>
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e7e3      	b.n	8008104 <__smakebuf_r+0xc>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	9b00      	ldr	r3, [sp, #0]
 8008148:	6163      	str	r3, [r4, #20]
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	6120      	str	r0, [r4, #16]
 800814e:	b15b      	cbz	r3, 8008168 <__smakebuf_r+0x70>
 8008150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008154:	4630      	mov	r0, r6
 8008156:	f000 f81d 	bl	8008194 <_isatty_r>
 800815a:	b128      	cbz	r0, 8008168 <__smakebuf_r+0x70>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	f023 0303 	bic.w	r3, r3, #3
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	431d      	orrs	r5, r3
 800816c:	81a5      	strh	r5, [r4, #12]
 800816e:	e7cf      	b.n	8008110 <__smakebuf_r+0x18>

08008170 <_fstat_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_fstat_r+0x20>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	f7f9 fc6f 	bl	8001a60 <_fstat>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d102      	bne.n	800818c <_fstat_r+0x1c>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	b103      	cbz	r3, 800818c <_fstat_r+0x1c>
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	bf00      	nop
 8008190:	200007bc 	.word	0x200007bc

08008194 <_isatty_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d06      	ldr	r5, [pc, #24]	; (80081b0 <_isatty_r+0x1c>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	f7f9 fc6e 	bl	8001a80 <_isatty>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_isatty_r+0x1a>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_isatty_r+0x1a>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	200007bc 	.word	0x200007bc

080081b4 <_init>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr

080081c0 <_fini>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	bf00      	nop
 80081c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c6:	bc08      	pop	{r3}
 80081c8:	469e      	mov	lr, r3
 80081ca:	4770      	bx	lr
