
Timer_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000414  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000418  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000418  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001445  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000499  00000000  00000000  000214bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013f  00000000  00000000  00021b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f67f  00000000  00000000  00021c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e39  00000000  00000000  000412de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d6b  00000000  00000000  00043117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000548  00000000  00000000  00105e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001063cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003f4 	.word	0x080003f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080003f4 	.word	0x080003f4

08000204 <main>:
#define OC_TOGGLE	((1U<<4) | (1U<<5))
#define CCER_CC1E	(1U<<0)
#define GPIOAEN		(1U<<0)
#define AFR5_TIM	(1U<<20)
int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	tim2_pa5_output_compare();
 8000208:	f000 f802 	bl	8000210 <tim2_pa5_output_compare>
	while(1)
 800020c:	e7fe      	b.n	800020c <main+0x8>
	...

08000210 <tim2_pa5_output_compare>:
             
	}
}

void tim2_pa5_output_compare(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0

	 /*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8000214:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <tim2_pa5_output_compare+0xa0>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <tim2_pa5_output_compare+0xa0>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to alternate function*/
	GPIOA->MODER &=~(1U<<10);
 8000220:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <tim2_pa5_output_compare+0xa4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a23      	ldr	r2, [pc, #140]	; (80002b4 <tim2_pa5_output_compare+0xa4>)
 8000226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800022a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 800022c:	4b21      	ldr	r3, [pc, #132]	; (80002b4 <tim2_pa5_output_compare+0xa4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <tim2_pa5_output_compare+0xa4>)
 8000232:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000236:	6013      	str	r3, [r2, #0]

	/*Set PA5 alternate function type to TIM2_CH1 (AF01)*/
	GPIOA->AFR[0] |=AFR5_TIM;
 8000238:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <tim2_pa5_output_compare+0xa4>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <tim2_pa5_output_compare+0xa4>)
 800023e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000242:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim2*/
	RCC->APB1ENR |=TIM2EN;
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <tim2_pa5_output_compare+0xa0>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <tim2_pa5_output_compare+0xa0>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC =  1600 - 1 ;  //  16 000 000 / 1 600 = 10 000
 8000250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000254:	f240 623f 	movw	r2, #1599	; 0x63f
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set auto-reload value*/
	TIM2->ARR =  10000 - 1;  // 10 000 / 10 000 = 1
 800025a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000262:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Set output compare toggle mode ccmr1*/
	TIM2->CCMR1 &=~0xFFFFFFFC;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	f003 0303 	and.w	r3, r3, #3
 8000272:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1|=0x30;
 8000274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000282:	6193      	str	r3, [r2, #24]
	/*Enable tim2 ch1 in compare mode ccer*/
	TIM2->CCER |=1;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	6a1b      	ldr	r3, [r3, #32]
 800028a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	2200      	movs	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a0:	2201      	movs	r2, #1
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020000 	.word	0x40020000

080002b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <NMI_Handler+0x4>

080002be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <HardFault_Handler+0x4>

080002c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <MemManage_Handler+0x4>

080002ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <BusFault_Handler+0x4>

080002d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <UsageFault_Handler+0x4>

080002d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000304:	f000 f83e 	bl	8000384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}

0800030c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <SystemInit+0x20>)
 8000312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000316:	4a05      	ldr	r2, [pc, #20]	; (800032c <SystemInit+0x20>)
 8000318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800031c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000336:	490e      	ldr	r1, [pc, #56]	; (8000370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800034c:	4c0b      	ldr	r4, [pc, #44]	; (800037c <LoopFillZerobss+0x26>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800035a:	f7ff ffd7 	bl	800030c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800035e:	f000 f825 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000362:	f7ff ff4f 	bl	8000204 <main>
  bx  lr    
 8000366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000374:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 8000378:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800037c:	20000024 	.word	0x20000024

08000380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <HAL_IncTick+0x20>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <HAL_IncTick+0x24>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4413      	add	r3, r2
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_IncTick+0x24>)
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000020 	.word	0x20000020

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	; (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	; (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	; (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	; (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
